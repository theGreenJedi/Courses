1
00:00:00,480 --> 00:00:04,230
嗨，在这个短视频中
我们将共同解决一个代码问题。

2
00:00:04,230 --> 00:00:06,620
这个问题本身是很基本的。

3
00:00:06,620 --> 00:00:10,560
因此，该视频的主要目的是
向您展示解决课程中

4
00:00:10,560 --> 00:00:12,730
代码问题的一般流程

5
00:00:15,170 --> 00:00:17,250
这个问题被称为A加B.

6
00:00:17,250 --> 00:00:21,250
在这个问题中，我们在标准输入中
得到两个数，并且

7
00:00:21,250 --> 00:00:25,230
我们的目标是要在标准输出中
输出他们的和。

8
00:00:26,840 --> 00:00:31,380
你可以在网页上看到
两个测试样本

9
00:00:31,380 --> 00:00:36,840
例如，如果你的程序的输入
由整数3和2组成

10
00:00:36,840 --> 00:00:39,760
那么你的程序应该输出5

11
00:00:39,760 --> 00:00:43,776
另一方面，如果输入
由整数7和9组成

12
00:00:43,776 --> 00:00:48,750
那么当然你的程序应该
输出16

13
00:00:48,750 --> 00:00:54,480
下一节由三个
初始文件组成

14
00:00:54,480 --> 00:00:59,330
在这个特殊情况下他们不仅仅只是初始文件
而是解决方案

15
00:00:59,330 --> 00:01:05,300
这些文件是由编程语言
Python,Java和C++编写的

16
00:01:05,300 --> 00:01:09,850
在最后一节
包含了一些说明

17
00:01:09,850 --> 00:01:13,540
包括了如何解决这个问题的
四个步骤

18
00:01:13,540 --> 00:01:16,260
所以让我们一起阅读这
四个步骤

19
00:01:17,640 --> 00:01:21,540
第一步是下载
其中一个初始文件

20
00:01:21,540 --> 00:01:26,929
在这里，我们选择C++
初始文件，并且下载它

21
00:01:31,297 --> 00:01:31,800
好

22
00:01:37,740 --> 00:01:41,971
现在这个文件在这里并且
我们一起来看一下它的内容

23
00:01:41,971 --> 00:01:48,690
所以，这是一个非常简单的解决方案
首先创建三个变量

24
00:01:48,690 --> 00:01:52,570
然后它从标准输入中
读入a和b

25
00:01:52,570 --> 00:01:54,850
然后计算它们的和

26
00:01:54,850 --> 00:02:00,090
并且最后在标准输出中
输出这个和

27
00:02:03,030 --> 00:02:06,110
所以要运行这个程序我们
首先需要编译它

28
00:02:06,110 --> 00:02:09,490
所以这是我们说明的
第二步

29
00:02:09,490 --> 00:02:12,898
在这里我们强烈建议
使用网页中显示的

30
00:02:12,898 --> 00:02:17,850
相同的编译器标志

31
00:02:18,920 --> 00:02:22,850
这将保证你的
程序将在测试系统

32
00:02:23,920 --> 00:02:26,620
和你本地计算机中
有同样的表现

33
00:02:26,620 --> 00:02:33,198
因此在这种情况下
我们复制这个标志

34
00:02:33,198 --> 00:02:37,970
并且使用它来编译我们的程序

35
00:02:37,970 --> 00:02:43,250
所以这一步生成了一个可执行文件a.out
并且我们现在可以运行它

36
00:02:46,750 --> 00:02:49,990
让我们对例2和例3
也使用这个程序

37
00:02:49,990 --> 00:02:51,710
所以输出为5

38
00:02:51,710 --> 00:02:54,910
好的，再测试一次

39
00:02:54,910 --> 00:03:00,250
9和4，按照预想的那样输出为13

40
00:03:00,250 --> 00:03:02,040
到目前为止 这方法都还可行到这个程度是没问题的

41
00:03:02,040 --> 00:03:10,550
那么现在下一步是
提交这个问题的解决方案

42
00:03:10,550 --> 00:03:12,030
让我们一起去到提交面板

43
00:03:14,680 --> 00:03:20,360
点按创建提交
然后用这个.cpp文件替换文件

44
00:03:25,368 --> 00:03:27,240
然后点按提交按钮

45
00:03:29,160 --> 00:03:33,360
一段时间后，这个测试系统显示

46
00:03:33,360 --> 00:03:38,110
我们的解决方法通过所有的测试
这非常好

47
00:03:38,110 --> 00:03:41,122
在这个特殊情况下
评分器输出为空

48
00:03:41,122 --> 00:03:45,590
这意味着在这个情况下
没有错误信息存在

49
00:03:46,730 --> 00:03:50,800
为了再次说明，让我
快速重复这个整个过程

50
00:03:50,800 --> 00:03:53,090
python编程语言

51
00:03:53,090 --> 00:03:57,640
所以首先我们下载
Python初始文件

52
00:04:08,902 --> 00:04:10,570
让我们一起来看一看文件内容

53
00:04:14,053 --> 00:04:16,890
所以这个程序再次如
预想的一样非常简单

54
00:04:16,890 --> 00:04:22,600
所以我们只是从标准输入中获得a和b
并且输出a和b的和

55
00:04:22,600 --> 00:04:26,640
现在我们需要运行程序

56
00:04:26,640 --> 00:04:32,510
你也许想回到这个
可用的编程页面

57
00:04:32,510 --> 00:04:37,780
只是为了确认我们如何
运行Python脚本

58
00:04:37,780 --> 00:04:39,690
所以我们只是使用Python，Python3

59
00:04:39,690 --> 00:04:41,800
所以当我们一起做

60
00:04:45,420 --> 00:04:53,060
对于例题，4和4
并且输出为8，这符合预期

61
00:04:53,060 --> 00:05:00,510
所以让我们一起继续
提交这个解决方案

62
00:05:00,510 --> 00:05:05,870
所以你去我的提交选项
你点按创建提交按钮

63
00:05:05,870 --> 00:05:13,319
然后你用APlusB.py取代此文件

64
00:05:19,004 --> 00:05:23,850
因此当这个文件被上传完毕
你最后点按提交按钮

65
00:05:26,875 --> 00:05:33,330
在几秒钟后，这个解决方案将
被测试系统接受

66
00:05:33,330 --> 00:05:36,060
这不是非常有挑战性，对吧？

67
00:05:36,060 --> 00:05:38,790
在下一个视频里，我们会看一个更加

68
00:05:38,790 --> 00:05:41,190
有趣的计算问题的例子

69
00:05:41,190 --> 00:05:44,610
对于这个问题我们将
首先使用最直观的解决方法

70
00:05:44,610 --> 00:05:48,260
我们将会把这个解决方法提交到测试
系统来判断

71
00:05:48,260 --> 00:05:49,230
它其实是有问题的

72
00:05:49,230 --> 00:05:50,380
它有一个错误

73
00:05:50,380 --> 00:05:56,200
所以我们会修复这个错误，再次提交
然后发现我们的解决方案运行很慢

74
00:05:56,200 --> 00:06:00,900
我们会从测试系统得到一个
运行时间限制的反馈信息

75
00:06:00,900 --> 00:06:06,610
例如，这意味着对于大的数据集
它将运行超过一秒钟

76
00:06:06,610 --> 00:06:11,270
所以这将要求我们想出来
一个更快的解决方案

77
00:06:11,270 --> 00:06:13,860
我们将会实现它
把它提交给系统

78
00:06:13,860 --> 00:06:16,940
再一次的，发现它仍然是有问题的

79
00:06:16,940 --> 00:06:21,150
我们将使用压力测试来
定位错误，修复它

80
00:06:21,150 --> 00:06:27,144
最终向系统提交一个能够
通过所有测试的正确的解决方案