Здравствуйте. Я - Даниэль Канье. Добро пожаловать на специализацию по
структурам данных и алгоритмам. На самой первой леции мы начнем
с самого начала и поговорим, в первую очередь, о том, 
почему необходимо изучать алгоритмы. Итак основная цель этой лекции
поговорить о том, какого рода проблемы мы будем обсуждать
в этом алгоритмическом курсе, и почему они важны. В контексте этого мы также обсудим
несколько проблем, с которыми вы можете столкнуться во время
написания компьютерных программ, которые на самом деле могут не требовать
изощренных техник, обсуждаемых в этом курсе. А с другой стороны, мы обсудим и другие типы проблем,
которые вы возможно захотите решить, выходящие за рамки материала,
о котором мы будем здесь говорить. Итак, начнем с того, предположим,
вы пишете компьютерную программу. Есть много задач, которые вы
возможно заходите выполнить о которых вам на самом деле
не нужно сильно задумываться. Такие вещи как отображение заданного
текста на экране, или копирование файла из одного места в другое,
или поиск файла по заданному слову. Каждый из этих алгоритмов по существу
представляет собой линейное сканирование. Вы проходите по каждому слову в файле,
по одному за раз, и выполняете подходящее действие. И в каждой этой задаче главным образом
присутствует линейное сканирование которое вы по сути не можете особо улучшить. Чтобы выполнить задачу,
которую вы решаете, вам нужно пройти все данные по очереди
и обработать их соответствующе. И когда вы делаете более-менее очевидную вещь, вы получаете
рабочую программу. Она решает нужную вам задачу. И она делает это почти настолько
эффективно, как вы могли ожидать. Поэтому для такого рода задач вам возможно
не придется особо задумываться, какой алгоритм вы используете. С другой стороны, есть такие задачи,
реальные алгоритмические задачи, где не так очевидно,
что вам нужно делать. Например, вам может быть дана карта и вам нужно найти кротчайший путь
между двумя точками на этой карте. Или вы пытаетесь найти лучшее сочетание между студентами и комнатами общежития,
имея некий список предпочтений. Или вы пытаетесь оценить сходство
двух различных документов. Вот для таких задачи на много более сложно, не сразу очевидно, как решить такие проблемы. И даже если вы найдете решение, часто простые решения для таких задач
будут слишком медленные. Вы можете выбрать некий простой алгоритм, вы можете перебрать все возможные сочетания
между людьми и комнатами общежития и вернуть ту, которая оптимизирует некую
функцию, которую вы пытаетесь применить. С другой стороны, если вы это реализуете,
это будет вероятно занимать очень очень очень много времени. Но возможно у вас нет достаточно
времени, чтобы ждать, и вам нужно сделать что-то лучше. А затем, даже когда у вас есть достаточно
эффективный алгоритм решения этих задач, часто есть много
мест для дальнейшей оптимизации. Улучшить решение, чтобы выполнение
занимало час вместо дня, или минуту вместо часа, или секунду вместо минуты. И все эти улучшения окажут
большое влияние на то, на сколько полезна будет
написанная вами программа. Также, с другой стороны, некоторые вещи, которые вы можете
пытаться реализовать на компьютере выходят немного за рамки вещей,
обсуждаемых в этом курсе. Назовем такие задачи относящимися
к искусственному интеллекту. Это такие задачи, где своего рода сложно ясно сформулировать,
что вы пытаетесь сделать. Примером такой задачи может быть
написание компьютерной программы для понимания естественного языка. То есть, написать программу, где я могу что-то напечатать,
какое-то предложение на английском, спросить, например, какова цена молока
сегодня в местном гастрономе? И вы хотите компьютер получить
это предложение, написанное мной, и понять, что оно значит,
вычислить некий путь его разбора. А затем выполнить подходящий поиск
и вернуть полезный мне ответ. И проблема тут не столько в том,
что предполагаемые действия трудно выполнить, а проблема в том,
что по сути мы не понимаем, что это значить - интерпретировать
английское предложение. Я имею в виду, мы все можем говорить по-английски,
если вы слушаете эту лекцию, но мы не очень-то в корне понимает,
что это значит. Трудно достаточно точно это выразить, чтобы можно было создать программу,
реализующую это. Вы столкнетесь с похожими проблемами, если захотите
идентифицировать объекты на фотографии. У вас есть картинка, например,
с собакой, деревом и облаком, и вы хотите, чтобы компьютер
идентифицировал, что есть что. Еще раз, это задача, с которой наш мозг
научился хорошо справляться, мы понимаем в чем вопрос. Однако трудно выразить словами, как определить, что этот предмет - собака, а этот - дерево. И такого рода действия очень сложно научить выполнять компьютер. Другой задача, которой вы можете захотеть
научить компьютер, - хорошо играть в игры, например, эффективно играть в шахматы. И снова, мы можем как бы распознать,
что значит, делать это. Но как фактически вы хотите это делать? Тут происходит много весьма
расплывчатых, интуитивных вещей. Это не четко определенная проблема,
которую вы пытаетесь решить. Поэтому для всех подобных задач
трудность не столько в том, что сложно сделать это быстро. А сложно даже сформулировать,
что же это вы пытаетесь сделать и понять, как подойти к решению. Такие задачи мы по существу
не будем охватывать в этом классе, мы сфокусируемся на алгоритмах,
как делать вещи быстро и эффективно. Но если вы хотите заняться искусственным интеллектом
и попробовать решить такие задачи, будет очень важно иметь
прочную базу в алгоритмах, чтобы когда у вас появится идея, что это значит
идентифицировать деревья на картинках, у вас была идея, какой тип алгоритма фактически сможет поддержать эти идеи.
Какие классы идей вы реально можете реализовать в разумные сроки. И, собственно, на чем мы сосредоточимся
в этом курсе - алгоритмические задачи. Нам нужны чисто сформулированные проблемы, такие как чёткие математические задачи. Но некоторые задачи, мы рассматривали,
возможно не сразу очевидны, как если вы хотите найти кротчайший маршрут
между двумя точками на карте, это не математическая задача непосредственно. Но довольно быстро вы интерпретируете
ее как таковую. Вы можете заявить, скажем,
я хочу некую последовательность пересечений, между которыми я передвигаюсь, такую,
что каждая пара соединена дорогой, и сумма длин этих дорог мала на сколько возможно. И так довольно быстро получается задача,
где мы можем ясно констатировать, что же мы пытаемся сделать, но где решение по-прежнему не тривиально. И вот такого рода вещи мы будем обсуждать в этом курсе. И будем надеяться, к его концу вы будете хорошо представлять,
как решать такие задачи, как писать программы, решающие их
очень быстро и эффективно. Вот об этом бы и будем говорить. Я надеюсь, вы получите удовольствие
от этого курса.