1
00:00:03,470 --> 00:00:04,780
Здравствуйте.

2
00:00:04,780 --> 00:00:05,910
Я - Даниэль Канье.

3
00:00:05,910 --> 00:00:09,300
Добро пожаловать на специализацию по
структурам данных и алгоритмам.

4
00:00:09,300 --> 00:00:12,150
На самой первой леции мы начнем
с самого начала и

5
00:00:12,150 --> 00:00:16,310
поговорим, в первую очередь, о том, 
почему необходимо изучать алгоритмы.

6
00:00:16,310 --> 00:00:21,480
Итак основная цель этой лекции
поговорить о том, какого рода

7
00:00:21,480 --> 00:00:24,800
проблемы мы будем обсуждать
в этом алгоритмическом курсе,

8
00:00:24,800 --> 00:00:26,460
и почему они важны.

9
00:00:26,460 --> 00:00:30,610
В контексте этого мы также обсудим
несколько проблем, с которыми

10
00:00:30,610 --> 00:00:34,910
вы можете столкнуться во время
написания компьютерных программ,

11
00:00:34,910 --> 00:00:39,520
которые на самом деле могут не требовать
изощренных техник, обсуждаемых в этом курсе.

12
00:00:39,520 --> 00:00:40,420
А с другой стороны,

13
00:00:40,420 --> 00:00:44,310
мы обсудим и другие типы проблем,
которые вы возможно захотите решить,

14
00:00:44,310 --> 00:00:47,620
выходящие за рамки материала,
о котором мы будем здесь говорить.

15
00:00:48,720 --> 00:00:52,920
Итак, начнем с того, предположим,
вы пишете компьютерную программу.

16
00:00:52,920 --> 00:00:57,280
Есть много задач, которые вы
возможно заходите выполнить

17
00:00:57,280 --> 00:01:00,490
о которых вам на самом деле
не нужно сильно задумываться.

18
00:01:00,490 --> 00:01:05,360
Такие вещи как отображение заданного
текста на экране, или копирование

19
00:01:05,360 --> 00:01:10,910
файла из одного места в другое,
или поиск файла по заданному слову.

20
00:01:10,910 --> 00:01:13,920
Каждый из этих алгоритмов по существу
представляет собой линейное сканирование.

21
00:01:13,920 --> 00:01:17,160
Вы проходите по каждому слову в файле,
по одному за раз, и

22
00:01:17,160 --> 00:01:19,310
выполняете подходящее действие.

23
00:01:19,310 --> 00:01:22,280
И в каждой этой задаче главным образом
присутствует линейное сканирование

24
00:01:23,330 --> 00:01:26,070
которое вы по сути не можете особо улучшить.

25
00:01:26,070 --> 00:01:28,350
Чтобы выполнить задачу,
которую вы решаете,

26
00:01:28,350 --> 00:01:32,950
вам нужно пройти все данные по очереди
и обработать их соответствующе.

27
00:01:32,950 --> 00:01:35,250
И когда вы делаете более-менее

28
00:01:35,250 --> 00:01:38,750
очевидную вещь, вы получаете
рабочую программу.

29
00:01:38,750 --> 00:01:40,700
Она решает нужную вам задачу.

30
00:01:40,700 --> 00:01:44,140
И она делает это почти настолько
эффективно, как вы могли ожидать.

31
00:01:45,150 --> 00:01:49,180
Поэтому для такого рода задач вам возможно
не придется особо задумываться,

32
00:01:49,180 --> 00:01:50,820
какой алгоритм вы используете.

33
00:01:52,070 --> 00:01:56,520
С другой стороны, есть такие задачи,
реальные алгоритмические задачи,

34
00:01:56,520 --> 00:01:59,340
где не так очевидно,
что вам нужно делать.

35
00:02:00,350 --> 00:02:02,230
Например, вам может быть дана карта

36
00:02:02,230 --> 00:02:06,910
и вам нужно найти кротчайший путь
между двумя точками на этой карте.

37
00:02:06,910 --> 00:02:10,990
Или вы пытаетесь найти лучшее сочетание

38
00:02:10,990 --> 00:02:15,920
между студентами и комнатами общежития,
имея некий список предпочтений.

39
00:02:15,920 --> 00:02:18,870
Или вы пытаетесь оценить сходство
двух различных документов.

40
00:02:20,000 --> 00:02:22,650
Вот для таких задачи на много более сложно,

41
00:02:22,650 --> 00:02:26,550
не сразу очевидно, как решить такие проблемы.

42
00:02:26,550 --> 00:02:29,820
И даже если вы найдете решение,

43
00:02:29,820 --> 00:02:34,600
часто простые решения для таких задач
будут слишком медленные.

44
00:02:34,600 --> 00:02:36,920
Вы можете выбрать некий простой алгоритм,

45
00:02:36,920 --> 00:02:41,050
вы можете перебрать все возможные сочетания
между людьми и комнатами общежития

46
00:02:41,050 --> 00:02:46,230
и вернуть ту, которая оптимизирует некую
функцию, которую вы пытаетесь применить.

47
00:02:46,230 --> 00:02:50,240
С другой стороны, если вы это реализуете,
это будет вероятно занимать очень очень

48
00:02:50,240 --> 00:02:52,020
очень много времени.

49
00:02:52,020 --> 00:02:56,140
Но возможно у вас нет достаточно
времени, чтобы ждать,

50
00:02:56,140 --> 00:02:57,409
и вам нужно сделать что-то лучше.

51
00:02:58,530 --> 00:03:02,420
А затем, даже когда у вас есть достаточно
эффективный алгоритм

52
00:03:02,420 --> 00:03:06,590
решения этих задач, часто есть много
мест для дальнейшей оптимизации.

53
00:03:06,590 --> 00:03:10,030
Улучшить решение, чтобы выполнение
занимало час вместо дня,

54
00:03:10,030 --> 00:03:11,780
или минуту вместо часа,

55
00:03:11,780 --> 00:03:13,540
или секунду вместо минуты.

56
00:03:13,540 --> 00:03:17,350
И все эти улучшения окажут
большое влияние на то,

57
00:03:17,350 --> 00:03:19,850
на сколько полезна будет
написанная вами программа.

58
00:03:21,200 --> 00:03:22,670
Также, с другой стороны,

59
00:03:22,670 --> 00:03:26,720
некоторые вещи, которые вы можете
пытаться реализовать на компьютере

60
00:03:26,720 --> 00:03:30,460
выходят немного за рамки вещей,
обсуждаемых в этом курсе.

61
00:03:30,460 --> 00:03:33,700
Назовем такие задачи относящимися
к искусственному интеллекту.

62
00:03:33,700 --> 00:03:36,390
Это такие задачи, где своего рода

63
00:03:36,390 --> 00:03:39,680
сложно ясно сформулировать,
что вы пытаетесь сделать.

64
00:03:40,858 --> 00:03:44,060
Примером такой задачи может быть
написание компьютерной программы

65
00:03:44,060 --> 00:03:46,390
для понимания естественного языка.

66
00:03:46,390 --> 00:03:50,900
То есть, написать программу, где я могу что-то напечатать,
какое-то предложение на английском,

67
00:03:50,900 --> 00:03:55,230
спросить, например, какова цена молока
сегодня в местном гастрономе?

68
00:03:55,230 --> 00:03:59,640
И вы хотите компьютер получить
это предложение, написанное мной,

69
00:03:59,640 --> 00:04:03,520
и понять, что оно значит,
вычислить некий путь его разбора.

70
00:04:03,520 --> 00:04:08,080
А затем выполнить подходящий поиск
и вернуть полезный мне ответ.

71
00:04:08,080 --> 00:04:12,770
И проблема тут не столько в том,
что предполагаемые действия

72
00:04:12,770 --> 00:04:17,650
трудно выполнить, а проблема в том,
что по сути мы не понимаем,

73
00:04:17,650 --> 00:04:22,880
что это значить - интерпретировать
английское предложение.

74
00:04:22,880 --> 00:04:26,610
Я имею в виду, мы все можем говорить по-английски,
если вы слушаете эту лекцию,

75
00:04:26,610 --> 00:04:32,060
но мы не очень-то в корне понимает,
что это значит.

76
00:04:32,060 --> 00:04:35,310
Трудно достаточно точно это выразить,

77
00:04:35,310 --> 00:04:37,970
чтобы можно было создать программу,
реализующую это.

78
00:04:38,980 --> 00:04:43,300
Вы столкнетесь с похожими проблемами, если захотите
идентифицировать объекты на фотографии.

79
00:04:43,300 --> 00:04:46,270
У вас есть картинка, например,
с собакой, деревом и облаком,

80
00:04:46,270 --> 00:04:49,100
и вы хотите, чтобы компьютер
идентифицировал, что есть что.

81
00:04:49,100 --> 00:04:54,480
Еще раз, это задача, с которой наш мозг
научился хорошо справляться,

82
00:04:54,480 --> 00:04:57,040
мы понимаем в чем вопрос.

83
00:04:57,040 --> 00:05:01,580
Однако трудно выразить словами, как определить,

84
00:05:01,580 --> 00:05:03,450
что этот предмет - собака, а этот - дерево.

85
00:05:03,450 --> 00:05:07,338
И такого рода действия очень сложно научить

86
00:05:07,338 --> 00:05:09,530
выполнять компьютер.

87
00:05:11,040 --> 00:05:14,520
Другой задача, которой вы можете захотеть
научить компьютер, - хорошо играть в игры,

88
00:05:14,520 --> 00:05:16,880
например, эффективно играть в шахматы.

89
00:05:16,880 --> 00:05:18,420
И снова,

90
00:05:18,420 --> 00:05:21,820
мы можем как бы распознать,
что значит, делать это.

91
00:05:21,820 --> 00:05:24,510
Но как фактически вы хотите это делать?

92
00:05:24,510 --> 00:05:29,170
Тут происходит много весьма
расплывчатых, интуитивных вещей.

93
00:05:29,170 --> 00:05:32,920
Это не четко определенная проблема,
которую вы пытаетесь решить.

94
00:05:34,520 --> 00:05:38,850
Поэтому для всех подобных задач
трудность не столько в том,

95
00:05:38,850 --> 00:05:40,980
что сложно сделать это быстро.

96
00:05:40,980 --> 00:05:44,050
А сложно даже сформулировать,
что же это вы пытаетесь сделать

97
00:05:44,050 --> 00:05:46,230
и понять, как подойти к решению.

98
00:05:46,230 --> 00:05:49,760
Такие задачи мы по существу
не будем охватывать в этом классе,

99
00:05:49,760 --> 00:05:54,230
мы сфокусируемся на алгоритмах,
как делать вещи быстро и эффективно. 

100
00:05:54,230 --> 00:05:58,300
Но если вы хотите заняться искусственным интеллектом
и попробовать решить такие задачи,

101
00:05:58,300 --> 00:06:02,230
будет очень важно иметь
прочную базу в алгоритмах,

102
00:06:02,230 --> 00:06:07,280
чтобы когда у вас появится идея, что это значит
идентифицировать деревья на картинках,

103
00:06:07,280 --> 00:06:11,570
у вас была идея, какой тип алгоритма

104
00:06:11,570 --> 00:06:16,050
фактически сможет поддержать эти идеи.
Какие классы идей вы реально можете реализовать

105
00:06:16,050 --> 00:06:17,350
в разумные сроки.

106
00:06:18,450 --> 00:06:23,180
И, собственно, на чем мы сосредоточимся
в этом курсе - алгоритмические задачи.

107
00:06:23,180 --> 00:06:26,030
Нам нужны чисто сформулированные проблемы,

108
00:06:26,030 --> 00:06:28,110
такие как чёткие математические задачи.

109
00:06:28,110 --> 00:06:32,130
Но некоторые задачи, мы рассматривали,
возможно не сразу очевидны,

110
00:06:32,130 --> 00:06:36,120
как если вы хотите найти кротчайший маршрут
между двумя точками на карте,

111
00:06:36,120 --> 00:06:38,850
это не математическая задача непосредственно.

112
00:06:38,850 --> 00:06:41,580
Но довольно быстро вы интерпретируете
ее как таковую.

113
00:06:41,580 --> 00:06:45,580
Вы можете заявить, скажем,
я хочу некую последовательность пересечений,

114
00:06:45,580 --> 00:06:49,970
между которыми я передвигаюсь, такую,
что каждая пара соединена дорогой,

115
00:06:49,970 --> 00:06:53,480
и сумма длин этих дорог мала на сколько возможно.

116
00:06:53,480 --> 00:06:58,220
И так довольно быстро получается задача,
где мы можем ясно констатировать,

117
00:06:58,220 --> 00:07:00,220
что же мы пытаемся сделать,

118
00:07:00,220 --> 00:07:03,880
но где решение по-прежнему не тривиально.

119
00:07:03,880 --> 00:07:07,860
И вот такого рода вещи мы будем обсуждать в этом курсе.

120
00:07:07,860 --> 00:07:08,930
И будем надеяться,

121
00:07:08,930 --> 00:07:12,210
к его концу вы будете хорошо представлять,
как решать такие задачи,

122
00:07:12,210 --> 00:07:17,380
как писать программы, решающие их
очень быстро и эффективно.

123
00:07:17,380 --> 00:07:19,590
Вот об этом бы и будем говорить.

124
00:07:19,590 --> 00:07:21,380
Я надеюсь, вы получите удовольствие
от этого курса.