Привет, я Нэйл Родс. Добро пожаловать в модуль - разделяй и властвуй. В последнем цикле лекций, вы изучали,
как использовать "жадные" алгоритмы для решения определённых классов проблем. В этом разделе курса лекций, вы изучите способы 
решения проблем используя "разделяй и властвуй" алгоритмы. Термин - разделяй и властвуй довольно древний, и применительно к военному делу, предполагает, что 
легче победить несколько небольших групп противников, чем пытаться 
разбить одного большого. Подобным образом, "разделяй и властвуй" алгоритм использует преимущество 
разбивая проблему на одну или более подпроблем, которые 
затем будут решены независимо. Также как, не все задачи могут быть 
решены используя "жадный" алгоритм, не все проблемы решаемы 
используя "разделяй и властвуй". Вместо того, оба подхода 
являются частью инструментария стратегиями для решения задач. По мере создания алгоритма, 
вам придется учитывать будет ли или нет работать "жадный" подход. Если нет, сработает ли "разделяй и 
властвуй" алгоритм? Взглянем на общую структуру 
алгоритма "разделяй и властвуй". Здесь, имеется задача, которую 
необходимо решить, представленная абстрактно в виде синего прямоугольника. Мы разбиваем задачу на набор составляющих 
не пересекающихся подзадач. Отображённых в виде цветных прямоугольников, Важно отметить, что подзадачи 
того же типа, что и исходная. Для примера, здесь представлен способ разбивки 
исходной прямоугольной задачи. на набор подзадач 
различного типа. Данные подзадачи треугольники. Следовательно, такая разбивка не соответствует 
алгоритму "разделяй и властвуй". Теперь, мы разбили 
исходную прямоугольную задачу на набор подзадач, которые 
сами являются прямоугольниками. Сложность в том, что эти 
подзадачи перекрывают друг друга. Что означает, что данный способ, опять же, не отображает 
алгоритм "разделяй и властвуй". Возвращаясь к разбивке нашей задачи на набор непересекающихся 
подзадач одного исходного типа. Разбив на части, следующий шаг 
решить каждую подзадачу отдельно. Решаем первую подзадачу, 
отмечая решение "галочкой". Продолжаем, решая каждую подзадачу 
в свою очередь. Как только мы успешно решили 
каждую подзадачу, мы объединяем результаты в 
решение для начальной проблемы. Возникает вопрос, 
каким образом решать каждую подзадачу? Поскольку, каждая подзадача того же 
типа, как и исходная, мы можем рекурсивно решить подзадачи используя ту же 
стратегию - " разделяй и властвуй". Таким образом, "разделяй и властвуй" алгоритм 
естественным образом приводит к рекурсивному решению. На практике, при том, что возможно прописать код 
для алгоритма "разделяй и властвуй" рекурсивно, зачастую предпочтительнее 
рекурсивного будет последовательный / итеративный вариант. Обычно причиной может служить то, что некоторые 
программисты чувствуют себя менее уверенно с рекурсией по сравнению с итеративным способом, а 
также из-за  дополнительного объема памяти которую рекурсия может занять 
в виде растущего размера стека. Также, ограничения накладывает язык программирования и 
детали воплощения кода. Подытоживая, алгоритм "разделяй и 
властвуй" состоит из: первое деления задачи на непересекающиеся 
подзадачи того же типа. Второе: рекурсивно решать 
получившиеся подзадачи. и третье: объединить полученные результаты. В следующем видео, мы рассмотрим чрезвычайно 
простой пример использования "разделяй и властвуй".