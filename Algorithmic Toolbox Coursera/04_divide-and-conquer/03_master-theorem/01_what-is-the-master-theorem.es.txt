Aquí vamos a hablar del Teorema Maestro. Describiremos lo que es el teorema maestro y cómo lo usamos, y reservaremos para el siguiente video una demostración. Han sido varias las veces en que tuvimos que
 escribir una relación de recurrencia para un problema de divide y vencerás. Este es un ejemplo de uno para búsqueda binaria. Dividimos el problema en uno que es la mitad de grande y hacemos una cantidad de trabajo constante en cada nivel. Esto nos da una solución T(n)=O(log n). El problema es que para cada uno de éstos tenemos
 que crear un árbol de recurrencia, averiguar cuánto trabajo se hizo en cada nivel, sumar ese trabajo. Eso es mucho que hacer para resolver cada relación de recurrencia. Aquí hay un ejemplo que usamos en la multiplicación de polinomios. Dividimos el problema en 4 subproblemas, cada uno de mitad del tamaño, e hicimos una cantidad lineal de trabajo. Y la solución fue T(n)=O(n^2). Cuando tuvimos el algoritmo más eficiente,
 donde tuvimos sólo 3 subproblemas en lugar de 4, obtuvimos una solución de O(n a la log_2(3)). Algunas veces dividimos un problema en sólo dos subproblemas y ahí la solución es O(n log n). Entonces, ¿no sería bueno si hubiera una forma
 de que tuviéramos una fórmula que nos dé la solución en lugar de crear el árbol de recurrencia cada vez? Y eso es lo que el Teorema Maestro hace, básicamente. Entonces, el Teorema Maestro dice que si tienes una 
relación de recurrencia T(n) igual a alguna constante, veces T(el techo de n/b) más un polinomio en n, de grado d, y esa función techo, por cierto, podría ser también el piso o no estar ahí si n fuera una potencia de b. En cualquier caso, a es una constante mayor que 0, b es mayor que 1 porque queremos asegurar que el tamaño del problema se reduzca, y d es mayor o igual a 0. Bueno, en ese caso tenemos una solución para T(n). Hay tres subcasos. El caso número 1, como será en todos los casos,
 depende de la relación entre d, a y b. En particular, si d es mayor que log en base b de a, entonces la solución es polinomial en n, O(n^d). Si d es exactamente igual a log en base b de a, entonces la solución es O de n^d con un factor extra de log n. Y finalmente, si d es menor que log en base b de a, entonces la solución es O de n a la log en base b de a. Veamos algunas aplicaciones de este teorema. Aquí hay una, donde regresamos a la multiplicación polinomial. Aquí a es 4, b es 2, y d es 1, porque O(n) es O(n^1). Y checamos la relación entre d, que es 1, y log en base b de a, que es log_2(4), o 2. Bueno, claramente d es menor que log en base b de a,
 así que estamos en el caso 3. Por tanto, T(n)=O(log en base b de a), o sólo, O(n^2). Si ahora cambiamos 4 por 3, a es 3, b es 2, d es 1. Todavía d es menor a log en base b de a porque log en base 2 de 3 es mayor que 1, y de nuevo estamos en el caso tres. T(n)=O(n a la log en base b de a), que es igual a O(n a la log_2(3)). Si reducimos el 3 a 2, ¿qué pasa? Bueno, aquí a es 2, b es 2, d es 1, log en base b de a es log_2(2) que es 1. Así que ahora d es igual a log en base b de a, estamos en el caso 2 ahora. Y así, T(n)=O(n log n). Ahora mostremos un ejemplo que también es del caso 2, éste es el ejemplo de la búsqueda binaria, a es 1, b es 2, d es 0. El log en base 2 de uno, log en base b de a, es igual a cero. Así que d es igual a log en base b de a, estamos en el caso 2. T(n)=O(n^d log n), lo que es O(n^0 log n), que es simplemente O(log n). Y un ejemplo final donde estamos en el caso uno. Aquí, a es 2, b es 2 y d es 2, así que log en base b de a es log_2(2), que es 1, así que d es ahora mayor que log en base b de a, estamos en el caso uno, T(n)=O(n^d), que es O(n^2). Así que lo que hemos visto es que tenemos este
 Teorema Maestro que nos permite para la mayoría de las recurrencias, y hacemos divide y vencerás, que entra en la fórmula general, nos permite determinar fácilmente en qué caso estamos, en base a la relación entre a, b y d, y entonces determinar el resultado muy rápidamente. En nuestro siguiente video veremos una demostración
 de por qué el Teorema Maestro funciona.