En esta lección vamos a hablar de un algoritmo más complicado de divide y vencerás para resolver multiplicación de polinomios. Entonces, primero vamos a hablar de lo que es la multiplicación de polinomios. La multiplicación de polinomios es básicamente tomar dos polinomios y multiplicarlos. Es usado en una variedad de formas en ciencias de la computación. Códigos de corrección de errores. Si es que quieres multiplicar enteros muy grandes, por ejemplo, tienes enteros con miles de dígitos y quieres multiplicarlos, hay una forma más rápido que la forma normal que aprendiste en la primaria. Y eso usa la idea de multiplicar polinomios. Se usa para generar funciones y para convoluciones. Veamos un ejemplo. Digamos que tienes un polinomio A, que es 3x^2+2x+5, y un polinomio B, 5x^2+x+2. Si los multiplicas obtienes 15x^4 +13x^3+33x^2+9x+10. ¿Por qué sucede eso? La
mayoría de las neuronas que Bien, veamos, por ejemplo, 15x^4 viene de multiplicar 3x^2 por 5x^2, lo que da 15x^4. El 10 viene de multiplicar 5 por 2. El 13x^3 viene del 3x^2 por x, que es 3x^3, más 2x por 5x^2, que es 10x^3, para un total de 13x^3. Ahora veamos el enunciado del problema. Entonces, vamos a tener dos polinomios de grado n-1, a_(n-1) es el coeficiente de x^(n-1) y así hasta a_0, que es el coeficiente de x^0, o el término constante. Y de manera similar tenemos un polinomio B. Primero te puedes preguntar qué pasa si quieres multiplicar polinomios que no tienen el mismo grado? ¿Qué si quieres multiplicar un polinomio de grado 3 con uno de grado 2? Donde el grado es el exponente del término más alto. Bien, en ese caso, lo que podrías hacer es rellenar los polinomios más pequeños, poner ceros como coeficientes de los primeros términos. Daré un ejemplo en un momentito. Y entonces, lo que queremos es el producto polinomial, que es un polinomio de grado más alto, ¿sí? Si nuestros polinomios entrantes tienen grado n-1, entonces vamos a tener un término de x^(n-1) en A veces un término de x^(n-1) en B, lo que nos da un término x^(2n-2) en el término c. Entonces, c_(2n-2) viene de multiplicar a_(n-1) y b_(n-1). El término c_(2n-3) viene de a_(n-1)b_(n-2), y a_(n-2)b_(n-1). Entonces hay dos términos que se suman (no multiplican, nota traducción). El término c_(2n-4) tendría 3 términos que se suman, Y así tenemos más y más términos que se suman, y entonces de nuevo son menos para los términos del final, así, c_2 tiene 3 pares que se suman, c_1 tiene dos pares, y c_0 tiene un par. Este es un ejemplo. De hecho  es el ejemplo que teníamos antes. Entonces, n es 3 y nota que todo lo que necesitamos son los coeficientes. no necesitamos escribir las x's. Entonces, 3, 2 y 5, significan 3x^2+2x+5; 5, 1, 2, significa 5x^2+x+2. ¿Qué tal si B fuera sólo un polinomio de grado uno? fuera sólo x+2. Bien, entonces pondríamos a B como 0, 1, 2, esto es, el término de x^2 de B es 0*x^2. Entonces, A(x) es esto, B(x) es eso. Cuando los multiplicamos obtenemos el mismo resultado que antes, y ahora sólo extraemos los coeficientes aquí, que son 15, 13, 33, 9 y 10. Y esa es nuestra respuesta, estos coeficientes. Vamos a ver un algoritmo ingenuo para resolver esto. El algoritmo ingenuo dice básicamente que, primero, creemos un arreglo "product". Éste básicamente va a ser C, el resultado, y va a ser el de grado más alto, 2n-2. Así que va a tener 2n-1 términos, desde 0 hasta el término 2n-2. Lo inicializamos con ceros, y después tenemos un bucle anidado. Para i igual a 0 hasta n-1, para j igual a 0 hasta n-1, y cada vez vamos a calcular un par particular. Así que calculamos el par A[i],B[j] los multiplicamos y los agregamos al producto apropiado. ¿Cuál es el producto apropiado?, es el caso i+j. Como ejemplo, cuando i=0 y j=0 calculamos A[0] por B[0] y lo agregamos a product[0]. Esto es, los dos términos de grado cero en A Y B se multiplican y dan como resultado el término de grado cero de C. En el otro extremos, si i es n-1 y j es n-1, tomamos A[n-1] por B[n-1] y lo guardamos en product[2n-2]. Como puedes ver, los valores intermedios en el producto van a tener más términos sumados que los extremos. Y por supuesto, al final devolvemos product. ¿Cuánto tiempo lleva esto? Bueno, esto toma del orden de n^2. Claramente, tenemos dos bucles for, uno más pequeño que va de 0 a 2n-2, por lo que es de orden n. Y entonces un bucle for anidado, donde i va de 0 a n-1, j de 0 a n-1, así que pasan, el primero n veces, el segundo n^2 veces, así que nuestro tiempo es del orden de n^2. En el video siguiente, vamos a ver un algoritmo de divide y vencerás, para resolver este problema. Aun que, veremos, que también será un poco ingenuo.