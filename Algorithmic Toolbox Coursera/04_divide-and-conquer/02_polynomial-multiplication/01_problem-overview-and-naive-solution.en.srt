1
00:00:00,990 --> 00:00:05,217
In this lecture we're going to talk about
a more complicated divide-and-conquer

2
00:00:05,217 --> 00:00:07,799
algorithm to solve
polynomial multiplication.

3
00:00:07,799 --> 00:00:11,608
So first we'll talk about what
polynomial multiplication is.

4
00:00:11,608 --> 00:00:15,747
So polynomial multiplication is
basically just taking two polynomials and

5
00:00:15,747 --> 00:00:17,424
multiplying them together.

6
00:00:17,424 --> 00:00:20,326
It's used in a variety of
ways in computer science.

7
00:00:20,326 --> 00:00:24,344
Error correcting codes, if you want to
multiply large integers together.

8
00:00:24,344 --> 00:00:27,991
Right, so
if you've got thousand digit integers and

9
00:00:27,991 --> 00:00:32,854
you want to multiply them together,
there's a quicker way than doing it

10
00:00:32,854 --> 00:00:36,276
the normal way you learned
in elementary school.

11
00:00:36,276 --> 00:00:40,040
And that uses the idea of
multiplying polynomials.

12
00:00:40,040 --> 00:00:43,860
It is used for generating functions, and
for convolution.

13
00:00:43,860 --> 00:00:44,917
Let's look at an example.

14
00:00:44,917 --> 00:00:50,490
So let's say you have polynomial A,
which is 3 x squared + 2x + 5,

15
00:00:50,490 --> 00:00:54,470
and polynomial B,
which is 5 x squared + x + 2.

16
00:00:54,470 --> 00:00:58,027
If you multiply them
together you get 15 x to

17
00:00:58,027 --> 00:01:02,527
the fourth + 13 x cubed +
33 x squared + 9x + 10.

18
00:01:02,527 --> 00:01:03,629
Why is that?

19
00:01:03,629 --> 00:01:07,709
Well, let's look, for instance the 15 x
to the fourth comes from multiplying 3 x

20
00:01:07,709 --> 00:01:10,306
squared times 5 x squared,
that's 15x to the fourth.

21
00:01:10,306 --> 00:01:13,081
The 10 comes from multiplying 5 by 2.

22
00:01:13,081 --> 00:01:18,268
The 13 x cubed comes from 3 x squared
times x, which is 3 x cubed,

23
00:01:18,268 --> 00:01:22,194
plus 2x times 5 x squared,
which is 10 x cubed.

24
00:01:22,194 --> 00:01:24,389
For a total of 13 x cubed.

25
00:01:24,389 --> 00:01:27,814
So let's look at the problem statement.

26
00:01:27,814 --> 00:01:31,235
So we're going to have two n- 1
degree polynomials, all right?

27
00:01:31,235 --> 00:01:35,587
a sub n-1 is the coefficient of
the x to the n-1 all the way down

28
00:01:35,587 --> 00:01:40,200
to a0 which is the coefficient of
the x to the 0 term or the one term.

29
00:01:41,870 --> 00:01:44,870
And then we similarly have
a b polynomial as well.

30
00:01:45,870 --> 00:01:50,530
Now first you may wonder what happens if
you actually want to multiply polynomials

31
00:01:50,530 --> 00:01:52,490
that don't happen to have the same degree?

32
00:01:52,490 --> 00:01:55,860
What if you want to multiply a degree

33
00:01:55,860 --> 00:01:58,470
three polynomial times
a degree two polynomial?

34
00:01:58,470 --> 00:02:03,630
Right, where the degree is just
the exponent of the highest term.

35
00:02:04,920 --> 00:02:09,880
Well in that case, what you you could do
is just pad out the smaller polynomial,

36
00:02:09,880 --> 00:02:16,000
the lower degree polynomial, to have
zeros for its earlier coefficients.

37
00:02:16,000 --> 00:02:18,200
I'll give an example of
that in just a second.

38
00:02:18,200 --> 00:02:22,583
And then the product polynomial is
the result that we want to come up with so

39
00:02:22,583 --> 00:02:25,352
that's a higher degree polynomial, right?

40
00:02:25,352 --> 00:02:29,060
If our incoming polynomials,
are degree n- 1,

41
00:02:29,060 --> 00:02:34,706
then we're going to get a term of the x to
the n- 1 in a, times x to the n- 1 in

42
00:02:34,706 --> 00:02:39,246
b, and that's going to give us
an x to the 2n- 2 in the c term.

43
00:02:39,246 --> 00:02:44,344
So, the c sub 2n-2 term,
comes about from

44
00:02:44,344 --> 00:02:49,358
multiplying the a sub n-1 term and
the b sub n-1 term.

45
00:02:49,358 --> 00:02:53,303
The c sub 2n-3 term comes
from the a sub n-1,

46
00:02:53,303 --> 00:02:56,787
b sub n-2, and a sub n-2, b sub n-1.

47
00:02:56,787 --> 00:02:59,307
So it's got two terms
that multiply together.

48
00:02:59,307 --> 00:03:04,078
The c sub 2n-4 term would have
three terms that multiply together.

49
00:03:04,078 --> 00:03:07,743
And we have more and more terms that
get multiplied and summed together,

50
00:03:07,743 --> 00:03:09,558
and then fewer and fewer back down.

51
00:03:09,558 --> 00:03:14,163
So c sub 2 has three pairs
which get added together,

52
00:03:14,163 --> 00:03:17,975
c sub 1 has two pairs and
c sub 0 has one pair.

53
00:03:17,975 --> 00:03:20,088
So here's an example.

54
00:03:20,088 --> 00:03:22,131
This is actually the same
example we had before.

55
00:03:22,131 --> 00:03:26,120
So n is three and
all we need, notice, are the coefficients.

56
00:03:26,120 --> 00:03:29,890
We don't actually need to
have the x's written out.

57
00:03:29,890 --> 00:03:34,556
So 3, 2, and
5 means 3 x squared plus 2x plus 5.

58
00:03:34,556 --> 00:03:37,680
5, 1, 2 means 5 x squared plus x plus 2.

59
00:03:38,790 --> 00:03:41,585
What if B were only
a degree one polynomial?

60
00:03:41,585 --> 00:03:43,372
It was just x plus 2.

61
00:03:43,372 --> 00:03:46,403
Well then we would set B equal 0, 1, 2.

62
00:03:46,403 --> 00:03:51,661
That is, B's x squared term is 0 x squared.

63
00:03:51,661 --> 00:03:55,754
So A(x) is this, B(x) is that.

64
00:03:55,754 --> 00:03:58,621
When you multiply them together,
we get the same result we got before.

65
00:03:58,621 --> 00:04:03,476
And now we just pluck off
the coefficients here, so the 15, the 13,

66
00:04:03,476 --> 00:04:05,715
the 33, the 9, and the 10.

67
00:04:05,715 --> 00:04:09,991
And that's our resulting
answer: those coefficients.

68
00:04:09,991 --> 00:04:13,870
So let's look at a naive
algorithm to solve this.

69
00:04:15,420 --> 00:04:21,527
The naive algorithm basically just says, well
first off, let's create a product array.

70
00:04:21,527 --> 00:04:25,294
This is basically going to be the C,
the result, and

71
00:04:25,294 --> 00:04:28,714
it's going to be of highest degree 2n-2.

72
00:04:28,714 --> 00:04:34,410
So it's going to have 2n-1 terms all the
way from the 0 term up to the 2n-2 term.

73
00:04:34,410 --> 00:04:37,277
So we'll initialize it to 0, and
then we'll have a nested for loop.

74
00:04:37,277 --> 00:04:40,736
For i equals 0 to n-1,
for j equals 0 to n-1.

75
00:04:40,736 --> 00:04:45,320
And at every time, what we'll do is
we will calculate a particular pair.

76
00:04:45,320 --> 00:04:49,320
So we'll calculate the A[i], B[j] pair,

77
00:04:49,320 --> 00:04:54,030
multiply them together and add them
into the appropriate product.

78
00:04:54,030 --> 00:04:56,080
Which is the appropriate
product to put it in?

79
00:04:56,080 --> 00:04:59,772
It's the i + j case.

80
00:04:59,772 --> 00:05:04,769
As an example, when i is 0 and
j is 0, we calculate

81
00:05:04,769 --> 00:05:09,672
A at 0 times B at 0 and
we add that to product at 0.

82
00:05:09,672 --> 00:05:13,935
So that says the two
zero-degree terms in A and

83
00:05:13,935 --> 00:05:19,192
B get multiplied together to
the zero-degree term in C.

84
00:05:19,192 --> 00:05:23,500
At the other extreme,
if i is n-1 and j is n-1,

85
00:05:23,500 --> 00:05:30,101
we take A at n-1 times B at n-1 and
we store that in the product of 2n-2.

86
00:05:30,101 --> 00:05:34,343
As you can see,
the intermediate values in product

87
00:05:34,343 --> 00:05:39,087
are going to have more terms
added to them than the edges.

88
00:05:41,885 --> 00:05:43,673
And, of course,
then we return the product.

89
00:05:43,673 --> 00:05:45,681
How long does this take?

90
00:05:45,681 --> 00:05:47,492
Well, this takes order n squared.

91
00:05:47,492 --> 00:05:51,385
Clearly, we've got two for
loops, one smaller for

92
00:05:51,385 --> 00:05:56,050
loop that's from 0 to 2n-2,
so that's order n.

93
00:05:56,050 --> 00:06:02,210
And then a nested for loop, where i goes
from 0 to n-1, j goes from 0 to n-1,

94
00:06:02,210 --> 00:06:07,180
so those each go through the first one n
times, the second one n squared times.

95
00:06:07,180 --> 00:06:09,551
So our runtime is O(n squared).

96
00:06:11,665 --> 00:06:14,405
In the next video,
we're going to look at a divide and

97
00:06:14,405 --> 00:06:17,210
conquer algorithm to solve this problem.

98
00:06:17,210 --> 00:06:19,780
Although, we'll see that it
too will be somewhat naive.