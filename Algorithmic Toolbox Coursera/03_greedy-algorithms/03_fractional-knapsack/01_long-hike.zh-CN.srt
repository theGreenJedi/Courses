1
00:00:00,330 --> 00:00:01,280
大家好

2
00:00:01,280 --> 00:00:05,630
这节课，你将要学习一个算法来决定，在一次非常久的徒步旅行中
你应该带哪些食物

3
00:00:05,630 --> 00:00:09,280
及其数量

4
00:00:09,280 --> 00:00:11,900
可以使得食物的能量值最大。

5
00:00:13,100 --> 00:00:15,360
所以，你正在计划一个时间很久的徒步旅行。

6
00:00:15,360 --> 00:00:17,920
这将会花费好多天或者好几周时间，但是

7
00:00:17,920 --> 00:00:20,540
你不知道这到底会花费多长时间。

8
00:00:20,540 --> 00:00:24,030
所以，为了安全，你需要带充足的食物。

9
00:00:24,030 --> 00:00:28,660
你有一个可以装下最多15千克的食物

10
00:00:28,660 --> 00:00:31,630
你已经买了一些起司，一些火腿，一些坚果

11
00:00:31,630 --> 00:00:33,590
可能还有一些其他食物

12
00:00:33,590 --> 00:00:36,370
你想把它们全部装进背包，

13
00:00:36,370 --> 00:00:39,830
使得你可以从中获取最大量的卡路里。

14
00:00:39,830 --> 00:00:41,700
当然，你可以把起司切成块。

15
00:00:41,700 --> 00:00:42,690
也可以切火腿。

16
00:00:42,690 --> 00:00:45,840
你可以只选择其中一些坚果。

17
00:00:45,840 --> 00:00:48,430
然后，把它们刚好装进你的背包里。

18
00:00:49,770 --> 00:00:52,090
为了解决这个最大化问题，

19
00:00:52,090 --> 00:00:55,390
我们首先又要用数学语言表示这个问题。

20
00:00:55,390 --> 00:01:00,250
然后，它变成了一个经典的fractional knapsack（部分背包问题）问题，

21
00:01:00,250 --> 00:01:02,110
然后，它变成了一个经典的fractional knapsack问题，

22
00:01:02,110 --> 00:01:08,210
我们有n项，它们的重量从w1到wn，值从v1到vn

23
00:01:09,620 --> 00:01:12,016
和一个容量为W的背包。

24
00:01:12,016 --> 00:01:18,250
我们想要最大化刚好能够装进背包的部分食物项的总价值。

25
00:01:20,316 --> 00:01:24,679
这个情景下，weights还是实际生活中你买的食物项的重量，

26
00:01:24,679 --> 00:01:29,770
values是能量值。

27
00:01:31,700 --> 00:01:36,260
所以，这是一个例子，
我们将使用

28
00:01:36,260 --> 00:01:41,500
 美元值和重量的数值来表示每一项的价值和重量。

29
00:01:41,500 --> 00:01:45,825
所以，举个例子，
第一项的价值是20美元,

30
00:01:45,825 --> 00:01:49,958
重量值是4，
第二项价值是18美元

31
00:01:49,958 --> 00:01:54,977
重量值是3，
第三项价值是14美元，重量是2

32
00:01:54,977 --> 00:01:58,076
我们有个容量为7的背包。

33
00:01:58,076 --> 00:02:01,930
有一些方法可以装满背包。

34
00:02:01,930 --> 00:02:06,410
 例如，
其中之一就是，放入全部的第一项

35
00:02:06,410 --> 00:02:09,030
和全部第二项到背包中。

36
00:02:09,030 --> 00:02:13,080
然后，全部价值就是第一项和第二项的价值之和，

37
00:02:13,080 --> 00:02:15,946
 是38美元

38
00:02:15,946 --> 00:02:18,200
我们基于此改善。

39
00:02:18,200 --> 00:02:22,952
 例如，选择全部的第一项，
全部的第三项

40
00:02:22,952 --> 00:02:27,704
 和仅仅三分之一的第二项，这个总的价值是
40美元

41
00:02:27,704 --> 00:02:34,305
我们甚至可以更好，通过选择全部的
第三项，全部的第二项，

42
00:02:34,305 --> 00:02:39,685
和仅仅第一项的一半，
这会给我们价值42美元

43
00:02:39,685 --> 00:02:43,040
而且，实际上，已经证明了
这就是最优的选择方式

44
00:02:44,550 --> 00:02:49,530
所以，我们想创造
一个贪婪算法。

45
00:02:49,530 --> 00:02:53,440
 这个算法将会解决这个最大化问题
而且

46
00:02:53,440 --> 00:02:59,250
我们需要得到一些贪婪选择，和
制造一个安全的移动。

47
00:02:59,250 --> 00:03:04,570
  为了做到这样，我们需要看
每单位重量的价值。

48
00:03:04,570 --> 00:03:09,659
所以，例如，第一项，
每单位重量的价值是5美元。

49
00:03:09,659 --> 00:03:15,802
第二项，每单位是6美元
第三项，每单位是7美元。

50
00:03:15,802 --> 00:03:19,479
所以，虽然第一项是价值最高的

51
00:03:19,479 --> 00:03:23,267
但是第三项每单位的价值是最大的。

52
00:03:23,267 --> 00:03:28,127
而且，当然，有一个直觉告诉我们
应该最先装进

53
00:03:28,127 --> 00:03:30,240
每单位价值最大的项。

54
00:03:32,060 --> 00:03:32,900
而且，实际上，

55
00:03:32,900 --> 00:03:38,568
安全移动就是首先尽量装进每单位价值最大的项。

56
00:03:38,568 --> 00:03:41,820
 有一个定理，说道：

57
00:03:41,820 --> 00:03:45,530
对于我们的问题总存在一些优化的办法

58
00:03:45,530 --> 00:03:50,660
尽可能多的使用每单位重量价值最大的项。

59
00:03:50,660 --> 00:03:53,980
“尽可能多“
是什么意思呢？

60
00:03:53,980 --> 00:03:58,920
额，在背包能装下的情况下，就使用全部

61
00:03:58,920 --> 00:04:04,210
如果背包容量小于该项的总量，

62
00:04:04,210 --> 00:04:07,940
然后，背包就仅仅只装这一项。

63
00:04:09,410 --> 00:04:11,370
让我们证明这确实是一个安全的移动。

64
00:04:13,060 --> 00:04:15,600
我们将会证明通过看这个例子。

65
00:04:15,600 --> 00:04:20,740
所以，首先，让我们假设我们有一些优化的方法，

66
00:04:21,830 --> 00:04:27,270
假设在这个优化的方法中，我们没有尽可能多的

67
00:04:27,270 --> 00:04:32,385
使用每单位重量价值最大的项。

68
00:04:32,385 --> 00:04:37,890
然后，选择这个方法中我们使用的项

69
00:04:37,890 --> 00:04:44,040
把使用到的它们分成两个部分
一部分和

70
00:04:44,040 --> 00:04:48,776
我们有的最好的项的大小相同
第二部分使用其他的任意项

71
00:04:48,776 --> 00:04:56,730
然后，我们使用最好的项替换第一部分。

72
00:04:56,730 --> 00:04:58,510
所以，例如，在这个情况下，

73
00:04:58,510 --> 00:05:02,659
我们使用第二项替换第一项的一半。

74
00:05:03,700 --> 00:05:09,270
当然，这部分中，全部的价值
将会增加，因为

75
00:05:09,270 --> 00:05:15,031
最好项的每单位重量的价值是比现在正在用的要大的。

76
00:05:15,031 --> 00:05:18,190
在一般情况下，
这也是成立的。

77
00:05:18,190 --> 00:05:24,772
所以，不是我们可以使用最好的项替换
部分我们正在使用的项

78
00:05:24,772 --> 00:05:30,755
就是
我们可以替换整个

79
00:05:30,755 --> 00:05:35,799
使用最好想的一部分。

80
00:05:35,799 --> 00:05:39,912
而且，在任何情况下，
如果我们可以做出这样的替换。

81
00:05:39,912 --> 00:05:43,186
当然，整体的价值就会增加，

82
00:05:43,186 --> 00:05:48,141
因为，最好项就是
有大的每单位重量的价值，

83
00:05:48,141 --> 00:05:52,290
所以，对于每单位重量，
我们会有更多的价值。

84
00:05:52,290 --> 00:05:55,380
所以，这给我们一个贪婪
算法来解决我们的问题。

85
00:05:56,830 --> 00:06:02,100
我们需要做的就是在背包仍然
没有满的时候，我们做一个贪婪选择。

86
00:06:02,100 --> 00:06:07,540
我们将要选择vi/wi值
最大的第i项

87
00:06:07,540 --> 00:06:12,490
vi/wi就是每单位重量的价值。

88
00:06:12,490 --> 00:06:18,425
然后，如果这一项刚刚好装满背包
，就带上全部的这一项。

89
00:06:18,425 --> 00:06:23,278
否则，如果只剩下
一点点空间。

90
00:06:23,278 --> 00:06:27,956
就带上这么多空间的这一项
来装满背包，知道结束。

91
00:06:27,956 --> 00:06:32,989
然后，在最后，我们将返回
我们带的所有项的总价值

92
00:06:32,989 --> 00:06:35,166
和每一项我们带了多少。