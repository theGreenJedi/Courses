続くいくつかのビデオで 機械学習システムのデザインについて話す。 これらのビデオは 複雑な機械学習のシステムを あなたがデザインする時に 直面するであろう問題に触れる、 そしてどうやって複雑な 機械学習のシステムを組み合わせるかについての 戦略を提供する。 この後に続く一連のビデオが いまいちまとまりが無く感じられたとしたら、 それはこれらのビデオが 複雑な機械学習のシステムをデザインする時に 遭遇するであろう様々な問題に 触れていくからだ。 そしてこの後の一連のビデオはまた、 いくらか、数学的で無い、と 感じるかもしれないが、 それでもこれらの題材はとても役に立つ、と 分かる日が来るだろうと思う。 そしてあなたが大きな機械学習のシステムを構築する時には 巨大な時間の節約になってくれると思う。 具体的に言うと、 次に何をするのに 時間を費やすべきかの プライオリティ付けする、という問題について議論したい。 スパム分類の例から 始めよう。 スパム分類器を構築したいとする。 ここに、明らかにスパムのメールと 明らかにスパムで無いメールが幾つかある。 左側のは、物を売ろうとするメールだ。 スパマーはどう単語をミススペルしているか 気づくだろう。 たとえばMedicineの中には数字の1が混じってたり、M0rgagesとかだったり。 そして右側は 明らかにスパムで無い例。 これは実際の、私の弟からのメールだ。 我らは何通かの スパムのメールと スパムでないメールからなる トレーニングセットがあり、 それをラベルでy=1か0で示してあるとする。 スパムと非スパムを 区別する分類器を 教師あり学習を用いてどうやって構築出来るだろうか？ 教師あり学習を適用する為には 最初に決めなくてはならない事は xをどう表現するか、 これはe-mailのフィーチャーだが、 それを決める事だ。 フィーチャーxとラベルyが トレーニングセットとして 与えられたとすると、 我らは分類器を、例えばロジスティック回帰を使うなどして、訓練する事が出来る。 これは、我らのe-mailについてのフィーチャーを選ぶ 一つの方法だ。 例えば我らは e-mailがスパムか非スパムかを 判断出来ると思われる、 100個の特徴的な単語を 選び出せたとする。 例えば、e-mailの一部分に dealという単語が含まれていたら、 きっとこれはスパムっぽい。 buyという単語が 含まれていたら、 これもスパムの可能性が増す。 discountという単語も よりスパムっぽい。 他方でe-mailの一部分が、私の名前、 Andrewを含んでいたら、 それは送り主が実際に 私が誰かを知っているという事を意味するので、 スパムの可能性は減る。 そしてある理由により、 私はnowという単語が入っている物も 非スパムを示すと考える。 何故なら私はたくさんの 緊急のe-mailを受け取るからだ。などなど。 こんな風にして、例えば100個の単語を選ぶ。 e-mailの一部分を与えられた時に、 このe-mailの一部分を 以下のように フィーチャーベクトルへと エンコードする。 100個の単語の リストに対し、 それをアルファベット順に並べる。 単語のリストはソートされてないかもしれないから。 そしてこれが 単語のリストだ。discountとか そのまま下まで行って nowとか、 などなど。 そして右に示したようなe-mailの一部分が与えられた時に、 これらの単語が それぞれ e-mailに現れるかを チェックしていき、 そしてフィーチャーベクトルxを 以下のように定義する： この右側のメールの一部分において、 私の名前は現れてない、 だからそこに0を入れる。 buyは現れている。 だから1を入れる。 そうやって1か0を入れていく。 Buyが二回現れても 1を入れる。 単語が何回出てくるか、はカウントしない。 単語dealは現れる、だから1を入れる。 discountは現れない。 少なくともこのメールの範囲には。 という風に続けていく。 単語nowは現れる、などなど。 つまり、私はフィーチャーベクトルに 0か1を、特定の単語が 現れるかどうかに応じて入れていく。 そしてこの例では、 私のフィーチャーベクトルは 100次元の次元を持つ。 私が100を選んだからだが。 もし100語の単語を この表現に 使う事としたとして、 そして各フィーチャーxjは 基本的には、 ある単語、それを単語jと呼ぼう、 それがe-mailにあったら 1をとり、 それ以外ではxjは0となる。 オーケー。 こうしてe-mail片の フィーチャーによる表現が得られる。 ところで、このプロセスを 手動で100個の単語を選ぶ、と 記述したが、 実際にはもっとも一般的な方法は、 トレーニングセットを取り、 それを見ていって トレーニングセットの中に もっとも頻繁に現れるn個の単語を選び出す、 ここでnは通常は 1万から5万程度の値で、 それらをフィーチャーとして使う。 つまり、手動で100個の単語を選ぶ代わりに、 トレーニング手本を 見ていって、 もっとも良く見かける単語の 上位1万から5万語くらいを選び、 それらから構成されるフィーチャーを スパム分類器に対して e-mailを表現するフィーチャーとして用いる。 今、もしあなたがスパム分類器を 構築しているとすると、 直面するであろう一つの問いとして、 スパム分類器として高い正確性と低いエラーを得る為に 何に時間を使うのが、 もっとも賢い自分の時間の使い方か？というのがある。 自然に思い浮かぶ事としては、もっと多くのデータを集めるという事。 でしょ？ そして現実でも、 より多くのデータがあれば、アルゴリズムはよりうまくやってくれるに違いない、と 考える傾向にある。 そして実際、e-mailのスパムの分野では、 Honey Pot（ハチミツ壺）プロジェクト、と呼ばれる とても真剣なプロジェクトが存在していて、 それは偽のe-mailアドレスを作って その偽のアドレスを スパマーにつかませて、 それを使って 大量のスパムのe-mailを集める、 という物だ。つまり、 学習アルゴリズムを訓練するスパムのデータをたくさん集める、という事。 だが我らは既に ここまでの何本かのビデオで、 データをもっと集める、というのは役に立つ事も確かにあるが、いつもそうだという訳じゃない、というのを見てきた。 そして多くの機械学習の問題において、 パフォーマンスを改善する為に 考えられる選択肢は他にもたくさんある。 スパムに関しては、一つ考えられる手としては、 e-mailについてもっと洗練された フィーチャーを開発する、というのが考えられる、 例えばe-mailのルーティング情報に基づいたりとか。 これはe-mailのヘッダに含まれている情報だ。 スパマーがe-mailを送る時には、 彼らはよく、どこから送ってるかを ごまかそうとする。 だから偽物のe-mailヘッダを 使ったりする。 またはとても普通でない コンピューターサービス群を通して、 とても普通で無いルートを通してスパムが届くようにする。 そしてこれらの情報の幾らかはe-mailのヘッダに反映される。 だからこんな風に考えられる。 e-mailヘッダを見て、 この種のe-mailのルーティング情報を うまくとらえるような、もっと洗練されたフィーチャーを 開発して、それがスパムかどうかを判定する、という事を試みるという事を。 他に考えられる事としては e-mailのメッセージのボディ、 つまりはe-mailのテキストを見て、 もっと洗練したフィーチャーを構築しようと試みる、というのがある。 例えば、discountとdiscountsは 同じ単語と みなした方がいいだろうか？ とか、 dealとdealerは同じ単語とみなすべきだろうか？など。 この例では片方は大文字で 片方は小文字だけれども。 または句読点などの記号についてのもっと複雑なフィーチャーが良いかもしれない。何故ならスパムは びっくりマーク（！）をよりたくさん使う傾向にあるかもしれないから。 知らないけどね。 同じような考えとして、 故意のミススペルを検出する為の もっと洗練されたアルゴリズムを 開発したい、と思うかもしれない。 m0rtgage, med1cine, w4tchesなど。 何故ならスパマーは実際にこれをやってるから。 何故ならwatchesに4が 入っていると、 今話した単純なテクニックでは スパム分類器は これを"watches"と 同じ物だとはみなせないかもしれない。 だからこれらのような わざとミススペルしたような物を スパムと判断するのは、難しいかもしれない。 そしてだからこそスパマーはそれをするのだ。 機械学習の問題にとりくんでいる時には、 あなたはしょっちゅう これらのように試してみたい事のリストをブレインストーミングする事が出来る。 ところで、実のところ私は スパムの問題に しばらく従事していた事がある。 私はかなりの時間、それに費やした。 そして私はスパムの問題を かなり理解しているのだけれども、 それについてかなり知っているのだけれども、 それでもあなたに この四つの選択肢のうち どれにあなたの時間を使うのが ベストな選択なのか、と言うのは、凄く難しい。 そこで何が起こるかというと、 率直に言って、 リサーチグループはプロダクトを作ってるグループで 凄くしょっちゅう起こってしまう事は、これらの選択肢からランダムに一つを選んで、それに固執してしまう、という事。 そして時には、 誰かがランダムに これらの選択肢のどれに固執し始めたかに応じて あなたがそれに時間を費やすのが 実り多いかどうかが決まってしまうという事になる。 ところで、実のところ、 試すべき様々な選択肢を ブレインストーミングする所まで 来ていたら、あなたはたぶん 他人よりは前に進んでいる。 残念な事に、多くの人が代わりにやる事は、 試すべき選択肢を リストに書き出そうとはせず、 その代わりに多くの人々が やってしまう事は、 ある朝起きて、何らかの理由で、 例えば妙な ガッツフィーリングで、 「よし、巨大なハニーポットのプロジェクトを立ち上げて、 もっと大量のデータを集めよう！」とか思い立ったりとか、 とにかく何かしら変な理由で、 ある朝起きてランダムに 一つに決めてしまって、 それに六ヶ月とか費やしてしまう。 だが、きっと我らはもっとマシなやり方が出来る。 具体的には、 次のビデオで 私が話すのは エラー分析という概念で、 そしてもっとシステマティックな方法で さまざまな異なる選択肢から うまく行きそうな方法を 選ぶ事を試みようと する時に使える方法で、 つまりは実際に 続く数週間、 数日、または数ヶ月もの時間を あなたが費やすのに より良さそうな選択を行う方法だ。