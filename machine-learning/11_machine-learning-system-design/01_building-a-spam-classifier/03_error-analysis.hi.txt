पिछले विडीओ में मैने बात की कि कैसे, जब हमारे सामने हैं एक मशीन लर्निंग प्रॉब्लम, अक्सर बहुत से भिन-भिन्न विचार होते हैं कि अल्गोरिद्म को कैसेे बेहतर करना है. इस वीडियो में, चलो बात करते हैं एरर अनालिसिस के सिद्धांत की. जो उम्मीद है एक तरह आपको देगा और अधिक व्यवस्थित ढंग से लेने के लिए कुछ ये निर्णय. यदि आप शुरू कर रहे है एक मशीन लर्निंग प्रॉब्लम पर काम, या बना रहे हैं एक मशीन लर्निंग ऐप्लिकेशन. यह अक्सर बहुत अच्छी आदत मानी जाती है कि शुरूआत में, न बनाएँ एक बहुत कठिन सिस्टम बहुत से जटिल फ़ीचर्ज़ के साथ. लेकिन इसके बजाय शुरू करें बनाने से एक बहुत सरल अल्गोरिद्म जो आप कर सकते हैं जल्दी से इम्प्लमेंट. और जब मैं शुरू करता हूँ एक लर्निंग प्रॉब्लम से अक्सर मैं क्या करता हूँ कि व्यतीत करता हूँ अधिक से अधिक एक दिन, जैसे सचमुच में 24 घंटे ज़्यादा से ज़्यादा, पाने के कुछ जल्दी से और शायद ज़्यादा बढ़िया नहीं. स्पष्ट: बिल्कुल ही सरल सा सिस्टम लेकिन कुछ जल्दी और चलता हुआ थोड़ा बेकार सा ही, और इम्प्लमेंट करता हूँ इसे और फिर टेस्ट करता हूँ मेरे क्रॉस वैलिडेशन डेटा पर. जब आपने कर लिया है वह आप तब प्लॉट कर सकते हैं लर्निंग कर्व्ज़, जिसकी हमने बात की थी पिछले वीडियोज़ के सेट में. लेकिन प्लॉट करें लर्निंग कर्व्स ट्रेनिंग और टेस्ट एरर के समझने के लिए कि क्या आपके लर्निंग अल्गोरिद्म में शायद समस्या है हाई बाइयस की या हाई वेरीयन्स की या कुछ और. और इस्तेमाल करें उसका तय करने के लिए कि यदि लेने से और डेटा, और फ़ीचर्ज़, या कुछ और से सहायता मिलने की सम्भावना है. और कारण कि यह एक अच्छा तरीक़ा है, क्योंकि अक्सर, जब आप सिर्फ़ शुरू कर रहे हैं एक लर्निंग प्रॉब्लम, ऐसा वास्तव में कोई रास्ता नहीं है कि पहले से ही बता पाएँ. कि आपको चाहिए और जटिल फ़ीचर्ज़, या कि आपको चाहिए और अधिक डेटा या कुछ और. और यह है सिर्फ बहुत मुश्किल पहले से ही बता पाना, अर्थात्, साक्ष्य के अभाव में, एक लर्निंग कर्व के देखे बिना. यह बहुत अधिक कठिन है बता पाना कि कहाँ आपको अपना समय लगाना चाहिए. और अक्सर, इम्प्लमेंट करने से एक बहुत ही तुरत, और सरल सा इम्प्लमेंटेशन. और प्लॉट करने से लर्निंग कर्व, वह सहायता करता है आपकी लेने में ये निर्णय. तो यदि आप चाहें आप सोच सकते हैं इसे एक तरीक़ा बचने का उससे जिसे कभी-कभी कहते हैं प्रीमैच्योर ऑप्टिमायज़ेशन कम्प्यूटर प्रोग्रैमिंग में. और इस विचार के अनुसार हमारा निर्णय सबूत के आधार पर होना चाहिए कि कहाँ लगाना है हमारा समय बजाय अटकलें लगाने के जो अक्सर ग़लत होता है. लर्निंग कर्व्ज़ प्लॉट करने के अलावा, एक और काम जो अक्सर उपयोगी होता है करना जिसे कहते हैं एरर अनालिसिस. और उससे मेरा मतलब है कि जब हम बना रहे हैं मान लो एक स्पैम क्लैसिफ़ायअर, मैं अक्सर देखूँगा मेरा क्रॉस वैलिडेशन सेट और ख़ुद से चेक करूँगा ईमेल्ज़ जिन पर मेरा अल्गोरिद्म ग़लती कर रहा है. तो देखूँगा स्पैम ईमेल्स को और नॉन-स्पैम ईमेल्स को अल्गोरिद्म ग़लत क्लैसिफ़ाई कर रहा है और देखूँगा यदि आप पता लगा सकते हैं कोई पैटर्न कि किस टाइप के इग्ज़ाम्पल्ज़ यह ग़लत क्लैसिफ़ाई कर रहा है. और अक्सर, वह करने से, यह है प्रक्रिया जो प्रेरणा देगी आपको बनाने के लिए नए फ़ीचर्ज़. या वह बताएगी आपको क्या है वर्तमान स्थिति या क्या हैं कमियाँ वर्तमान सिस्टम में. और देगी आपको प्रोत्साहन कि आपको बेहतर करना चाहिए इसे. ठोस रूप में, यहाँ है एक विशेष उदाहरण. मान लो अपने बनाया है एक स्पैम क्लैसिफ़ायअर और आपके पास हैं 500 इग्ज़ाम्पल्ज़ आपके क्रॉस वैलिडेशन सेट में. और मान लो इस उदाहरण में अल्गोरिद्म की है बहुत ज़्यादा एरर रेट. और यह ग़लत क्लैसिफ़ाई करता है 100 इन क्रॉस वैलिडेशन इग्ज़ाम्पल्ज़ को. तो मैं क्या करता हूँ कि ख़ुद जाँचता हूँ इन 100 ग़लतियों को हाथ से वर्गीकृत करता हूँ उन्हें. निर्भर करते हुए चीज़ों पर जैसे ईमेल की टाइप, क्या संकेत या कौन से फ़ीचर्ज़ से, आप सोचते हैं, अल्गोरिद्म को मदद मिलेगी क्लैसिफ़ाई करने के लिए उन्हें सही. तो, विशेष रूप से, ईमेल की किस प्रकार से यह है, अगर मैं देखता हूँ 100 ग़लतियों को, मुझे मिल सकता है शायद स्पैम ईमेल का सबसे आम प्रकार इनमें जो क्लैसिफ़ाई होती है ईमेल फ़ार्मा या फ़ॉर्मसी कम्पनीज़, बेचने की कोशिश में उनकी दवाइयाँ. शायद ईमेल्स जो कोशिश कर रही हैं बेचने की जैसे नक़ली घड़ियाँ, और नक़ली चीज़ें, शायद कुछ ईमेल्स जो पास्वर्ड चुराने की कोशिश कर रही हैं. इन्हें कहते हैं फ़िशिंग ईमेल्स, वह है एक अन्य बड़ा वर्ग ईमेल्स का, और शायद कुछ और वर्ग. तो क्लैसिफ़ाई करने के मामले, किस टाइप की ईमेल है यह, मैं असली में देखूँगा और गिनूँगा मेरी सौ ईमेल्स. श्याद मुझे मिले कि उनमें से 12 हैं लेबल ईमेल्स, या फ़ार्मा ईमेल्स, और शायद 4 उनमें से हैं ईमेल्स जो बेचने की कोशिश में हैं प्रतिकृति, जो बेचती हैं नक़ली घड़ियाँ या कुछ और. और शायद मुझे मिले कि 53 उनमें से हैं ये जिन्हें कहते हैं फ़िशिंग ईमेल्स, मूलत: ईमेल्स जो आपको फुसलाने की कोशिश कर रही हैं कि आप उन्हें पास्वर्ड दें. और 31 ईमेल्स हैं अन्य तरह की ईमेल्स. और गिन लेने से संख्या ईमेल्स की इन भिन्न वर्गों में जो आपको मिलते हैं, उदाहरण के लिए. कि अल्गोरिद्म कर रहा है वास्तव में, ख़ास कर बुरी तरह से ईमेल्स पर जो कोशिश कर रही हैं पास्वर्ड चुराने की. और वह संकेत कर सकता है कि वह हो सकता है आपके प्रयास के योग्य कि आप अधिक ध्यान दें उस तरह की ईमेल्स पर और देखें कि क्या आप बना सकते हैं बेहतर फ़ीचर्ज़ वर्गीकृत करने के लिए उन्हें सही. और, मैं क्या करूँगा कि देखूँगा भी कि कौन से संकेत या कौन से अतिरिक्त फ़ीचर्ज़ शायद अल्गोरिद्म को मदद कर सकते हैं क्लैसिफ़ाई करने के लिए ईमेल्स को. तो मान लो हमारी कोई हायपॉथिसस चीज़ों की या फ़ीचर्ज़ की जो शायद हमारी सहायता कर सकती है क्लैसिफ़ाई करने के लिए ईमेल्स को बेहतर, कोशिश कर रही है जानने की जानबूझ कर की गई स्पेलिंग में ग़लतियाँ बनाम असामान्य ईमेल के रूट बनाम असामान्य स्पैम विराम चिन्ह. जैसे कि लोग काफ़ी इस्तेमाल करते हैं एक्स्क्लमेशन मार्कस. और एक बार फिर मैं ख़ुद से देखूँगा और मान लो मुझे मिलते हैं पाँच केस इसके और 16 इसके और 32 इसके और कुछ अन्य टाइप के ईमेल्स भी. और यदि यह आपको मिलता है आपके क्रॉस वैलिडेशन सेट पर, तब यह वास्तव में बताता है आपको कि हो सकता है जानबूझ कर स्पेलिंग की ग़लती काफ़ी विरला है तथा शायद नहीं है आपके समय के योग्य कि लिखें अल्गोरिद्म पता लगाने के लिए उसका. लेकिन यदि आप पाते हैं कि बहुत से स्पैमर्स इस्तेमाल कर रहे हैं, असामान्य विराम चिन्ह, तब शायद यह एक महत्वपूर्ण संकेत हैं कि योग्य है लगाने के आपका समय बनाने के लिए और प्रगतिशील फ़ीचर्ज़ विराम चिन्हों पर आधारित. तो इस तरह का एरर अनालिसिस, जो है वास्तव में प्रक्रिया मैन्युअल, जाँचने के लिए ग़लतियाँ जो अल्गोरिद्म करता है, अक्सर आपको बता सकता हैं सबसे उपयोगी रास्ते लेने के लिए. और यह यह भी बताता है कि क्यों मैं अक्सर सलाह देता हूँ एक तुरत और न ज़्यादा बढ़िया इम्प्लमेंटेशन की एक अल्गोरिद्म की. वास्तव में हम क्या चाहते हैं कि समझ पाए कौन से सबसे कठिन इग्ज़ाम्पल्ज़ हैं एक अल्गोरिद्म को क्लैसिफ़ाई करने के लिए. और प्रायः भिन्न अल्गोरिद्म्स के लिए, भिन्न लर्निंग अल्गोरिद्म्स के लिए उन्हें अक्सर मिलेंगे समान वर्ग के इग्ज़ाम्पल्ज़ कठिन. और होने से एक अस्थायी इम्प्लमेंटेशन, वह है अक्सर एक त्वरित ढंग ताकि आप पहचान पाए कुछ ग़लतियाँ और शीघ्र पहचान पाएँ कौन से हैं कठिन इग्ज़ाम्पल्ज़. ताकि आप केंद्रित कर पाएँ आपके प्रयास उन पर. अंत में, जब बना रहे हैं लर्निंग अल्गोरिद्म्स, एक अन्य उपयोगी सलाह है सुनिश्चित करें कि आपके पास है एक नूमेरिकल इवैल्यूएशन आपके लर्निंग अल्गोरिद्म का. और उससे मेरा क्या मतलब हैं कि यदि आप बना रहे हैं एक लर्निंग अल्गोरिद्म, यह अक्सर काफ़ी उपयोगी है. यदि आपके पास है एक तरीक़ा इवैल्यूएशन का आपके लर्निंग अल्गोरिद्म को जो सिर्फ़ देता है आपको एक रियल नम्बर, शायद एक्यूरेसी, शायद एरर. लेकिन एक रियल नम्बर जो बताता है आपको कितना सही आपका अल्गोरिद्म कर रहा है. मैं बात करूँगा अधिक ख़ास इस बारे में बाद के वीडियो में, लेकिन यहाँ है एक विशेष उदाहरण. मान लो हम निर्णय लेने का प्रयास कर रहे हैं कि हमें शब्द जैसे 'discount', 'discounts', 'discounted', 'discounting' समान लेने शब्द चाहिए या नहीं. तो आप जानते हैं शायद एक तरीक़ा करने का उसे है सिर्फ़ देखें शुरू के कुछ अक्षर शब्दों में जैसे, आप जानते है. यदि आप देखते हैं शुरू के कुछ अक्षर एक शब्द के, तब आप समझ लेते हैं कि शायद सारे ये शब्द लगभग समान अर्थ वाले हैं. नैचरल लैंग्विज प्रासेसिंग में, जैसे वह किया जाता है वास्तव में इस्तेमाल करके एक टाइप का सॉफ़्टवेयर जिसे कहते हैं स्टेमिंग सॉफ़्टवेयर. और यदि आप कभी भी इसे करना चाहें ख़ुद से, ढूँढे एक वेब-सर्च एंजिन पर पोर्टर स्टेमर, और वह होगा एक उचित सॉफ़्टवेयर करने के लिए इस तरह की स्टेमिंग, जो आपको इन सारे शब्दों को, 'discount', 'discounts', और इसी तरह के, एक समान शब्द लेने देगा. लेकिन लेने से एक स्टेमिंग सॉफ़्टवेयर जो मूल रूप से देखता है शुरू के कुछ अक्षर एक शब्द के, लगभग, मदद कर सकता है, लेकिन इससे कष्ट हो सकता है. इससे कष्ट हो सकता है क्योंकि उदाहरण के लिए, सॉफ़्टवेयर शायद ग़लती से लेले शब्द जैसे 'universe' और 'university' को एक समान. क्योंकि, आप जानते हैं, ये दोनो शब्द शुरू होते हैं समान अक्षरों से. तो यदि आप निर्णय लेना चाहते हैं कि स्टेमिंग सॉफ़्टवेयर इस्तेमाल करें अथवा नहीं एक स्पैम क्लैसिफ़ायअर में, यह हमेशा आसान नहीं है बता पाना. और ख़ास तौर पर, एरर अनालिसिस वास्तव में शायद न सहायता कर पाएगी निर्णय लेने में कि इस तरह की स्टेमिंग का विचार अच्छा विचार है. इसके बजाय, सबसे अच्छा तरीका है यह पता लगाने के लिए कि स्टेमिंग सॉफ्टवेयर का उपयोग मदद करेगा आपके क्लैसिफ़ायअर को है कि यदि आप जल्दी से इसे परख सकते हैं और देखें कि यह काम करता है या नहीं. और ऐसा करने के लिए, होना एक तरीक़ा आपके अल्गोरिद्म को नूमेरिक्ली एवलुएट करने का होगा काफ़ी सहायक. वस्तुत:, शायद सबसे स्वाभाविक चीज़ करने की है कि देखें क्रॉस वैलिडेशन एरर पर अल्गोरिद्म की पर्फ़ॉर्मन्स स्टेमिंग के साथ और बिना. तो, यदि आप चलाते हैं आपका अल्गोरिद्म स्टेमिंग एक बिना और मिलती है 5 प्रतिशत क्लैसिफ़िकेशन एरर. और दोबारा चलाते हैं इसे एरर आपको मिलती है 3 प्रतिशत क्लैसिफ़िकेशन एरर, तब यह कमी एरर में आपको तुरंत निर्णय लेने देती है कि ऐसा लगता है जैसे स्टेमिंग करना एक अच्छा विचार है. इस ख़ास प्रॉब्लम के लिए, एक बहुत ही स्वभाविक, एक रियल नम्बर की इवैल्यूएशन मेट्रिक है, जिसे कहते हैं क्रॉस वैलिडेशन एरर. हम देखेंगे बाद के उदाहरण जहाँ बना पाना इस तरह की एक रियल नम्बर की इवैल्यूएशन मेट्रिक, थोड़ा़ और काम करना पड़ेगा. लेकिन जैसे कि हम देखेंगे बाद के एक वीडियो में, वैसे करना आपको लेने भी देगा ये निर्णय ज़्यादा जल्दी जैसे कि स्टेमिंग करना है या नहीं. और, सिर्फ़ एक और त्वरित उदाहरण, मान लो कि आप निर्णय करना चाह रहे हैं कि भेद करना है या नहीं अपर और लोअर केस में. तो, आप जानते हैं, कि शब्द 'mom' अपर केस में और लोअर केस m में, लेना चाहिए समान शब्द या भिन्न शब्द? इसे लेना चाहिए समान फ़ीचर या भिन्न फ़ीचर्ज़? और इसलिए, एक बार फिर, क्योंकि हमारे पास है एक तरीक़ा इवैल्यूएट करने का हमारा अल्गोरिद्म. यदि आप इसे परखते हैं यह, यदि मैं बंद कर देता हूँ भेद करना अपर और लोअर केस में, शायद मुझे मिले 3.2 प्रतिशत एरर. और मैं पाता हूँ कि इसलिए, यह बदतर हो जाता है उससे यदि मैं इस्तेमाल करता हूँ सिर्फ़ स्टेमिंग. तो, यह मुझे शीघ्र निर्णय लेने देता है कि आगे चलें और भेद करें है या भेद नहीं करें अपर और लोअर केस में. तो जब आप बना रहे हैं एक लर्निंग अल्गोरिद्म, बहुधा आप परखेंगे बहुत से नए विचार और बहुत से नए वर्ज़न आपके लर्निंग अल्गोरिद्म के. यदि हर बार आप परखते हैं एक नया सुझाव, यदि आप करते हैं ख़ुद से जाँच कुछ इग्ज़ाम्पल्ज़ की फिर से देखने के लिए कि यह बेहतर होता है या बदतर, उससे बहुत कठिन हो जाता है निर्णय ले पाना. आपको स्टेमिंग करना चाहिए या नहीं? आपको भेद करना चाहिए अपर और लोअर केस में या नहीं? लेकिन रखने से केवल एक रियल नम्बर इवैल्यूएशन मेट्रिक, आप तब देख सकते हैं, कि, यह बढ़ा या क्या यह नीचे गया? और तब उसे इस्तेमाल कर सकते हैं और अधिक तेज़ी से परखने के लिए नए सुझाव और लगभग तुरंत बता सकते हैं यदि आपके नए सुझाव से बेहतर हुई है या बदतर हुई है आपके लर्निंग अल्गोरिद्म की पर्फ़ॉर्मन्स. और अक्सर यह आपको बहुत तेजी से प्रगति करने देगा. तो मैं सलाह दूँगा, ज़ोर देकर सलाह दूँगा कि तरीक़ा एरर अनालिसिस करने का है क्रॉस वैलिडेशन एरर पर बजाय टेस्ट सेट के. लेकिन, आप जानते है, बहुत से लोग हैं जो करेंगे इसे टेस्ट सेट पर, जबकि वह निश्चित रूप से एक कम गणितीय उचित है, निश्चित रूप से कम सलाह दिया जाने वाला ढंग है करना बजाय करने के एरर अनालिसिस आपके क्रॉस वैलिडेशन सेट के. तो समाप्त करते हुए इस वीडियो को, जब शुरू करें एक नई मशीन लर्निंग प्रॉब्लम, मैं लगभग हमेशा क्या सलाह देता हूँ कि इम्प्लमेंट करें एक अस्थायी इम्प्लमेंटेशन आपके लर्निंग अल्गोरिद्म की. मैंने लगभग कभी नहीं देखा किसी को बहुत कम समय लगाते हुए इस अस्थायी इम्प्लमेंटेशन पर. मैंने बहुत बार देखा है लोगों को व्यतीत करते हुए काफ़ी समय बनाते हुए उनका पहला, जिसे कहना चाहिए अस्थायी इम्प्लमेंटेशन. तो वास्तव में चिंता न करें कि यह बहुत शीघ्र हुआ है या चिंता न करें कि यह बहुत अच्छा नहीं है. लेकिन वास्तव में, इम्प्लमेंट करें इसे उतना जल्दी जितना आप कर सकते हैं. और एक बार आपके पास है प्रारंभिक इम्प्लमेंटेशन, यह है तब एक सक्षम टूल निर्णय लेने के लिए कि कहाँ व्यतीत करना है आपका समय आगे. क्योंकि आप पहले देख सकते हैं ग़लतियाँ जो यह करता है, और कर सकते हैं इस तरह का एरर अनालिसिस देखने के लिए कि कौन सी और ग़लतियाँ यह करता है और और इस्तेमाल कर सकते हैं उसका आगे के विकास के लिए. और दूसरे, मानते हुए कि आपका अस्थायी इम्प्लमेंटेशन में है एक रियल नम्बर इवैल्यूएशन मेट्रिक. यह तब हो सकता है एक माध्यम परखने के लिए विभिन्न सुझाव और जल्दी से दखने के लिए कि भिन्न सुझाव जो आप परख रहे हैं बेहतर कर रहे हैं पर्फ़ॉर्मन्स आपके अल्गोरिद्म की. और इसलिए लेने देता है आपको, बहुत फुर्ती से निर्णय कि कौन सी चीज़ें नहीं रखनी और कौन सी रखनी हैं आपके लर्निंग अल्गोरिद्म में.