前回のビデオでは 機械学習の問題に 直面している時は アルゴリズムを改善するたくさんの方法がありうる、という話をした。 このビデオでは エラー(誤差)分析の概念を話していく。 それはこれらの決断を行うにあたって よりシステマティックなやり方を 行う助けとなってくれる物だ。 もしあなたが機械学習のプロダクトや 機械学習のアプリケーションの 仕事を始めたら、 最初にとても複雑で たくさんの複雑なフィーチャーを持つような システムを構築する事から始めるのでは無く、 その代わりに とてもシンプルなアルゴリズムで 手早く実装出来る物から始める方が しばしば良い習慣だと考えられている。 そして学習の問題に 私がとりかかる時は いつもまる一日、 文字通り長くとも24時間くらいで とても汚くて早く物を得ようとする。 率直に言って、まったく洗練されてないシステムだ。 そしてとても手早く汚い、 動く物を実装し、 それをクロスバリデーションのデータで テストする。 ひとたびそれを終えれば 学習曲線をプロット出来る。 これは前回のビデオで我らが議論した物だ。 そのトレーニングとテストの誤差による 学習曲線をプロットし、 それで、あなたの学習アルゴリズムが 高バイアスに陥っているのか それとも高バリアンスか はたまたそれ以外の何かかを見分けようとする。 そしてそれを用いて、 もっと多くのデータやもっと多くのフィーチャーや そういった事が役に立ちそうかを決定しようと試みる。 これが良いアプローチである理由は しばしば 学習問題を始めた時には 前もって、何が必要なのか、 より複雑なフィーチャーが必要なのか はたまたより多くのデータが必要なのか、 またはそれ以外の何かが必要なのか 知る方法がまったく無いからだ。 そして前もって エビデンス無しで 学習曲線を見ること無く あなたはどこに時間を使うべきかを 見出すのは、信じられないほど 難しいってだけ。 そしてしばしば、 とてもとても早く汚い実装でさえ、それを行う事で 学習曲線をプロット出来て これらの意思決定の助けと出来る。 つまりもしお望みならこれを、 コンピュータプログラミングにおいての いわゆる 未熟な最適化を避ける方法みたいな物と考えても良い。 そしてこれは、 単純に、直感を用いるよりも エビデンスに我らが時間を費やすべき場所を ガイドさせるようにすべきだ、 と言っているだけだ。 直感は、しばしば間違ってるから。 学習曲線をプロットする事に加えて、 もう一つ、しばしば行うととても有効な事として、 エラー分析、と呼ばれる物がある。 エラー分析とは、 例えばスパムフィルターなどを 作っている時に、 私はしばしば、 クロスバリデーションセットを見てみて、 そして私のアルゴリズムがエラーになったe-mailを 人力で見ていく、という事をする。 つまり、アルゴリズムが誤って分類した、 スパムと非スパムのe-mailを 調べていって、 そして誤分類された手本に なんらかのシステマティックなパターンを特定出来ないか、見てみるのだ。 そしてしばしば、これを行う事で、 新しいフィーチャーをデザインする事を インスパイアしてくれたり、 現在のシステムの 短所などを教えてくれて そしてそれを改善する為に 必要な事への インスピレーションを与えてくれる。 具体的に見てみよう。ここに具体的な例がある。 スパム分類器を作っているとしよう。 そしてクロスバリデーションセットに 500の手本が あるとする。 そしてこの手本に対し、 アルゴリズムはとても高いエラー率となっているとしよう。 クロスバリデーションの手本を 100通も誤分類しているとする。 その時、そこで私が行うのは、 手動でこれらの100個のエラーを精査していき、 手動でそれらをカテゴライズする、という事だ。 それは例えばe-mailの種類が何なのか、などに 基づいて、あるいは アルゴリズムがそれらを正しく分類する為の 助けとなりそうな手がかり、フィーチャーに基づいて。 具体的には、 e-mailの種類が何なのか、というのは、 これらの100通の エラーのメールを見ていった時に、 例えば誤って分類されているe-mailの中で もっとも一般的なのは 薬事関係のe-mail、 つまり基本的には 薬とかを売ろうとするe-mailと、 レプリカを売ろうとする e-mail、つまり 偽物の時計とか、偽物の何かを売ろうとするメールとか、 パスワードを盗もうとするe-mail、 またそれは、フィッシングとも呼ばれるが、そういうのもあったとする。 それはe-mailの、別の大きなカテゴリだ。
そして、それ以外のカテゴリ。 つまり、e-mailが どのカテゴリに属しているか、という観点で 実際にメールを見ていって 数え上げていく、 100通のe-mailを。すると例えば ミスラベルされているe-mailのうち、12通は 薬事関係のe-mailだと分かったとする。 そして4通は レプリカを売ろうとするe-mail、 偽物の腕時計とか、そういう物を売ろうとする物。 そしてミスラベルされたe-mailのうち 53通が、いわゆる フィッシングe-mailだったとする、 それは基本的にはあなたにパスワードを提供するように 説得しようとする物だ。そして31通がそれ以外の種類のe-mailだったとする。 そしてこれら別々のカテゴリに属する e-mailの数を数え上げる事により、 例えば、あなたは アルゴリズムが特定のe-mailに関して とても貧弱に振舞っている、と 例えばパスワードを盗もうとするe-mailに対して とても貧弱しか機能していないという事を発見したとする。 するとそれは、 あなたがその種のe-mailを もっと注意深く調べるべく労力を払う価値がある、という事を 示唆している。 そしてそれらを正しくカテゴライズ出来るような より良いフィーチャーを得られるか見てみる事にも。 そしてまた、私は、 どんな手がかりがあれば、 どんな追加のフィーチャーがあれば アルゴリズムがe-mailを分類する助けとなるかを、見てみても良い。 例えば、我らの仮説が よりe-mailをうまく分類するのを 助けてくれそうな物、フィーチャーとして 故意のミススペルを検出する、という事と、 異常なe-mailのルーティング、 そしてスパムっぽい句読点等の 記号の使い方、たとえば エクスクラメーションマークを多様する、とか、があるとする。 そしてもう一度、私は手動で 見ていって、 例えば5つのケースのこれを、 そして16のケースのこれを、 そして32のケースのこれを、 そしてその他たくさんのそれ以外の種類のe-mailも、同様に見つけたとする。 そしてもしこれが あなたが実際にクロスバリデーションセットで得られた物だとするなら、 その場合はこれはつまり 意図的なミススペルは 現実には十分にレアな問題だと告げている訳だから、 それはつまり、それを検出するアルゴリズムを 書こうと時間を費やすだけの価値が 実際には無い、という事を教えてくれる。 だが、もしあなたが スパマーがたくさんの 普通で無い句読点等の記号を用いている事を見つけたなら、 それは句読点等の記号に基づいた より洗練したフィーチャーを 開発するのに実際に時間を費やすのは やってみるだけの価値があるという事を示す 強いサインとなりうる。 つまり、この種のエラー分析は、 実際に手動で アルゴリズムの犯した過ちを 精査していくプロセスだが、 これは、しばしば、 辿るともっとも実りの多い道を示す助けと、なってくれる事がある。 そしてこれはまた、私がしょっちゅう アルゴリズムの早くて汚い実装を 推奨する理由も説明している。 我らが本当にしたい事は、 アルゴリズムにとってもっとも分類が困難な手本はどれなのかを 見つけ出す事だ。 そしてだいたいにおいて、 別々のアルゴリズム、別々の学習アルゴリズムであっても、 それらは良く、 類似したカテゴリーの手本を、困難だ、とみなす物だ。 そして早くて汚い実装を 用いる事は、 ある種のエラーを特定する為の 手早い方法を提供してくれる事が多く、 そして何が困難な手本なのかを手早く特定してくれるので、 それに労力を集中出来る。 最後に、学習アルゴリズムを開発する時には、 もう一つ有用な豆知識としては、 あなたの学習アルゴリズムを 数値的に評価する方法を 確認する事だ。 今言った事で私が意味しているのは、 もしあなたが学習アルゴリズムを開発する時には、 あなたの学習アルゴリズムを 評価した時に、単一の実数が帰ってくるような 方法を確保出来たら 信じられない程役に立つ、という事だ。 それは正確さでもいいし、エラーでもいい。 だが何にせよ、それは単一の実数値でなくてはいけなくて、それであなたの学習アルゴリズムがどれだけうまく行っているかを告げる物でなくてはならない。 この特別な概念については、 後のビデオでもっと詳細に議論するが、ここに具体的な例がある。 例えば、我らは discount, discounts, discounter, discountingなどを 同一の単語として扱うべきかを 決断したいとしよう。 それを行う一つの方法としては 例えば単純に、単語の最初の数文字だけを見る、 というのが考えられる。 例えば、仮にあなたが、 単語の最初の数文字だけを見るとすると、 これらの単語は だいたい似たような意味である事が 分かるだろう。 自然言語処理において、 これを行う方法としては、実際には ステムソフトウェア(語幹を取り出すソフトウェア)と言われるソフトウェアを用いる事だ。 もしあなたがこれを自分でやりたい、と 思ったなら、webサーチエンジンで Porter Stemmerを検索するべし。 そうすれば この種のステミングを行ってくれる かなりリーズナブルなソフトウェアを 教えてくれるだろう、 それを使えば、これら全ての discountやらdiscountsやらを同じ単語とみなしてくれる。 だが、ステムのソフトウェアを使う、というのは、 基本的には単語の 最初の数文字を見る、 というような事をするんであって、それは良くなる事もあるが悪くなる事もある。 何故悪くなる事があるのかというと、 例えばこのソフトウェアは universeとuniversityを 誤って同じ単語と みなしてしまうかもしれない。何故なら これら2つの単語は、どちらも とても似た文字で、同じアルファベットで始まっているから。 だから、スパム分類器に ステムソフトウェアを使った方が良いかを 決めるのは、 いつも簡単という訳には行かない。 さらに、エラー分析は この種のステムが良いアイデアかを 決定するには、 あまり役に立たない。 その代わりに、 あなたの分類器を助けるのに ステミングソフトウェアが 良いかどうかを判断する一番良い方法は、 とても手早く、実際に試してみて うまく行くかどうかを確認出来る方法を持っておく事だ。 そしてこれを行う為には、 数値的にあなたのアルゴリズムを評価する方法を確立しておく事は とても役に立つ事だ。 具体的には、 これを行うもっとも自然なやり方としては、 ステム有りと無しで、アルゴリズムの クロスバリデーション誤差を見てみる事だ。 つまり、もしあなたが ステム無しでアルゴリズムを走らせて、 5パーセントの誤差だったとして、 つまり5パーセントの分類誤差だったとして、 そしてステム有りでもう一度走らせて 例えば3パーセントの 分類誤差だったとすると、 この誤差の減少は 一瞬であなたに、 ステムを使うのは良さそうなアイデアだ、と教えてくれる訳だ。 この特定の例に関しては とても自然な単一実数による 評価指標が存在している。つまり、クロスバリデーション誤差だ。 我らは後に、 この種の単一実数による評価指標を得るのに もうちょっと作業が必要な例を見る事になる。 だが後のビデオで見るように、 それだけの作業をしてメトリクスを得ておく事は この種の、例えばステムを使うべきかどうか、 というような意思決定を、 より素早く行う事を可能にしてくれる。 さらにもう一つ簡単な例を挙げておこう。 例えば大文字と小文字の 区別をすべきかを 決めようとしているとしよう。 例えばこのmomという単語、 大文字のMと 小文字のmがある。 これを同じ単語とみなすべきか？ それとも別の単語とみなすべきか？ これは同じフィーチャーをみなすべきだろうか？別のフィーチャーとみなすべきだろうか？ ここでも、 我らのアルゴリズムを 評価する方法を持っているので、 ここで試してみると、 もし大文字と小文字を 区別しないでみたら、 3.2%のエラーとなり、 ゆえに私は これが単純にステムだけを使うより 悪くなっている事が分かった為、 このようにとても手早く 大文字と小文字を 区別すべきかどうかに関して 意思決定を行い、前に進む事が出来る。 だからあなたが学習アルゴリズムを 開発している時には、 しょっちゅう、たくさんの新しいアイデアとか 新しいバージョンの学習アルゴリズムなどを試す事になるだろう。 もし毎回新しいアイデアを 試す都度、 人力でたくさんの手本を精査する羽目になると すぐに、ステムを使うべきか？ 大文字と小文字を区別すべきか？などの 意思決定を行う時に 良くなるのか、悪くなるのかを見るのが 難しくなっていく事に 気づくだろう。 だが単一の実数値による 評価指標があれば、 単にそれを見て、エラーが増えたか減ったか、を見れば良い。 そしてそれを用いて、 より素早く、 新しいアイデアを試す事が出来て、 ほとんど即座にあなたの新しいアイデアが 学習アルゴリズムのパフォーマンスを 改善するか悪化させるかを知る事が出来る。 そしてこれがしばしば、 あなたをより早く、前進させてくれる。 さて、エラー分析を行うにあたっては、 テストセットでは無く、クロスバリデーションセットで行う事を 強く推奨する。 だが、世の中には テストセットでこれをやってしまう人もいる、 数学的には確実にそっちの方が 適切で無いやり方なのだが… クロスバリデーションセットで エラー分析を行う、という 推奨されている やり方に比べると。 ではこのビデオのまとめだ。 新しく機械学習の問題に取り組む時には、 ほとんど毎回私が推奨するのは、 あなたの学習アルゴリズムの 早くて汚い実装を行う事だ。 私はほとんど確実に、 早くて汚い実装に、時間を使わなさ過ぎる、という人は見た事が無い。 私が目にするのは、逆に 最初の、早くて汚いはずの実装に 時間をかけすぎる、という方ばかりを 目にする。 だからほんと。手早すぎる、と 心配しないでいい。汚すぎる、と心配しないでいい。 そうでは無く、自分の出来るかぎり早く、 何かしらを実装しよう。 そしてひとたび最初の実装を得たなら、 これはきっと、その次にあなたが 何に時間を使うべきかを決定する、 とてもパワフルなツールとなるだろう。 何故なら、まずそれの出力するエラーを見て、 この種のエラー分析を行って 何が誤りを生んでいるのかを見て、 それを使ってさらなる開発をインスパイアしていける。 次に、あなたの早くて汚い実装が、 単一実数の評価指標と 共に用いる事が出来たなら、 これは様々なアイデアを行き来する 乗り物となってくれる。 そして素早く 別々のアイデアが、 アルゴリズムのパフォーマンスを改善するかを 試していく事を可能にしてくれて、 ゆえに、何は要らないか、 何はアルゴリズムと共に使うと良いかを 素早く意思決定していく事を 可能にしてくれる。