이 동영상 강의에서, 행렬 간 곱에 대해 이야기 하려고 합니다. 우선 특별한 경우로 시작하겠습니다. 바로 벡터와 행렬의 곱에 대해서 말입니다. 우선 예제를 봅시다. 여기에 행렬과 벡터가 있습니다. 우리는 행렬과 벡터를 곱하기를 원합니다. 결과 값은 어떻게 나올까요? 이번 예제를 통해 확인해보겠습니다. 우리는 어떤 과정으로 진행되는지 확인해 봅시다. 우선 곱셈의 결과 값은, 벡터로 나올 것입니다. 우선 이 괄호를 그릴 것입니다. 나중에 돌아와서 우리가 했던 작업을 다시 봅시다. 벡터의 첫 번째 요소를 얻기 위해 저는 2개의 숫자를 사용할 것입니다. A행렬의 첫 번째 행과 행의 숫자와 이에 대응하는 수를 곱해서 더할 것입니다. 1×1 + 3×5을 계산하면 1 + 15 로 1 + 15 로 16값이 나옵니다. 여기에는 16이 들어갑니다. 2번째 행을 계산하기위에 우리는 2번째 행과 벡터를 곱할 것입니다. 4×1 + 0×5 = 결과값 4 를 가질 것 이고 여기에 숫자 4가 들어갑니다. 마지막 행을 계산하기위해 2×1 + 1×5 1×5 = 7이라는 수식을 계산하고 여기서 7이 들어갑니다. 3×2 행렬과 2×1 행렬의 곱셈 결과는 3차원 벡터로 볼 수 있고 결과값은 다음과 같습니다. 그 결과는 3×1 행렬 입니다. 왜  3×1행렬 일까요? 다른 말로 3×1 행렬은 3차원 벡터입니다. 저는 제가 했던 과정을 빠르게 깨달았습니다. 여러분은 이런 과정을 반복할 수 있다고 확실하지는 않습니다. 그러나 벡터와 행렬 곱셈 과정을 자세히 봅시다. 여기에는 행렬과 벡터가 어떻게 곱해지는지 자세히 나와 있습니다. 제가 행렬 A를 가지고 있고 여기에 벡터× 를 곱하려고 합니다. 그 결과는 벡터 y로 나타납니다. 그 결과는 벡터 y로 나타납니다. 행렬 A는 m×n 행렬입니다. m개의 row, n개의 column 가집니다. 그리고 여기에 n차원 벡터라 불리는 n×1 행렬을 곱하게 됩니다. 여기서 n과 저기 n이 매칭 되는 것입니다. 다른 말로 행렬의 column의 수라고 할 수 있습니다. column의 수는 여기서의 row의 수와 같습니다. 이것을 벡터의 차원수와 일치한다고도 이야기 합니다. 그래서 곱셈의 결과는 n차원의 벡터 y가 되는 것입니다. 그래서 곱셈의 결과는 n차원의 벡터 y가 되는 것입니다. 여기 Row들, M은 매트릭스 A의 row의 수와 같습니다. M은 매트릭스 A의 row의 수와 같습니다. M은 매트릭스 A의 row의 수와 같습니다. 여러분은 벡터 Y에 대해서 어떻게 계산하나요? 벡터 Y를 계산하면 그 과정 중에 우리는 yi값을 A의 i번째 행과 곱하게 되고 그것들을 더하게 됩니다. 그것들을 더하게 됩니다. 그래서 이것이 뜻하는 것은 다음과 같습니다. y 행렬의 첫 번째 값을 얻기 위해, A행렬의 첫 번째 행과 A행렬의 첫 번째 행과 A행렬의 첫 번째 행과 벡터x의 요소들을 곱합니다. 벡터x의 요소들을 곱합니다. 벡터x의 요소들을 곱합니다. 그래서 각 각들의 첫 번째 숫자끼리 곱셈을 합니다. 그리고 각 숫자들의 2번째 값끼리 곱셈을 진행합니다. 이후 3번째 숫자 끼리 곱셈을 진행하며, 이 과정은 마지막 숫자를 곱할 때 까지 진행합니다. 각 곱셈의 결과들을 더합니다. 각 곱셈의 결과들을 더합니다. 그 값이 y 행렬의 첫 번째 요소입니다. 이제 우리는 y 행렬의 2번째 값을 구하려고 합니다. 바로 이 요소입니다. 우리는 A행렬의 2번째 행을 이용하여 이전 과정을 반복하면 됩니다. 그래서 우리는 A행렬의 2번째 행렬과 그래서 우리는 A행렬의 2번째 행렬과 x의 각 요소들을 곱하고 그 결과 값을 다 더한 후 이것을 y행렬의 2번째 요소로 사용합니다. 우리는 이 방식은 계속 집행합니다. A행렬의 3번째 행의 값들과 x벡터의 값들을 곱해서 y값들을 구합니다. 곱한 결과 값들을 다 더한 값은 y벡터의 3번째 요소 값입니다. 이 과정을 A행렬의 마지막 행까지 반복합니다. 이것이 절차입니다. 한 가지 예제를 더 보겠습니다. 한 가지 예가 있는데 한번 행렬들이 있습니다. 하나는 3×4 행렬입니다. 하나는 3×4 행렬입니다. 다른 하나는 4차원 벡터입니다. 다른 말로 4×1행렬입니다. 이것이 그 결과이며, 결과 값은 3차원 벡터입니다. 결과 값은 3차원 벡터입니다. 이 벡터는 3개의 공간을 가지는 벡터를 그리겠습니다. 그러면 계산을 해봅시다. 우선 첫 번째 요소를 계산하기 위해 우리는 4개의 수와 벡터x를 곱합니다. 1×1 + 2×3 + 1×2 + 5×1 이 값은 1×1 + 2×3 + 1×2 + 5×1 이 값은 1+6, 2+5 결과 값은 14입니다. 1+6, 2+5 결과 값은 14입니다. 이제 2번째 값을 구해보자, 이제 2번째 값을 구해보자, 이 행과 벡터를 곱하면 됩니다. (0×1) + 3. 이 행과 벡터를 곱하면 됩니다. (0×1) + 3. 0×1+ 3×3 + 0×2 + 4×1 0×1+ 3×3 + 0×2 + 4×1 0×1+ 3×3 + 0×2 + 4×1 이 계산 결과는 9+4로 13입니다. 이 계산 결과는 9+4로 13입니다. 마지막 값을 구하기 위해, 우리는 마지막 행을 사용합니다. 우리는 –1 한 개, -2 한 개, 나머지는 양수입니다. -2 한 개, 나머지는 양수입니다. -1×1 + (-2)×3 + 0×2 + 0×1을 계산하면 -1×1 + (-2)×3 + 0×2 + 0×1을 계산하면 -1×1 + (-2)×3 + 0×2 + 0×1을 계산하면 –7 + 0 이므로 최종 값은 -7입니다. –7 + 0 이므로 최종 값은 -7입니다. –7 + 0 이므로 최종 값은 -7입니다. 알겠죠? 그래서 최종적으로 구한 벡터 값은 14, 13, -7이다. 이건 검은색으로 쓰겠습니다. 우리의 예상대로 결과 값은 3×1 행렬입니다. 우리의 예상대로 결과 값은 3×1 행렬입니다. 이것이 행렬과 벡터의 곱셈을 하는 방법입니다. 이번 슬라이드에서 많은 것을 진행되었습니다. 이번 슬라이드에서 많은 것을 진행되었습니다. 만약 여러분이 이 과정들이 정확하게 이해되지 않으면, 잠시 영상을 멈추고 천천히 주의 깊게 천천히 주의 깊게 계산식을 다시 살펴보세요, 천천히 주의 깊게 계산식을 다시 살펴보세요, 이번 과정이 이해되도록 노력 하세요 이번 과정이 이해되도록 노력 하세요 이번 과정이 이해되도록 노력 하세요 이번 과정이 이해되도록 노력 하세요 마지막으로 간단한 트릭을 보여드리겠습니다. 우리는 각기 다른 사이즈의 4개의 집을 가지고 있습니다. 우리는 각기 다른 사이즈의 4개의 집을 가지고 있습니다. 우리는 각기 다른 사이즈의 4개의 집을 가지고 있습니다. 집 가격을 예측하는 함수를 가지고 있는데, 집 가격을 예측하는 함수를 가지고 있는데, 우리는 이것을 계산하여, h(×) 각 집의 가격을 예측하려고 합니다. h(×) 각 집의 가격을 예측하려고 합니다. 동시에 우리 집들에 대한 가격을 예측하는 적절한 방법이 있습니다. 동시에 우리 집들에 대한 가격을 예측하는 적절한 방법이 있습니다. 가설함수에 집들의 가격을 모두 적용하는 것입니다. 행렬 벡터 곱셈을 이용한 적절한 방법이 있습니다. 행렬 벡터 곱셈을 이용한 적절한 방법이 있습니다. 행렬 벡터 곱셈을 이용한 적절한 방법이 있습니다. 우리가 해야 할 것이 여기 있습니다. 다음과 같이 행렬을 만듭니다. 행렬을 다음과 같이 1, 1, 1, 1로 구성하고 다음은 집들의 사이즈를 채웁니다. 다음은 집들의 사이즈를 채웁니다. 그리고 우리는 벡터를 만듭니다. 사용하는 벡터는 2개의 값을 가지는데 2개의 값을 가지는데 –40과 0.25입니다. 이건 2개의 계수입니다. 바로 데이터 0, 1입니다. 이건 2개의 계수입니다. 바로 데이터 0, 1입니다. 이제 우리가 할 일은 행렬과 벡터를 곱하는 것입니다. 이제 우리가 할 일은 행렬과 벡터를 곱하는 것입니다. 이제 우리가 할 일은 행렬과 벡터를 곱하는 것입니다. 여기서 곱은 곱셈 기호를 뜻합니다. 우리는 무엇을 얻을 가요? 이건 4×2 행렬입니다. 이건 4×2 행렬입니다. 이건 2×1행렬입니다. 결과 값은 4×1벡터입니다. 결과 값은 4×1벡터입니다. 결과 값은 4×1벡터입니다. 4×1행렬이 결과 값이며 4×1행렬이 결과 값이며 이건 4차원 벡터입니다. 이건 4차원 벡터입니다. 4개의 실수 값을 가지는 요소 값들 쓰겠습니다. 4개의 실수 값을 가지는 요소 값들 쓰겠습니다. 4개의 실수 값을 가지는 요소 값들 쓰겠습니다. 이제 첫 번째 요소 값을 계산 해보겠습니다. 값을 계산 해보겠습니다. 우리는 첫 번째 행과 가져오고 이 값과 벡터 값을 곱하겠습니다. 다음 식 -40×1 + 4.25×2104을 계산하면 -40×1 + 4.25×2104을 계산하면 그런데 이전 슬라이드에서는 그런데 이전 슬라이드에서는 저는 1×–40 그리고 2104×0.25 적었는데, 저는 1×–40 그리고 2104×0.25 적었는데, 이건 전혀 문제가 되지 않습니다. -40×1 와 1×–40. 2개는 같은 것입니다. 그래서 첫 번째 값은 h(2104)입니다. 그래서 첫 번째 값은 h(2104)입니다. 이것이 우리의 첫 번째 집의 예측 가격입니다. 이것이 우리의 첫 번째 집의 예측 가격입니다. 2번째 요소는 어떻게 될까요?, 여러분이 제가 2번째 요소 값을 계산할 때 확인하기를 바랍니다. 그렇지 않습니까? 이거와 벡터를 곱하면 됩니다. -40×1 + 0.25×1416 이걸 계산하면 -40×1 + 0.25×1416 이걸 계산하면 h(1416)을 계산하는 것입니다. 맞지요? 그렇지 않습니까? 세 번째와 4번째 요소들도 같은 방법으로 계산합니다. 세 번째와 4번째 요소들도 같은 방법으로 계산합니다. 세 번째와 4번째 요소들도 같은 방법으로 계산합니다. 그리고 여기, 제가 초록색 박스로 그린 부분은 실수입니다. 이건 하나의 실수이고 보라색 박스로 가리키는 것 , 퍼플, 마젠타 색으로 , 퍼플, 마젠타 색으로 칠한 각 박스들도 실수입니다. 칠한 각 박스들도 실수입니다. 오른쪽에 이것들은 오른쪽에 이것들은 4×1 행렬의 값이며 이건 4차원 벡터입니다. 여러분이 이것을 SW방식으로 구현할 때 SW방식으로 구현할 때 , 4개의 집을 가지고 있고, 여러분이 집값을 예측하는 hypothesis를 사용하고 싶을 때, 집들의 예측가격을 나타내는 행렬 Y를 사용할 수 있습니다. 이것이 의미하는 건 여러분은 이것을 코드로 쓸 수 있다는 것입니다. 이것이 의미하는 건 여러분은 이것을 코드로 쓸 수 있다는 것입니다. 나중에 프로그램 언어나 octave에 대해 이야기 할 때, 나중에 프로그램 언어나 octave에 대해 이야기 할 때, 여러분은 확실히 이것을 코드로 작성할 수 있을 것입니다. 여러분은 예측 식을 데이터 행렬×파라미터 값으로 쓸 수 있고, 행렬×파라미터 값으로 쓸 수 있고, 데이터와 파라미터 값들이 있으면 행렬과 벡터의 곱셈으로 표기됩니다. 곱셈으로 표기됩니다. 만약 여러분이 이 변수 예측을 할 경우, 만약 여러분이 이 변수 예측을 할 경우, 나쁜 글씨 때문에 죄송합니다. 적절한 라이브러리를 이용하여 행렬 벡터의 곱을 구현할 수 있습니다. 만역 여러분들이 구현을 한다면, 결과 값은 4차원 벡터로 나올 것이고 오른쪽과 같이 여러분께 예측가격을 알려 줄 것입니다. 그리고 여러분이 행렬 벡터 곱의 그리고 여러분이 행렬 벡터 곱의 대안으로 다음과 같은 방법이 있습니다. for I = 1~4입니다. 그리고 수 천개의 집 가격을  계산한다면 for I = 1~수천 이라고 표기하여 사용할수 있습니다. 그리고 prediction(i) 쓰면 됩니다. 많은 수의 데이터에서 더욱 효율적으로 사용 가능하며, 여러분이 훨씬 많은 집을 가진 경우 여러분이 훨씬 많은 집을 가진 경우 여러분은 구현 시 4개의 집을 예측하려고 여러분은 구현 시 4개의 집을 예측하려고 하지 않고 수천 개의 집을 예측하려고 할 것입니다. 컴퓨터 내부에서 위 과정을 구현하려고 한다면, 컴퓨터 내부에서 위 과정을 구현하려고 한다면, 여러 개의 언어를 이용할수 있습니다. 이건 Octave뿐 만아니라 다른 자바, 파이썬 같은 하이레벨 언어에도 해당합니다. 왼쪽 같은 스타일로 코드를 작성하면 여러분은 코드를 간단히 만들 수 없습니다. 만들 수 없습니다. 왜냐하면 데이터들의 형식보다 왜냐하면 데이터들의 형식보다 하나의 코드를 쓴 것이기 때문입니다. 몇 가지 이유 때문에, 우리는 나중에 보겠지만 모든 집의 가격을 예측하는 것을 모든 집의 가격을 예측하는 것을 만들기 위해 왼쪽 방법이 당신이 수식을 적은 오른쪽 방법 보다 더 효율적으로 계산합니다. 나중에 vectorization에 대해 이야기 할 때 나중에 vectorization에 대해 이야기 할 때 나중에 vectorization에 대해 이야기 할 때 이야기 하겠지만, vectorization는 좀 더 간단한 코드는 아니지만 훨씬 효율적인 방법입니다. 이것이 행렬과 벡터의 곱셈입니다. 우리는 이러한 곱셈을 다른 모델에서 regression를 개발하기 위한 연산자로 잘 활용할 수 있습니다. 다음 영상에서는 우리는 이것에 대해 이야기하고 이것을 일반화하기 위해 행렬끼리의 곱셈에 대해 이야기 하겠습니다.