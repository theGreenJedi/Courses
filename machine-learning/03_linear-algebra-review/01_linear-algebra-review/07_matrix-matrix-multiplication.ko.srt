1
00:00:00,290 --> 00:00:03,747
이번 영상에서는 우리는 행렬×행렬 대해 이야기 할 것입니다.

2
00:00:03,747 --> 00:00:06,630
이번 영상에서는 우리는 행렬×행렬 대해 이야기 할 것입니다.

3
00:00:06,630 --> 00:00:10,170
우리가 이전에 선형회귀 방식에서

4
00:00:10,170 --> 00:00:13,123
⊝0, ⊝1 parameters를 gradient descent을 사용하지 않고

5
00:00:13,123 --> 00:00:16,270
어떻게 찾을지에 대해 이야기 한 적 있습니다.

6
00:00:16,270 --> 00:00:18,810
이 알고리즘에 대해 이야기 하려고 합니다.

7
00:00:18,810 --> 00:00:22,840
우선은 이 알고리즘을 알기 위해서 여러분은 행렬 간의 곱셈을 알아야 합니다.

8
00:00:24,090 --> 00:00:27,440
보통 다음과 같은 예제를 가지고 시작합니다.

9
00:00:28,840 --> 00:00:32,610
제가 2개의 행렬을 가지고 있고 2개를 곱하려고 합니다.

10
00:00:32,610 --> 00:00:34,805
우리는 하나의 예제를 통해,

11
00:00:34,805 --> 00:00:38,060
어떤 일이 과정이 일어나는지 이야기 하겠습니다.

12
00:00:38,060 --> 00:00:43,460
제가 할 첫 번째 일은 오른쪽 행렬에서

13
00:00:43,460 --> 00:00:46,480
하나의 열을 가져오는 것입니다.

14
00:00:46,480 --> 00:00:49,240
또한 왼쪽 행렬에서 하나의 행을 가져오고 각각 곱합니다.

15
00:00:49,240 --> 00:00:53,790
벡터의 첫 번째 열을 곱한 것처럼 말입니다.

16
00:00:55,180 --> 00:00:59,770
이결과 저는 (11, 9)벡터를 얻게 될 것입니다.

17
00:00:59,770 --> 00:01:03,370
이건 이전 영상에서

18
00:01:03,370 --> 00:01:04,790
본 행렬, 벡터 곱과 같습니다.

19
00:01:06,070 --> 00:01:08,570
본 행렬, 벡터 곱과 같습니다.

20
00:01:08,570 --> 00:01:12,620
이후 2번째 값을 계산하기 위해 우리가 할 일은

21
00:01:12,620 --> 00:01:16,550
오른쪽 행렬에서 2번째 열을 가져오는 것입니다.

22
00:01:16,550 --> 00:01:20,430
이후 왼쪽 행렬에서 이 값들을 가져와,

23
00:01:20,430 --> 00:01:24,960
오른쪽의 두 번째 열들과 곱셈을 합니다.

24
00:01:24,960 --> 00:01:28,840
반복하면 됩니다. 이것 여러분이

25
00:01:28,840 --> 00:01:30,580
이전 영상에서 본 행렬과 벡터의 곱셈입니다.

26
00:01:30,580 --> 00:01:35,540
행렬 과 벡터의 곱을 계산하면 여러분은 (10,14) 벡터를 얻을 것입니다.

27
00:01:35,540 --> 00:01:39,650
여러분은 행렬 벡터 곱을 연습하고 싶을 것입니다.

28
00:01:39,650 --> 00:01:42,159
우선 영상을 잠시 멈추시고 계산 값과 비교해 보세요.

29
00:01:43,260 --> 00:01:46,880
우리는 2개의 결과를 얻었고 저는 이 2개를 같이 배치하겠습니다.

30
00:01:46,880 --> 00:01:48,470
이것이 바로 정답입니다.

31
00:01:48,470 --> 00:01:53,060
이 곱의 결과는 2x2행렬입니다.

32
00:01:53,060 --> 00:01:58,005
이제 저기에 계산 결과 값

33
00:01:58,005 --> 00:01:59,950
(11, 9)를 넣어 행렬을 채웁니다.

34
00:01:59,950 --> 00:02:07,510
행렬의 2번째 열에 (10, 14)도 채웁니다.

35
00:02:07,510 --> 00:02:12,350
이건 행렬과 다른 행렬이 곱해지는 기계적인 방법에 대한 것입니다.

36
00:02:12,350 --> 00:02:15,810
여러분은 기본적으로 2개의 행렬 중 하나의 열을 볼 것이고

37
00:02:15,810 --> 00:02:17,550
, 이것들을 조합합니다.

38
00:02:17,550 --> 00:02:20,252
다시 말해, 두 번째에서는 우리는  좀 더 주의 있게 진행해보겠습니다.

39
00:02:20,252 --> 00:02:25,494
그러나 이번에도 첫 번째 예제는 2x3행렬입니다.

40
00:02:25,494 --> 00:02:31,270
여기에 3x2행렬을 곱하는 것입니다.

41
00:02:31,270 --> 00:02:36,520
곱셈의 결과 값은 2x2행렬이 나올 것입니다.

42
00:02:36,520 --> 00:02:39,744
다시 말해 2번째 경우에 대해서 왜 이렇게 되는지 확인해야 합니다.

43
00:02:39,744 --> 00:02:42,730
이게 계산 과정입니다.

44
00:02:42,730 --> 00:02:46,540
이제 좀 더 자세히 보고, 무슨 일이 일어나는지 봅시다.

45
00:02:46,540 --> 00:02:47,480
여기 좀 더 자세히 나와 있습니다.

46
00:02:47,480 --> 00:02:52,550
저는 행렬 A를 가지고 있고 이것을 행렬 B와 곱하려고 합니다.

47
00:02:52,550 --> 00:02:54,540
그 결과는 행렬 C입니다.

48
00:02:55,720 --> 00:03:00,300
여러분은 오직 차원의 크기가 일치하는 2개의 행렬을 곱할 수 있습니다.

49
00:03:00,300 --> 00:03:04,630
A는 mxn 행렬 m은 열의수이고 n은 행의 수입니다.

50
00:03:04,630 --> 00:03:07,000
우리는 n x o 행렬을 곱합니다.

51
00:03:07,000 --> 00:03:10,680
이 n과 저 n은 반드시 일치해야 합니다.

52
00:03:10,680 --> 00:03:13,340
첫 번째 행렬의 열의 수와

53
00:03:13,340 --> 00:03:16,830
2번째 행렬의 행의 수가 일치해야 합니다.

54
00:03:16,830 --> 00:03:25,470
그 결과는 C같은  m x o 행렬입니다

55
00:03:25,470 --> 00:03:30,220
이전 영상에서 우리가 한 것들은 o가 모두 1에

56
00:03:30,220 --> 00:03:32,400
대응하는 경우였습니다.

57
00:03:32,400 --> 00:03:35,540
이 경우 B는 벡터인 경우입니다.

58
00:03:35,540 --> 00:03:40,930
그러나 이제 우리는 o가 1보다 큰 경우를 다룹니다.

59
00:03:40,930 --> 00:03:46,690
여기 2개의 행렬을 곱하는 방법입니다.

60
00:03:46,690 --> 00:03:51,712
B행렬의 첫 번째 열을 가져오는데 이것을 벡터로 취급하겠습니다.

61
00:03:51,712 --> 00:03:57,960
그리고 행렬 A와 행렬B의 첫 번째 열과 곱하겠습니다.

62
00:03:57,960 --> 00:04:03,980
이 결과는 n x 1 벡터이고 다음과 같이 쓸 수 있습니다.

63
00:04:05,220 --> 00:04:11,880
B의 2번째 열을 가져오겠습니다.

64
00:04:11,880 --> 00:04:14,820
이것도 n x 1 벡터입니다.

65
00:04:14,820 --> 00:04:17,130
이 열을 여기 있고 nx1입니다.

66
00:04:17,130 --> 00:04:18,810
이건 n번째 벡터입니다.

67
00:04:18,810 --> 00:04:22,460
nx1 벡터와 곱셈을 진행합니다.

68
00:04:22,460 --> 00:04:28,600
그 결과는 m 차원의 벡터입니다. 이것을 여기에 쓰겠습니다.

69
00:04:29,750 --> 00:04:34,860
이제 우리는 3번째 열을 가져오고 이것을 행렬과 곱합니다.

70
00:04:34,860 --> 00:04:37,530
우리는 m차원 벡터를 얻습니다.

71
00:04:37,530 --> 00:04:41,200
그리고 이 작업을 마지막 열까지 계속합니다.

72
00:04:41,200 --> 00:04:45,230
마지막 열과 행렬을 곱하면 여러분은 C행렬의 마지막 열을 구할 수 있습니다.

73
00:04:46,510 --> 00:04:50,198
다시 말해서, C행렬의

74
00:04:50,198 --> 00:04:55,154
i번째 열은 행렬 A를 통해 얻어지는데

75
00:04:55,154 --> 00:05:01,149
행렬 A와 B행렬의 b번째 열을 곱하면 됩니다.

76
00:05:01,149 --> 00:05:05,080
1부터 o번 까지 이 과정을 계산합니다.

77
00:05:05,080 --> 00:05:10,190
그리고 이건 우리가 C행렬을 계산하한 과정을 요약한 것입니다.

78
00:05:11,530 --> 00:05:13,660
다음 예제를 보시죠.

79
00:05:13,660 --> 00:05:17,300
2개의 행렬을 곱하려고 합니다.

80
00:05:17,300 --> 00:05:24,230
2번째 행렬에서 첫 번째 열을 우선 가져옵니다.

81
00:05:24,230 --> 00:05:29,670
이건 이전 슬라이드에 행렬 B입니다.

82
00:05:29,670 --> 00:05:32,670
그리고 저는 이 행렬과 이 벡터를 가지고 곱합니다.

83
00:05:32,670 --> 00:05:35,340
빨리 계산해 보세요.

84
00:05:35,340 --> 00:05:41,332
계산하면 (1, 3)x(0, 3) 은

85
00:05:41,332 --> 00:05:46,168
1x0 + 3x3 식이 나옵니다.

86
00:05:46,168 --> 00:05:51,255
두 번째 요소는 (2, 5)x(0, 3) 을

87
00:05:51,255 --> 00:05:55,488
곱하면 되고 수식은 2x0 + 5x3입니다.

88
00:05:55,488 --> 00:06:00,748
그 결과는 (9, 15)입니다.

89
00:06:00,748 --> 00:06:03,158
초록색으로 표시하겠습니다.

90
00:06:03,158 --> 00:06:07,948
(9,15) 입니다.

91
00:06:07,948 --> 00:06:13,552
자, 이제 우리는 2번째 열을 가져올 것 입니다.

92
00:06:13,552 --> 00:06:16,948
그리고 이에 해당하는 계산을 할 것입니다.

93
00:06:16,948 --> 00:06:21,608
행렬과 벡터 (1,2)를 곱합니다.

94
00:06:21,608 --> 00:06:24,731
빠르게 계산하면

95
00:06:24,731 --> 00:06:30,150
1x1 + 3x2이고 이 행입니다.

96
00:06:30,150 --> 00:06:31,168
다른 하나도 계산하면

97
00:06:31,168 --> 00:06:33,972
2x1 + 5x2 이고,

98
00:06:33,972 --> 00:06:39,577
이건 1x1 + 3x1 = 7

99
00:06:39,577 --> 00:06:45,184
이건 1x1 + 3x1 = 7

100
00:06:45,184 --> 00:06:51,219
그리고 2x1 + 5x2 = 12입니다.

101
00:06:51,219 --> 00:06:55,570
그리고 2x1 + 5x2 = 12입니다.

102
00:06:55,570 --> 00:06:59,896
그래서 2개의 결과값

103
00:06:59,896 --> 00:07:03,715
행렬이 얻습니다.

104
00:07:03,715 --> 00:07:08,820
각 결과는 여기로 넣습니다.

105
00:07:08,820 --> 00:07:13,937
(9,15) 랑 (4,12)입니다.

106
00:07:13,937 --> 00:07:16,950
(9,15) 랑 (4,12)입니다.

107
00:07:16,950 --> 00:07:22,547
여러분도 알듯이 2x2 행렬과 2x2행렬의

108
00:07:22,547 --> 00:07:27,930
곱셈 결과의 차원 수는 첫 번째 2와 뒤쪽의 2를 곱한 것입니다.

109
00:07:27,930 --> 00:07:31,950
그 결과는 2x2입니다.

110
00:07:34,900 --> 00:07:39,839
마지막으로 행렬 곱셈, 예를 하나 더 보여주겠습니다.

111
00:07:39,839 --> 00:07:41,040
마지막으로 행렬 곱셈, 예를 하나 더 보여주겠습니다.

112
00:07:41,040 --> 00:07:47,019
말하기 전에 우리는 가격 예측이 필요한 4개의 집이 있습니다.

113
00:07:48,470 --> 00:07:53,780
지금은 3개의 hypothesis함수 식이 오른쪽에 있습니다.

114
00:07:53,780 --> 00:07:56,380
만약 여러분이 모든 hypothesis함수식을

115
00:07:56,380 --> 00:07:59,480
4개의 집 모두에 적용하고 싶으시면,

116
00:07:59,480 --> 00:08:04,030
행렬곱셈을 이용하여 효율적으로 진행 할 수 있습니다.

117
00:08:04,030 --> 00:08:09,050
왼쪽에는 일반적인 행렬이 있습니다.

118
00:08:09,050 --> 00:08:15,620
이전 집 가격 행렬과 동일한 행렬입니다.

119
00:08:15,620 --> 00:08:22,486
제가 할 일은 다른 행렬을 만드는 것입니다.

120
00:08:22,486 --> 00:08:27,572
첫 번째 열은 (-40, 0.25) 이고

121
00:08:27,572 --> 00:08:33,189
2번째 열은 (200, 0.1)입니다.

122
00:08:33,189 --> 00:08:37,930
그리고 2개의 행열 곱한다면,

123
00:08:37,930 --> 00:08:44,560
여러분은 푸른색으로 칠한 첫 번째 열을 찾아야 합니다.

124
00:08:44,560 --> 00:08:46,160
첫 번째 열을 어떻게 가져올 수 있나요?

125
00:08:47,430 --> 00:08:51,080
행렬끼리의 곱셈 절차는 첫 번째 열을 가져오는 방법

126
00:08:51,080 --> 00:08:56,330
그리고 이것을 곱하는 것입니다.

127
00:08:56,330 --> 00:09:01,970
이전 영상에서 우리는 1번 hypothesis를 이용하여

128
00:09:01,970 --> 00:09:07,540
집 가격을 예측하는 것을 보았습니다. 1번 hypothesis는 여기 있습니다.

129
00:09:08,790 --> 00:09:10,810
2번째 열은 어떻게 할까요?

130
00:09:10,810 --> 00:09:13,040
2번째 열입니다.

131
00:09:13,040 --> 00:09:15,050
2번째 열은

132
00:09:15,050 --> 00:09:19,340
2번째 hypothesis의 예측 값이 됩니다.

133
00:09:19,340 --> 00:09:23,541
2번째 hypothesis의 예측 값이 됩니다.

134
00:09:23,541 --> 00:09:29,319
3번째 열도 이와 유사합니다.

135
00:09:29,319 --> 00:09:33,400
3번째 열도 이와 유사합니다.

136
00:09:34,450 --> 00:09:36,890
저는 모든 과정을 자세히 진행하지는 않았습니다.

137
00:09:36,890 --> 00:09:41,600
그러나 여러분이 영상을 잠시 멈추고 여러분 스스로 계산을 확인해보세요,

138
00:09:41,600 --> 00:09:44,120
저의 주장이 맞는지 아닌지를 비교해보세요

139
00:09:44,120 --> 00:09:48,290
이 2개의 행렬을 만듦으로써,

140
00:09:48,290 --> 00:09:54,000
여러분은 3개의 hypothesis에 대해 4개의 집 크기를

141
00:09:54,000 --> 00:09:59,860
이용하여 12개의 가격을 예상하는 것에  빠르게 적용하였습니다.

142
00:10:00,930 --> 00:10:05,902
하나의 행렬 곱을 이용하여 12개의 예상 가격을 다루었습니다.

143
00:10:05,902 --> 00:10:10,760
더 좋은 것은 행렬곱을 진행하기

144
00:10:10,760 --> 00:10:13,852
위한 많은 좋은 linear algebra 라이브러리가 있다는 것입니다.

145
00:10:13,852 --> 00:10:16,742
위한 많은 좋은 linear algebra 라이브러리가 있다는 것입니다.

146
00:10:16,742 --> 00:10:21,518
또 여러분이 괜찮은 프로그램 언어를 사용할 수 있기도 하고요

147
00:10:21,518 --> 00:10:22,072
또 여러분이 괜찮은 프로그램 언어를 사용할 수 있기도 하고요

148
00:10:22,072 --> 00:10:25,436
확실히 인기있는 10개의 프로그램 언어들은

149
00:10:25,436 --> 00:10:27,935
좋은 linear algebra 라이브러리를 가지고 있을 것입니다.

150
00:10:27,935 --> 00:10:31,295
그리고 좋은 linear algebra 라이브러리는

151
00:10:31,295 --> 00:10:35,840
효율적으로 행렬 곱을 계산하는 것에 최적화 되어 있습니다.

152
00:10:35,840 --> 00:10:41,333
병렬 계산을 이점을 가지며, 여러분의 멀티 코어를

153
00:10:41,333 --> 00:10:47,070
가지고 있는 컴퓨터가 이 일을 할 수도 있습니다.

154
00:10:47,070 --> 00:10:51,685
하나의 코어를 가진 경우는 SIMD라고 불리는

155
00:10:51,685 --> 00:10:56,310
병행 프로그램을 이용하는 방법도 있습니다.

156
00:10:56,310 --> 00:10:59,410
여러분이 효율적으로 행렬 곱을 사용하기 위한 많은

157
00:10:59,410 --> 00:11:03,720
위한 많은 프리 라이브러리가  프리 라이브러리가 있습니다. 여러분은

158
00:11:03,720 --> 00:11:08,440
많은 hypothesis들을 가지고 여러 개의 예측 값을 효율적으로 처리 할 수 있습니다.있습니다. .