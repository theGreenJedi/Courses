W tym nagraniu chciałbym zacząć rozmawiać o tym, jak pomnożyć przez siebie 2 macierze. Zaczniemy od przypadku szczególnego: tj. mnożenia macierzy przez wektor - mnożenia macierzy i wektora. Zacznijmy od przykładu. Mamy tu macierz, a tutaj wektor; teraz powiedzmy, że chcemy pomnożyć tę macierz przez ten wektor - jaki będzie wynik? Pozwól, że wykonam ten przykład, a potem cofniemy się o krok i wyjaśnimy sobie, co
oznaczają poszczególne etapy. Okazuje się, że wynikiem takiego mnożenia będzie wektor. Teraz rozwiążę ten przykład, a potem cofniemy się i zobaczymy, co zrobiłem. Aby otrzymać pierwszy element tego wektora, wezmę te dwie liczby i pomnożę je przez pierwszy wiersz macierzy, a potem dodam odpowiednie liczby. Mamy 1 x 1, bierzemy 3 i mnożymy przez 5; to będzie 1 + 15 = 16. Wpisuję tu 16. Teraz drugi wiersz. Drugi element uzyskam, biorąc drugi wiersz i mnożąc go przez ten wektor. Mam więc 4*1 plus 0*5, co daje nam 4, więc wpiszę tu 4. Wreszcie ostatni element: 2 * 1 plus 1 * 5, a więc 2 plus 5, co równa się 7, więc wpisuję tutaj liczbę 7. Okazuje się, że wynikiem mnożenia tej macierzy 3 x 2 przez macierz 2 x 1, która jest też po prostu 2-wymiarowym wektorem, wynikiem jest macierz 3 x 1, a macierz 3 x 1 to, innymi słowy, po prostu 3-wymiarowy wektor. Wiem, że zrobiłem to bardzo szybko, i być może nie jesteś pewna/y, czy zdołasz powtórzyć ten proces samodzielnie, ale przyjrzymy się dokładniej temu, co tu się stało, oraz jak wygląda proces mnożenia
macierzy przez wektor. Oto szczegółowa instrukcja, jak mnożyć macierz przez wektor: powiedzmy, że mamy macierz A, którą chcemy pomnożyć przez wektor x. Wynikiem będzie pewien wektor y. Tak więc macierz A jest macierzą m x n, więc ma m wierszy i n kolumn; będziemy mnożyć ją przez macierz n x 1, innymi słowy:
przez wektor n-wymiarowy. Okazuje się, że to "n" tutaj musi zgadzać się z tym "n" tutaj. Innymi słowy: liczba kolumn macierzy, a więc liczba n kolumn, liczba kolumn tutaj, musi być równa liczbie wierszy tutaj; musi zgadzać się z wymiarem wektora. Wynikiem tego mnożenia będzie wektor m-wymiarowy Dlaczego? Liczba wierszy tutaj - "m", musi być równa liczbie wierszy macierzy A. A więc jak właściwie obliczamy ten wektor y? Cóż, okazuje się, że aby obliczyć wektor y, aby dostać yi, mnożymy i-ty wiersz macierzy A przez elementy wektora x i dodajemy je do siebie. Oto, co mam na myśli: Aby uzyskać pierwszy element y, tę pierwszą liczbę - czymkolwiek ona będzie - weźmiemy pierwszy wiersz macierzy, A i przemnożymy element po elemencie przez elementy wektora x. Biorę więc pierwszą liczbę, mnożę przez tę pierwszą liczbę; następnie biorę drugą liczbę i mnożę
przez tę drugą liczbę. Bierzemy tę trzecią liczbę, czymkolwiek by ona nie była, mnożę przez trzecią liczbę, i tak dalej, aż dotrzemy do końca. Dodam teraz wyniki tych mnożeń, i okaże się, że wynik dodawania będzie naszym pierwszym
elementem y. Teraz weźmiemy drugi element y -- ten element. Teraz bierzemy drugi wiersz A i powtarzamy całą procedurę. Bierzemy więc drugi wiersz A, i mnożymy go element po elemencie przez elementy x, a potem dodajemy wyniki mnożeń, co da nam drugi element y. Teraz powtarzamy całość: bierzemy trzeci wiersz A, mnożymy przez wektor x, dodajemy wyniki, otrzymując element trzeci, i tak dalej, aż dotrzemy do ostatniego wiersza tutaj, jasne? Tak wygląda procedura. Zróbmy jeszcze jeden przykład. Oto przykład: spójrzmy na wymiary. Mamy tu macierz 3 x 4. Tu mamy 4-wymiarowy wektor, lub macierz 4 x 1, a wynikiem, tzn. wynikiem mnożenia, będzie wektor 3-wymiarowy. Zapisuję wektor z miejscem na 3 elementy... Zróbmy to teraz -- wykonajmy mnożenie. Pierwszy element: wezmę te 4 liczby i pomnożę je przez wektor x. Mamy 1 * 1 + 2 * 3 + 1 * 2 + 5 * 1, co równa się 1 + 6 + 2 + 5, co daje 14. Teraz drugi element: biorę ten wiersz i mnożę go przez ten wektor, stąd mam: 0*1 + 3*3 + 0*2 + 4*1, co równa się 9 + 4, co daje 13. Wreszcie ostatni element: wezmę ostatni wiersz, a więc mam -1*1, - 2*3 (czy też + (-2*3)), + 0*2 + 0*1, a więc mamy -1 - 6, co daje nam -7, więc wynik to -7. Ok? Tak więc ostateczna odpowiedź to wektor (napiszę ... ... to bez kolorów): [14 ... ... 13 -7]. I, zgodnie z obietnicą, wynikiem jest macierz 3 x 1. A więc tak mnoży się macierz przez wektor. Wiem, że wiele wydarzyło się na tym slajdzie, i być może nie jesteś na 100% pewien/pewna, skąd wzięły się te liczby. W takim wypadku zatrzymaj materiał, spokojnie przyjrzyj się tym wszystkim obliczeniom, które właśnie wykonaliśmy, i spróbuj upewnić się, że rozumiesz każdy etap tego, jak doszliśmy do tych liczb: [14 13 -7]. Pozwól, że na koniec pokażę Ci mały trik. Powiedzmy, że mamy zbiór 4 domów -- 4 domy o takich powierzchniach. Powiedzmy teraz, że mamy hipotezy przewidujące cenę sprzedaży domów, i powiedzmy, że chcę obliczyć h(x) dla każdego z czterech domów. Okazuje się, że jest sprytny sposób, aby zastosować te hipotezy do wszystkich moich domów za jednym zamachem. Okazuje się, że jest sprytny sposób, aby potraktować to jako mnożenie macierzy przez wektor. Oto, jak się do tego zabrać. Stworzę następującą macierz: moja macierz będzie miała elementy [1 1 1 1], a tutaj wpiszę powierzchnie moich czterech domów, a potem stworzę też wektor, który to wektor będzie zawierał dwa elementy, a mianowicie: [-40 0,25]. Są to nasze 2 współczynniki: theta0 oraz theta1. Wezmę teraz tę macierz oraz ten wektor, i pomnożę je przez siebie, tzn. to przez to (to jest symbol mnożenia). Co więc otrzymam? To jest macierz 4 x 2. To jest macierz 2 x 1. Wynikiem będzie więc wektor 4 x 1. W porządku. Tak więc pozwól, że napiszę: wynikiem będzie macierz czy też, tak naprawdę wektor 4-wymiarowy. Wpiszę teraz do niego jeden z moich 4 elementów, jedną z 4 liczb rzeczywistych. Okazuje się, że pierwszy element tego wyniku uzyskamy, biorąc to, i mnożąc przez ten wektor. A więc to będzie: -40*1 + 0,25*2104. Przy okazji: na wcześniejszych slajdach pisałem: 1*(-40) oraz 2104*0,25, ale kolejność nie ma znaczenia, prawda? -40*1 to to samo, co 1*(-40). Ten pierwszy element, to oczywiście h zastosowane do 2104. A więc jest to tak naprawdę przewidywana cena mojego pierwszego domu. A co z drugim elementem? Mam nadzieję, że widzisz, jak dojdę do drugiego elementu. Zgadza się? Wezmę to i pomnożę przez mój wektor. A więc to będzie -40 * 1 + 0,25 * 1416. a więc będzie to będzie h(1416) Zgadza się? To samo będzie z trzecim i czwartym elementem tego wektora 4 x 1. Tak dla jasności: ta część, którą zaznaczyłem zieloną ramką, to liczba rzeczywista, ok? To pojedyncza liczba rzeczywista. Z kolei to tutaj oznaczone ramką w kolorze magenty -- ramką fioletową... to też jest liczba rzeczywista, ok? Tak więc to po prawej, jako całość, jest macierzą 4 x 1, czyli wektorem 4-wymiarowym. Jest to o tyle fajne, że gdy będziesz to implementować w swoim programie, tzn. mając 4 domy, będziesz chciał(a) skorzystać ze swoich hipotez, aby przewidzieć ceny domów y wszystkich czterech domów, możesz po prostu napisać tę jedną linię kodu. Jeśli zrobisz to w Octave'ie, lub wielu innych językach programowania, będzie to dokładnie jedna linia kodu. Napiszesz, że prognoza równa się macierz danych razy parametry, jasne? Gdzie macierz danych to ta tutaj, a parametry są tutaj, a ten symbol "x" jest to mnożenie macierzy przez wektor. Jeśli to zrobisz, tę zmienną prognoz (wybacz ... ... mój kiepski charakter pisma) uzyskasz, implementując tylko jedną linię kodu, zakładając, że używasz odpowiedniej biblioteki do mnożenia
macierzy przez wektor. Jeśli to zrobisz, wtedy prognoza staje się wektorem 4 x 1, tym po prawej, i zawiera on wszystkie przewidywane ceny. Alternatywnym sposobem do zapisu tego jako mnożenie macierz-wektor, byłoby napisanie czegoś w stylu for (i = 1 do 4), prawda? Jeśli miał(a)byś np. 1000 domów, wtedy i byłoby równe 1000. Potem trzeba by było napisać równanie prognozy, zależne od i. Następnie trzeba by wykonać jeszcze trochę pracy tutaj, i okazuje się, że jeśli masz dużą liczbę domów, jeśli próbujesz przewidzieć ceny więcej niż 4 domów, np. 1000 domów -- wtedy okazuje się, że jeśli zaimplementujesz to w ten sposób, w jakimkolwiek z wielu języków, (odnosi się to nie tylko do ... ... Octave'a, ale też do C++, ... ... Javy czy Pythona, a także innych
języków wysokiego poziomu), okaże się, że pisząc kod w ten sposób pokazany po lewej, możesz nie tylko uprościć kod, bo masz teraz tylko jedną linijkę zamiast paru w środku pętli, ale też, z subtelnych powodów, które zobaczymy później, okaże się, że jest to dużo wydajniejsze obliczeniowo, jeśli przewidujesz ceny wszystkich swoich domów, robiąc to tak, jak pokazałem po lewej, a nie tak, jak pokazałem po prawej stronie,
tzn. pisząc to równanie bezpośrednio. Opowiem o tym jeszcze później, gdy będziemy rozmawiać o wektoryzacji, ale zapisując predykcje w ten sposób, otrzymujesz nie tylko prostszy kod, ale także szybszy, wydajniejszy. To by było na tyle, jeśli chodzi o mnożenie macierzy i wektorów. Zrobimy dobry użytek z operacji tego typu, rozwijając dalej regresję liniową oraz inne modele. Póki co, w następnym nagraniu jednak, uogólnię to, czego się dzisiaj nauczyliśmy, na przypadek mnożenia macierzy przez macierz.