1
00:00:00,100 --> 00:00:01,850
지금부터 선형대수에 대해서 다시 알아보도록 하죠

2
00:00:02,880 --> 00:00:03,850
이 비디오에서 우리는

3
00:00:03,910 --> 00:00:06,210
행렬-Matrices-과 벡터-Vectors-가 무엇인지 알아볼겁니다

4
00:00:09,280 --> 00:00:10,770
행렬이란

5
00:00:11,020 --> 00:00:12,590
각 괄호-square brackets-들 안에

6
00:00:13,570 --> 00:00:14,810
네모꼴로 나열된 숫자들의 배열-array-을 말합니다

7
00:00:16,070 --> 00:00:17,250
예를 들어보죠 여기 행렬이 하나 있어요

8
00:00:17,280 --> 00:00:20,180
먼저 왼쪽에서 각 괄호를 열고

9
00:00:22,000 --> 00:00:24,660
그리고 몇몇의 숫자들을 그 안에 적습니다

10
00:00:27,020 --> 00:00:29,100
이는 학습하기 위한 문제들을 다룰수도 있으며

11
00:00:29,550 --> 00:00:30,660
또한 다른곳으로부터 나온

12
00:00:30,800 --> 00:00:33,740
데이터일 수 있습니다.

13
00:00:35,080 --> 00:00:36,900
하지만 이는 전혀 상관이 없는 특정한 값들입니다

14
00:00:37,440 --> 00:00:40,470
그리고 우측 각 괄호를 적어서 괄호를 닫습니다

15
00:00:40,680 --> 00:00:41,440
그러면 여기에 하나의 행렬이 완성됩니다

16
00:00:41,930 --> 00:00:43,520
그러면 여기에 행렬의 다른 예시를 하나 들어보죠

17
00:00:44,290 --> 00:00:46,360
1, 2, 3, 4, 5, 6을 각각 적어주세요

18
00:00:46,810 --> 00:00:48,020
이런 행렬은

19
00:00:48,300 --> 00:00:49,630
다른식으로 2D 또는

20
00:00:49,690 --> 00:00:51,540
2차원 배열이라고도 부릅니다

21
00:00:53,260 --> 00:00:54,920
그리고 우리가 알아야 하는

22
00:00:55,260 --> 00:00:56,320
또 다른 지식으로는

23
00:00:56,650 --> 00:00:57,740
그 행렬의 줄의 숫자와

24
00:00:57,810 --> 00:00:58,980
컬럼의 숫자의 곱으로

25
00:00:59,110 --> 00:01:01,070
쓸 수 있는

26
00:01:01,170 --> 00:01:04,750
행렬의 차원이 있습니다

27
00:01:05,480 --> 00:01:07,190
구체적으로 이 예제로 알아보자면

28
00:01:07,830 --> 00:01:09,700
왼쪽의 행렬을 보면

29
00:01:09,900 --> 00:01:11,000
1, 2, 3, 4개의 줄과

30
00:01:11,290 --> 00:01:13,370
그리고 2개의 컬럼을 가지고 있습니다

31
00:01:14,540 --> 00:01:15,950
그러므로 왼쪽에 있는 이 예제는

32
00:01:16,110 --> 00:01:17,850
4 X 2 행렬입니다

33
00:01:18,640 --> 00:01:23,320
각 줄의 숫자와 각 컬럼의 숫자의 곱과 같이 말입니다

34
00:01:23,600 --> 00:01:24,380
그러면 4개의 행들과 2개의 열을 가지고 있겠네요

35
00:01:25,290 --> 00:01:27,740
나머지 오른쪽의 예제를 보면, 이 행렬은 2개의 줄을 가지고 있네요

36
00:01:28,330 --> 00:01:29,790
이것이 첫번째 줄이고

37
00:01:30,040 --> 00:01:32,580
이것이 두번째 줄이네요, 그리고 3개의 컬럼을 가지고 있습니다

38
00:01:35,430 --> 00:01:36,890
이것이 첫번째 컬럼이고

39
00:01:37,070 --> 00:01:38,350
이것이 두번째 컬럼, 이것이 세번째 컬럼입니다

40
00:01:38,610 --> 00:01:41,340
그러므로 이 두번째 행렬을

41
00:01:41,670 --> 00:01:42,800
우리는

42
00:01:42,970 --> 00:01:44,660
2 X 3 행렬이라고 할 수 있습니다

43
00:01:45,700 --> 00:01:48,230
그러므로 우리는 이 행렬의 차원을 2 x 3라고 할 수 있습니다

44
00:01:50,460 --> 00:01:51,690
종종 우리는 이와는

45
00:01:51,850 --> 00:01:53,480
다른 방식으로 표현할 수도 있습니다

46
00:01:53,740 --> 00:01:54,510
왼쪽의 경우를 보면 우리는 이를

47
00:01:55,000 --> 00:01:56,360
R^(4x2)라고 쓰기도 해요

48
00:01:56,460 --> 00:01:58,090
구체적으로 어떤 사람들은

49
00:01:58,470 --> 00:02:00,280
종종 이런 행렬이

50
00:02:00,930 --> 00:02:02,840
집합 R^(4x2)의 한 원소라고 이야기합니다

51
00:02:03,060 --> 00:02:04,270
따라서, 이것은

52
00:02:04,410 --> 00:02:05,180
4x2 차원을 가지는

53
00:02:05,790 --> 00:02:07,020
행렬의모든 집합을

54
00:02:07,520 --> 00:02:08,960
의미하고,

55
00:02:09,100 --> 00:02:10,650
오른쪽의 이것은 종종

56
00:02:10,880 --> 00:02:12,800
행렬 R (2x3)로 표기됩니다.

57
00:02:13,130 --> 00:02:16,080
따라서, 2x3,

58
00:02:16,560 --> 00:02:17,460
따라서, 이와 같이

59
00:02:17,570 --> 00:02:18,700
4x2같은 표기

60
00:02:18,880 --> 00:02:19,960
혹은  2x3과 같은 표기를 본다면,

61
00:02:20,320 --> 00:02:21,450
그건 특정 차원을 가지는

62
00:02:21,900 --> 00:02:23,830
행렬을 의미하는 것입니다.

63
00:02:26,760 --> 00:02:28,240
다음으로, 매트릭스 내의 특정 원소를

64
00:02:28,590 --> 00:02:31,370
지칭하는 방법을 알아보도록 하겠습니다.

65
00:02:31,980 --> 00:02:32,850
그리고 원소라고 하는 것은,

66
00:02:33,020 --> 00:02:34,090
행렬 그 자체가 아니라

67
00:02:34,360 --> 00:02:35,930
그 안의 숫자를 의미합니다.

68
00:02:37,200 --> 00:02:38,270
따라서, 일반적인 표기로서

69
00:02:38,890 --> 00:02:40,110
A가 이 행렬을 가리키고

70
00:02:40,290 --> 00:02:41,860
A 에 아래첨자로

71
00:02:42,830 --> 00:02:44,050
i j가 표기되었다면,

72
00:02:44,420 --> 00:02:46,060
이것은 i, j번째 원소

73
00:02:46,950 --> 00:02:48,490
즉 행렬의 i 행 j열에 위치한

74
00:02:48,570 --> 00:02:50,690
원소를 지칭합니다.

75
00:02:51,880 --> 00:02:54,200
예를 들어 A_11은

76
00:02:54,530 --> 00:02:55,660
행렬의 원소 중

77
00:02:56,220 --> 00:02:57,510
첫번쨰 줄과

78
00:02:57,600 --> 00:02:58,900
첫번쨰 열의 원소를 나타내고,

79
00:02:58,960 --> 00:02:59,720
그건 이곳 첫줄과

80
00:03:00,090 --> 00:03:02,600
첫 열을 나타내어

81
00:03:02,640 --> 00:03:03,920
A_11은

82
00:03:04,240 --> 00:03:05,880
1402가 됩니다.

83
00:03:06,420 --> 00:03:07,620
다른 예시를 들어보죠,

84
00:03:07,780 --> 00:03:10,020
A_12는 행렬 중에

85
00:03:10,160 --> 00:03:11,160
첫번째 줄

86
00:03:11,660 --> 00:03:13,860
두 번째 열에 있는

87
00:03:14,290 --> 00:03:16,170
원소를 의미하고, 따라서

88
00:03:16,270 --> 00:03:19,000
A_12는 191이 됩니다.

89
00:03:20,430 --> 00:03:21,190
다른 예를 들어보죠

90
00:03:22,430 --> 00:03:24,360
A_32라고 한다면,

91
00:03:24,530 --> 00:03:26,970
A_32는 행렬 중에

92
00:03:27,350 --> 00:03:29,240
3번째 행,

93
00:03:30,040 --> 00:03:32,340
두 번째 열에 있는

94
00:03:33,750 --> 00:03:35,030
여기, 3, 2,

95
00:03:35,470 --> 00:03:41,270
그럼 1437이 되지요.

96
00:03:41,490 --> 00:03:42,480
마지막으로, A_41은

97
00:03:43,370 --> 00:03:44,540
여기,

98
00:03:45,320 --> 00:03:47,320
4번째 행

99
00:03:47,710 --> 00:03:49,220
첫번째 열의

100
00:03:49,520 --> 00:03:53,150
147이 되고,

101
00:03:53,770 --> 00:03:54,600
만약에, 물론 그러지 않으시겠지만,

102
00:03:54,660 --> 00:03:55,560
만약, 어, A_43이라고 적는다면,

103
00:03:55,660 --> 00:03:57,540
만약, 어, A_43이라고 적는다면,

104
00:03:57,870 --> 00:03:59,200
이것은

105
00:03:59,610 --> 00:04:01,130
4번째 행

106
00:04:01,230 --> 00:04:02,730
3번째 칼럼, 즉

107
00:04:02,850 --> 00:04:03,940
이 행렬에는 세번째 열이 없으므로

108
00:04:04,190 --> 00:04:05,420
정의되지 않습니다.

109
00:04:06,640 --> 00:04:08,280
보시면 아시겠지만, 에러가 되겠지요.

110
00:04:08,830 --> 00:04:10,720
여기엔 A_43이라는 원소가 없으므로,

111
00:04:10,840 --> 00:04:12,540
여러분은 A_43이라는 원소를

112
00:04:12,950 --> 00:04:14,500
지시하시면 안됩니다.

113
00:04:14,620 --> 00:04:17,120
그래서, 행렬은

114
00:04:17,640 --> 00:04:19,070
여러분이 많은 자료들을

115
00:04:19,380 --> 00:04:22,280
정리하고 인덱싱하기 위한 방법입니다.

116
00:04:22,670 --> 00:04:24,200
만약 제가

117
00:04:24,320 --> 00:04:25,140
너무 많은 개념과

118
00:04:25,440 --> 00:04:26,110
많은 새 notation을 사용하고 있다면,

119
00:04:26,570 --> 00:04:27,920
여러분은 전부 기억하실 필요는 없습니다.

120
00:04:28,140 --> 00:04:29,230
대신 이 강의노트가 있는 웹사이트에

121
00:04:29,530 --> 00:04:31,500
대신 이 강의노트가 있는 웹사이트에

122
00:04:31,700 --> 00:04:33,340
모든 정의를 적어 놓았으니

123
00:04:33,700 --> 00:04:35,960
모든 정의를 적어 놓았으니

124
00:04:36,650 --> 00:04:37,740
언제나 참고하실 수 있습니다.

125
00:04:38,160 --> 00:04:39,200
음, 이 슬라이드나

126
00:04:39,560 --> 00:04:40,950
다른 코스웍 혹은 강의자료를 보고

127
00:04:41,260 --> 00:04:44,060
notation들, A_41이 뭐였더라?

128
00:04:44,290 --> 00:04:45,320
뭐가 행이고 뭐가 열이었지?

129
00:04:45,650 --> 00:04:47,160
지금 당장 전부 기억하실 필요는 없습니다.

130
00:04:47,470 --> 00:04:48,960
언제나 웹사이트에서

131
00:04:49,100 --> 00:04:51,590
자료를 볼 수 있고, 참고할 수 있습니다.

132
00:04:52,500 --> 00:04:53,740
자, 이게 행렬입니다.

133
00:04:54,160 --> 00:04:57,000
다음으로, 벡터를 알아보죠

134
00:04:57,300 --> 00:04:59,400
벡터는 특수한 형태의 행렬이라고 볼 수 있습니다.

135
00:04:59,890 --> 00:05:01,170
벡터는 행렬이지만

136
00:05:02,070 --> 00:05:03,590
하나의 열만을 가지고,

137
00:05:03,740 --> 00:05:04,650
이건 Nx1 행렬

138
00:05:04,850 --> 00:05:07,330
기억하시죠?

139
00:05:07,820 --> 00:05:08,970
N은 행의 갯수,

140
00:05:09,190 --> 00:05:10,750
여기 1은 열의 갯수

141
00:05:10,870 --> 00:05:12,540
여기 1은 열의 갯수

142
00:05:12,710 --> 00:05:13,760
즉, 한 개의 열만을 가진 행렬을

143
00:05:14,720 --> 00:05:15,730
벡터라고 부릅니다.

144
00:05:16,700 --> 00:05:17,950
벡터의 예시를 볼까요.

145
00:05:18,310 --> 00:05:19,800
여기, N=4인 벡터,

146
00:05:20,120 --> 00:05:22,700
네 개의 원소가 있죠?

147
00:05:23,860 --> 00:05:25,090
그래서 이 벡터는

148
00:05:25,370 --> 00:05:26,560
다른 말로 4차원 벡터라고 불리는데

149
00:05:26,660 --> 00:05:28,300
다른 말로 4차원 벡터라고 불리는데

150
00:05:30,130 --> 00:05:31,410
이것은 4개의 원소로 이루어진

151
00:05:32,880 --> 00:05:34,410
이것은 4개의 원소로 이루어진

152
00:05:34,800 --> 00:05:36,400
벡터를 의미합니다.

153
00:05:36,870 --> 00:05:38,130
그리고, 앞의 행렬에서 보았듯이

154
00:05:38,510 --> 00:05:39,520
그리고, 앞의 행렬에서 보았듯이

155
00:05:39,740 --> 00:05:40,960
R 3x2 로 3x2 행렬을 나타낼 수 있었는데,

156
00:05:41,120 --> 00:05:42,340
R 3x2 로 3x2 행렬을 나타낼 수 있었는데,

157
00:05:42,340 --> 00:05:43,770
R 3x2 로 3x2 행렬을 나타낼 수 있었는데,

158
00:05:44,660 --> 00:05:46,340
이 벡터는 R4로 나타낼 수 있습니다.

159
00:05:46,500 --> 00:05:48,270
이 벡터는 R4로 나타낼 수 있습니다.

160
00:05:49,640 --> 00:05:50,900
이 R4는 4차원 벡터를 의미하는 것이죠

161
00:05:51,020 --> 00:05:53,480
이 R4는 4차원 벡터를 의미하는 것이죠

162
00:05:56,350 --> 00:05:59,230
다음으로, 벡터 내의 원소를 지칭하는 방법을 얘기해봅시다.

163
00:06:01,790 --> 00:06:02,970
다음과 같은 notation을 사용할텐데요,

164
00:06:03,730 --> 00:06:06,030
y_i로 벡터 y의 i번째 원소를 지칭합니다.

165
00:06:06,310 --> 00:06:07,620
y_i로 벡터 y의 i번째 원소를 지칭합니다.

166
00:06:07,690 --> 00:06:08,650
따라서, y가 이 벡터라면

167
00:06:08,810 --> 00:06:11,470
y_i는 i번쨰 원소를 지칭하고

168
00:06:12,050 --> 00:06:13,080
y_1은 첫번째 원소,

169
00:06:13,450 --> 00:06:16,320
460이 되고,

170
00:06:16,540 --> 00:06:18,670
y_2는 두번쨰 원소,

171
00:06:19,690 --> 00:06:21,030
232 - 여기가 첫번째, 여기가 두번째죠.

172
00:06:21,380 --> 00:06:21,780
232 - 여기가 첫번째, 여기가 두번째죠.

173
00:06:22,570 --> 00:06:24,840
y_3는 315, 그리고

174
00:06:24,970 --> 00:06:26,380
y_3는 315, 그리고

175
00:06:26,760 --> 00:06:28,240
y_1부터 y_4까지만 이 벡터 내에서 정의되죠.

176
00:06:28,650 --> 00:06:31,600
y_1부터 y_4까지만 이 벡터 내에서 정의되죠.

177
00:06:32,940 --> 00:06:33,990
그리고 벡터 내의 원소를 표시하는 방법은

178
00:06:34,560 --> 00:06:35,950
그리고 벡터 내의 원소를 표시하는 방법은

179
00:06:36,320 --> 00:06:37,590
다음과 같이 두 가지가 있습니다.

180
00:06:37,730 --> 00:06:39,250
다음과 같이 두 가지가 있습니다.

181
00:06:39,560 --> 00:06:41,020
어떨 땐 1-indexed vector를 쓰고

182
00:06:41,630 --> 00:06:43,820
어떨 땐 0-indexed를 쓰죠.

183
00:06:44,770 --> 00:06:45,620
이 왼쪽의 예시가 1-indexed vector고,

184
00:06:46,090 --> 00:06:47,980
이 왼쪽의 예시가 1-indexed vector고,

185
00:06:48,180 --> 00:06:49,240
원소들은 y_1, y_2, y_3, y_4로 표시되죠.

186
00:06:49,650 --> 00:06:51,870
원소들은 y_1, y_2, y_3, y_4로 표시되죠.

187
00:06:53,540 --> 00:06:54,710
그리고 이 오른쪽의 예시가

188
00:06:54,870 --> 00:06:56,340
0-indexed vector고

189
00:06:56,840 --> 00:06:58,380
이 경우에는 index가 0부터 시작하죠.

190
00:06:58,730 --> 00:07:00,460
이 경우에는 index가 0부터 시작하죠.

191
00:07:01,520 --> 00:07:04,620
따라서, 원소들은 y_0부터 y_3까지가 됩니다.

192
00:07:05,450 --> 00:07:07,170
이건 어떤 프로그래밍 언어들에서

193
00:07:07,380 --> 00:07:08,780
이건 어떤 프로그래밍 언어들에서

194
00:07:09,940 --> 00:07:11,080
행렬이 0이나 1부터 시작하는 것과 유사하죠.

195
00:07:11,440 --> 00:07:12,740
행렬을 0이나 1부터 시작하는 것과 유사하죠.

196
00:07:13,140 --> 00:07:14,390
행렬의 첫번째 원소가

197
00:07:14,510 --> 00:07:15,590
어떨 때는 y[1]

198
00:07:16,160 --> 00:07:17,480
이게 아마 행렬의 notation였죠?

199
00:07:17,940 --> 00:07:20,580
혹은 어떨때는 y[0]

200
00:07:21,260 --> 00:07:22,860
사용하는 프로그래밍 언어에 따라 말이죠.

201
00:07:23,640 --> 00:07:25,000
실제 수학에서는 1-indexed 버전을

202
00:07:25,190 --> 00:07:26,680
실제 수학에서는 1-indexed 버전을

203
00:07:27,120 --> 00:07:28,390
많이 사용하고,

204
00:07:28,570 --> 00:07:30,150
기계학습에서는 0-indexed 버전이

205
00:07:30,380 --> 00:07:32,640
기계학습에서는 0-indexed 버전이

206
00:07:33,680 --> 00:07:35,400
좀 더 사용하기 편합니다.

207
00:07:36,810 --> 00:07:37,650
따라서, 특별히 표시되지 않으면

208
00:07:37,970 --> 00:07:39,580
우리는 1-indexed vector를 사용하는 것으로

209
00:07:40,630 --> 00:07:43,070
간주하면 됩니다.

210
00:07:43,680 --> 00:07:44,750
실제로, 나머지 선형대수 리뷰 강의에서는

211
00:07:44,890 --> 00:07:46,380
1-indexed vectof를 사용할 것입니다.

212
00:07:46,770 --> 00:07:49,190
1-indexed vectof를 사용할 것입니다.

213
00:07:50,210 --> 00:07:51,170
하지만, 기계학습의 적용에서 사용할 때에는

214
00:07:51,280 --> 00:07:52,150
하지만, 기계학습의 적용에서 사용할 때에는

215
00:07:52,390 --> 00:07:53,980
가끔 제가 직접적으로

216
00:07:54,220 --> 00:07:55,340
다른 notation을 사용할 것이라고 언급할 것이고,

217
00:07:55,480 --> 00:07:56,640
다른 notation을 사용할 것이라고 언급할 것이고,

218
00:07:56,740 --> 00:07:57,760
그 떄 사용하는 벡터는

219
00:07:59,020 --> 00:07:59,280
0-indexed 벡터로 이해하시면 됩니다.

220
00:08:00,240 --> 00:08:02,470
마지막으로,

221
00:08:02,940 --> 00:08:04,470
전통적으로 행렬을 표시할 때는

222
00:08:05,060 --> 00:08:06,710
사람들은 보통 대문자를 사용하므로,

223
00:08:06,900 --> 00:08:08,450
사람들은 보통 대문자를 사용하므로,

224
00:08:09,000 --> 00:08:09,750
앞으로 A, B, C와 같은

225
00:08:09,930 --> 00:08:12,030
대문자를 사용한다면,

226
00:08:12,260 --> 00:08:13,840
X라든가,

227
00:08:14,100 --> 00:08:15,370
행렬을 뜻하는 것입니다.

228
00:08:16,630 --> 00:08:17,910
그리고 소문자를 사용한다면,

229
00:08:18,660 --> 00:08:19,630
a, b, x, y,

230
00:08:21,140 --> 00:08:22,460
일반적인 숫자, 자료값, 스칼라값, 혹은 벡터를 지칭하는 것입니다.

231
00:08:23,060 --> 00:08:25,400
일반적인 숫자, 자료값, 스칼라값, 혹은 벡터를 지칭하는 것입니다.

232
00:08:26,150 --> 00:08:27,860
언제나 이렇다는건 아니지만,

233
00:08:28,110 --> 00:08:29,210
소문자 y를 사용하는 방식이 벡터를 지칭하고,

234
00:08:29,460 --> 00:08:30,610
소문자 y를 사용하는 방식이 벡터를 지칭하고,

235
00:08:30,940 --> 00:08:31,870
대문자를 사용하는 것이

236
00:08:32,020 --> 00:08:33,360
행렬을 의미하는 것이 일반적이죠.

237
00:08:34,150 --> 00:08:35,460
행렬을 의미하는 것이 일반적이죠.

238
00:08:37,200 --> 00:08:39,820
이제 행렬과 벡터에 대해 다시 알아봤습니다.

239
00:08:40,800 --> 00:08:42,310
다음은, 이걸로 뭘 할 수 있는지

240
00:08:42,500 --> 00:08:44,330
알아보도록 하지요.