이번 영상에서는 우리는 행렬×행렬 대해 이야기 할 것입니다. 이번 영상에서는 우리는 행렬×행렬 대해 이야기 할 것입니다. 우리가 이전에 선형회귀 방식에서 ⊝0, ⊝1 parameters를 gradient descent을 사용하지 않고 어떻게 찾을지에 대해 이야기 한 적 있습니다. 이 알고리즘에 대해 이야기 하려고 합니다. 우선은 이 알고리즘을 알기 위해서 여러분은 행렬 간의 곱셈을 알아야 합니다. 보통 다음과 같은 예제를 가지고 시작합니다. 제가 2개의 행렬을 가지고 있고 2개를 곱하려고 합니다. 우리는 하나의 예제를 통해, 어떤 일이 과정이 일어나는지 이야기 하겠습니다. 제가 할 첫 번째 일은 오른쪽 행렬에서 하나의 열을 가져오는 것입니다. 또한 왼쪽 행렬에서 하나의 행을 가져오고 각각 곱합니다. 벡터의 첫 번째 열을 곱한 것처럼 말입니다. 이결과 저는 (11, 9)벡터를 얻게 될 것입니다. 이건 이전 영상에서 본 행렬, 벡터 곱과 같습니다. 본 행렬, 벡터 곱과 같습니다. 이후 2번째 값을 계산하기 위해 우리가 할 일은 오른쪽 행렬에서 2번째 열을 가져오는 것입니다. 이후 왼쪽 행렬에서 이 값들을 가져와, 오른쪽의 두 번째 열들과 곱셈을 합니다. 반복하면 됩니다. 이것 여러분이 이전 영상에서 본 행렬과 벡터의 곱셈입니다. 행렬 과 벡터의 곱을 계산하면 여러분은 (10,14) 벡터를 얻을 것입니다. 여러분은 행렬 벡터 곱을 연습하고 싶을 것입니다. 우선 영상을 잠시 멈추시고 계산 값과 비교해 보세요. 우리는 2개의 결과를 얻었고 저는 이 2개를 같이 배치하겠습니다. 이것이 바로 정답입니다. 이 곱의 결과는 2x2행렬입니다. 이제 저기에 계산 결과 값 (11, 9)를 넣어 행렬을 채웁니다. 행렬의 2번째 열에 (10, 14)도 채웁니다. 이건 행렬과 다른 행렬이 곱해지는 기계적인 방법에 대한 것입니다. 여러분은 기본적으로 2개의 행렬 중 하나의 열을 볼 것이고 , 이것들을 조합합니다. 다시 말해, 두 번째에서는 우리는  좀 더 주의 있게 진행해보겠습니다. 그러나 이번에도 첫 번째 예제는 2x3행렬입니다. 여기에 3x2행렬을 곱하는 것입니다. 곱셈의 결과 값은 2x2행렬이 나올 것입니다. 다시 말해 2번째 경우에 대해서 왜 이렇게 되는지 확인해야 합니다. 이게 계산 과정입니다. 이제 좀 더 자세히 보고, 무슨 일이 일어나는지 봅시다. 여기 좀 더 자세히 나와 있습니다. 저는 행렬 A를 가지고 있고 이것을 행렬 B와 곱하려고 합니다. 그 결과는 행렬 C입니다. 여러분은 오직 차원의 크기가 일치하는 2개의 행렬을 곱할 수 있습니다. A는 mxn 행렬 m은 열의수이고 n은 행의 수입니다. 우리는 n x o 행렬을 곱합니다. 이 n과 저 n은 반드시 일치해야 합니다. 첫 번째 행렬의 열의 수와 2번째 행렬의 행의 수가 일치해야 합니다. 그 결과는 C같은  m x o 행렬입니다 이전 영상에서 우리가 한 것들은 o가 모두 1에 대응하는 경우였습니다. 이 경우 B는 벡터인 경우입니다. 그러나 이제 우리는 o가 1보다 큰 경우를 다룹니다. 여기 2개의 행렬을 곱하는 방법입니다. B행렬의 첫 번째 열을 가져오는데 이것을 벡터로 취급하겠습니다. 그리고 행렬 A와 행렬B의 첫 번째 열과 곱하겠습니다. 이 결과는 n x 1 벡터이고 다음과 같이 쓸 수 있습니다. B의 2번째 열을 가져오겠습니다. 이것도 n x 1 벡터입니다. 이 열을 여기 있고 nx1입니다. 이건 n번째 벡터입니다. nx1 벡터와 곱셈을 진행합니다. 그 결과는 m 차원의 벡터입니다. 이것을 여기에 쓰겠습니다. 이제 우리는 3번째 열을 가져오고 이것을 행렬과 곱합니다. 우리는 m차원 벡터를 얻습니다. 그리고 이 작업을 마지막 열까지 계속합니다. 마지막 열과 행렬을 곱하면 여러분은 C행렬의 마지막 열을 구할 수 있습니다. 다시 말해서, C행렬의 i번째 열은 행렬 A를 통해 얻어지는데 행렬 A와 B행렬의 b번째 열을 곱하면 됩니다. 1부터 o번 까지 이 과정을 계산합니다. 그리고 이건 우리가 C행렬을 계산하한 과정을 요약한 것입니다. 다음 예제를 보시죠. 2개의 행렬을 곱하려고 합니다. 2번째 행렬에서 첫 번째 열을 우선 가져옵니다. 이건 이전 슬라이드에 행렬 B입니다. 그리고 저는 이 행렬과 이 벡터를 가지고 곱합니다. 빨리 계산해 보세요. 계산하면 (1, 3)x(0, 3) 은 1x0 + 3x3 식이 나옵니다. 두 번째 요소는 (2, 5)x(0, 3) 을 곱하면 되고 수식은 2x0 + 5x3입니다. 그 결과는 (9, 15)입니다. 초록색으로 표시하겠습니다. (9,15) 입니다. 자, 이제 우리는 2번째 열을 가져올 것 입니다. 그리고 이에 해당하는 계산을 할 것입니다. 행렬과 벡터 (1,2)를 곱합니다. 빠르게 계산하면 1x1 + 3x2이고 이 행입니다. 다른 하나도 계산하면 2x1 + 5x2 이고, 이건 1x1 + 3x1 = 7 이건 1x1 + 3x1 = 7 그리고 2x1 + 5x2 = 12입니다. 그리고 2x1 + 5x2 = 12입니다. 그래서 2개의 결과값 행렬이 얻습니다. 각 결과는 여기로 넣습니다. (9,15) 랑 (4,12)입니다. (9,15) 랑 (4,12)입니다. 여러분도 알듯이 2x2 행렬과 2x2행렬의 곱셈 결과의 차원 수는 첫 번째 2와 뒤쪽의 2를 곱한 것입니다. 그 결과는 2x2입니다. 마지막으로 행렬 곱셈, 예를 하나 더 보여주겠습니다. 마지막으로 행렬 곱셈, 예를 하나 더 보여주겠습니다. 말하기 전에 우리는 가격 예측이 필요한 4개의 집이 있습니다. 지금은 3개의 hypothesis함수 식이 오른쪽에 있습니다. 만약 여러분이 모든 hypothesis함수식을 4개의 집 모두에 적용하고 싶으시면, 행렬곱셈을 이용하여 효율적으로 진행 할 수 있습니다. 왼쪽에는 일반적인 행렬이 있습니다. 이전 집 가격 행렬과 동일한 행렬입니다. 제가 할 일은 다른 행렬을 만드는 것입니다. 첫 번째 열은 (-40, 0.25) 이고 2번째 열은 (200, 0.1)입니다. 그리고 2개의 행열 곱한다면, 여러분은 푸른색으로 칠한 첫 번째 열을 찾아야 합니다. 첫 번째 열을 어떻게 가져올 수 있나요? 행렬끼리의 곱셈 절차는 첫 번째 열을 가져오는 방법 그리고 이것을 곱하는 것입니다. 이전 영상에서 우리는 1번 hypothesis를 이용하여 집 가격을 예측하는 것을 보았습니다. 1번 hypothesis는 여기 있습니다. 2번째 열은 어떻게 할까요? 2번째 열입니다. 2번째 열은 2번째 hypothesis의 예측 값이 됩니다. 2번째 hypothesis의 예측 값이 됩니다. 3번째 열도 이와 유사합니다. 3번째 열도 이와 유사합니다. 저는 모든 과정을 자세히 진행하지는 않았습니다. 그러나 여러분이 영상을 잠시 멈추고 여러분 스스로 계산을 확인해보세요, 저의 주장이 맞는지 아닌지를 비교해보세요 이 2개의 행렬을 만듦으로써, 여러분은 3개의 hypothesis에 대해 4개의 집 크기를 이용하여 12개의 가격을 예상하는 것에  빠르게 적용하였습니다. 하나의 행렬 곱을 이용하여 12개의 예상 가격을 다루었습니다. 더 좋은 것은 행렬곱을 진행하기 위한 많은 좋은 linear algebra 라이브러리가 있다는 것입니다. 위한 많은 좋은 linear algebra 라이브러리가 있다는 것입니다. 또 여러분이 괜찮은 프로그램 언어를 사용할 수 있기도 하고요 또 여러분이 괜찮은 프로그램 언어를 사용할 수 있기도 하고요 확실히 인기있는 10개의 프로그램 언어들은 좋은 linear algebra 라이브러리를 가지고 있을 것입니다. 그리고 좋은 linear algebra 라이브러리는 효율적으로 행렬 곱을 계산하는 것에 최적화 되어 있습니다. 병렬 계산을 이점을 가지며, 여러분의 멀티 코어를 가지고 있는 컴퓨터가 이 일을 할 수도 있습니다. 하나의 코어를 가진 경우는 SIMD라고 불리는 병행 프로그램을 이용하는 방법도 있습니다. 여러분이 효율적으로 행렬 곱을 사용하기 위한 많은 위한 많은 프리 라이브러리가  프리 라이브러리가 있습니다. 여러분은 많은 hypothesis들을 가지고 여러 개의 예측 값을 효율적으로 처리 할 수 있습니다.있습니다. .