次に続く一連のビデオで リコメンダーシステムについて お話したい。 そこには2つほど理由が、、、 私がリコメンダーシステムについて扱いたいと思うのは、2つほど理由がある。 1つ目は単に、それが 機械学習の重要な適用例だからだ。 ここ数年、しばしば ここ、シリコンバレーにある、 テクノロジーの会社をいくつか訪れたが、 そこで機械学習を応用している人たちと しばしば話す機会があるのだが、 そういう時に私は 機械学習の一番重要な 応用は何か、または 何に機械学習を応用すると もっともあなたのパフォーマンスが上がると思うか？と 問うている。 そこでもっとも良く聞く回答は レコメンダーシステムだ。 ここシリコンバレーでは現在 より良いレコメンダーシステムを作ろうとしているグループがたくさんある。 ここで以下のようなwebサイト 例えば アマゾンとかNetflixとか eBayとか Appleの作ったiTunes Geniusとかについて考えてみると 世の中のたくさんのwebサイトや システムが新製品を使うように リコメンド（推薦）しようとしている。 Amazonは新しい本をあなたにリコメンドするし、 Netflixは新しい映画をあなたに 薦めようとする、などなど。 そしてこれらの種類のリコメンダーシステムは 過去にどんな本とかを購入したか、 どんな映画を過去にレーティングしたか、 などを調べたりするが、 だがこれらのシステムは 今日についてのシステムだ。 アマゾンの収益のかなりの割合、 そしてNetflixのような会社の場合、 ユーザーが見ている映画の かなりの割合は 彼らが行っているレコメンドに 依存している。 だからレコメンダーシステムの パフォーマンスを改善する事は これらの会社の 基本となるラインに かなりの大きさの直接的な インパクトを与える。 レコメンダーシステムは機械学習学界において いわゆる可笑しい問題なので 学界の機械学習カンファレンスに 行くと、 レコメンダーシステムの問題は 実際にはほとんど注意を引かないか、 せいぜい学界のちょっとの割合に 過ぎない程度だ。 だが何が起きているかを見てみると、 多くのテクノロジーの会社にとって、 これらのシステムを構築する能力は多くの会社にとって優先度が高い。 そしてそれがそれらをこのクラスで扱いたい理由の一つだ。 レコメンダーシステムを扱いたい 2つ目の理由は クラスの終わりまで あと少しのビデオとなってきたので 機械学習において全般的に重要な 考え方を話して あなたと共有しておきたい。 機械学習において全般的に重要な物のいくつかを。 そして、このクラスで既に見て来たように 機械学習において、フィーチャーは 重要だ、 あなたがフィーチャーとして何を選ぶかは 学習アルゴリズムのパフォーマンスに大きな影響を与える。 だから機械学習には いくつかの問題、全てでは無いが、 いくつかの問題については、 良いフィーチャーのセットを自動的に学習してくれることに 挑戦するアルゴリズムが 存在する。 つまりフィーチャーをお手製でデザインしたり お手製でコーディングする代わりに それは我らがここまでやってきた 方法だが、その代わりに いくつかのシチュエーションでは どのフィーチャーを使うべきかを 学習出来るアルゴリズムがあるかもしれない。 そしてレコメンダーシステムはそんなシチュエーションの 一例となっている。 他にもこの例となってる物はあるが、 レコメンダーシステムを通して フィーチャーを学習するというアイデアを ちょっと深く理解出来るだろうし、 少なくとも一つ、実例を 見る事になる、 私が思うに機械学習においても重要なアイデアである所の。 では能書きはこの位にして、 レコメンダーシステムの問題の定式化を 議論していこう。 実行可能な例として、 モダンな映画のレーティングの予測を 使っていこう。 問題はこうだ: あなたはwebsiteなり会社なりで、 映画を売るかレンタルするかするとしよう、 別に映画以外でも構わないが。 つまり、AmazonもNetflixも そしてたぶんiTunesも、これをやってる会社たちの 具体例となる。 そしてあなたはユーザーに 様々な映画を 1から5の星でレーティングさせるとしよう。 つまりユーザーは、 星一つとか、2つとか、3つとか、4つとか、星5つをつけられる。 この例をもう少し 良い物にする為に、 0も許すことにして、星0から 5までとする。 こうすると必要になる数学に関する所で、ちょっと良くなるから。 これらのwebサイトの多くは星1から5を使ってるんだけれども。 ではここに、5つの映画があるとする。 Love That Last、 Romance Forever、Cute Puppies of Love、 Nonstop Car Chases、 そして Swordsvs Karateだ。 そしてユーザーは四人とする、 アリス、ボブ、キャロル、そしてデイブで、 それぞれイニシャルがA、B、C、Dだ。 彼らをユーザー1、2、3、4と呼ぶ事にする。 ここではアリスは本当に Love That Lastsが好きで それを星5個にレーティングし、 Romance Foreverも好きで星5個とレーティングするとする。 Cute Puppies of Loveは見てなくて、 だからレートもしていない。 だからそれのレーティングは無し。 そしてアリスはNonstop Car Chasesが だいっ嫌いで、Swords vs. Karateも大嫌い。 そして別のユーザーBob、 二番目のユーザーは 異なる映画の組をレーティングするかもしれない。 Love That  Lastsは気に入って、 Romance Foreverは見てないとする、 これのレーティングは4で、そして0、0と。 そして三番目のユーザーは これを0、これは見てない、 0、5、5と。 こんな感じで数字を埋めておく。 そしてちょっとした記法を導入しておく。 この記法をこの課全体で 使っていく。 nのuでユーザーの数を示す。 この例だとnのuは4となる訳だ。 つまりuの下添字はユーザーのuという事。 そしてnのmで 映画の数を表す。 この例では5つの映画がある。 だからnのmは5となる。 そしてこの例では、 みての通り、おおまかにいって たぶん3つのロマンティック、または ロマンティックコメディを、 そして2つのアクションムービーがある。 この小さな例で考えると、 アリスとボブは これらロマンティックコメディ、または 恋愛映画に高いレーティングを与えていて アクションムービーには とても低い評価を与えている。 そしてキャロルとデイブは正反対だ。でしょ？ キャロルとデイブ、つまりユーザー3と4は アクションムービーが大好きで それらには高いレーティングを与えているが、 ロマンスや恋愛の類の 映画はそんなに 好きではない。 具体的には、レコメンダーシステムの問題では 以下のようなデータが与えられる。 我らのデータは以下で構成される。 まずこれらr(i, j)がある。ここで ユーザーjが映画iをレーティングしていたら r(i, j)は1となる。 ユーザーは映画の一部しか レーティングしていないので だからこれらの映画の レーティングは存在しない。 そしてr(i, j)が1の時はいつでも つまりユーザーjが映画iをレーティングしている時にはいつでも これらの値、 y (i, j)もまた得られる。 これはユーザーjによる 映画iのレート。 つまりy(i, j)は 0から5までの数字で、 それはユーザーが その映画につけた星の 星0個から星5個に対応する。 さて、レコメンダーシステムというのは、 このデータ、 これらr(i, j)とy(i, j)が 与えられた時に、 これらのデータを見て レーティングが欠けてる映画を探し出して これらのクエスチョンマークの値が いくつとなるかを予測する問題、と 言う事が出来る。 この例では 映画の数もユーザーの数も すごく少ないので ほとんどのユーザーがほとんどの映画にレートをつけているが 実際の場では あなたのユーザーの多くは あなたの提供する映画の とても少しの割合しかレートしないだろう。 さて、このデータを見ると、 AliceとBobは 二人ともロマンティック映画が好きなようで Aliceはきっとこれに星5つを、 Bobはこれに4.5とかそんな感じの高い値を つけるだろう、と 思われる。同様に CarolとDaveは これらにとても低いレートを与えていて、 Daveは、うーん、彼はとてもアクション映画が好きなようだね。 彼はきっと Sword and Karate (ソードと空手 )に 4とか5のレートを 与えるに違いない。オーケー？ つまり、レコメンダーシステムを作る時に 我らのやるべき事は、 これらの欠けた値を 自動的に埋めてくれる アルゴリズムを見つけ出す事で、 それによって我らは ユーザーがまだ見てない映画を ユーザーに 勧める事が 出来る。 そのユーザーが好みそうな映画を予測しようとする訳だ。 以上がレコメンダーシステムの問題の定式化となる。 次のビデオでは この問題に取り組む学習アルゴリズムを開発する。