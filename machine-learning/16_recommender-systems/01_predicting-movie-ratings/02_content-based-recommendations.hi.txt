पिछले विडीओ में, हमने बात की रेकोम्मेंडेर सिस्टम प्रॉब्लम की जहाँ उदाहरण के लिए आपके पास है शायद एक सेट मूवीज़ का और शायद एक सेट यूज़र्ज़ का, जिनमें से प्रत्येक ने रेट किया है कोई सबसेट मूवीज़ का. उन्होंने रेट किया है मूवीज़ को एक से पाँच स्टॉर तक या ज़ीरो से पाँच स्टॉर तक. और हम क्या करना चाहेंगे कि देखेंगे इन यूज़र्ज़ को और प्रिडिक्ट करेंगे कि कैसे उन्होंने रेट किया होता दूसरी मूवीज़ को जो उन्होंने अभी तक रेट नहीं की हैं. इस वीडियो में, मैं बात करना चाहूँगा हमारी पहली पद्धति की बनाने के लिए एक रेकोम्मेंडेर सिस्टम. इस पद्धति को कहते हैं कांटेंट बेस्ड रेकमेंडेशन्स. यहाँ है हमारा डेटा सेट पहले का और सिर्फ़ आपको याद कराने थोड़ी नोटेशन, मैं कर रहा था डिनोट एन यू से यूज़र्ज़ की संख्या और इसलिए वह है 4, और एन एम से मूवीज़ की संख्या, मेरे पास 5 मूवीज़ हैं. तो, मैं कैसे प्रीडिक्ट करुँगा कि क्या होनी चाहिए ये मिसिंग वेलयूज? मान लेते हैं कि इनमें से प्रत्येक मूवी के लिए मेरे पास एक सेट है फ़ीचर्ज़ का उनके लिए. ख़ासतौर पर, मान लीजिए प्रत्येक मूवी के लिए हैं दो फ़ीचर्ज़ और मैं उन्हें डिनोट कारूँग एक्स 1 और एक्स 2 से. जहाँ एक्स 1 मापता है कि मूवी कितनी रोमांटिक मूवी है और एक्स 2 मापता हैं कि एक मूवी कितनी ऐक्शन मूवी है. तो, यदि आप लेते हैं एक मूवी, लव ऐट लास्ट, आप जानते हैं, इसकी रेटिंग है 0.9 रोमांटिक स्केल पर. यह एक बहुत ही रोमांटिक मूवी हैं, लेकिन ज़ीरो है ऐक्शन स्केल पर. अत: ऐक्शन लगभग नहीं है उस मूवी में. रोमैन्स फ़रेवर हैं 1.0, बहुत सा रोमैन्स और 0.01 ऐक्शन में. मैं नहीं जानता, श्याद वहाँ एक छोटा मोटा कार क्रैश है उस मूवी में या ऐसा कुछ. अत: वहाँ थोड़ा बहुत ऐक्शन है. एक छोड़ कर, चलिए देखते हैं सॉर्ड्ज़ वर्सेस कराटे , शायद उसकी है 0 रोमैन्स रेटिंग और बिल्कुल रोमैन्स नहीं उसमें लेकिन प्रचुर ऐक्शन. और नॉनस्टॉप कार चेज़िज़ / पीछा करना, शायद फिर से थोड़ा बहुत रोमैन्स है उस मूवी में लेकिन प्रमुख रूप से ऐक्शन. और क्यूट पपीज़ ऑफ़ लव मुख्यत: एक रोमैन्स मूवी और बिल्कुल भी ऐक्शन नहीं है. अत: यदि हमारे पास हैं इस प्रकार के फ़ीचर्ज़, तब प्रत्येक मूवी को दर्शाया जा सकता है एक फ़ीचर वेक्टर से. चलिए लेते हैं मूवी एक. चलो कहते हैं इन मूवीज़ को 1, 2, 3, 4, और 5. लेकिन मेरी पहली मूवी, लव ऐट लास्ट, मेरे पास हैं दो फ़ीचर्ज़, 0.9 और 0. और इसलिए ये हैं फ़ीचर्ज़ एक्स 1 और एक्स 2. और चलिए जोड़ते हैं एक अतिरिक्त फीचर, हमेशा की तरह, जो है मेरा इंटर्सेप्टर फ़ीचर एक्स 0 = 1. और इसलिए इनको एक साथ रखते हुए मेरे पास तब होगा एक फ़ीचर एक्स 1. सूपर स्क्रिप्ट 1 डिनोट करती है कि यह फ़ीचर वेक्टर है मेरी पहली मूवी का. यह फ़ीचर वेक्टर है बराबर 1 के. पहला 1 यहाँ है यह इंटर्सेप्टर. और तब मेरा दूसरा फ़ीचर है 0.90 इसी प्रकार. अत: लव ऐट लास्ट के लिए मेरे पास होगा एक फ़ीचर वेक्टर एक्स 1, मूवी रोमैन्स फ़ॉरएवर के लिए मेरे पास शायद होगा एक सॉफ़्ट्वेर फ़ीचर वेक्टर एक्स 2, और इसी प्रकार आगे, और सोर्ड्ज़ वर्सेस कराटे के लिए मेरे पास होगा एक अलग फ़ीचर वेक्टर एक्स सूपरस्क्रिप्ट 5. और भी, मेरी पहली नोटेशन के अनुरूप ही जो हम प्रयोग कर रहे थे, हम सेट करेंगे एन को संख्या फ़ीचर्ज़ की न गिनते हुए इस एक्स 0 इंटर्सेप्टर को. तो एन है बराबर 2 क्योंकि हमारे पास हैं दो फ़ीचर्ज़ एक्स 1 और एक्स 2 जो कैप्चर करते हैं कितना रोमैन्स और कितना ऐक्शन है प्रत्येक मूवी में. अब प्रिडिक्शन्स करने के लिए यह है एक काम जो हम करते हैं जो है कि हम ले सकते थे प्रिडिक्ट करना रेटिंग्स प्रत्येक यूज़र की एक अलग लिनीअर रेग्रेशन प्रॉब्लम की तरह. अत: विशेषतया, मान लीजिए कि प्रत्येक यूज़र जे के लिए, हम करेंगे लर्न पेरामिटर वेक्टर थीटा जे, जो होगा एक आर 3 इस केस में. आमतौर पर, थीटा (जे) होगा एक आर (एन+1), जहाँ एन है संख्या फ़ीचर्ज़ की न गिनते हुए इस एक्स 0 इंटर्सेप्टर को. और हम करेंगे प्रिडिक्ट यूज़र जे की रेटिंग मूवी आइ के लिए सिर्फ़ इनर प्रोडक्ट से पेरमिटर वेक्टर्ज़ थीटा और फ़ीचर्ज़ एक्स आइ से. तो चलिए लेते हैं एक विशेष उदाहरण. लेते हैं यूज़र 1, तो वह होगा ऐलिस. और ऐलिस के साथ संयुक्त होगा कुछ पेरामिटर वेक्टर थीटा 1. और हमारा दूसरा यूज़र, बॉब, संयुक्त होगा एक अलग पेरामिटर वेक्टर थीटा 2 के साथ. कैरल संयुक्त होगी एक अलग पेरामिटर वेक्टर थीटा 3 के साथ और डेव एक अलग पेरामिटर वेक्टर थीटा 4 के साथ. अत: मान लीजिए आप करना चाहते हैं एक प्रिडिक्शन कि ऐलिस क्या सोचती है मूवी क्यूट पपीज़ अव लव के बारे में. अच्छा उस मूवी का होगा कोई पेरामिटर वेक्टर एक्स 3 जहाँ हमारे पास है कि बह एक्स 3 होगा बराबर 1, जो है मेरी इंटर्सेप्ट टर्म और तब 0.99 और उसके बाद 0. और मान लीजिए, उदाहरण के लिए, मान लेते हैं कि हमारे पास किसी प्रकार पहले से ही है एक पेरामिटर वेक्टर थीटा 1 ऐलिस के लिए. हम बाद में बताएँगे कि कैसे वास्तव में हमने बनाया यह पेरामिटर वेक्टर. लेकिन मान लेते हैं कि अभी के लिए कि किसी अनिर्दिष्ट लर्निंग अल्गोरिद्म ने लर्न किया है पेरामिटर वेक्टर थीटा 1, और वह है बराबर 0,5,0 के. अत: हमारा प्रिडिक्शन इस के लिए होगा बराबर थीटा 1 के, जो है ऐलिस का पेरामिटर वेक्टर, ट्रैन्स्पोज़ एक्स 3, जो है फ़ीचर वेक्टर क्यूट पपीज़ फ़ॉर लव मूवी, नम्बर 3 के लिए. और इसलिए इनर प्रोडक्ट इन दोनो के बीच होगा 5 टाइम्ज़ 0.99, जो है बराबर 4.95. और इसलिए मेरा  प्रिडिक्शन इस वैल्यू के लिए यहाँ पर होगा 4.95. और शायद वह प्रतीत होती है एक उचित वैल्यू यदि वाक़ई में यह है मेरा पेरामिटर वेक्टर थीटा 1. अत: हम यहाँ सिर्फ़ यह कर रहे हैं कि अप्लाई कर रहे हैं एक भिन्न कॉपी इस लिनीअर रेग्रेशन की प्रत्येक यूज़र के लिए, और हम कह रहे हैं ऐलिस क्या करती है कि ऐलिस के पास है कोई पेरामिटर वेक्टर थीटा 1 जो वह इस्तेमाल करती हैं, जो हम इस्तेमाल करते हैं प्रिडिक्ट करने के लिए उसकी रेटिंगज़ एक फ़ंक्शन की तरह कि कितनी रोमांटिक और कितनी ऐक्शन वाली एक मूवी है. और बॉब और कैरल और देव, उनमें से प्रत्येक का है एक भिन्न लिनीअर फ़ंक्शन रोमांटिक होने का और ऐक्शन होने का, या कितना रोमैन्स और कितना ऐक्शन है एक मूवी में और वह है कि हम कैसे प्रिडिक्ट करेंगे उनकी स्टॉर रेटिंग्स. अधिक विधिवत रूप में, यहाँ है कि हम कैसे लिख सकते हैं प्रॉब्लम को. हमारा नोटेशन है कि आर(आइ,जे) है बराबर 1 यदि यूज़र जे ने रेट किया है मूवी आइ को और वाय(आइ, जे) है रेटिंग उस मूवी की, यदि वह रेटिंग मौजूद है. मतलब, यदि यूज़र ने वास्तव में रेट दिया है उस मूवी को. और, पिछली स्लाइड पर हमने परिभाषित किए थे ये, थीटा जे भी, जो है एक पेरामिटर यूज़र एक्सआइ के लिए, जो है एक फ़ीचर वेक्टर एक विशेष मूवी के लिए. और प्रत्येक यूज़र और प्रत्येक मूवी के लिए, हम प्रिडिक्ट करते हैं वह रेटिंग निम्न प्रकार से. मैं थोड़ी और नोटेशन लाता हूँ सिर्फ़ थोड़ी देर के लिए एक अतिरिक्त नोटेशन एम जे. हम इस्तेमाल करेंगे एम जे का डिनोट करने के लिए संख्या मूवीज़ की जो रेट की है यूज़र जे ने. हमें नहीं चाहिए यह नोटेशन केवल इस लाइन के लिए. अब लर्न करने के लिए पेरामिटर वेक्टर थीटा जे के लिए, कैसे करते हैं हम वह. यह मूलत: एक लिनीअर रेग्रेशन प्रॉब्लम है. तो क्या करते हैं हम कि सिर्फ़ लेते हैं एक पेरामिटर वेक्टर थीटा जे ताकि प्रिडिक्ट की गई वैल्यूज़ यहाँ हों जितनी हो सके निकट उन वैल्यूज़ के जो हमने देखी हैं हमारे ट्रेनिंग सेट्स में और वैल्यूज़ जो हमने देखी हैं हमारे डेटा में. तो चलिए लिख लेते हैं उसे. लर्न करने के लिए पेरामिटर वेक्टर थीटा जे, मिनमायज़ करते हैं पेरामिटर वेक्टर थीटा जे सम के ऊपर, और मैं चाहता हूँ करना सम सारी मूवीज़ पर जो रेट की हैं उस यूज़र जे ने. तो हम लिखते हैं उसे सम की तरह आइ की सारी वैल्यूज़ पर. जो है आर(आइ, ज़) बराबर 1. तो इस समेशन सिंटैक्स को पढ़ने का ढंग है कि यह है समेशन सारी वैल्यूज़ आइ पर, ताकि आर(आइ, जे) है बराबर 1. तो आप करेंगे सम सारी मूवीज़ पर जो रेट की हैं उस यूज़र जे ने. और तब मैं कम्प्यूट करूँगा ये थीटा जे, ट्रान्स्पोज़ एक्स आइ. तो वह है प्रिडिक्शन यूज़र जे की रेटिंग की मूवी आइ पर, - वाय(आइ,जे). तो वह है असल देखी हुई रेटिंग स्क्वेर्ड. और फिर, मैं इसे विभाजित करता हूँ मूवीज़ की संख्या से जो यूज़र जे ने वास्तव में रेट की हैं. तो चलिए विभाजित करते हैं 1 ओवर 2 एम जे से. और इसलिए यह है बिल्कुल लीस्ट स्क्वेरज़ रेग्रेशनज़ जैसा. यह है लिनीअर रेग्रेशन जैसे, जहाँ हम चुनना चाहते हैं पेरामिटर वेक्टर थीटा जे मिनमायज़ करने के लिए इस तरह की स्क्वेर्ड एरर टर्म को. और यदि आप चाहते हैं, आप रेग्युलराइज़ेशन टर्म भी जोड़ सकते हैं इसलिए प्लस लैम्डा ओवर 2 एम और यह है वास्तव में 2 एम जे क्योंकि हमारे पास हैं एम जे इग्ज़ैम्पल्ज़. यूज़र जे ने बहुत सी मूवीज़ रेट की हैं, लेकिन ऐसा नहीं है कि हमारे पास उतने डेटा पोईँट्स हैं जिसमें हम फ़िट कर सके पेरामिटर थीटा जे का. और फिर मैं जोड़ता हूँ मेरी हमेशा की रेग्यूलराईज़ेशन टर्म यहाँ थीटा जे के स्क्वेर्ड की. हमेशा की तरह, यह सम है के ईक्वल्ज़ 1 से एन तक, इसलिए यहाँ, थीटा जे होगा एक एन प्लस 1 डिमेन्शनल वेकटर, जहाँ हमारे पहले के उदाहरण में एन था बराबर 2 के. लेकिन मोटे तौर पर, साधारणतया एन है संख्या फ़ीचर्ज़ की जो हमारे पास हैं प्रत्येक मूवी के लिए. और इसलिए हमेशा की तरह हम रेग्युलराइज़ नहीं करेंगे थीटा 0 पर. हम रेग्युलराइज़ नहीं करते बाइयस टर्म्ज़ पर. सम है के ईक्वल्ज़ 1 से एन तक. अत: यदि आप मिनीमाइज करते हैं इसे एक फंक्शन थीटा जे का आपको एक अच्छा हल मिलता है. आपको एक काफ़ी अच्छा अनुमान मिल जाता है एक पेरामिटर वेक्टर थीटा जे का जिससे प्रिडिक्शन की जा सकती हैं यूज़र जे की मूवी रेटिंग्स की. रेकोम्मेंडेर सिस्टमज़ के लिए, मैं बदलूँगा यह नोटेशन थोड़ी सी. अत: आगे का गणित सरल करने के लिए, मैं हटाऊँगा यह टर्म एम जे को. तो केवल एक कॉन्स्टंट है, सही? तो मैं उसे निकाल सकता हूँ बिना बदले वैल्यू थीटा जे की जो मैं पाता हूँ इस ऑप्टिमायज़ेशन से. अत: यदि आप सोचें इस पूरी इक्वेज़न को लेना, इस पूरे इक्स्प्रेशन को लेना और गुणा करना उसे एम जे से, उस कॉन्स्टंट को हटा सकते हैं. और जब मैं इसे मिनमायज़ करता हूँ, मुझे अभी भी मिलनी चाहिए वही वैल्यू थीटा जे की जो पहले थी. अत: केवल दोहराने के लिए जो हमने पिछली स्लाइड में लिखा था, यह है हमारा ऑप्टिमायज़ेशन ओबजेक्टिव. लर्न करने के लिए थीटा जे जो है पेरामिटर यूज़र जे के लिए, हम करेंगे मिनमायज़ थीटा जे पर, इस ऑप्टिमायज़ेशन अब्जेक्टिव को. अत: यह है हमारा हमेशा की तरह स्क्वेर्ड एरर टर्म और यह है हमारी रेग्युलराइज़ेशन टर्म. अब अवश्य ही बनाने के लिए एक रेकोम्मेंडेर सिस्टम, हम नहीं चाहते लर्न करना पेरमिटर्स केवल एक यूज़र के लिए. हम  लर्न करना चाहते हैं पेरमिटर्स हमारे सारे यूज़र्ज़ के लिए. मेरे पास हैं एन सबस्क्रिप्ट यू यूज़र्ज़, अत: मैं लर्न करना चाहता हूँ ये सारे पेरमिटर्स. और इसलिए, मैं क्या करूँगा कि लूँगा इस ऑप्टिमायज़ेशन अब्जेक्टिव को और केवल जोड़ूँगा मिश्रित समेशन यहाँ पर. तो यह इक्स्प्रेशन यहाँ यह एक हाफ़ इसके ऊपर है बिलकुल वही जो हमारे पास ऊपर था. सिवाय इसके कि अब इसे करने के लिए सिर्फ़ एक यूज़र थीटा जे के स्थान पर, मैं करूँगा सम मेरा अब्जेक्टिव मेरे सारे यूज़र्ज़ पर और फिर मिनमायज़ करेंगे इसे पूरे ऑप्टिमायज़ेशन अब्जेक्टिव को, मिनमायज़ करेंगे इस पूरी कॉस्ट को. और जब मैं मिनमायज़ करता हूँ इसे एक फ़ंक्शन थीटा 1, थीटा 2, थीटा एन यू तक, मुझे मिलेगा एक भिन्न पेरामिटर वेक्टर प्रत्येक यूज़र के लिए. और मैं तब प्रयोग कर सकता हूँ उसे प्रिडिक्शन करने के लिए मेरे सारे यूज़र्ज़ के लिए, मेरे सारे एन सबस्क्रिप्ट यूज़र्ज़ के लिए. अत: सब कुछ एक साथ रखते हुए, यह था हमारा ऑप्टिमायज़ेशन अब्जेक्टिव टॉप पर. और इस चीज़ को एक नाम देने के लिए, मैं उसे कहूँगा जे(थीटा 1,...,थीटा एन यू). और जे है हमेशा की तरह मेरा ऑप्टिमायज़ेशन अब्जेक्टिव, जिसे मैं मिनमायज़ करने की कोशिश कर रहा हूँ. आगे, वास्तव में करने के लिए मिनमायज़ेशन, यदि आपको डिराइव करनी हों ग्रेडीयंट डिसेंट अप्डेट, ये हैं इक्वेज़न्स जो आपको मिलेंगी. तो आप लेंगे थीटा जे, के, और सब्ट्रैक्ट / घटा करेंगे एक अल्फ़ा से, जो है लर्निंग रेट, टाइम्ज़ ये टर्म्ज़ यहाँ पर दाईं तरफ़. तो थोड़े से अलग केस हैं जब के है 0 और जब के नहीं है 0. क्योंकि हमारी रेग्युलराइज़ेशन टर्म यहाँ रेग्युलराइज़ करती है सिर्फ़ वैल्यूज़ थीटा जे के की जब के नहीं है 0, अत: हम रेग्युलराइज़ नहीं करते थीटा 0, अत: थोड़े से अलग अप्डेट्स हैं जब के है 0 और जब के नहीं है 0. और यह टर्म यहाँ, उदाहरण के लिए, यह है सिर्फ़ पर्शियल डेरिवेटिव्स विद रिस्पेक्ट टु आपके पेरमिटर, जो आपके ऑप्टिमायज़ेशन अब्जेक्टिव के हैं. सही और इसलिए यह है केवल ग्रेडीयंट डिसेंट और मैंने पहले से ही कम्प्यूट कर लिए हैं डेरिवेटिवज़ और उनको यहाँ पलग कर दिया है. और यदि यह ग्रेडीयंट डिसेंट दिखता है काफ़ी कुछ वैसा जो यहाँ हमारे पास है लिनीअर रेग्रेशन के लिए, वह इसलिए क्योंकिं दरअसल ये लिनीअर रेग्रेशन जैसे ही हैं. केवल छोटा सा अंतर हैं कि लिनीअर रेग्रेशन में हमारे पास हैं ये 1 ओवर एम टर्म्ज़, यह वास्तव में होता 1 ओवर एम जे. लेकिन क्योंकि पहले हम डिराइव कर रहे थे ऑप्टिमायज़ेशन अब्जेक्टिव, हमने उसे हटा दिया, इसलिए हमारे पास नहीं है यह 1 ओवर एम टर्म. लेकिन अन्य प्रकार से यह वास्तव में सम मेरे ट्रेनिंग इग्ज़ैम्पल्ज़ का टाइम्ज़ एक्स के प्लस वह रेग्युलराइज़ेशन टर्म, प्लस वह रेग्युलराइज़ेशन टर्म योगदान देती है डेरिवेटिव को. और इसलिए यदि आप इस्तेमाल कर रहे हैं ग्रेडीयंट डिसेंट यहाँ हैं कि कैसे आप कर सकते हैं मिनमायज़ कॉस्ट फ़ंक्शन जे को, लर्न करने के लिए सारे पेरमिटर्स. और इस्तेमाल करके इन फ़ॉर्म्युलाज़ को डेरिवेटिव्स के लिए यदि आप चाहें, आप उनको पलग कर सकते हैं एक अधिक एडवांस्ड ऑप्टिमायज़ेशन अल्गोरिद्म में भी, जैसे कॉंजुगेट ग्रेडीयंट या एलबीएफ़जीएस या जो आपके पास है. और उसे प्रयोग करके कोशिश करें मिनमायज़ करने की कॉस्ट फ़ंक्शन जे को भी. आशा है, इससे आपको अब समझ आया है कि कैसे अप्लाई कर सकते हैं वास्तव में एक डीवीएशन लिनीअर रेग्रेशन की प्रिडिक्ट करने के लिए विभिन्न मूवी रेटिंग्स विभिन्न यूज़र्ज़ के द्वारा. यह ख़ास अल्गोरिद्म कहलाता है कांटेंट बेस्ड रेकमेंडेशन्स या एक कांटेंट बेस्ड पद्धति, क्योंकि हम मान लेते हैं कि हमारे पास हैं फ़ीचर्ज़ विभिन्न मूवीज़ के. और इसलिए फ़ीचर्ज़ जो कैप्चर करते हैं क्या है कांटेंट इन मूवीज़ का, कि कितनी रोमांटिक है यह मूवी, कितना ऐक्शन है इस मूवी में. और हम असल में प्रयोग कर रहे हैं फ़ीचर्ज़ मूवीज़ के कांटेंट के हमारी प्रिडिक्शन करने के लिए. लेकिन बहुत सी मूवीज़ के लिए, हमारे पास दरअसल नहीं होते ऐसे फ़ीचर्ज़. या शायद काफ़ी कठिन होता ले पाना ऐसे फ़ीचर्ज़ हमारी सारी मूवीज़ के लिए, उन सारी चीज़ों के लिए जो आप बेचना चाह रहे हैं. और इसलिए, अगले विडीओ में हम शुरू करेंगे बात करनी एक पद्धति के बारे में रेकोम्मेंडेर सिस्टम्ज़ के लिए जो कांटेंट बेस्ड नहीं है और यह भी नहीं मान कर चलती कि हमारे पास कोई अन्य है जो हमें दे रहा हैं ये सारे फ़ीचर्ज़ सारी मूवीज़ के लिए हमारे डेटा सेट में.