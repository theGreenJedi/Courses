En el último vídeo hablamos acerca del problema del sistema de recomendación en el que, por ejemplo, pudieran tener un conjunto de películas y pudiera tener un conjunto de usuarios, cada uno de los cuales ha calificado algún subconjunto de las películas, calificando las películas con 1 a 5 estrellas o de 0 a 5 estrellas, y lo que me gustaría hacer, es ver a estos usuarios y predecir cómo habrían calificado otras películas que aún no han calificado. En este video, me gustaría hablar de nuestro primer planteamiento para construir un sistema de recomendación; este enfoque se denomina «recomendaciones basadas en el contenido.» Aquí tenemos el conjunto de datos que establecimos anteriormente y, sólo para recordarles un poco de la notación, estuve usando nu para denotar el número de usuarios, así es que ese es igual a 4, y nm para indicar el número de películas; tengo cinco películas. Así que, ¿cómo puedo predecir cuales serían estos valores faltantes? Supongamos que para cada una de estas películas, tengo un conjunto de variables para ellas. En particular, digamos que para cada una de las películas, tengo dos variables que voy a llamar x1 y x2, en donde x1 mide hasta qué grado una película es una película romántica y x2 mide hasta qué una película es una película de acción. Así que si tomamos la película Love at last, la calificación de 0.9 en la escala de romance, es una película muy romántica, pero cero en la escala de la acción, de modo que casi no hay acción en esa película. Romance forever tuvo 1.0, mucho romance, y 0.01 de acción, no sé, tal vez hay un accidente de tráfico menor en esa película o algo parecido, así que poca acción. Nos vamos a saltar una; veamos Swords vs. Karate; tal vez esa tiene una calificación de cero en romance y sin romance en absoluto en ella, pero mucha acción y, ya saben, persecuciones de coches sin parar. Tal vez haya un poco de romance en esa película, pero sobre todo acción, y en Cute puppies of love nuevamente, es sobre todo una película de romance sin acción en absoluto. Así que si tenemos variables como éstas, entonces cada película se puede representar con un vector de dirección. Tomemos la película 1, sólo las llamaremos películas 1 2, 3, 4 y 5. Para mi primera película, Love at last, tengo mis dos variables, 0.9 y 0, por lo que estas son las variables x1 y x2, y agreguemos una variable extra, como de costumbre, que es mi variable interceptor x0, que es igual a 1 y así, al unirlas, tendría entonces una variable x(1), el superíndice 1 indica que es el vector de dirección para mi primera película, y este vector de dirección es igual a uno. El primero de ellos es el interceptor, y luego mis dos variables 0.9, 0, de esta manera. De modo que, para Love at last, tendría un vector de dirección x(1) para la película  Romance forever, tenemos un vector de dirección separado x(2), y así sucesivamente, y para Swords vs karate tendría un vector de dirección diferente x superíndice 5. También, consistente con nuestra notación anterior que estábamos utilizando, vamos a establecer n para que sea el número de variables, sin contar este término de la intersección x cero de modo que n  es igual a dos, porque tenemos dos variables
 x1 y x2 que capturan el grado de romance y el grado de acción en cada película. 
Ahora bien, a fin de hacer las predicciones, aquí está algo que podríamos hacer, y es que podríamos tratar de predecir las calificaciones de cada usuario como un problema de regresión lineal separado. Así es que digamos específicamente que para cada usuario j vamos a conocer un vector de parámetros teta j, que en este caso sería R3, de manera más general teta j estaría en R n+1, en donde n es el número de variables, sin contar el término de intersepción, y vamos a predecir al usuario j como si estuviera calificando la película i, sólo con el producto interno entre los parámetros vector teta y las variables "xii". Así es que vamos a tomar un ejemplo concreto. Tomemos al usuario uno. Esa sería Alice y, asociado con Alice, estaría algún vector de  parámetros, teta 1, y nuestro segundo usuario, Bob, estará asociado con un vector de parámetros diferente, teta 2. Carol se asociará con un vector de parámetros diferente, teta 3, y Dave con otro vector de parámetros, teta 4. Así es que digamos que queremos hacer una predicción de lo que Alice pensará de la película, Cute puppies of love. Bueno, esa película va a tener un vector de parámetros x(3), en donde tenemos que X(3) va a ser igual a 1, que es mi término de intersepción, y después 0.99, y después 0. Y digamos que para este ejemplo, digamos que, de alguna manera, ya tenemos un vector de parámetros, teta 1 para Alice - más adelante diremos exactamente cómo encontramos este vector de parámetros- pero digamos simplemente por ahora que algún algoritmo de aprendizaje no especificado ha aprendido el vector de parámetros teta 1, y es igual a 0 5 0. De manera que nuestra predicción para esta entrada va a ser igual a teta 1, que es el vector de parámetros de Alice, transponer x3, que es el vector de dirección para la película número 3 Cute Puppies of Love. De modo que el producto interior entre estos dos vectores va a ser 5 x 0.99, que es igual a 4.95. Así que mi predicción para evaluar esto aquí, será 4.95. Y tal vez eso me parece un valor razonable, si es que este es mi vector de parámetros teta 1. Así que todo lo que estamos haciendo aquí es aplicar una copia diferente de la regresión esencialmente lineal para cada usuario, y estamos diciendo que lo que hace Alice, es que Alice tiene algún vector de parámetros teta 1 que ella usa, que utilizamos para predecir sus calificaciones como una función de cuán romántica y cuán llena de acción está la película, y Bob, y Carol, y David tiene, cada uno, una función lineal diferente del romanticismo o la acción, o el grado de romance y el grado de acción en una película, y así es como vamos a predecir sus calificaciones con estrellas. De manera más formal, aquí está cómo podemos escribir el problema. Nuestra notación es que r(i,j) es igual a uno, si el usuario j ha calificado la película i; y(i,j) es la calificación de esa película si existe esa calificación. Esto es, si ese usuario ha calificado en realidad esa película. Y en la diapositiva anterior también definimos teta j, que es un parámetro para el usuario j, x(1) que es un vector de dirección para la película específica, y para cada usuario y cada película podríamos predecir esas calificaciones, de la siguiente manera. Permítanme presentarles, sólo temporalmente, una notación extra, mj; vamos a utilizar mj para indicar el número de usuarios que calificaron por película j, vamos a necesitar esta notación sólo para esta diapositiva. Ahora, a fin de conocer el vector de  parámetros para teta j, bueno, ¿cómo podemos hacerlo? Esto es básicamente un problema de regresión lineal. Así que lo que podemos hacer es simplemente elegir un vector de parámetros, teta j, de manera que el valor predicho aquí esté lo más cerca posible a los valores que observamos en nuestro conjunto de entrenamiento, los valores que observamos en nuestros datos. Así que vamos a escribir eso. A fin de conocer el vector de parámetros teta j, vamos a minimizar sobre mi vector de parámetros, teta j, de la suma - y quiero sumar sobre todas las películas que el usuario j haya calificado - por lo que escribimos esto como suma sobre todos los valores de i, --esto es un signo de dos puntos-- r(i,j) igual a 1. Así que la manera de leer este índice de suma es esta es la suma sobre todos los los valores de i, de manera que r(i,j) es igual a 1. Así que esto se va a sumar sobre todas las películas que el usuario j ha calificado. Y luego voy a calcular teta j transponer xi así que esa es la predicción de la calificación del usuario j sobre la película i, menos y(i,j), así que eso es la calificación real observada, al cuadrado, y luego, voy a dividir entre el número de películas que el usuario j, haya calificado en realidad, así es que sólo se divide entre 1 sobre 2mj. Y entonces esto es como la regresión de mínimos cuadrados, es como una regresión lineal en donde queremos elegir el vector de parámetros  teta j, para minimizar este tipo de término de error al cuadrado. Y si lo desean, pueden añadir también un término de regularización de modo que más «lambda» sobre 2 m, y esto es realmente 2 m(j) porque esto como si tuviéramos ejemplos de m(j) ¿correcto? Porque si el usuario j ha calificado tantas películas, es como si tuviéramos tantos puntos de datos con los cuales ajustar los parámetros teta j, y después permítanme añadir mi habitual término de regularización aquí de teta j, k cuadrada. Como de costumbre, esta suma es de k es igual a 1 hasta n, por lo que aquí teta j va a ser una n más 1 vector de dimensiones en donde, en nuestro ejemplo anterior, n era igual a dos, pero de manera más general, n es el número de variables que tenemos por película. Así que, como de costumbre, no regularizamos sobre teta 0. No regularizamos sobre el término de oscilación, porque la suma es de k1 hasta n. Si minimizan esto como una función de teta j  obtienen una buena solución, obtienen un estimado bastante bueno de un vector de parámetros teta j con el que hacer las predicciones para las calificaciones de películas del usuario j. Para los sistemas de recomendación, vamos a cambiar esta notación un poco. Así que para simplificar las matemáticas subsecuentes, de hecho me voy a deshacer de este término mj. Así que eso es sólo una constante, de modo que puedo borrarlo sin cambiar el valor de teta j que obtengo de esta optimización, así que si se imaginan tomando esta ecuación completa, tomando esta expresión completa y multiplicándola por mj y se deshacen de esa constante, y cuando minimizo ésta, todavía debería obtener el mismo valor de teta j como antes. Así, sólo para repetir lo que escribimos en la diapositiva anterior, aquí está nuestro objetivo de optimización. A fin de conocer teta j, que es un parámetro para el usuario j, vamos a minimizar sobre teta j de este objetivo de optimización. Así es que este es nuestro término de error cuadrado habitual y después este es nuestro término de regularización. Por supuesto, cuando estamos construyendo un sistema de recomendación, no sólo deseamos conocer los parámetros para un solo usuario, queremos conocer los parámetros para todos nuestros usuarios; tengo usuarios n subíndice u así que quiero saber todos estos parámetros y lo que voy a hacer es tomar esta minimización, tomar este objetivo de optimización y sólo agregar una suma adicional allí. Así que,  esta expresión aquí con la mitad en la parte superior de nuevo, así que es exactamente lo mismo como lo que tenemos en la parte superior, excepto que ahora, en lugar de sólo hacer esto para un usuario específico teta J, voy a sumar mi objetivo sobre todos mis usuarios y luego voy a minimizar este objetivo de optimización general. Minimizar esta función de costos general. Y cuando minimizo esto como una función de teta 1, teta 2, hasta teta nu, obtendré un vector de parámetros independiente por cada usuario y entonces puedo usar éste para hacer predicciones para todos mis usuarios para todos mis usuarios n subíndice u. Así que al poner todo junto, este fue nuestro objetivo de optimización en la parte superior, y para darle un nombre a esto, voy a llamar a esta j de teta 1, punto, punto, punto teta nu. De manera que, como de costumbre, j es mi objetivo de optimización que estoy tratando de minimizar. A continuación, con el fin de realmente hacer la minimización, si van a derivar las actualizaciones en gradiente descendente, estas son las ecuaciones que obtendrían, así que tomaría teta jk y le restaría «alfa», que es la tasa de aprendizaje multiplicada por estos términos, aquí a la derecha. Así que tenemos casos ligeramente diferentes, de modo que cuando k es igual a 0 y cuando k no es igual a 0, debido a nuestro término de regularización aquí regulariza sólo los valores de teta jk sólo si k no es igual a 0.  Así es que no regularizamos teta 0, de modo que las ligeramente diferentes actualizaciones para k son igual a cero, y k no es igual a 0. Y este término, por aquí, por ejemplo, es sólo una derivada parcial con respecto a su parámetro, el de su objetivo de optimización, ¿correcto? Así es que, esta es sólo una gradiente descendiente y ya he calculado las derivadas y las conecté aquí. Si estas actualizaciones en gradiente descendente son muy parecidas a las que tuvimos para la regresión lineal, esto es debido a que estas son esencialmente las mismas que las de la regresión lineal. La única diferencia menor es que para la regresión lineal tenemos estos 1 sobre los términos m - es realmente 1 sobre mj - pero debido a que antes, cuando estábamos derivando el objetivo de optimización nos libramos de esto, es por eso que no tenemos este 1 sobre el término m. Pero por lo demás, es realmente la suma de mis ejemplos de entrenamiento de, ya saben, el error multiplicado por xk más ese término de regularización que contribuye a la derivada. De manera que si están usando el gradiente descendiente, aquí está cómo pueden minimizar la función de costo j, para conocer todos los parámetros y el uso de estas fórmulas para las derivadas, si lo desean, también pueden conectarlas en un algoritmo de optimización más avanzada como un gradiente de clúster o LBFGS o lo que sea, y usar eso para tratar de minimizar la función de costo j también. Así que espero que ahora sepan cómo pueden aplicar esencialmente una variación en la regresión lineal a fin de predecir las diferentes calificaciones de las películas por parte de diferentes usuarios. Este algoritmo particular se llama recomendaciones basadas en el contenido, o enfoque basado en contenidos, ya que suponemos que tenemos disponibles variables para las diferentes películas. De manera que tenemos variables que capturan lo que es el contenido de estas películas. ¿Qué tan romántica es esta película? ¿Cuánta acción hay en esta película? Y en realidad estamos usando las variables del contenido de las películas para hacer nuestras predicciones. Pero para muchas películas, no tenemos en realidad dichas variables, o pudiera ser muy difícil conseguir tales variables para todas nuestras películas, para todos los artículos que sea que estemos tratando de vender. De modo que en el siguiente vídeo empezaremos a hablar de un enfoque para los sistemas de recomendación que no se basa en el contenido, y no supone que tenemos disponible a alguien más que nos dé todas estas variables para todas las películas en nuestro conjunto de datos.