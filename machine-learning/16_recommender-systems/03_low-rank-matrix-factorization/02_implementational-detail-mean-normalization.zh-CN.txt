到目前为止 你已经了解到了 推荐系统算法或者 协同过滤算法的所有要点 在这节视频中 我想分享最后一点实现过程中的细节 这一点就是均值归一化 有时它可以让算法 运行得更好 为了了解均值归一化这个想法的动机 我们考虑这样一个例子 有一个用户没有给任何电影评分 加上之前我们有四个用户 Alice Bob Carol 和 Dave 我现在加上了第五个用户 Eve 她没有给任何电影评分 我们来看看协同过滤算法 会对这个用户做什么 假如说 n 等于2 所以我们要学习两个特征变量 我们要学习出 一个参数向量θ(5) 这是一个二维向量 提醒一下 这个向量是 n 维的 而不是 n+1 维的 我们要学习5号用户 Eve 的参数向量 θ(5) 如果我们看 这个优化目标的 第一项 用户 Eve 没给任何电影打过分 所以对用户 Eve 来说 没有电影 满足 r(i,j)=1 这个条件 所以这第一项 完全不影响 θ(5) 的值 因为没有电影被 Eve 评过分 所以影响 θ(5) 值的唯一一项 是这一项 这就是说 我们想选一个向量 θ(5) 使得最后的正则化项 尽可能地小 换句话说 我们想要最小化这个式子 λ/2[(θ(5)_1)^2+(θ(5)_2)^2] λ/2[(θ(5)_1)^2+(θ(5)_2)^2] λ/2[(θ(5)_1)^2+(θ(5)_2)^2] 它们是和用户5有关的 正则化项的要素 当然 如果你的目标是 最小化这一项 那么你最终得到的 就会是 θ(5)=[0;0] 因为正则化项 会让你的参数 接近0 如果没有数据 能够使得参数 远离0 因为这第一项 不影响 θ(5) 值 我们就会得到 θ(5) 等于零向量的结果 所以当我们要预测 用户5会如何 给电影打分 我们有 θ(5) 转置乘以 x(i) 对任意i 结果都会等于0 因为对任意x值 θ(5) 都是0 这个内积就会等于0 因此我们得到的结果是 我们会预测 Eve 给所有电影的评分 都是零星 但是这个结果看起来没什么用吧？ 我的意思是 如果你看不同的电影 《爱到最后》 这第一个电影 两个人给它评了五星 甚至对《剑与空手道》 也有人评了五星 所以某些人确实喜欢某些电影 看起来只是预测 Eve 会给他们全部评零星是没用的 而且实际上如果我们预测 Eve 会给所有电影零星的话 我们还是没有任何好方法 来把电影推荐给她 因为你知道 预测结果是所有这些电影 都会被 Eve 给出一样的评分 所以没有一部电影 拥有高一点儿的预测评分 让我们能推荐给她 所以这不太好 均值归一化的想法可以让我们解决这个问题 下面介绍它是如果工作的 和以前一样 我们把所有评分放到矩阵Y里 就是把所有这些评分 全部整合到矩阵Y中 这边这列 全部是问号的这列 对应的是 Eve 没有给任何电影评分 现在要实现均值归一化 我要做的就是计算 每个电影所得评分的均值 我要把它们存在一个向量中 我们称这个向量为 µ 所以第一个电影得到了两个5星和两个0星的评价 均值就是2.5星评价 第二个电影的平均评价 是2.5星 等等 最后一个电影的评分是 0 0 5 0 0 0 5 0 的平均值 0 0 5 0 的平均值 就是1.25星评价 我要做的事 要把所有的电影评分 要把所有的电影评分 减去平均评分 所以这第一个元素5 我要减去2.5 等于2.5 第二个元素5 减去2.5 得到2.5 然后是0 0 减去2.5 得到-2.5 -2.5 换句话说 我要做的就是 把我的电影评分矩阵 也就是这个Y矩阵 把它的每一行都减去那个电影的平均评分 所以我做的就是 把每个电影都归一化为 平均评分为零 最后一个例子 如果你看最后一行 0 0 5 0 我们要减去1.25 最后我得到 那边这些值 那么现在 当然这些问号没变 还是问号 所以每个电影 在新矩阵Y中的 平均评分都是0 接下来我要做的就是 对这个评分数据集 使用协同过滤算法 所以我要假设 这就是我从用户那儿 得到的数据 或者假设它们就是 我从用户那儿得到的实际评分 我要把这个当做我的数据集 用它来学习 我的参数 θ(j) 和特征变量 x(i) 就是用这些均值归一化后的电影评分来学习 当我想要做 电影评分预测时 我要做的步骤如下 对用户j对电影i的评分 我要预测它为 θ(j) 转置乘以 x(i) 其中 x 和 θ 都是 均值归一化的数据集中学习出的参数 但是因为我已经对数据集 减去了均值 所以为了 给电影i预测评分 我要把这个均值加回来 所以我要再加回 µi 所以我要再加回 µi 所以这就是 我得到的预测值 因为训练数据减去了所有的均值 所以当我做预测时 我们需要 给电影 i 加回这个均值 µi 具体来说 如果用户5 Eve 之前幻灯片里的的描述仍然成立 Eve 从来没有 给任何电影打分 所以学习到的用户5的参数 仍然还是 会等于 0 0 所以我们会得到的是 所以我们会得到的是 对特定的电影 i 我们预测 Eve 的评分是 θ(5) 转置乘以 x(i) 然后再加上 µi 所以如果 θ(5) 等于0的话 这第一部分就会等于0 所以对电影 i 的评分 我们最终会预测为 µi 这实际上是说得通的 它的意思是 对于电影 1 我们会预测 Eve 对它的评分是2.5 对于电影2 我们会预测 Eve 给它2.5星 对于电影3 我们会预测 Eve 给它2星 等等很多项 这其实说得通 因为它的意思是 如果 Eve 没给任何电影评分 我们就对这个新用户 Eve 一无所知 我们要做的就是预测 她对每个电影的评分 就是这些电影所得的平均评分 就是这些电影所得的平均评分 最后再补充一下 在这个视频中 我们谈到了均值归一化 我们归一化矩阵Y 使得每行的均值都是0 如果有些电影是没有评分的 这个情形类似于 有的用户没有给任何电影评分的情况 但是如果你有些电影 是没有评分的 你可以尝试这个算法的其他版本 你可以对不同的列 进行归一化 使得它们的均值为0 而不是把行均值归一化为0 虽说这个可能不太重要 因为如果你 真的有个电影没有评分 可能不管怎么说 你就不该把这个电影推荐给任何人 所以说 解决用户没评价过 任何电影的状况 可能比解决 电影没被评价过 的状况更重要 最后总结一下 这就是可以说是作为协同过滤算法的预处理步骤 均值归一化的实现 根据你的数据集的不同 它可能有时会让实现的算法 表现得好一点儿 【教育无边界字幕组】翻译：竹二个 校对/审核：所罗门捷列夫