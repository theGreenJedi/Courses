ここ何回かのビデオで、 協調的フィルタリングのアルゴリズムについて議論してきた。 このビデオでは、このアルゴリズムの ベクトル化した実装について ちょこっと話しておきたい。 またついでにこのアルゴリズムについて出来るその他の事についても話す。 例えば、出来る事の一つに ある商品が 与えられた時に、 これに関連した商品を探す、 というのがある。これは例えば ユーザーが最近ある商品を見たとすると、 このユーザーに推薦する、別の関連した 商品は無いか？という事。 ではどうやってこれが出来るか見てみよう。 ここでやろうとしているのは、 協調的フィルタリングのアルゴリズムの予測を 別のやり方で練習する、という物。 はじめに、これが 我々のデータセットで 五つの映画がある。 そして私がやる事は、 ユーザーのレーティングを全て 取ってきて、一つの行列に グループ化する。するとここでは、 5つの映画と4人のユーザーがいるので、 この行列yは 5x4行列になる。 これは単純に、 これらの要素、これらのデータを全部とってきて、 これははてなマークも全部含めて、それをこの行列にグループ化した物だ。 もちろんこの行列の要素、 この行列の要素 i jは、 実際は、以前に yの上付き添字i jと 書いていた物だ。 それはユーザーjによる映画iのレーティング。 我らの持つ全てのレーティングを含む この行列Yが与えられたとすると、 レーティングを予測する アルゴリズムを書き下す 代替的な方法がある。 特に、もしあなたが あるユーザーのある映画に対する 予測を調べたいなら、 ユーザーjの映画iに対する予測の 式はこうなる。 だから、予測されたレーティングの 行列があれば、 それは以下のような 行列だろう、 i jエントリが これがユーザーjが映画iに 与えるレーティングの 予測値で、 それは正確に シータjの転置 xi にイコールだ。 つまり、この行列は、 最初の要素、 この要素 1 1は、 ユーザー1の映画1に対するレーティングの 予測値だ。 そしてこの要素、要素 1 2は、 ユーザー2の映画1に対する レーティングの予想値。 などなど。 そしてこれは、 ユーザー1の最後の映画に対する レーティングの予想値。 そしてこれは、 このレーティングは この値を予想した物で、 このレーティングは この値を予想した物で、、、 などなど。 いま、このレーティングの予想値の行列が 与えられたとすると、これらを書きだす より簡単な、またはベクトル化した方法が存在する。 まず、行列Xを 定義する。これは、 以前、線形回帰であった 行列に似ている。 x1の転置にx2の転置に、、、と xのn mの転置まで 降りていく。 つまり全ての映画の フィーチャーを持ってきて 列として積んでいく。 つまり各映画を 一つの手本とみなして、 それら別々の映画のフィーチャーを 列として積んでいく訳だ。 そしてまた、 行列として大文字のシータも作りたい。 その為には、 ユーザー毎のパラメータベクトルを 取ってきて、 同様に列として積んでいく。 つまり、これがシータ1で、 これは最初のユーザーのパラメータベクトルだ。 そしてシータ2、 つまり、このように 列として積んでいって 大文字のシータの行列を定義する。 するとこのように列として積み上がった n u個のパラメータベクトルを列に持った物を得る。 さて、行列Xと行列シータが こう定義 されたとして、 全ての予測を計算する ベクトル化した方法を 得るには、 単純に X掛けるシータ転置 を 計算するだけで良い。 それがここにあるこの行列を計算する ベクトル化した方法となっている。 協調的フィルタリングには、 別の名前もある。 我らの使っているこのアルゴリズムはまた、 低ランク行列分解とも 呼ばれている。 つまりもし人々が 低ランク行列分解について 話しているのを耳にした時は、それは本質的には 我らがここまで議論して来た物と同一の物だ。 そしてこの用語は この行列 X 掛ける シータ転置 が持つ 数学的特徴に、 線形代数では この低ランク行列と 呼ばれる物があって、 だからこれらのアルゴリズムには 低ランク行列分解という 名前がついた。 この行列 X シータ転置 の持つ低ランクという 行列の特徴の為に。 もし低ランクというのが なんなのか知らなくて、低ランク行列というのが 何なのか知らなくても、まぁ気にすんな。 このアルゴリズムを使うのに、そんな事を知ってる必要はまったく無い。 だがもしあなたが線形代数のエキスパートなら、 そんな理由でこのアルゴリズムに 低ランク行列分解という 別名がついた、というワケ。 最後に、協調的フィルタリングのアルゴリズムを 実行する時に、 実行出来る別の事として、こんなのがある。 それは関連する映画を探す為に 学習したフィーチャーを用いる、という物。 具体的には、各商品iに関して 実際には各映画iに関して、 フィーチャーベクトルxiを学習した。 つまり、あるフィーチャー群を学習した時には、 どんなフィーチャーがあるのかとかは 前もっては 知らなかった。 だがアルゴリズムを実行すると、フィーチャーは これらの別々の映画の または別々の商品の、またはなんでも、 これらの重要な性質は何か、を捕捉する傾向にある。 何がある種のユーザー達がある映画たちを 好きになる重要な 特徴なのか、そしてあるユーザー達が 異なる映画を好む、重要な特徴とは何か。 だから例えば、最終的に あなたはフィーチャーx1としてロマンスを x2としてアクションを、これまでの例と同様に 学習した上で、 さらに別のフィーチャーx3として コメディー度合いを 学習する事になるかもしれない。 さらにx4として別の何かを学習するかも。 そうやってn個のフィーチャーを 得る事になったとして、 実際はこれらのフィーチャーを 見ていって、これらのフィーチャーが 本当は何を意味しているのかを 人間が理解するのは とても難しい事が多い。 だが実践的には、 これらのフィーチャーが、たとえ可視化する事すら大変でも、 これらのフィーチャーが何なのかを突き止めるのは大変であっても、 だいたいは、それが何にせよ あなたが映画を好いたり嫌ったりする もっとも特徴的でとても意義深い 特徴を 捕捉しているフィーチャーを 学習する。 では、以下のような問題に取り組むとしよう。 あなたがある映画iを持ってたとする、 そしてあなたはその映画に 関連した別の映画jを 探したい。 ところで、いったいなんでそんな事したいのか？ いいでしょう。例えば ユーザーが映画をブラウズしているとする、 そして彼は今、映画jを観ているとする、 その時、映画jを観終わった後に 彼に視聴を推薦すべき、リーズナブルな映画はなんだろう？ または誰かが映画jを購入したとすると、 その時に彼らに購入を検討してもらう為に 推薦する事がリーズナブルな別の映画はなんだろう？ いまやあなたはこれらの学習した フィーチャーを持っているのだから、 これを用いて二つの映画がどの位近いかを 測るとても便利な方法がある。 具体的には、映画iは フィーチャーベクトルxiを持つ訳だが、 別の映画jを、 フィーチャーベクトル xiとxjの 距離が短い物として 探す事が出来る。 これは二つの映画、 iとjが類似しているという 極めて強い示唆を与える。 少なくとも、映画iを好きな人は 映画jも好むだろう、という意味において。 ではまとめると、 ユーザーが映画iを 見ていたとする、 そしてあなたはその映画にもっとも似た 5つの新しい映画を彼らに リコメンド（推薦） したいとする。 あなたがする事は、これら別々の映画間で フィーチャーの距離が一番小さい 5つの映画を 探してくる、という事。 これであなたは勧めるべき幾つかの映画を得る事が出来る。 以上で全てのユーザー、全ての映画の 予測レーティングを ベクトル化して実装し計算する やり方を 理解出来ただろう、 そして学習したフィーチャーを どのように用いて、 どの映画とか商品が 関連しているのかを探す方法も。