Você já viu os principais pontos do algoritmo de recomendações, o algoritmo de filtragem colaborativa. Neste vídeo, quero falar sobre um detalhe de implementação chamado "normalização pela média", que pode fazer o algoritmo funcionar um pouco melhor. Para motivar o uso da normalização pela média, vamos considerar um exemplo onde há um usuário que não avaliou nenhum filme. Então, além dos 4 usuários Alice, Bob, Carol e Dave, eu adicionei uma quinta usuária, Eve, que não avaliou nenhum filme. Vamos ver o que o nosso algoritmo fará com esse usuário. Digamos que "n = 2", e então, vamos aprender dois atributos, e teremos que aprender um vetor de parâmetros "θ⁽⁵⁾", em "ℝ²", e lembre-se que isso agora é um vetor em "ℝⁿ", não em "ℝⁿ⁺¹".
Vamos aprender o vetor de parâmetros "θ⁽⁵⁾", para a usuária 5, Eve. Então, se olharmos para o primeiro termo desse objetivo de otimização, como a usuária Eve não avaliou nenhum filme, não há filmes para os quais "r(i, j) = 1" para a usuária Eve. Então, esse termo não afeta "θ⁽⁵⁾", porque Eve não avaliou nenhum filme. O único termo que afeta "θ⁽⁵⁾" é o último termo. Então, queremos escolher o vetor "θ⁽⁵⁾" tal que o último termo de regularização seja o menor possível. Em outras palavras, queremos minimizar "(λ/2)[(θ⁽⁵⁾₁)² +(θ⁽⁵⁾₂)²]". "(λ/2)[(θ⁽⁵⁾₁)² +(θ⁽⁵⁾₂)²]". "(λ/2)[(θ⁽⁵⁾₁)² +(θ⁽⁵⁾₂)²]". "(λ/2)[(θ⁽⁵⁾₁)² +(θ⁽⁵⁾₂)²]". Esse é o componente do termo de regularização que corresponde à usuária 5. E, se o seu objetivo é minimizar esse termo, você vai terminar com "θ⁽⁵⁾ = [0; 0]" porque o termo de regularização nos induz a usar parâmetros perto de 0. Como não há dados para mover os parâmetros do 0, já que o primeiro termo não afeta "θ⁽⁵⁾", nós terminamos com "θ⁽⁵⁾" igual a um vetor de zeros. Então, quando vamos predizer como a usuária 5 avaliará cada filme, teremos que "(θ⁽⁵⁾)ᵀ · x⁽ⁱ⁾", para qualquer "i", será igual a 0. Como "θ⁽⁵⁾" é 0, para qualquer "x" esse produto será igual a 0. Assim, nós vamos predizer que Eve vai avaliar todos os filmes com 0 estrelas. Mas isso não é muito útil, certo? Quer dizer, se você olhar bem os filmes, o primeiro filme foi avaliado com 5 estrelas por duas pessoas, assim como o último. Algumas pessoas parecem gostar de alguns filmes, não é útil predizer que Eve avaliará tudo com 0 estrelas. E, na verdade, se predizemos que Eve vai avaliar tudo com 0 estrelas, não teremos nenhuma forma de recomendar filmes a ela, já que todos esses filmes terão exatamente a mesma avaliação estimada para Eve, então não há um filme com estimativa de avaliação maior para recomendarmos a ela. E isso não é bom. A normalização pela média ajuda a corrigir esse problema. Ela funciona assim. Como anteriormente, eu vou pegar todas as minhas avaliações e agrupá-las nessa matriz "Y". A coluna de pontos de interrogação corresponde à falta de avaliações de Eve. Agora, para fazer a normalização pela média, vou computar a avaliação média obtida por cada filme, e vou guardar isso em um vetor, chamado "μ". Então, o primeiro filme teve duas avaliações de 5 e duas de 0 estrelas, portanto, a sua média foi uma avaliação de 2.5. O segundo filme teve uma média de 2.5 estrelas. O último filme teve "[0, 0, 5, 0]", e a média de "[0, 0, 5, 0]" é uma avaliação de 1.25. Agora vou olhar todas as avaliações de cada filme, e subtrair a avaliação média. Então, subtraio 2.5 do primeiro elemento, 5, restando 2.5. Subtraindo 2.5 do segundo elemento, 5, tenho 2.5. E subtraindo 2.5 de 0 e 0, eu terei -2.5 e -2.5. Em outras palavras, o que vou fazer é pegar a minha matriz de avaliações de filmes, "Y", e subtrair, de cada linha, a avaliação média daquele filme. Então, eu estou apenas normalizando cada filme para ter uma avaliação média de 0. Um último exemplo: Se você olhar a última linha, de "[0 0 5 0]", vou subtrair 1.25, e terminar com esses valores aqui. Os pontos de interrogação, claro, continuam pontos de interrogação. Então, cada filme, nessa nova matriz "Y", tem uma média de avaliação de 0. O que vou fazer é tomar esse conjunto de avaliações e usá-lo no algoritmo de filtragem colaborativa. Então, vou fingir que esses são os dados que eu recebi dos meus usuários, que essas são as avaliações reais que recebi dos usuários, e vou usar isso como meu conjunto de dados para aprender os meu parâmetros "θ⁽ʲ⁾" e minhas variáveis "x⁽ⁱ⁾", a partir das avaliações normalizadas pela média. Quando eu quiser estimar avaliações de filmes, vou fazer o seguinte: para o usuário "j", no o filme "i", vou estimar "(θ⁽ʲ⁾)ᵀ · x⁽ⁱ⁾", onde "θ" e "x" foram aprendidos dos dados normalizados pela média. Mas, como eu tinha subtraído as médias, para fazer uma predição para o filme "i", preciso adicionar a média de volta. Portanto, vou adicionar "μᵢ" de volta. Essa vai ser minha predição. Nos dados de treinamento eu subtraí todas as médias, então, ao fazermos predições, precisamos adicionar essas médias "μᵢ" para o filme "i". Para a usuária 5, Eve, o mesmo argumento do slide anterior, se aplica. Já que Eve não avaliou nenhum filme, os parâmetros aprendidos para a usuária 5 serão iguais a "[0; 0]". Então teremos o seguinte: para um filme específico "i", vamos estimar, para Eve, "(θ⁽⁵⁾)ᵀ · x⁽ⁱ⁾ + μᵢ", adicionando "μᵢ". Mas o primeiro componente será igual a 0, já que "θ⁽⁵⁾" é igual a 0. Assim, para o filme "i", vamos estimar "μᵢ". Na verdade, isso faz sentido. Significa que, para o filme 1, vamos estimar a avaliação de Eve como 2.5. Para o filme 2, estimamos 2.5, para o filme 3 uma avaliação de 2, e assim por diante. Isso faz sentido, porque diz que se Eve não tiver avaliado nenhum filme, não sabemos nada sobre Eve, o que vamos fazer é estimar, para cada filme, a avaliação média que aquele filme recebeu. Finalmente, além disso, nesse vídeo nós falamos sobre normalização pela média, onde normalizamos cada linha da matriz "Y" para média 0. Caso de você tenha algum filme sem nenhuma avaliação, o caso é análogo ao do usuário sem avaliações. Mas, com os filmes sem avaliações, você pode brincar com versões do algoritmo onde você normaliza as colunas para que tenham média zero, ao invés de normalizar as linhas. Talvez isso seja menos importante, porque, se você tem um filme sem nenhuma avaliação, talvez você não devesse recomendar esse filme a ninguém. Então, resolver o caso do usuário que não avaliou nada é mais importante do que resolver o caso do filme que não recebeu nenhuma avaliação. Resumindo, é assim que você pode fazer normalização pela média como um pré-processamento, para a filtragem colaborativa. Dependendo dos seus dados, isso pode fazer a sua implementação funcionar melhor.
Tradução: Pablo de Morais Andrade.