1
00:00:00,240 --> 00:00:01,690
In the last couple videos, we

2
00:00:01,820 --> 00:00:02,990
talked about the ideas of

3
00:00:03,140 --> 00:00:04,570
how, first, if you're

4
00:00:04,780 --> 00:00:06,210
given features for movies, you

5
00:00:06,920 --> 00:00:08,610
can use that to learn parameters data for users.

6
00:00:09,490 --> 00:00:11,400
And second, if you're given parameters for the users,

7
00:00:11,920 --> 00:00:13,570
you can use that to learn features for the movies.

8
00:00:14,480 --> 00:00:15,550
In this video we're going

9
00:00:15,650 --> 00:00:16,670
to take those ideas and put

10
00:00:16,850 --> 00:00:18,130
them together to come up

11
00:00:18,280 --> 00:00:20,130
with a collaborative filtering algorithm.

12
00:00:21,250 --> 00:00:22,450
So one of the things we worked

13
00:00:22,520 --> 00:00:23,640
out earlier is that if

14
00:00:23,680 --> 00:00:24,510
you have features for the

15
00:00:24,600 --> 00:00:25,740
movies then you can solve

16
00:00:26,070 --> 00:00:27,590
this minimization problem to find

17
00:00:27,950 --> 00:00:30,010
the parameters theta for your users.

18
00:00:30,730 --> 00:00:32,260
And then we also

19
00:00:32,640 --> 00:00:33,960
worked that out, if you

20
00:00:34,360 --> 00:00:37,440
are given the parameters theta,

21
00:00:38,080 --> 00:00:38,990
you can also use that to

22
00:00:39,170 --> 00:00:40,800
estimate the features x, and

23
00:00:40,870 --> 00:00:42,980
you can do that by solving this minimization problem.

24
00:00:44,310 --> 00:00:45,720
So one thing you

25
00:00:45,880 --> 00:00:47,360
could do is actually go back and forth.

26
00:00:47,870 --> 00:00:50,230
Maybe randomly initialize the parameters

27
00:00:50,510 --> 00:00:51,350
and then solve for theta,

28
00:00:51,780 --> 00:00:52,690
solve for x, solve for theta,

29
00:00:52,870 --> 00:00:54,330
solve for x. But, it

30
00:00:54,420 --> 00:00:55,220
turns out that there is a

31
00:00:55,400 --> 00:00:56,760
more efficient algorithm that doesn't

32
00:00:56,980 --> 00:00:57,910
need to go back and forth

33
00:00:58,110 --> 00:00:59,700
between the x's and the

34
00:00:59,730 --> 00:01:00,670
thetas, but that can solve

35
00:01:01,300 --> 00:01:04,250
for theta and x simultaneously.

36
00:01:05,160 --> 00:01:06,310
And here it is. What we are going to do, is basically take

37
00:01:06,600 --> 00:01:08,990
both of these optimization objectives, and

38
00:01:09,130 --> 00:01:10,640
put them into the same objective.

39
00:01:11,550 --> 00:01:12,590
So I'm going to define the

40
00:01:12,730 --> 00:01:15,010
new optimization objective j, which

41
00:01:15,250 --> 00:01:16,540
is a cost function, that

42
00:01:16,640 --> 00:01:17,630
is a function of my features

43
00:01:18,050 --> 00:01:19,150
x and a function

44
00:01:19,790 --> 00:01:20,750
of my parameters theta.

45
00:01:21,660 --> 00:01:23,050
And, it's basically the two optimization objectives

46
00:01:23,520 --> 00:01:24,920
I had on top, but I put together.

47
00:01:26,270 --> 00:01:27,760
So, in order to

48
00:01:28,060 --> 00:01:31,140
explain this, first, I want to point out that this

49
00:01:31,400 --> 00:01:33,420
term over here, this squared

50
00:01:33,820 --> 00:01:35,490
error term, is the same

51
00:01:35,920 --> 00:01:39,250
as this squared error term and the

52
00:01:39,760 --> 00:01:40,880
summations look a little bit

53
00:01:41,050 --> 00:01:42,940
different, but let's see what the summations are really doing.

54
00:01:43,800 --> 00:01:45,090
The first summation is sum

55
00:01:45,480 --> 00:01:48,280
over all users J and

56
00:01:48,380 --> 00:01:50,590
then sum over all movies rated by that user.

57
00:01:51,890 --> 00:01:53,240
So, this is really summing over all

58
00:01:53,470 --> 00:01:55,950
pairs IJ, that correspond

59
00:01:56,510 --> 00:01:57,830
to a movie that was rated by a user.

60
00:01:58,550 --> 00:01:59,960
Sum over J says, for every

61
00:02:00,150 --> 00:02:01,520
user, the sum of

62
00:02:01,740 --> 00:02:03,110
all the movies rated by that user.

63
00:02:04,250 --> 00:02:07,340
This summation down here, just does things in the opposite order.

64
00:02:07,630 --> 00:02:08,710
This says for every movie

65
00:02:09,050 --> 00:02:11,140
I, sum over all

66
00:02:11,340 --> 00:02:12,480
the users J that have

67
00:02:12,690 --> 00:02:14,580
rated that movie and so, you

68
00:02:14,690 --> 00:02:16,100
know these summations, both of these

69
00:02:16,220 --> 00:02:18,150
are just summations over all pairs

70
00:02:18,930 --> 00:02:21,150
ij for which

71
00:02:21,440 --> 00:02:24,620
r of i J is equal to 1.

72
00:02:24,660 --> 00:02:26,580
It's just something over all the

73
00:02:27,180 --> 00:02:29,810
user movie pairs for which you have a rating.

74
00:02:30,840 --> 00:02:32,230
and so those two terms

75
00:02:32,600 --> 00:02:34,740
up there is just

76
00:02:34,930 --> 00:02:36,460
exactly this first term, and

77
00:02:36,500 --> 00:02:38,310
I've just written the summation here explicitly,

78
00:02:39,310 --> 00:02:40,290
where I'm just saying the sum

79
00:02:40,580 --> 00:02:42,290
of all pairs IJ, such that

80
00:02:42,540 --> 00:02:45,060
RIJ is equal to 1.

81
00:02:45,310 --> 00:02:46,800
So what we're going

82
00:02:46,940 --> 00:02:48,790
to do is define a

83
00:02:49,130 --> 00:02:51,410
combined optimization objective that

84
00:02:51,670 --> 00:02:53,290
we want to minimize in order

85
00:02:53,550 --> 00:02:55,700
to solve simultaneously for x and theta.

86
00:02:56,970 --> 00:02:58,040
And then the other terms in

87
00:02:58,070 --> 00:03:00,250
the optimization objective are this,

88
00:03:00,570 --> 00:03:02,870
which is a regularization in terms of theta.

89
00:03:03,770 --> 00:03:05,830
So that came down here and

90
00:03:06,290 --> 00:03:08,190
the final piece is this

91
00:03:08,900 --> 00:03:10,690
term which is

92
00:03:10,850 --> 00:03:12,970
my optimization objective for

93
00:03:13,170 --> 00:03:16,180
the x's and that became this.

94
00:03:16,500 --> 00:03:18,020
And this optimization objective

95
00:03:18,720 --> 00:03:19,730
j actually has an interesting property

96
00:03:20,240 --> 00:03:20,950
that if you were to hold

97
00:03:21,410 --> 00:03:23,070
the x's constant and just

98
00:03:23,260 --> 00:03:25,490
minimize with respect to the thetas then

99
00:03:25,670 --> 00:03:27,040
you'd be solving exactly this problem,

100
00:03:27,840 --> 00:03:28,450
whereas if you were to do

101
00:03:28,620 --> 00:03:29,590
the opposite, if you were to

102
00:03:29,690 --> 00:03:31,310
hold the thetas constant, and minimize

103
00:03:31,670 --> 00:03:32,650
j only with respect to

104
00:03:32,750 --> 00:03:34,920
the x's, then it becomes equivalent to this.

105
00:03:35,230 --> 00:03:36,780
Because either this term

106
00:03:37,060 --> 00:03:38,860
or this term is constant if

107
00:03:38,970 --> 00:03:40,510
you're minimizing only the respective x's or only respective thetas.

108
00:03:40,920 --> 00:03:43,680
So here's an optimization

109
00:03:44,640 --> 00:03:46,840
objective that puts together my

110
00:03:47,440 --> 00:03:50,230
cost functions in terms of x and in terms of theta.

111
00:03:51,620 --> 00:03:53,050
And in order to

112
00:03:53,470 --> 00:03:54,750
come up with just one

113
00:03:55,090 --> 00:03:56,130
optimization problem, what we're going

114
00:03:56,280 --> 00:03:57,590
to do, is treat this

115
00:03:58,430 --> 00:03:59,850
cost function, as a

116
00:03:59,880 --> 00:04:00,890
function of my features

117
00:04:01,410 --> 00:04:02,540
x and of my user

118
00:04:03,180 --> 00:04:05,020
pro user parameters data and

119
00:04:05,140 --> 00:04:06,570
just minimize this whole thing, as

120
00:04:06,740 --> 00:04:07,830
a function of both the

121
00:04:08,120 --> 00:04:10,210
Xs and a function of the thetas.

122
00:04:11,300 --> 00:04:12,400
And really the only difference

123
00:04:12,540 --> 00:04:13,800
between this and the older

124
00:04:14,160 --> 00:04:15,650
algorithm is that, instead

125
00:04:15,980 --> 00:04:17,340
of going back and forth, previously

126
00:04:17,840 --> 00:04:20,110
we talked about minimizing with respect

127
00:04:20,420 --> 00:04:22,130
to theta then minimizing with respect to x,

128
00:04:22,260 --> 00:04:23,370
whereas minimizing with respect to theta,

129
00:04:23,900 --> 00:04:25,270
minimizing with respect to x and so on.

130
00:04:26,130 --> 00:04:28,090
In this new version instead of

131
00:04:28,560 --> 00:04:30,020
sequentially going between the

132
00:04:30,220 --> 00:04:31,880
2 sets of parameters x and theta,

133
00:04:32,180 --> 00:04:32,940
what we are going to do

134
00:04:33,230 --> 00:04:34,600
is just minimize with respect

135
00:04:34,780 --> 00:04:36,410
to both sets of parameters simultaneously.

136
00:04:39,750 --> 00:04:41,290
Finally one last detail

137
00:04:42,030 --> 00:04:44,380
is that when we're learning the features this way.

138
00:04:45,110 --> 00:04:46,410
Previously we have been using

139
00:04:46,840 --> 00:04:49,290
this convention that

140
00:04:49,470 --> 00:04:50,540
we have a feature x0 equals

141
00:04:50,740 --> 00:04:52,940
one that corresponds to an interceptor.

142
00:04:54,140 --> 00:04:55,530
When we are using this

143
00:04:55,760 --> 00:04:57,790
sort of formalism where we're are actually learning the features,

144
00:04:58,300 --> 00:05:00,200
we are actually going to do away with this convention.

145
00:05:01,400 --> 00:05:04,220
And so the features we are going to learn x, will be in Rn.

146
00:05:05,430 --> 00:05:06,650
Whereas previously we had

147
00:05:06,810 --> 00:05:09,770
features x and Rn + 1 including the intercept term.

148
00:05:10,390 --> 00:05:13,390
By getting rid of x0 we now just have x in Rn.

149
00:05:14,880 --> 00:05:16,520
And so similarly, because the

150
00:05:16,590 --> 00:05:17,780
parameters theta is in

151
00:05:17,850 --> 00:05:19,260
the same dimension, we now

152
00:05:19,510 --> 00:05:21,010
also have theta in RN

153
00:05:21,540 --> 00:05:23,340
because if there's no

154
00:05:23,710 --> 00:05:24,580
x0, then there's no need

155
00:05:25,370 --> 00:05:26,880
parameter theta 0 as well.

156
00:05:27,960 --> 00:05:28,880
And the reason we do away

157
00:05:29,160 --> 00:05:30,390
with this convention is because

158
00:05:31,010 --> 00:05:32,610
we're now learning all the features, right?

159
00:05:32,820 --> 00:05:34,280
So there is no need

160
00:05:34,420 --> 00:05:36,650
to hard code the feature that is always equal to one.

161
00:05:37,170 --> 00:05:38,310
Because if the algorithm really wants

162
00:05:38,600 --> 00:05:39,450
a feature that is always equal

163
00:05:40,060 --> 00:05:41,830
to 1, it can choose to learn one for itself.

164
00:05:42,290 --> 00:05:43,430
So if the algorithm chooses,

165
00:05:43,720 --> 00:05:45,330
it can set the feature X1 equals 1.

166
00:05:45,670 --> 00:05:47,010
So there's no need

167
00:05:47,260 --> 00:05:48,300
to hard code the feature of

168
00:05:48,440 --> 00:05:50,060
001, the algorithm now has

169
00:05:50,340 --> 00:05:55,890
the flexibility to just learn it by itself. So, putting

170
00:05:56,420 --> 00:05:58,410
everything together, here is

171
00:05:58,780 --> 00:05:59,910
our collaborative filtering algorithm.

172
00:06:01,460 --> 00:06:02,330
first we are going to

173
00:06:03,010 --> 00:06:05,580
initialize x and

174
00:06:05,820 --> 00:06:07,290
theta to small random values.

175
00:06:08,450 --> 00:06:09,200
And this is a little bit

176
00:06:09,310 --> 00:06:11,700
like neural network training, where there

177
00:06:11,720 --> 00:06:14,240
we were also initializing all the parameters of a neural network to small random values.

178
00:06:16,640 --> 00:06:17,730
Next we're then going

179
00:06:17,950 --> 00:06:20,110
to minimize the cost function using

180
00:06:20,500 --> 00:06:23,360
great intercepts or one of the advance optimization algorithms.

181
00:06:24,610 --> 00:06:25,890
So, if you take derivatives you

182
00:06:26,020 --> 00:06:27,460
find that the great intercept

183
00:06:27,590 --> 00:06:29,320
like these and so this

184
00:06:29,630 --> 00:06:31,160
term here is the

185
00:06:31,660 --> 00:06:33,890
partial derivative of the cost function,

186
00:06:35,140 --> 00:06:35,940
I'm not going to write that out,

187
00:06:36,110 --> 00:06:37,860
with respect to the feature

188
00:06:38,070 --> 00:06:40,020
value Xik and similarly

189
00:06:41,020 --> 00:06:42,430
this term here is also

190
00:06:43,030 --> 00:06:44,660
a partial derivative value of

191
00:06:44,730 --> 00:06:46,480
the cost function with respect to the parameter

192
00:06:46,930 --> 00:06:48,950
theta that we're minimizing.

193
00:06:50,210 --> 00:06:51,410
And just as a reminder, in

194
00:06:51,760 --> 00:06:52,920
this formula that we no

195
00:06:53,130 --> 00:06:54,760
longer have this X0 equals

196
00:06:54,970 --> 00:06:56,740
1 and so we have

197
00:06:57,010 --> 00:07:00,010
that x is in Rn and theta is a Rn.

198
00:07:01,480 --> 00:07:03,100
In this new formalism, we're regularizing

199
00:07:03,760 --> 00:07:05,220
every one of our perimeters theta, you know, every one of our parameters Xn.

200
00:07:07,400 --> 00:07:09,060
There's no longer the special

201
00:07:09,480 --> 00:07:11,850
case theta zero, which was

202
00:07:12,210 --> 00:07:13,760
regularized differently, or which

203
00:07:13,860 --> 00:07:15,440
was not regularized compared to

204
00:07:15,560 --> 00:07:17,650
the parameters theta 1 down to theta.

205
00:07:18,370 --> 00:07:19,710
So there is now no longer a

206
00:07:20,070 --> 00:07:21,150
theta 0, which is why

207
00:07:21,400 --> 00:07:22,450
in these updates, I did not

208
00:07:22,700 --> 00:07:24,080
break out a special case for k equals 0.

209
00:07:26,070 --> 00:07:27,230
So we then use gradient descent

210
00:07:27,740 --> 00:07:28,710
to minimize the cost function

211
00:07:29,090 --> 00:07:30,260
j with respect to the

212
00:07:30,390 --> 00:07:32,000
features x and with respect to the parameters theta.

213
00:07:33,160 --> 00:07:35,050
And finally, given a

214
00:07:35,140 --> 00:07:36,320
user, if a user

215
00:07:36,570 --> 00:07:38,920
has some parameters, theta, and

216
00:07:39,410 --> 00:07:40,540
if there's a movie with

217
00:07:40,690 --> 00:07:41,980
some sort of learned features x,

218
00:07:42,580 --> 00:07:43,720
we would then predict that that

219
00:07:43,970 --> 00:07:44,940
movie would be given a

220
00:07:45,030 --> 00:07:46,200
star rating by that user

221
00:07:47,010 --> 00:07:48,780
of theta transpose j. Or

222
00:07:48,860 --> 00:07:50,370
just to fill those in,

223
00:07:50,640 --> 00:07:52,250
then we're saying that if user

224
00:07:52,630 --> 00:07:53,780
J has not yet

225
00:07:54,010 --> 00:07:55,980
rated movie I, then

226
00:07:56,170 --> 00:07:57,300
what we do is predict that

227
00:07:58,150 --> 00:07:59,120
user J is going to

228
00:07:59,710 --> 00:08:01,420
rate movie I according to

229
00:08:02,300 --> 00:08:04,230
theta J transpose Xi.

230
00:08:06,650 --> 00:08:08,010
So that's the collaborative

231
00:08:08,810 --> 00:08:10,170
filtering algorithm and if

232
00:08:10,310 --> 00:08:12,230
you implement this algorithm you actually get a pretty

233
00:08:12,730 --> 00:08:14,080
decent algorithm that will simultaneously

234
00:08:15,060 --> 00:08:16,770
learn good features for hopefully

235
00:08:17,110 --> 00:08:18,460
all the movies as well as

236
00:08:18,570 --> 00:08:19,890
learn parameters for all the

237
00:08:20,050 --> 00:08:21,290
users and hopefully give

238
00:08:21,440 --> 00:08:23,060
pretty good predictions for how

239
00:08:23,290 --> 00:08:25,890
different users will rate different movies that they have not yet rated