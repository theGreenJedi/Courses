1
00:00:00,450 --> 00:00:03,210
В этом видео я хочу поделиться практическими

2
00:00:03,210 --> 00:00:05,070
приемами по работе с методом градиентного спуска.

3
00:00:05,070 --> 00:00:08,650
В основном в этом видео мы будем

4
00:00:09,860 --> 00:00:13,180
говорить про скорость обучения - альфа.

5
00:00:13,180 --> 00:00:16,270
А именно, вот правило обновлений для градиентного спуска. В этом

6
00:00:16,270 --> 00:00:19,050
видео я расскажу вам про

7
00:00:19,050 --> 00:00:22,390
такую вещь, как отладку, и дам

8
00:00:22,390 --> 00:00:26,480
несколько советов относительно того, как

9
00:00:26,480 --> 00:00:29,250
заставить градиентный спуск

10
00:00:29,250 --> 00:00:32,770
работать корректно.

11
00:00:32,770 --> 00:00:34,150
Кроме того, я расскажу о том, как

12
00:00:34,150 --> 00:00:38,219
выбрать скорость

13
00:00:38,219 --> 00:00:42,553
обучения и о том, как это

14
00:00:42,553 --> 00:00:47,483
обычно

15
00:00:47,483 --> 00:00:49,750
делаю я.

16
00:00:49,750 --> 00:00:53,515
Вот что я обычно делаю для того, чтобы убедиться,

17
00:00:53,515 --> 00:00:58,659
что градиентный спуск работает корректно.

18
00:00:59,720 --> 00:01:02,960
Задача градиентного спуска - найти

19
00:01:02,960 --> 00:01:07,795
такое значение вектора тета, которое, в идеале

20
00:01:07,795 --> 00:01:13,107
минимизирует

21
00:01:13,107 --> 00:01:15,767
значение J(тета).

22
00:01:15,767 --> 00:01:20,570
Поэтому я часто рисую график

23
00:01:20,570 --> 00:01:25,240
изменения функции стоимости J по

24
00:01:25,240 --> 00:01:28,770
мере работы градиентного спуска.

25
00:01:28,770 --> 00:01:32,630
Ось X на графике - это

26
00:01:32,630 --> 00:01:35,630
номер итерации градиентного

27
00:01:35,630 --> 00:01:39,760
спуска, поэтому по мере

28
00:01:39,760 --> 00:01:43,630
того, как работает

29
00:01:43,630 --> 00:01:49,620
алгоритм, вы в идеале должны получить график какого-то такого вида.

30
00:01:49,620 --> 00:01:53,810
Заметьте, что ось X - это

31
00:01:55,230 --> 00:01:59,353
количество итераций. Раньше мы

32
00:01:59,353 --> 00:02:02,020
смотрели на графики J(тета), где ось X,

33
00:02:02,020 --> 00:02:07,392
горизонтальная ось, соответствовала

34
00:02:07,392 --> 00:02:11,671
вектору параметров тета, но не в этом

35
00:02:17,058 --> 00:02:21,774
случае.

36
00:02:21,774 --> 00:02:26,783
Если конкретно, то это точка соответствует

37
00:02:26,783 --> 00:02:31,350
сотой итерации

38
00:02:31,350 --> 00:02:35,720
градиентного спуска.

39
00:02:35,720 --> 00:02:38,540
И после ста итераций я

40
00:02:38,540 --> 00:02:41,520
получаю какое-то

41
00:02:41,520 --> 00:02:46,090
значение тета,

42
00:02:46,090 --> 00:02:50,510
некоторое значение вектора тета, и вычисляю

43
00:02:50,510 --> 00:02:53,800
функцию J(тета) для этого

44
00:02:53,800 --> 00:02:55,829
значения тета на

45
00:02:57,580 --> 00:03:01,630
сотой итерации, и

46
00:03:01,630 --> 00:03:04,850
высота этой точки - это

47
00:03:04,850 --> 00:03:09,220
значение J для

48
00:03:09,220 --> 00:03:15,110
того тета,

49
00:03:15,110 --> 00:03:20,110
которое я

50
00:03:20,110 --> 00:03:24,048
получил после ста

51
00:03:24,048 --> 00:03:25,476
итераций градиентного

52
00:03:25,476 --> 00:03:30,026
спуска. А вот эта

53
00:03:30,026 --> 00:03:34,430
точка соответствует значению J

54
00:03:34,430 --> 00:03:37,725
для тета, полученного

55
00:03:37,725 --> 00:03:42,430
на 200-й итерации

56
00:03:42,430 --> 00:03:47,560
градиентного

57
00:03:47,560 --> 00:03:52,310
спуска.

58
00:03:52,310 --> 00:03:57,100
Так что на этом графике показано

59
00:03:57,100 --> 00:04:01,220
значение вашей функции

60
00:04:01,220 --> 00:04:05,340
стоимости после некоторой итерации градиентного спуска.

61
00:04:05,340 --> 00:04:10,460
И если градиентный спуск работает

62
00:04:10,460 --> 00:04:13,840
правильно, но J(тета)

63
00:04:13,840 --> 00:04:18,110
должно уменьшаться.

64
00:04:18,110 --> 00:04:21,740
После каждой итерации.

65
00:04:21,740 --> 00:04:25,370
Чем еще может быть полезен

66
00:04:25,370 --> 00:04:28,730
этот график: если вы

67
00:04:28,730 --> 00:04:33,600
посмотрите на конкретную

68
00:04:33,600 --> 00:04:38,280
линию, которую я

69
00:04:38,280 --> 00:04:43,110
нарисовал, то

70
00:04:43,110 --> 00:04:47,250
увидите, что когда

71
00:04:48,320 --> 00:04:52,885
вы добрались до

72
00:04:52,885 --> 00:04:58,370
300-й итерации, то на вот этом

73
00:04:59,380 --> 00:05:02,545
отрезке, между 300-й и 400-й итерацией,

74
00:05:02,545 --> 00:05:06,090
кажется, что J(тета) уже не сильно уменьшается.

75
00:05:06,090 --> 00:05:07,450
Так что к тому времени, когда вы

76
00:05:07,450 --> 00:05:11,525
дошли до 400 итераций,

77
00:05:11,525 --> 00:05:15,075
похоже, что кривая вышла на плато.

78
00:05:15,075 --> 00:05:17,975
Поэтому вот здесь, на 400 итерациях,

79
00:05:17,975 --> 00:05:20,096
судя по всему,

80
00:05:20,096 --> 00:05:24,284
градиентный спуск уже

81
00:05:24,284 --> 00:05:26,617
более или менее

82
00:05:26,617 --> 00:05:30,690
сошелся, потому что ваша функция затрат практически не уменьшается.

83
00:05:30,690 --> 00:05:34,140
Так что посмотреть на этот график

84
00:05:34,140 --> 00:05:38,660
может быть полезно для оценки

85
00:05:38,660 --> 00:05:41,820
того, сошелся ли градиентный спуск.

86
00:05:41,820 --> 00:05:46,700
Кстати говоря, количество итераций,

87
00:05:49,020 --> 00:05:53,090
которое нужно градиентному

88
00:05:53,090 --> 00:05:56,890
спуску, чтобы

89
00:05:56,890 --> 00:05:58,850
сойтись, в реальной жизни может быть абсолютно разным.

90
00:05:58,850 --> 00:06:03,130
В одной задаче градиентный спуск может

91
00:06:04,150 --> 00:06:05,400
сойтись после 30

92
00:06:05,400 --> 00:06:09,560
итераций, в другой -

93
00:06:09,560 --> 00:06:14,180
после 3000

94
00:06:14,180 --> 00:06:19,030
итераций.

95
00:06:19,030 --> 00:06:21,979
А для другого алгоритма обучения может

96
00:06:21,979 --> 00:06:23,810
потребоваться три миллиона итераций.

97
00:06:23,810 --> 00:06:26,430
Оказывается, что заранее

98
00:06:26,430 --> 00:06:30,830
очень сложно предсказать,

99
00:06:31,930 --> 00:06:36,760
сколько итераций

100
00:06:36,760 --> 00:06:40,930
потребуется градиентному спуску для

101
00:06:40,930 --> 00:06:47,100
сходимости, и бывает полезно построить такой вот график.

102
00:06:47,100 --> 00:06:50,990
График функции стоимости от количества итераций.

103
00:06:50,990 --> 00:06:52,360
Обычно, глядя на такие графики, я

104
00:06:52,360 --> 00:06:55,510
пытаюсь понять, сошелся ли градиентный

105
00:06:55,510 --> 00:06:59,845
спуск.

106
00:06:59,845 --> 00:07:05,640
Также можно придумать автоматический

107
00:07:05,640 --> 00:07:11,490
критерий сходимости: а

108
00:07:11,490 --> 00:07:15,220
именно, добавить в

109
00:07:15,220 --> 00:07:19,040
алгоритм оценку того, сошелся ли

110
00:07:19,040 --> 00:07:23,810
градиентный спуск. Вот, к

111
00:07:23,810 --> 00:07:27,810
примеру, типичный вариант

112
00:07:27,810 --> 00:07:31,620
автоматического критерия: процесс явно

113
00:07:31,620 --> 00:07:33,500
сходится, если функция

114
00:07:33,500 --> 00:07:36,460
стоимости J(тета) уменьшается меньше

115
00:07:36,460 --> 00:07:38,670
чем на некоторое маленькое значение

116
00:07:38,670 --> 00:07:41,550
эпсилон,

117
00:07:41,550 --> 00:07:45,250
скажем, 10^-3, за одну итерацию. Но

118
00:07:45,250 --> 00:07:47,290
для меня подобрать этот

119
00:07:47,290 --> 00:07:54,160
порог обычно

120
00:07:54,160 --> 00:07:57,180
довольно сложно.

121
00:07:57,180 --> 00:08:00,970
Поэтому для проверки сходимости

122
00:08:00,970 --> 00:08:03,679
градиентного спуска я

123
00:08:06,827 --> 00:08:09,985
чаще все-таки смотрю

124
00:08:09,985 --> 00:08:13,613
на такие графики,

125
00:08:13,613 --> 00:08:15,232
как в левой части слайда, а

126
00:08:15,232 --> 00:08:20,627
не полагаюсь на автоматические критерии сходимости.

127
00:08:20,627 --> 00:08:25,512
Еще, глядя на такой график, можно

128
00:08:25,512 --> 00:08:30,640
заранее увидеть, что

129
00:08:30,640 --> 00:08:33,316
градиентный спуск, возможно,

130
00:08:33,316 --> 00:08:37,078
работает некорректно.

131
00:08:37,078 --> 00:08:40,966
А именно, если рисовать J(тета)

132
00:08:40,966 --> 00:08:45,943
как функцию от количества

133
00:08:45,943 --> 00:08:51,780
итераций, то, если вы

134
00:08:51,780 --> 00:08:55,910
видите какую-то такую линию,

135
00:08:55,910 --> 00:08:58,010
где J(тета) на