1
00:00:00,450 --> 00:00:03,210
このビデオでは、最急降下法を

2
00:00:03,210 --> 00:00:05,070
よりうまく運用するための、実践的なtipsを提供したい。

3
00:00:05,070 --> 00:00:08,650
このビデオの話題の中心には

4
00:00:09,860 --> 00:00:13,180
ラーニングレートであるアルファがある。

5
00:00:13,180 --> 00:00:16,270
具体的には、ここに最急降下法の

6
00:00:16,270 --> 00:00:19,050
更新ルールがあったとして、

7
00:00:19,050 --> 00:00:22,390
このビデオで私がやりたい事は

8
00:00:22,390 --> 00:00:26,480
1つ目には、あなたに

9
00:00:26,480 --> 00:00:29,250
デバックの方法や、最急降下法が

10
00:00:29,250 --> 00:00:32,770
うまく行ってる事を確認する為の

11
00:00:32,770 --> 00:00:34,150
方法を伝授すること。

12
00:00:34,150 --> 00:00:38,219
2つ目に、私がどうやって

13
00:00:38,219 --> 00:00:42,553
レートのアルファを選んでいるかを

14
00:00:42,553 --> 00:00:47,483
お伝えしたい。私がどうやって

15
00:00:47,483 --> 00:00:49,750
選んでいるかを。

16
00:00:49,750 --> 00:00:53,515
私が最急降下法がうまく行っているかを

17
00:00:53,515 --> 00:00:58,659
確認する時に良くやるのはこれだ。

18
00:00:59,720 --> 00:01:02,960
最急降下法の仕事は

19
00:01:02,960 --> 00:01:07,795
あなたの為に

20
00:01:07,795 --> 00:01:13,107
シータを見つけてくれる、という事だ、

21
00:01:13,107 --> 00:01:15,767
それはコスト関数Jを最小化する事が期待されている。

22
00:01:15,767 --> 00:01:20,570
私が良くやる事は

23
00:01:20,570 --> 00:01:25,240
最急降下法を走らせつつ、

24
00:01:25,240 --> 00:01:28,770
コスト関数Jを抜き出す、という事だ。

25
00:01:28,770 --> 00:01:32,630
つまり、このX軸は

26
00:01:32,630 --> 00:01:35,630
最急降下法の繰り返し回数を

27
00:01:35,630 --> 00:01:39,760
そして最急降下法を実行していくにつれて

28
00:01:39,760 --> 00:01:43,630
こんな感じのプロットが

29
00:01:43,630 --> 00:01:49,620
得られるのを期待している。

30
00:01:49,620 --> 00:01:53,810
気をつけて欲しいのは、

31
00:01:55,230 --> 00:01:59,353
X軸は繰り返しの回数だって事。

32
00:01:59,353 --> 00:02:02,020
以前もコスト関数Jの

33
00:02:02,020 --> 00:02:07,392
プロットを見たが、

34
00:02:07,392 --> 00:02:11,671
その時のx軸、つまり横軸は

35
00:02:17,058 --> 00:02:21,774
パラメータベクトルのシータだった。でも今回はそうではない。

36
00:02:21,774 --> 00:02:26,783
具体的には、この点の意味する所は

37
00:02:26,783 --> 00:02:31,350
最急降下法を実際に

38
00:02:31,350 --> 00:02:35,720
100回ほど実行してみて、

39
00:02:35,720 --> 00:02:38,540
繰り返しを100回行った後に

40
00:02:38,540 --> 00:02:41,520
得られたシータの値、

41
00:02:41,520 --> 00:02:46,090
それがどんな値であれ、

42
00:02:46,090 --> 00:02:50,510
百回の繰り返しの後には

43
00:02:50,510 --> 00:02:53,800
とにかく何らかのシータの値が得られるからね。

44
00:02:53,800 --> 00:02:55,829
そしてコスト関数Jのシータを

45
00:02:57,580 --> 00:03:01,630
その100回の繰り返しによって

46
00:03:01,630 --> 00:03:04,850
得られたシータの値で

47
00:03:04,850 --> 00:03:09,220
評価する。

48
00:03:09,220 --> 00:03:15,110
そしてこの垂直方向の高さは

49
00:03:15,110 --> 00:03:20,110
Jのシータの値で、

50
00:03:20,110 --> 00:03:24,048
シータに最急降下法を

51
00:03:24,048 --> 00:03:25,476
100回走らせた時の

52
00:03:25,476 --> 00:03:30,026
値を入れた物。

53
00:03:30,026 --> 00:03:34,430
そしてこの点は、

54
00:03:34,430 --> 00:03:37,725
Jのシータの値のうち、

55
00:03:37,725 --> 00:03:42,430
シータの値を

56
00:03:42,430 --> 00:03:47,560
最急降下法を200回

57
00:03:47,560 --> 00:03:52,310
走らせた時に得られる物を使った物。

58
00:03:52,310 --> 00:03:57,100
つまりこのプロットが見せているのは

59
00:03:57,100 --> 00:04:01,220
最急降下法の繰り返しを行った後の

60
00:04:01,220 --> 00:04:05,340
コスト関数の値だ。

61
00:04:05,340 --> 00:04:10,460
そして、最急降下法がちゃんと

62
00:04:10,460 --> 00:04:13,840
機能しているなら、

63
00:04:13,840 --> 00:04:18,110
Jのシータは減少していくべき、

64
00:04:18,110 --> 00:04:21,740
各イテレーションごとに。

65
00:04:21,740 --> 00:04:25,370
そしてこの手のプロットの

66
00:04:25,370 --> 00:04:28,730
良い所として、

67
00:04:28,730 --> 00:04:33,600
ここに書いた図を見ると

68
00:04:33,600 --> 00:04:38,280
教えてくれるのは、

69
00:04:38,280 --> 00:04:43,110
だいたい300回くらいの

70
00:04:43,110 --> 00:04:47,250
イテレーションを行うと、

71
00:04:48,320 --> 00:04:52,885
だいたい300から400の間くらい

72
00:04:52,885 --> 00:04:58,370
この区間のあたり、

73
00:04:59,380 --> 00:05:02,545
ここまで行くと、

74
00:05:02,545 --> 00:05:06,090
Jのシータはもうこれ以上下がらない。

75
00:05:06,090 --> 00:05:07,450
だから400回くらいの

76
00:05:07,450 --> 00:05:11,525
イテレーションまで来ると

77
00:05:11,525 --> 00:05:15,075
このカーブは平坦になってる。

78
00:05:15,075 --> 00:05:17,975
だからこの400イテレーションまで

79
00:05:17,975 --> 00:05:20,096
来たら、

80
00:05:20,096 --> 00:05:24,284
最急降下法はだいたい

81
00:05:24,284 --> 00:05:26,617
収束している、

82
00:05:26,617 --> 00:05:30,690
だって君のコスト関数はこれ以上下がらないのだから。

83
00:05:30,690 --> 00:05:34,140
つまり、この図を見る事で

84
00:05:34,140 --> 00:05:38,660
最急降下法が本当に収束しているかを

85
00:05:38,660 --> 00:05:41,820
判断するのを助けてくれるのだ。

86
00:05:41,820 --> 00:05:46,700
ところで、最急降下法が

87
00:05:49,020 --> 00:05:53,090
実際に適用した時に収束するまでにかかる

88
00:05:53,090 --> 00:05:56,890
イテレーションの数は、

89
00:05:56,890 --> 00:05:58,850
さまざまで、大きな幅がある。

90
00:05:58,850 --> 00:06:03,130
ある最急降下法の適用例では

91
00:06:04,150 --> 00:06:05,400
たった30回のイテレーションで

92
00:06:05,400 --> 00:06:09,560
収束するかもしれないし、

93
00:06:09,560 --> 00:06:14,180
別の最急降下法の適用例では

94
00:06:14,180 --> 00:06:19,030
3000イテレーション、なんて事も。

95
00:06:19,030 --> 00:06:21,979
別の学習アルゴリズムだと

96
00:06:21,979 --> 00:06:23,810
300万イテレーションかかる、なんて事もある。

97
00:06:23,810 --> 00:06:26,430
結局どれだけの

98
00:06:26,430 --> 00:06:30,830
イテレーションが収束に

99
00:06:31,930 --> 00:06:36,760
必要かを前もってわかるのは、

100
00:06:36,760 --> 00:06:40,930
非常に難しい。

101
00:06:40,930 --> 00:06:47,100
そこで普通はこんな風なプロットをして知る訳だ。

102
00:06:47,100 --> 00:06:50,990
イテレーションを続けていくにつれてコスト関数がどう変化していくかをプロットする事で。

103
00:06:50,990 --> 00:06:52,360
普段私は、これらのプロットを見る事で

104
00:06:52,360 --> 00:06:55,510
最急降下法が収束しているかを

105
00:06:55,510 --> 00:06:59,845
判断しようとしている。

106
00:06:59,845 --> 00:07:05,640
また、自動収束テストを

107
00:07:05,640 --> 00:07:11,490
作る事も可能だ、

108
00:07:11,490 --> 00:07:15,220
つまり、最急降下法が

109
00:07:15,220 --> 00:07:19,040
収束したかを

110
00:07:19,040 --> 00:07:23,810
判定するアルゴリズム。

111
00:07:23,810 --> 00:07:27,810
これがたぶん良くやられている

112
00:07:27,810 --> 00:07:31,620
自動収束テストの例で、

113
00:07:31,620 --> 00:07:33,500
こんな感じで収束したかをテストする。

114
00:07:33,500 --> 00:07:36,460
つまりコスト関数Jのシータが

115
00:07:36,460 --> 00:07:38,670
一回のイテレーションで

116
00:07:38,670 --> 00:07:41,550
ある小さな値エプシロンより

117
00:07:41,550 --> 00:07:45,250
これは10のマイナス3乗とかだが、

118
00:07:45,250 --> 00:07:47,290
それよりちょっとしか減少しなかった場合を収束したとする。

119
00:07:47,290 --> 00:07:54,160
でもやってみて思ったのは、

120
00:07:54,160 --> 00:07:57,180
この閾値をいくつにするか決めるのは、普通、凄い難しい。

121
00:07:57,180 --> 00:08:00,970
だから最急降下法が

122
00:08:00,970 --> 00:08:03,679
実際に収束しているかをチェックする為には

123
00:08:06,827 --> 00:08:09,985
私は実際に

124
00:08:09,985 --> 00:08:13,613
この左側のプロットを見る事の方が

125
00:08:13,613 --> 00:08:15,232
多い、

126
00:08:15,232 --> 00:08:20,627
自動収束テストに頼るよりも。

127
00:08:20,627 --> 00:08:25,512
この種の図を見る事は

128
00:08:25,512 --> 00:08:30,640
また、最急降下法が正しく機能しているかに関する

129
00:08:30,640 --> 00:08:33,316
さらに高度な注意を

130
00:08:33,316 --> 00:08:37,078
与えてくれる事もある。

131
00:08:37,078 --> 00:08:40,966
具体的に言うと、

132
00:08:40,966 --> 00:08:45,943
Jのシータをイテレーションの回数の関数として

133
00:08:45,943 --> 00:08:51,780
プロットして見てみて、

134
00:08:51,780 --> 00:08:55,910
もしこんな図を見ることになったら、

135
00:08:55,910 --> 00:08:58,010
つまりJのシータが実際には