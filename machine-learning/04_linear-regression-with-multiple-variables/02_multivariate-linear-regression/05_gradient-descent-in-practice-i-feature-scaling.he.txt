בסרטון הזה ובסרטון הבא, אני רוצה לספר לכם על כמה טריקים מעשיים לגרום לירידה בשיפוע לעבוד היטב. בסרטון הזה, אני רוצה לספר לכם על רעיון שנקרא סְקֵיילינג או משקול של תכונות. הנה הרעיון. אם יש לך בעיה שבה יש תכונות רבות, אם תוודא כי התכונות הן בקנה מידה דומה, זאת אומרת, תוודא שלתכונות השונות יש טווח דומה של ערכים, אז הירידה בשיפוע תוכל להתכנס מהר יותר. באופן קונקרטי נניח שיש לך בעיה עם שתי תכונות, הראשונה היא X1 שהיא הגודל של בית ומקבלת ערכים בין נניח אפס לאלפיים רגל מרובעת, והשנייה היא מספר חדרי השינה, והיא מקבלת ערכים בין אחת לחמש. אם תשרטט את הגרף של פונקצית המחיר J של תטא, אז הגרף עשוי להיראות כך, כשבואו נראה, J של תטא היא פונקציה של הפרמטרים תטא-אפס, תטא-אחת ותטא-שתיים. אני אתעלם מתטא-אפס, אז בואו נניח שהפונקציה היא רק פונקציה של תטא-1 ותטא-2, אבל ל-x1 יכולים להיות כמו שאתם מבינים מגוון הרבה יותר גדול של ערכים מאשר ל-x2, ואז הגרף של פונקצית המחיר J של תטא יקבל צורה אליפטית מאוד מאוד קיצונית כמו זו, ועם יחס של 2000 ל-5, זה יכול להיות אפילו יותר נוטה. נקבל אליפסות מאוד מאוד גבוהות ורזות, או צורות אובליות מאוד גבוהות ורזות, שיוצרות את קווי המתאר של פונקצית המחיר J של תטא. ואם נפעיל את הירידה בשיפוע על פונקצית המחיר הזו, השיפועים עלולים בסופו של דבר לקחת הרבה זמן ולהתנדנד קדימה ואחורה ולקחת זמן רב לפני שבסופו של דבר ימצאו את דרכם אל המינימום הגלובלי. למעשה, אפשר לדמיין את קווי המתאר הללו אפילו עוד יותר מוגזמים כאשר אנחנו מציירים קווי מתאר מאד מאד גבוהים ורזים, ואז זה יכול להיות אפילו עוד יותר קיצוני, והירידה בגרדיינט תצטרך הרבה יותר זמן להתכנס לה לאיטה, וזה יכול לקחת הרבה זמן עד שהאלגוריתם ימצא את דרכו למינימום הגלובלי. במצבים כאלה, דבר שכדאי לעשות הוא להתאים, או להשוות את גודלן של התכונות. קונקרטית, אם במקום זאת נגדיר את התכונה x1 להיות גודלו של הבית חלקי אלפיים, ואת x2 להיות אולי מספר חדרי השינה מחולק בחמש, אז קווי המתאר של פונקצית העלות J יהיו הרבה הרבה פחות מוקצנים וייראו הרבה יותר דומים למעגלים. ואם תפעיל את הירידה בגרדיינט על פונקציית עלות כזו, אז אפשר להראות באופן מתמטי שהירידה בגרדיינט, תוכל למצוא מסלול הרבה יותר מהיר אל המינימום הגלובלי ולא דרך הרבה יותר מפותלת שבה עוקבים אחר מסלול מסובך הרבה יותר כדי להגיע למינימום הגלובלי. אז על ידי הבאת התכונות לאותו קנה מידה, טווחים דומים של ערכים, בדוגמה זו, אנחנו סידרנו את שתי התכונות, x1 ו-x2, כך ששתיהן מקבלות ערכים בין אפס ואחת. אפשר להגיע ליישום של הירידה בגרדיינט שיכולה להתכנס הרבה יותר מהר. באופן כללי יותר, כאשר אנו עושים משקול של תכונות, מה שאפשר לעשות זה לגרום לכל תכונה לקבל ערכים בטווח שבין 1- לבין 1+, וזכרו שהתכונה x0 תמיד שווה ל-1. אז היא כבר בטווח הזה, אבל אפשר פשוט לחלק את ערכי תכונות אחרות במספרים קבועים שונים כדי להעביר אותם לטווח הזה. המספרים הספציפיים 1- ו-1+ אינם יותר מדי חשובים. זאת אומרת, אם יש לך תכונה x1 שמקבלת ערכים בין אפס ושלוש, זו לא בעיה. אם יש לך תכונה כלשהי שהטווח שלה הוא בין 2- ו-0.5+, אז גם זה מספיק קרוב לטווח של פלוס מינוס אחת, אתם מבינים, זה לגמרי בסדר. אבל אם יש לך תכונה, נניח x3, שנע בין 100- ל-100+, אז אלה הם כבר ערכים שונים מאוד מאשר הטווח של פלוס מינוס 1. אז זו עשויה להיות תכונה שהיא פחות מותאמת וצריך להקטין אותה, ובאופן דומה, אם התכונות שלך מקבלות טווח מאוד מאוד צר של ערכים, לדוגמא אם x4 מקבל ערכים בין מינוס 0.0001 לפלוס 0.0001, זאת אומרת, טווח הרבה יותר צר של ערכים מאשר הטווח של פלוס מינוס אחת. אז אני לא אקרא לתכונה כזו מתאימה לטווח. אז אנחנו מרשים לטווח הערכים להיות גדול יותר או קטן יותר מאשר בין מינוס לפלוס אחת, אבל לא הרבה יותר גדול, כגון פלוס מינוס 100, ולא הרבה יותר קטן כמו פלוס מינוס 0.001. לאנשים שונים יש כללי אצבע שונים. זה שאני משתמש בו הוא שאם תכונה מקבלת ערכים בטווח נניח בין מינוס שלוש לפלוס 3 אז אני מרגיש שזה צריך להיות בסדר גמור, אבל אם היא מקבלת ערכים הרבה יותר גדולים מאשר פלוס 3 או מינוס 3 אז אני משנה את קנה המידה שלה, ואם היא מקבלת ערכים נניח בטווח של בין מינוס שליש לבין שליש אז אני חושב שזה בסדר גמור, או מ-0 עד שליש או ממינוס שליש עד 0. אני מניח שזה טווח טיפוסי וזה לגמרי בסדר. אבל אם היא מקבלת טווח הרבה יותר מצומצם של ערכים כמו x4 כאן, אז עדיין אין מה לדאוג. אז המסר הוא שאין מה לדאוג אם התכונות הם לא בדיוק על אותה סקאלה או בדיוק באותו טווח של ערכים. כל עוד הם כולם קרובים מספיק עבור הירידה בגרדיינט, זה אמור לעבוד בסדר. בנוסף לחלוקה במספר בסדר גודל של המכסימום, כשעושים משקול של תכונות לפעמים עושים גם מה שנקרא נירמול של הממוצע. ומה שאני מתכוון הוא שהם לוקחים את התכונה Xi וממירים אותה בתכונה Xi מינוס מיו i כדי לגרום לתכונה לקבל ממוצע 0. ברור שאנחנו לא עושים את זה עבור התכונה x0 כי x0 תמיד שווה אחת, אז הוא לא יכול להיות בעל ערך ממוצע אפס. אבל כן עושים את זה עבור תכונות אחרות, אז אם טווח הגדלים של הבית מקבל ערכים בין 0 ל-2000, או אם הגודל הממוצע של בית שווה ל-1000, אז אולי נוכל להשתמש בנוסחה הזו עבור משתנה הגודל. נגדיר את התכונה x1 כגודל פחות הערך הממוצע חלקי 2000, ובדומה, אם בבתים יש בין אחד לבין חמישה חדרי שינה ואם בממוצע בבית יש שני חדרי שינה אז אולי כדאי להשתמש בנוסחה הזו כדי לנרמל את הממוצע של התכונה השנייה שלנו x2. בשני המקרים הללו, בסופו של דבר אנחנו מקבלים תכונות x1 ו-x2 שמקבלות ערכים בערך בין 0.5- לבין 0.5+. זה לא לגמרי מדויק, x2 בעצם יכול להיות קצת יותר גדול מ-0.5 אבל זה מספיק קרוב. והחוק הכללי יותר הוא שאנחנו לוקחים את התכונה x1 ומחליפים אותה ב-x1 מינוס mu1 חלקי S1, כשפירושם של המונחים האלה הוא, mu1 הוא הערך הממוצע של x1 בסדרת האימון, ו-S1 הוא טווח הערכים של התכונה וכשאני אומר טווח אני מתכוון לערך המקסימלי מינוס הערך המינימלי, או עבור אלה מכם שמבינים מהי סטייה של משתנה, אז אם נגדיר את S1 להיות סטיית התקן של המשתנה, גם זה יהיה בסדר. אבל פשוט לקחת מקסימום מינוס מינימום זה לגמרי בסדר. ובדומה לכך את התכונה השנייה, x2, נחליף במשהו דומה, כשנפחית את הממוצע של התכונה ונחלק אותה בטווח הערכים כלומר מקסימום מינוס מינימום. וסוג כזה של נוסחא יגרום לתכונות, אולי לא בדיוק אבל בערך, להיכנס לטווח הזה או טווח קרוב, ודרך אגב, אלו מכם שהם זהירים מאוד בקשר לנוסחאות טכניות, כשאנחנו לוקחים את הטווח להיות מקסימום מינוס מינימום, אז החמש כאן בעצם הופך לארבע. כי המקסימום הוא 5, מינוס 1 אז טווח הערכים שלהם הוא למעשה 4, אבל כל מה שאנחנו עושים כאן הוא על בערך, וכל ערך שמביא את התכונות למשהו קרוב לסוג הטווח הזה הוא בסדר. והסקאלה של התכונה אינה חייבת להיות ממש מדויקת כדי שהירידה בגרדיינט תרוץ הרבה יותר מהר. זהו, עכשיו אתם יודעים על משקול של תכונות, ואם תעשו את הטריק הפשוט הזה, זה יגרום לירידה בגרדיינט לרוץ הרבה יותר מהר ולהתכנס בהרבה פחות איטרציות. אז זה היה בקשר לדרוג או מישקול של תכונות. בסרטון הבא, אני אספר על עוד טריק שגורם לירידה בגרדיינט לעבוד בצורה טובה יותר.