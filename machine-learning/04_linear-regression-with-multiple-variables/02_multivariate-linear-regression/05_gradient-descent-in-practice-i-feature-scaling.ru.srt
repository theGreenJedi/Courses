1
00:00:00,190 --> 00:00:01,270
В этом и следующем

2
00:00:01,440 --> 00:00:02,720
видеоуроках я хочу рассказать вам о

3
00:00:02,850 --> 00:00:04,040
некоторых практических приемах,

4
00:00:04,180 --> 00:00:06,940
которые позволяют улучшить работу метода градиентного спуска.

5
00:00:07,680 --> 00:00:10,250
В этом видео я хочу рассказать вам о понятии масштабирования переменных.

6
00:00:11,770 --> 00:00:12,210
которой мы в

7
00:00:13,030 --> 00:00:14,080
Если у вас есть задача с многими

8
00:00:14,180 --> 00:00:15,880
переменными, и если вы

9
00:00:16,320 --> 00:00:17,410
убедитесь, что они имеют

10
00:00:18,050 --> 00:00:19,440
одинаковый масштаб (то есть, разные переменные принимают

11
00:00:19,570 --> 00:00:20,480
значения из одного диапазона), то

12
00:00:20,650 --> 00:00:22,130
метод градиентного

13
00:00:22,300 --> 00:00:23,390
спуска

14
00:00:24,420 --> 00:00:26,490
сходится быстрее.

15
00:00:27,510 --> 00:00:28,680
Допустим, у вас есть

16
00:00:28,820 --> 00:00:29,860
задача с двумя

17
00:00:30,380 --> 00:00:31,680
переменными, где x1 - это

18
00:00:31,950 --> 00:00:32,860
площадь дома,

19
00:00:33,530 --> 00:00:34,540
принимает значения, скажем, от нуля до

20
00:00:35,490 --> 00:00:36,270
двух тысяч, а x2 - это количество спален, и

21
00:00:36,520 --> 00:00:37,570
оно принимает значения от нуля до

22
00:00:37,820 --> 00:00:39,250
пяти.

23
00:00:40,100 --> 00:00:41,690
Если вы построите линии

24
00:00:41,800 --> 00:00:43,000
уровня функции потерь J от тета,

25
00:00:44,810 --> 00:00:46,540
они могут выглядеть

26
00:00:46,750 --> 00:00:49,010
примерно так, где, как вы

27
00:00:49,230 --> 00:00:50,570
видите, J от тета - это

28
00:00:50,910 --> 00:00:53,590
функция параметров тета ноль, тета один и тета два.

29
00:00:54,300 --> 00:00:55,400
Я пренебрегу тета ноль (так что забудем о нем) и

30
00:00:56,020 --> 00:00:57,230
буду считать, что это функция

31
00:00:57,480 --> 00:00:58,730
только тета 1 и тета 2. Но

32
00:00:58,840 --> 00:01:01,080
раз x1 может принимать

33
00:01:01,510 --> 00:01:02,810
значения из гораздо

34
00:01:02,940 --> 00:01:04,110
большего диапазона, чем x2, окажется,

35
00:01:04,370 --> 00:01:05,790
что линии уровня

36
00:01:06,120 --> 00:01:07,270
функции потерь J от тета примут такую

37
00:01:07,340 --> 00:01:08,320
очень очень

38
00:01:09,420 --> 00:01:11,400
асимметричную

39
00:01:11,690 --> 00:01:14,720
форму эллипса. Хотя, если

40
00:01:15,070 --> 00:01:16,620
учесть отношение между 2000 и 5, линии уровня могут быть

41
00:01:16,770 --> 00:01:18,470
еще более вытянутыми.

42
00:01:18,800 --> 00:01:20,190
Такими очень, очень длинными и узкими

43
00:01:20,560 --> 00:01:23,070
эллипсами (овалами), могут быть представлены

44
00:01:23,320 --> 00:01:24,950
линии уровня функции

45
00:01:25,310 --> 00:01:27,940
потерь J от тета.

46
00:01:29,420 --> 00:01:30,860
И если вы запустите метод градиентного

47
00:01:30,930 --> 00:01:34,290
спуска для этой функции потерь,

48
00:01:34,830 --> 00:01:36,480
может оказаться, что

49
00:01:36,970 --> 00:01:38,660
ваши градиенты будут

50
00:01:39,080 --> 00:01:40,360
долго колебаться туда-сюда и еще не

51
00:01:41,100 --> 00:01:43,130
скоро найдут дорогу к глобальному

52
00:01:43,190 --> 00:01:46,120
минимуму.

53
00:01:47,470 --> 00:01:48,720
На самом деле, вы можете себе

54
00:01:48,890 --> 00:01:50,400
представить, что если еще

55
00:01:50,580 --> 00:01:51,970
больше вытянуть эти

56
00:01:52,480 --> 00:01:54,300
линии уровня, нарисовать их

57
00:01:56,230 --> 00:01:57,030
еще длиннее и уже, методу градиентного

58
00:01:57,380 --> 00:01:59,060
спуска будет гораздо труднее достичь результата, он

59
00:01:59,790 --> 00:02:02,310
будет метаться из

60
00:02:02,630 --> 00:02:04,280
стороны в сторону, и ему потребуется

61
00:02:04,690 --> 00:02:06,030
немало времени, чтобы найти

62
00:02:06,120 --> 00:02:08,270
глобальный минимум.

63
00:02:12,130 --> 00:02:14,370
В таких условиях бывает полезно

64
00:02:14,780 --> 00:02:16,280
отмасштабировать переменные.

65
00:02:17,380 --> 00:02:18,760
Например,

66
00:02:19,200 --> 00:02:20,370
если вместо старой

67
00:02:20,570 --> 00:02:21,770
переменной вы

68
00:02:21,870 --> 00:02:23,070
определите, что переменная x1 - это

69
00:02:24,040 --> 00:02:25,140
размер дома, разделенный

70
00:02:25,270 --> 00:02:26,520
на две

71
00:02:26,940 --> 00:02:29,010
тысячи, а x2 определите как

72
00:02:29,170 --> 00:02:30,020
количество спален, разделённое на

73
00:02:30,090 --> 00:02:31,840
пять, то линии уровня функции потерь J могут стать

74
00:02:32,900 --> 00:02:34,430
гораздо менее вытянутыми, более похожими на

75
00:02:34,840 --> 00:02:36,990
окружности.

76
00:02:38,210 --> 00:02:39,180
А, если вы

77
00:02:39,520 --> 00:02:40,540
запустите метод

78
00:02:40,750 --> 00:02:42,120
градиентного спуска

79
00:02:44,110 --> 00:02:45,630
для такой функции потерь, то

80
00:02:45,860 --> 00:02:47,430
вместо сложной траектории, полученной без

81
00:02:47,540 --> 00:02:48,830
масштабирования

82
00:02:49,390 --> 00:02:51,200
переменных, вы

83
00:02:51,530 --> 00:02:52,530
сможете найти гораздо более прямой путь к глобальному

84
00:02:52,620 --> 00:02:53,520
минимуму, что можно обосновать

85
00:02:54,310 --> 00:02:55,910
математически.

86
00:02:57,300 --> 00:02:58,710
Итак, масштабируя переменные, чтобы они принимали

87
00:02:58,950 --> 00:03:01,000
значения в похожих диапазонах,

88
00:03:01,620 --> 00:03:02,810
в этом примере мы получаем, что

89
00:03:02,970 --> 00:03:04,150
значения обеих переменных, x1 и x2, лежат между

90
00:03:04,300 --> 00:03:06,960
нулем и единицей.

91
00:03:09,580 --> 00:03:12,290
Вы можете завершить реализацию метода градиентного спуска,

92
00:03:12,690 --> 00:03:13,810
которая сходится гораздо быстрее.

93
00:03:18,120 --> 00:03:19,640
Как правило, когда мы выполняем

94
00:03:20,160 --> 00:03:21,240
масштабирование переменных,

95
00:03:21,530 --> 00:03:22,480
чаще всего мы хотим

96
00:03:22,750 --> 00:03:25,670
получить для каждой переменной

97
00:03:25,780 --> 00:03:28,170
диапазон значений примерно от -1 до +1. В частности,

98
00:03:28,960 --> 00:03:31,710
переменная x0 всегда равна 1.

99
00:03:31,760 --> 00:03:32,810
Таким образом, она уже в этом диапазоне, но

100
00:03:34,110 --> 00:03:35,150
вам может понадобиться разделить

101
00:03:35,630 --> 00:03:36,950
другие переменные на разные числа,

102
00:03:37,330 --> 00:03:39,150
чтобы перевести их в этот диапазон.

103
00:03:39,510 --> 00:03:41,520
Не так важно, чтобы это были числа -1 и +1.

104
00:03:42,270 --> 00:03:42,900
Так, если у вас есть переменная x1,

105
00:03:44,150 --> 00:03:45,340
которая оказалась в диапазоне

106
00:03:45,510 --> 00:03:48,000
между 0 и 3, это не проблема.

107
00:03:48,400 --> 00:03:49,410
Если в итоге у вас есть другая переменная,

108
00:03:49,600 --> 00:03:51,190
которая оказалась в диапазоне

109
00:03:52,140 --> 00:03:54,020
между -2, и +0.5, опять же, это

110
00:03:54,300 --> 00:03:55,710
достаточно близко к -1 и +1, и понятно, что оба

111
00:03:56,070 --> 00:03:57,070
эти варианта нам

112
00:03:57,320 --> 00:03:59,160
подойдут.

113
00:04:00,310 --> 00:04:01,260
Только если еще одна ваша

114
00:04:01,340 --> 00:04:02,580
переменная, например, х3,

115
00:04:02,820 --> 00:04:04,780
принимает значения от -100 до +100, то

116
00:04:05,840 --> 00:04:09,070
такой диапазон сильно

117
00:04:09,330 --> 00:04:10,850
отличается от значений

118
00:04:11,090 --> 00:04:13,570
между -1 и +1.

119
00:04:13,860 --> 00:04:15,020
Такая переменная может

120
00:04:15,230 --> 00:04:17,480
считаться хуже отмасштабированной. И, аналогично,

121
00:04:17,970 --> 00:04:19,340
если ваши переменные

122
00:04:19,420 --> 00:04:20,680
принимают

123
00:04:20,950 --> 00:04:22,060
значения в очень, очень маленьком диапазоне,

124
00:04:22,340 --> 00:04:25,530
например, х4 принимает значения

125
00:04:25,740 --> 00:04:28,290
от -0.0001 до +0.0001, то, опять же, этот

126
00:04:29,720 --> 00:04:30,780
диапазон будет

127
00:04:30,910 --> 00:04:31,960
гораздо меньше, чем

128
00:04:32,460 --> 00:04:33,760
диапазон от -1 до +1.

129
00:04:34,040 --> 00:04:36,630
И снова я бы назвал такую переменную плохо отмасштабированной.

130
00:04:37,850 --> 00:04:39,150
Итак, целевой диапазон

131
00:04:39,430 --> 00:04:40,350
значений

132
00:04:41,070 --> 00:04:42,010
может быть больше или меньше,

133
00:04:42,370 --> 00:04:43,840
чем от -1 до +1, но не намного больше,

134
00:04:44,040 --> 00:04:45,170
как в случае с +100, и не

135
00:04:45,610 --> 00:04:47,470
намного меньше, как в

136
00:04:47,650 --> 00:04:49,990
случае с 0.0001.

137
00:04:50,770 --> 00:04:52,530
На практике разные люди по-разному определяют приемлемые диапазоны.

138
00:04:52,870 --> 00:04:53,910
Я же использую такое правило: если

139
00:04:54,070 --> 00:04:55,440
переменная принимает значение в диапазоне,

140
00:04:55,670 --> 00:04:56,750
скажем, от -3 до +3, я обычно

141
00:04:56,980 --> 00:04:58,590
считаю, что это просто отлично, но, возможно,

142
00:04:58,840 --> 00:05:00,120
она принимает гораздо большие значения,

143
00:05:00,170 --> 00:05:01,690
чем +3 или -3, то с этим нужно что-то

144
00:05:02,000 --> 00:05:03,050
делать. А если

145
00:05:03,440 --> 00:05:04,360
переменная принимает

146
00:05:04,530 --> 00:05:06,400
значения,

147
00:05:06,700 --> 00:05:09,660
например, от -1/3 до +1/3?

148
00:05:10,920 --> 00:05:12,020
Знаете, я думаю, что это тоже хорошо.

149
00:05:12,270 --> 00:05:14,880
Или от 0 до 1/3, или от -1/3 до 0.

150
00:05:14,910 --> 00:05:17,890
Такие диапазоны я обычно считаю приемлемыми.

151
00:05:18,560 --> 00:05:19,310
Но  может требоваться меньший диапазон

152
00:05:19,450 --> 00:05:20,640
значений как х4,но гораздо реже,так что не

153
00:05:20,900 --> 00:05:23,220
беспокойтесь.

154
00:05:23,790 --> 00:05:25,060
Итак, не стоит волноваться,

155
00:05:25,500 --> 00:05:26,780
если диапазоны значений

156
00:05:27,000 --> 00:05:28,550
или масштабы ваших

157
00:05:28,700 --> 00:05:30,920
переменных не совпадают идеально.

158
00:05:31,170 --> 00:05:31,930
Если они достаточно к вот этому,

159
00:05:32,090 --> 00:05:35,060
метод градиентного спуска будет работать хорошо.

160
00:05:35,930 --> 00:05:37,530
Вдобавок к делению на

161
00:05:37,930 --> 00:05:39,960
максимальную величину, когда

162
00:05:40,220 --> 00:05:42,080
производится масштабирование, иногда

163
00:05:42,730 --> 00:05:45,070
выполняют нормировку на среднее.

164
00:05:45,330 --> 00:05:47,150
Я подразумеваю, что если вы

165
00:05:47,320 --> 00:05:48,130
хотите взять xi  и заменить его xi

166
00:05:48,350 --> 00:05:49,810
минус что-то , чтобы

167
00:05:50,230 --> 00:05:51,850
сделать ваше значение

168
00:05:52,870 --> 00:05:55,260
близким к нулю.

169
00:05:56,530 --> 00:05:57,730
И очевидно,что мы хотим

170
00:05:57,890 --> 00:05:59,260
применить это к будущему х

171
00:05:59,650 --> 00:06:00,750
нулевому, потому что

172
00:06:00,940 --> 00:06:02,260
будущее х нулевое всегда

173
00:06:02,360 --> 00:06:03,600
равно одному, так как у

174
00:06:03,810 --> 00:06:05,100
нас не может быть среднее значение ноль.

175
00:06:06,370 --> 00:06:07,760
Конкретнее

176
00:06:07,950 --> 00:06:09,320
для других

177
00:06:09,600 --> 00:06:10,320
примеров. Если диапазон

178
00:06:10,960 --> 00:06:14,170
размеров домов принимает

179
00:06:14,310 --> 00:06:15,080
значения

180
00:06:15,230 --> 00:06:16,230
между 0 и 2000 и средний

181
00:06:16,470 --> 00:06:18,340
размер дома равен 1000, вы можете

182
00:06:18,500 --> 00:06:20,080
использовать эту

183
00:06:21,470 --> 00:06:21,950
формулу.

184
00:06:23,940 --> 00:06:24,970
Установим значение x1 равным

185
00:06:25,250 --> 00:06:26,270
размеру минус средняя

186
00:06:26,590 --> 00:06:28,010
величина, деленное

187
00:06:28,630 --> 00:06:31,820
на 2000 и, аналогично, если у

188
00:06:32,530 --> 00:06:34,010
ваших домов от одной до

189
00:06:34,520 --> 00:06:37,630
пяти спален, и если в

190
00:06:39,240 --> 00:06:40,460
среднем в доме две

191
00:06:40,890 --> 00:06:41,920
спальни, то вы можете использовать эту

192
00:06:42,110 --> 00:06:44,750
формулу для нормировки на среднее

193
00:06:45,080 --> 00:06:47,460
вашего второго параметра x2.

194
00:06:49,340 --> 00:06:50,720
В обоих случаях, вы, в результате,

195
00:06:50,840 --> 00:06:52,730
получаете параметры x1 и x2,

196
00:06:52,930 --> 00:06:54,490
которые могут принимать значения

197
00:06:54,880 --> 00:06:56,580
примерно от минус 0,5 до плюс 0,5.

198
00:06:57,130 --> 00:06:57,880
Это не совсем верно: x2 может принимать

199
00:06:58,210 --> 00:07:00,920
значения чуть больше чем 0,5, но достаточно близко.

200
00:07:01,800 --> 00:07:03,140
И более общее

201
00:07:03,530 --> 00:07:04,860
правило. Вы

202
00:07:04,900 --> 00:07:06,390
можете взять х1 и

203
00:07:08,060 --> 00:07:10,110
заменить его х1 минус мю1 на S1,

204
00:07:10,940 --> 00:07:13,410
где мю1 обозначили

205
00:07:13,550 --> 00:07:15,890
среднее

206
00:07:16,200 --> 00:07:18,290
значение х1 и и S1 является область значений

207
00:07:19,960 --> 00:07:21,310
этой величины и диапазона, или

208
00:07:22,320 --> 00:07:24,190
можно сказать максимальное

209
00:07:24,350 --> 00:07:27,420
значение минус

210
00:07:27,820 --> 00:07:28,940
минимальное или для тех,кто

211
00:07:29,040 --> 00:07:30,110
понимает,

212
00:07:30,630 --> 00:07:31,900
в разбросе

213
00:07:32,290 --> 00:07:33,350
переменных

214
00:07:33,590 --> 00:07:35,360
устанавливается S1 как

215
00:07:35,850 --> 00:07:37,390
стандартное отклонение,что также

216
00:07:37,760 --> 00:07:40,790
подходит.

217
00:07:41,020 --> 00:07:43,240
Но к слову, максимальное минус минимальное также подойдет.

218
00:07:44,330 --> 00:07:45,170
И, аналогично, второй

219
00:07:45,610 --> 00:07:47,380
параметр, х2, мы заменяем тем же

220
00:07:47,840 --> 00:07:49,740
методом, вычитая среднее и деля его на

221
00:07:51,040 --> 00:07:52,220
диапазон значений,

222
00:07:52,800 --> 00:07:54,110
который определен как максимум минус

223
00:07:54,380 --> 00:07:55,980
минимум.

224
00:07:56,880 --> 00:07:57,910
Благодаря этой формуле,

225
00:07:58,370 --> 00:07:59,630
значения ваших параметров

226
00:07:59,850 --> 00:08:01,020
окажутся, пусть не точно,

227
00:08:01,920 --> 00:08:03,320
пусть приблизительно, но в таких примерно

228
00:08:03,490 --> 00:08:04,820
диапазона. Кстати, для тех

229
00:08:04,890 --> 00:08:05,700
из вас кто особо любит точность, замечу, что если мы

230
00:08:05,940 --> 00:08:07,570
определяем

231
00:08:07,710 --> 00:08:09,300
диапазон как максимум

232
00:08:09,610 --> 00:08:12,410
минус минимум, то эта пятерка здесь - на самом деле четверка.

233
00:08:13,140 --> 00:08:14,390
То есть, если 5 - максимум, 1 -

234
00:08:14,600 --> 00:08:15,830
минимум, то диапазон этих

235
00:08:16,320 --> 00:08:17,160
значений равен 4. Но все это

236
00:08:17,860 --> 00:08:18,530
довольно приблизительно, и любое значение,

237
00:08:18,690 --> 00:08:20,380
которое сделает диапазон

238
00:08:20,830 --> 00:08:22,010
сколько-нибудь похожим на те, что мы

239
00:08:22,450 --> 00:08:24,750
обсудили, вполне годится.

240
00:08:25,200 --> 00:08:27,220
Масштабирование переменных не

241
00:08:27,660 --> 00:08:28,520
должно быть точным, для того

242
00:08:29,050 --> 00:08:30,390
чтобы градиентный спуск сходился

243
00:08:30,790 --> 00:08:32,290
достаточно быстро.

244
00:08:34,610 --> 00:08:35,840
Итак вы знаете о масштабировании

245
00:08:36,020 --> 00:08:37,420
переменных и если примените эту хитрость, это

246
00:08:37,530 --> 00:08:39,040
ускорит градиентный спуск и сходимость в гораздо

247
00:08:39,250 --> 00:08:40,650
меньшее число

248
00:08:40,870 --> 00:08:43,680
итераций.

249
00:08:44,990 --> 00:08:45,540
Это было масштабирование переменных.

250
00:08:46,080 --> 00:08:47,190
В следующем видеоуроке я расскажу вам

251
00:08:47,350 --> 00:08:49,410
еще об одном приеме, который позволит методу градиентного

252
00:08:49,710 --> 00:08:50,970
спуска лучше работать на практике.