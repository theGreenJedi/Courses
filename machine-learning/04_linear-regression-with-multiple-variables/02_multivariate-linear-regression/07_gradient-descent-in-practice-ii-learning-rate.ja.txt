このビデオでは、最急降下法を よりうまく運用するための、実践的なtipsを提供したい。 このビデオの話題の中心には ラーニングレートであるアルファがある。 具体的には、ここに最急降下法の 更新ルールがあったとして、 このビデオで私がやりたい事は 1つ目には、あなたに デバックの方法や、最急降下法が うまく行ってる事を確認する為の 方法を伝授すること。 2つ目に、私がどうやって レートのアルファを選んでいるかを お伝えしたい。私がどうやって 選んでいるかを。 私が最急降下法がうまく行っているかを 確認する時に良くやるのはこれだ。 最急降下法の仕事は あなたの為に シータを見つけてくれる、という事だ、 それはコスト関数Jを最小化する事が期待されている。 私が良くやる事は 最急降下法を走らせつつ、 コスト関数Jを抜き出す、という事だ。 つまり、このX軸は 最急降下法の繰り返し回数を そして最急降下法を実行していくにつれて こんな感じのプロットが 得られるのを期待している。 気をつけて欲しいのは、 X軸は繰り返しの回数だって事。 以前もコスト関数Jの プロットを見たが、 その時のx軸、つまり横軸は パラメータベクトルのシータだった。でも今回はそうではない。 具体的には、この点の意味する所は 最急降下法を実際に 100回ほど実行してみて、 繰り返しを100回行った後に 得られたシータの値、 それがどんな値であれ、 百回の繰り返しの後には とにかく何らかのシータの値が得られるからね。 そしてコスト関数Jのシータを その100回の繰り返しによって 得られたシータの値で 評価する。 そしてこの垂直方向の高さは Jのシータの値で、 シータに最急降下法を 100回走らせた時の 値を入れた物。 そしてこの点は、 Jのシータの値のうち、 シータの値を 最急降下法を200回 走らせた時に得られる物を使った物。 つまりこのプロットが見せているのは 最急降下法の繰り返しを行った後の コスト関数の値だ。 そして、最急降下法がちゃんと 機能しているなら、 Jのシータは減少していくべき、 各イテレーションごとに。 そしてこの手のプロットの 良い所として、 ここに書いた図を見ると 教えてくれるのは、 だいたい300回くらいの イテレーションを行うと、 だいたい300から400の間くらい この区間のあたり、 ここまで行くと、 Jのシータはもうこれ以上下がらない。 だから400回くらいの イテレーションまで来ると このカーブは平坦になってる。 だからこの400イテレーションまで 来たら、 最急降下法はだいたい 収束している、 だって君のコスト関数はこれ以上下がらないのだから。 つまり、この図を見る事で 最急降下法が本当に収束しているかを 判断するのを助けてくれるのだ。 ところで、最急降下法が 実際に適用した時に収束するまでにかかる イテレーションの数は、 さまざまで、大きな幅がある。 ある最急降下法の適用例では たった30回のイテレーションで 収束するかもしれないし、 別の最急降下法の適用例では 3000イテレーション、なんて事も。 別の学習アルゴリズムだと 300万イテレーションかかる、なんて事もある。 結局どれだけの イテレーションが収束に 必要かを前もってわかるのは、 非常に難しい。 そこで普通はこんな風なプロットをして知る訳だ。 イテレーションを続けていくにつれてコスト関数がどう変化していくかをプロットする事で。 普段私は、これらのプロットを見る事で 最急降下法が収束しているかを 判断しようとしている。 また、自動収束テストを 作る事も可能だ、 つまり、最急降下法が 収束したかを 判定するアルゴリズム。 これがたぶん良くやられている 自動収束テストの例で、 こんな感じで収束したかをテストする。 つまりコスト関数Jのシータが 一回のイテレーションで ある小さな値エプシロンより これは10のマイナス3乗とかだが、 それよりちょっとしか減少しなかった場合を収束したとする。 でもやってみて思ったのは、 この閾値をいくつにするか決めるのは、普通、凄い難しい。 だから最急降下法が 実際に収束しているかをチェックする為には 私は実際に この左側のプロットを見る事の方が 多い、 自動収束テストに頼るよりも。 この種の図を見る事は また、最急降下法が正しく機能しているかに関する さらに高度な注意を 与えてくれる事もある。 具体的に言うと、 Jのシータをイテレーションの回数の関数として プロットして見てみて、 もしこんな図を見ることになったら、 つまりJのシータが実際には