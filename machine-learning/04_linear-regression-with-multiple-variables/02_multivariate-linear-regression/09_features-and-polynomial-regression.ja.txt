あなたはいまや、複数変数の線形回帰について知った訳だ。 このビデオでは、使うフィーチャーの 選択について、 ちょっと触れておきたい。 そして適切なフィーチャーを選ぶ事で 強力な別の学習アルゴリズムを 得る方法も触れておく。 特に、私は多項式回帰について 話をしたい。それは線形回帰の 機構を用いて、とても複雑な、 とても非線形な関数を 使う事を可能にしてくれる物だ。 住居の価格の予測の例を使っていこう。 二つのフィーチャーがあるとする： 住居の間口と住居の奥行きだ。 これは我らが売ろうとしている住居の絵だ。 間口は この距離と定義される。 基本的には幅とか 長さだ、 道に面した 方の。 そして住居の 奥行きとは あなたの家がどれだけ奥まっているかだ。 間口があって、奥行きがある。 間口と奥行きと呼ばれている。 あなたは、こんな線形回帰の モデルを建てるかもしれない。 間口が最初のフィーチャーx1で、 奥行きは二番目のフィーチャーx2だ。 だけど線形回帰を 適用する時に、 必ずしも得られたフィーチャーx1とx2を そのまま使わなくてはいけない、という訳では無い。 自分自身で新たなフィーチャーを作り出したって構わない。 だから例えば、私が住居の価格を 予測したいとすると、 私は代わりに、こんな風にしても良い。それは、 住居の価格を本当に決定しているのは、 住居のサイズ、つまり 私の所有している土地の面積だ、と決めても良い。 だから、新しいフィーチャーを作る。 このフィーチャーをxと呼ぶ事にし、 これは間口 掛けることの 奥行き。 これは掛け算の記号。 間口 x 奥行、何故なら これは私が所有している 土地の面積だから。 そして私は仮説として この一つだけのフィーチャーを 使う事にする、 つまり土地の面積。 長方形の面積は 知っての通り 長さの積なので、 個々の問題についての どんな洞察を得ているかに 応じて、 単に間口と奥行をフィーチャーとして取るのでは無く、 ーーそれは単に偶然最初のフィーチャーだったからというだけに過ぎないのでーー 時にはより良いモデルが実際に得られそうな 新しいフィーチャーを定義しても良い。 フィーチャーを選ぶ事と 密接に関連した事として、 多項式回帰と呼ばれるアイデアがある。 こんな感じの住宅の価格のデータセットがあるとしよう。 これにフィットさせたいと思うようなモデルが幾つか考えられる。 一つ考えられるのは、こんな感じの二次のモデルをフィットさせるという事だ。 直線はあんまりこのデータにフィットするようには見えない。 だからこんな感じの 2次のモデルをフィットさせたいと思うかもしれない。 それは、価格がサイズの二次関数に なってる、と思っているという事だ。 それを使うと、例えば データにこんな感じに フィッティングするだろう。 だがそこで、あなたは2次のモデルは 筋が通らない、と思うかもしれない。 何故なら二次関数は、最終的には、 下降して戻ってきてしまうから。 そしてたぶん、我らは家のサイズがあまりにも大きくなると 価格は下がるべき、とは思わないだろう。 だから我らは異なる 多項式のモデルを選ぶかもしれない。 そこで代わりに三次関数を 選んでも良い。 この場合は我らは三次の項を持つ事になり、 それでフィッティングすると、 こんな感じのモデルが得られるだろう。 そしてこの緑の線は いくらかは良くデータにフィットするだろう。 何故なら最終的に降下して戻ってこないから。 では実際にはどうやってこんなモデルにデータをフィッティング出来るだろうか？ 多変量の線形回帰の 機構を用いて、 我らはアルゴリズムを簡単に変更するだけでこれを行う事が出来る。 我らがフィッティングのやり方を知っている 仮説の形は、 こんな類の物だ。 hのxは シータ0 足すことの シータ1 x1  足すことの シータ2 x2 足すことの シータ3 x3。 そしてもし我らが緑の箱で くくったような、 三次のモデルにフィッティングしたければ、 こう言い換えれば良い。 住居の価格を予測する為には、 シータ0 足すことの シータ1 掛ける 住居のサイズ、 足すことの シータ2 掛ける 住居のサイズの二乗。 この項はこっちの項とイコールで、 そしてそこに、足すことの シータ3 掛ける 住居のサイズの三乗で、 これがこの三番目の項となる。 これら二つの定義を お互いにマッピングする為には、 それを行う自然な方法としては 最初のフィーチャーx1を 住居のサイズに、 セットする。 そして二番目のフィーチャーx2に 住居のサイズの二乗をセットする。 そして三番目のフィーチャーx3に 住居のサイズの三乗をセットする。 そして三つのフィーチャーを このように選ぶ事で、 そして線形回帰を適用する事で、 このモデルをフィッティング出来て、 結局データに三次関数のフィッティングが 出来る事になる。 もう一つ追加で言っておきたい事として、 もしあなたがこのように フィーチャーを選んだら、 その時はフィーチャースケーリングの重要性が ますます高くなる。 つまり、もし住居のサイズが 1から1000までの範囲をとる とすると、 つまり1平方フィートから1000平方フィートとすると、 その場合、住居サイズの二乗は、 1から100万、つまり 1000の二乗までの 範囲に渡る。 そして三番目のフィーチャー、 xの三乗、、、じゃなかった。失礼。 三番目のフィーチャーxの3は、 これは住宅価格のサイズの三乗 となるが、これの範囲は 1から10の9乗までとなってしまう。 だからこれら三つのフィーチャーは とても異なる値の範囲を とる事になる。 だからフィーチャースケーリングを適用するのが重要だ。 最急降下法を使う時に それらがお互いに比較出来る 範囲の値になるように。 最後に、ここに使うフィーチャーの選択が どれだけ幅広い物かを示す 最後の例を挙げておこう。 前にこのような二次のモデルは、 あまり良くないかもしれない、と言った。 何故なら、 二次のモデルはデータに良くフィットしてるように 思えたとしても、やがて 降下して戻ってきてしまう、と。 でも実際に住居の価格が 下落する、とは予測したくない訳だ、 住居のサイズが暴騰していく時に。 三次のモデルに 行く代わりに、 他のフィーチャーの選択もありえるかもしれないし、 いろんな選択肢がありえる。 その中で一つだけ ありそうな選択の例を挙げておくと、 もう一つありそうな選択肢としては、 住居の価格は、 シータ0 足すことの シータ1 掛ける サイズ に、 さらに足すことの、 シータ2 掛ける サイズのルート。これ。 ルート関数は、 こんな感じの関数だ。 そして何らかのシータ1, シータ2, シータ3の値があって、 こんなモデルとなる。 そしてそのカーブは こんな感じに 上がっていくけど、だんだん 平坦になっていき、 戻ってくる事は無い。 だから、洞察を元にーーこの場合には、 ルートの関数の形と データの形ーー 別のフィーチャーを選ぶと、 より良いモデルが得られる事がある。 このビデオでは、多項式回帰について議論した。 それは多項式、例えば二次関数とか三次関数とかを データにフィッティングさせる やり方だ。 そしてそのアイデアを通して、 どのフィーチャーを使うのか、という事に関して、 選択肢がある事も扱った。
例えば、 住居の間口と 奥行を使う代わりに、 それらを掛けあわせて 住居の面積を 得る事も出来る。 これはどうしたらいいか当惑しちゃうなぁ、と 思うかもしれないね。こんなたくさんの別々のフィーチャーの選択から どうやって使うフィーチャーを決めればいいの？と。 このクラスの後半では、 どのフィーチャーを使うのかを自動的に 選ぶアルゴリズムも議論する。 つまり、アルゴリズムがデータを見て、 あなたの為に自動的に 使うべきフィーチャーを選んでくれる。 二次関数にフィッティングしたいか、 三次関数か、またはそれ以外か。 だが、それらのアルゴリズムを 得るまでの間は、 当面の所、とりあえず どのフィーチャーを使うか、という事に関しては 選択肢がある、という事を意識しておいて欲しい。 そして異なるフィーチャーをデザインする事で、 単に直線をフィットさせるよりも 複雑な関数を データにフィットさせる事が出来、 特に多項式も同様に 組み込む事が出来て、 適切な洞察を フィーチャーに織り込む事で、 データに対しより良いモデルが得られる事がある。