इस वीडियो में मैं बात करना चाहता हूँ नॉर्मल इक्वेज़न और नॉन-इन्वर्टीबिलिटी की. यह है थोड़ा अधिक एडवांसड कॉन्सेप्ट, लेकिन यह है कुछ जिसके बारे में अक्सर मुझसे पूछा गया है. और इसलिए मैं इसे यहाँ कहना चाहता हूँ और इसे यहां संबोधित करना चाहता हूँ. लेकिन यह है थोड़ा अधिक एडवांसड कॉन्सेप्ट, तो आप इसे ऑप्शनल मटीरीयल की तरह समझ सकते हैं. और वहाँ एक तथ्य है जिसमें आप पहुँच सकते हैं जो कुछ हद तक उपयोगी हो सकता है समझने में, लेकिन फिर भी अगर आपको नॉर्मल इक्वेज़न समझ में नहीं आता है और लिनीअर ऐल्जेब्रा, आप फिर भी उससे सही काम कर सकते हैं. यहां है मुद्दा. आप में कुछ लोग, शायद कुछ अधिक परिचित होंगे लिनीअर ऐल्जेब्रा से, क्या पूछा है कुछ छात्रों ने मुझ से है, जब कम्प्यूट करते हैं यह थीटा बराबर X ट्रान्स्पोज़ X इन्वर्स X ट्रान्स्पोज़ Y. क्या होगा यदि मैट्रिक्स X ट्रान्स्पोज़ नॉन-इन्वर्टिबल होगी? आप में से वे जो जानते हैं थोड़ा अधिक लिनीअर ऐल्जेब्रा आप शायद जानते होंगे कि केवल कुछ मेट्रिसीज़ होती हैं इन्वर्टिबल और कुछ मेट्रिसीज़ का इन्वर्स नहीं होता हम उन्हें कहते हैं नॉन-इन्वर्टिबल मेट्रिसीज़. सिंगुलर या डिजेनेरेट मेट्रिसीज़. मुद्दा या समस्या कि X ट्रान्स्पोज़ X है नॉन-इन्वर्टिबल होना चाहिए कभी-कभार ही. और ओकटेव में यदि आप इम्प्लमेंट करते हैं इसे कम्प्यूट करने के लिए थीटा, तो यह वास्तव में करेगा सही काम. मैं थोड़ा तकनीकी तौर पर बात कर रहा हूँ, और मैं विस्तार में नहीं जाना चाहता, लेकिन ओकटेव में हैं दो फ़ंक्शन्स इन्वर्ट करने के लिए एक कहलाता हैं pinv, और दूसरा कहलाता है inv. इन दोनो में अंतर कुछ हद तक तकनीकी है. एक कहलाता हैं स्यूडो-इन्वर्स, और एक कहलाता है इन्वर्स. आप दिखा सकते हैं गणितीय रूप में कि जब तक आप pinv फ़ंक्शन का उपयोग करते हैं तो यह वास्तव में कम्प्यूट करता है वैल्यू थीटा की जो चाहते हैं भले ही X ट्रान्स्पोज़ X नॉन-इन्वर्टिबल है. विशिष्ट जानकारी inv की. क्या अंतर है pinv में? क्या है inv? यह कुछ हद तक एडवांसड नूमेरिकल कंप्यूटिंग कॉन्सेप्ट है, मैं वास्तव में इसमें जाना नहीं चाहता. लेकिन मैंने सोचा कि इस ऑप्शनल वीडियो में, मैं कोशिश करूँगा देने की थोड़ा अनुभव क्या मतलब है मैट्रिक्स X ट्रान्स्पोज़ नॉन-इन्वर्टिबल होने का. आप में से वे जो जानते हैं थोड़ा अधिक लिनीअर ऐल्जेब्रा शायद रुचि रखते होंगे. मैं गणितीय रूप में साबित नहीं करूँगा यह लेकिन यदि मैट्रिक्स X ट्रान्स्पोज़ नॉन-इन्वर्टिबल है, उसके अक्सर दो आम कारण होते हैं. पहला कारण है यदि आपकी प्रॉब्लम में किसी भी तरह से रेडंडंट / बेमानी / व्यर्थ फ़ीचर्ज़ हैं. वस्तुतः, यदि आप प्रिडिक्ट करना चाह रहे हैं घरों की कीमतों को और अगर X1 है साइज़ घर का फ़ुट में, वर्ग फ़ीट में और X2 है साइज़ घर का वर्ग मीटर में, तब आप जानते हैं 1 मीटर बराबर है 3.28 फुट दो दशमलव स्थान तक. और इसलिए आपके दोनो फ़ीचर्ज़ संतुष्ट करते हैं प्रतिबंध X1 बराबर 3.28 गुणा X2. और आप दिखा सकते हैं, आप में से वे जो हैं कुछ एडवांसड लिनीअर ऐल्जेब्रा में, लेकिन यदि आप ऐल्जेब्रा समझा रहे हैं आप वास्तव में दिखा सकते हैं कि यदि आपके दो फ़ीचर्ज़ से संबंधित हैं, इस तरह एक लिनीअर इक्वेज़न. तब मैट्रिक्स X ट्रान्स्पोज़ X नॉन-इन्वर्टिबल होगी. दूसरी चीज़ जो बना सकती है मैट्रिक्स X ट्रान्स्पोज़ X नॉन-इन्वर्टिबल है यदि आप ट्रेनिंग कर रहे हैं, यदि आप रन करने का प्रयास कर रहे हैं लर्निंग अल्गोरिद्म बहुत से फ़ीचर्ज़ के साथ. वस्तुत:, यदि m है कम या बराबर n के. उदाहरण के लिए, यदि आप कल्पना करें अगर आपके पास है m = 10 ट्रेनिंग इग्ज़ाम्पल्ज़ कि आपके पास हैं n बराबर 100 फ़ीचर्ज़ तब आप फ़िट करने की कोशिश कर रहे हैं एक पेरामिटर थीटा जो है, आप जानते हैं, n जमा एक डिमेन्शनल. तो यह है 101 डिमेन्शनल, आप ट्राई कर रहे हैं फ़िट करने की 101 पेरमिटर्स सिर्फ़ 10 ट्रेनिंग इग्ज़ाम्पल्ज़ से. यह कभी काम करता हैं लेकिन हमेशा एक अच्छा विचार नहीं है. क्योंकि जैसे हम देखेंगे बाद में, आपके पास शायद पर्याप्त नहीं है यदि आपके पास हैं केवल 10 इग्ज़ाम्पल्ज़ फ़िट करने के लिए आप जानते है, 100 या 101 पेरमिटर्स. हम बाद में इस कोर्स में देखेंगे कि क्यों यह बहुत कम डेटा हो सकता है फिट करने के लिए इतने पेरमिटर्स. लेकिन आमतौर पर हम क्या तब करते हैं यदि m कम है n से, है कि देखें कि हम या तो हटा सकते हैं कुछ फ़ीचर्ज़ या इस्तेमाल करें एक तरीक़ा जिसे कहते हैं रेगुलराइज़ेशन जिसके बारे में हम बात करेंगे बाद में इस क्लास में भी, जो एक प्रकार से फ़िट करने देगा आपको बहुत से पेरमिटर्स, प्रयोग बहुत से फ़ीचर्ज़ का, भले ही आपके पास है एक अपेक्षाकृत छोटा ट्रेनिंग सेट. लेकिन यह रेगुलराइज़ेशन होगा एक बाद का विषय इस कोर्स में. लेकिन सारांश में, यदि आपको कभी मिले कि X ट्रान्स्पोज़ X है एक सिंगुलर या वैकल्पिक रूप से आपको मिले यह नॉन-इन्वर्टिबल, मैं क्या सलाह दूँगा करने की कि पहले देखें अपने फ़ीचर्ज़ और देखें कि क्या आपके पास हैं निरर्थक / रेडंडंट फ़ीचर्ज़ जैसे x1, x2. जो हैं लिनीअर रूप से निर्भर या हैं लिनीअर फ़ंक्शन एक दूसरे के ऐसे. और यदि हैं आपके पास निरर्थक फ़ीचर्ज़ और यदि आप सिर्फ़ हटा देते हैं केवल एक उन फ़ीचर्ज़ में से, आपको वास्तव में जरूरत नहीं है इन दोनों फ़ीचर्ज़ की, यदि आप केवल हटा देते हैं एक इन फ़ीचर्ज़ में से, उससे हल हो जाएगी आपकी नॉन-इन्वर्टिबलिटी की समस्या. और इसलिए मैं पहले सोचूँगा मेरे फ़ीचर्ज़ के बारे में और चेक करूँगा यदि इनमें से कोई निरर्थक है. और यदि तब हटाते जाते हैं निरर्थक फ़ीचर्ज़ जब तक वे नही हैं अब निरर्थक. और यदि आपके फ़ीचर्ज़ नही है निरर्थक, मैं चेक करूँगा कि क्या मेरे पास हैं बहुत अधिक फ़ीचर्ज़. और यदि वैसा है, मैं या तो हटाऊँगा कुछ फ़ीचर्ज़ यदि मैं कर सकता हूँ इस्तेमाल काम फ़ीचर्ज़ या मैं सोचूँगा रेगुलराइज़ेशन के बारे में. जो यह विषय जिसके बारे में हम बाद में बात करेंगे. तो बस इतना ही नॉर्मल इक्वेज़न के लिए और क्या मतलब हैं कि मेट्रिक्स X ट्रान्स्पोज़ X है नॉन-इन्वर्टिबल लेकिन यह है एक समस्या जो आपको मिलेगी उम्मीद है आपको मिलेगी कभी-कभार ही और यदि आप सिर्फ़ इम्प्लमेंट करते हैं इसे ओकटेव में इस्तेमाल करते हुए pinv इस्तेमाल करते हुए pinv फ़ंक्शन जिसे कहते हैं एक स्यूडो इन्वर्स फ़ंक्शन आप इस्तेमाल कर सकते हैं एक भिन्न फ़ंक्शन जिसे कहते हैं स्यूडो इन्वर्स लेकिन वह इम्प्लमेंटेशन करना चाहिए सही काम, भले ही X ट्रान्स्पोज़ X है नॉन-इन्वर्टिबल वह होना चाहिए कभी-कभार ही वैसे भी, तो यह नहीं होनी चाहिए एक समस्या बहुत सी इम्प्लमेंटेशन्स के लिए लिनीअर रेग्रेशन में.