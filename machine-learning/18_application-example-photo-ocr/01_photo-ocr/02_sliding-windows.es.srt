1
00:00:00,370 --> 00:00:01,590
En el video anterior, hablamos acerca

2
00:00:01,890 --> 00:00:04,570
flujo de proyecto para el «foto OCR» y de como funcionaba.

3
00:00:05,480 --> 00:00:06,370
En el que tomaríamos una imagen

4
00:00:07,050 --> 00:00:08,070
y pasarla a través de una

5
00:00:08,130 --> 00:00:10,010
secuencia de componentes de

6
00:00:10,280 --> 00:00:11,680
aprendizaje electrónico con el fin de

7
00:00:11,890 --> 00:00:13,820
intentar leer el texto que aparece en la imagen.

8
00:00:14,590 --> 00:00:15,820
En este vídeo, quiero platicarte

9
00:00:16,210 --> 00:00:17,360
un poquito mas acerca de como trabaja cada uno

10
00:00:17,780 --> 00:00:20,310
de los componentes del flujo de trabajo para el «foto OCR».

11
00:00:21,270 --> 00:00:24,070
Particularmente este video se centrará en discutir

12
00:00:24,680 --> 00:00:25,950
sobre lo que llamamos ventanas deslizables.

13
00:00:26,750 --> 00:00:31,570
La primer etapa

14
00:00:32,000 --> 00:00:33,390
del filtro del flujo del proyecto era la

15
00:00:33,730 --> 00:00:35,090
detección del texto, en donde observamos

16
00:00:35,330 --> 00:00:36,640
una imagen como esta e intentamos encontrar

17
00:00:37,020 --> 00:00:39,320
regiones de texto que aparezcan en esta imagen.

18
00:00:39,850 --> 00:00:42,490
Detectar texto es un problema inusual en la visión por computadora.

19
00:00:43,220 --> 00:00:44,820
Porque dependiendo de la longitud

20
00:00:45,140 --> 00:00:46,150
del texto que estás intentando encontrar,

21
00:00:46,290 --> 00:00:47,870
estos rectángulos que estas tratando de encontrar

22
00:00:47,970 --> 00:00:49,600
pueden tener una proporción diferente.

23
00:00:51,100 --> 00:00:52,060
Así que, para hablar

24
00:00:52,220 --> 00:00:53,550
acerca de detectar cosas en imágenes, comencemos

25
00:00:54,300 --> 00:00:55,860
con un ejemplo más sencillo de detección peatonal

26
00:00:56,550 --> 00:01:00,080
y luego regresamos a aplicar las ideas

27
00:01:00,460 --> 00:01:02,300
que fueron desarrolladas en detección peatonal

28
00:01:02,570 --> 00:01:04,840
en detección peatonal y las aplicaremos a detección de texto.

29
00:01:06,280 --> 00:01:08,010
Así que en la detección peatonal quieres

30
00:01:08,360 --> 00:01:09,440
tomar una imagen que se vea

31
00:01:09,600 --> 00:01:11,010
como esta y encontrar individualmente

32
00:01:11,160 --> 00:01:12,920
los peatones que aparecen en la imagen.

33
00:01:13,260 --> 00:01:14,440
Ahí encontramos un peatón,

34
00:01:14,520 --> 00:01:15,550
ahí hay un segundo,

35
00:01:15,780 --> 00:01:17,920
un tercero, un cuarto, un quinto,

36
00:01:18,290 --> 00:01:19,390
y un sexto.

37
00:01:19,560 --> 00:01:20,990
Este problema puede ser ligeramente mas sencillo

38
00:01:21,320 --> 00:01:22,770
que la detección de texto, por la sola

39
00:01:23,100 --> 00:01:24,200
razón que la proporción de la

40
00:01:24,560 --> 00:01:27,490
mayoría de los peatones son muy similares.

41
00:01:28,170 --> 00:01:29,280
Utilizando simplemente una proporción fija

42
00:01:29,630 --> 00:01:31,960
para estos rectángulos que estamos intentando encontrar.

43
00:01:32,420 --> 00:01:33,610
Cuándo me refiero a la proporción, lo que intento decir es a

44
00:01:33,920 --> 00:01:36,420
la relación entre la altura y ancho de estos rectángulos.

45
00:01:37,820 --> 00:01:38,190
Todos son iguales para los

46
00:01:38,650 --> 00:01:40,120
distintos peatones, pero para

47
00:01:40,490 --> 00:01:42,650
detección de texto, la proporción de

48
00:01:43,030 --> 00:01:44,560
altura y ancho es distinta

49
00:01:44,960 --> 00:01:45,830
para las diferentes lineas de texto

50
00:01:46,460 --> 00:01:47,940
Aunque para detección de peatones, los

51
00:01:48,020 --> 00:01:49,250
peatones pueden estar a distintas distancias

52
00:01:49,810 --> 00:01:51,250
de la cámara y por eso la altura

53
00:01:51,390 --> 00:01:52,730
de estos rectángulos pueden ser diferentes

54
00:01:53,380 --> 00:01:55,600
dependiendo que tan alejados se encuentren,

55
00:01:55,990 --> 00:01:57,090
pero la proporción es la misma.

56
00:01:57,720 --> 00:01:58,880
Con el fin de construir un sistema de detección

57
00:01:59,440 --> 00:02:02,460
de peatones, aquí está como podemos hacerlo.

58
00:02:02,520 --> 00:02:03,650
Digamos que decidimos

59
00:02:03,970 --> 00:02:06,100
estandarizar para esto

60
00:02:06,690 --> 00:02:08,010
una proporción de 80 x 36,

61
00:02:08,180 --> 00:02:10,040
pudimos haber escogido algún número

62
00:02:10,330 --> 00:02:11,510
redondeado como 80 x 40 o algo así,

63
00:02:12,020 --> 00:02:14,000
pero 82 x 36 parece ser el correcto.

64
00:02:16,110 --> 00:02:17,280
Lo que debemos hacer entonces, es recolectar

65
00:02:17,650 --> 00:02:20,420
un conjunto grande de ejemplos positivos y negativos.

66
00:02:21,240 --> 00:02:22,790
Aquí hay ejemplos de pedazos

67
00:02:22,900 --> 00:02:24,230
de imagen de 82 x 36 que contienen

68
00:02:24,360 --> 00:02:26,230
peatones y aquí hay

69
00:02:26,550 --> 00:02:28,360
ejemplos de imágenes que no.

70
00:02:29,470 --> 00:02:30,710
En esta diapositiva te muestro 12

71
00:02:31,050 --> 00:02:33,170
ejemplos positivos de y=1

72
00:02:33,730 --> 00:02:34,990
y 12 ejemplos de y=0.

73
00:02:36,410 --> 00:02:37,790
En una aplicación mas típica de detección de

74
00:02:38,180 --> 00:02:39,200
peatones, podríamos tener

75
00:02:39,500 --> 00:02:40,880
desde unos mil ejemplos de

76
00:02:41,230 --> 00:02:42,210
entrenamiento, hasta tal vez unos

77
00:02:42,300 --> 00:02:44,410
10 mil ejemplos de entrenamiento, o

78
00:02:44,460 --> 00:02:45,360
tal vez mas si logras obtener

79
00:02:45,510 --> 00:02:47,180
conjuntos de entrenamiento mas grandes.

80
00:02:47,460 --> 00:02:48,590
Lo que puedes hacer, es entrenar

81
00:02:48,910 --> 00:02:50,160
en tu red o algún otro

82
00:02:50,510 --> 00:02:52,420
algoritmo de aprendizaje para

83
00:02:52,610 --> 00:02:54,570
obtener esta entrada. Un pedazo de

84
00:02:54,970 --> 00:02:56,710
imagen de dimensión 82 por

85
00:02:56,850 --> 00:02:59,180
36, y clasificar ’y’

86
00:02:59,710 --> 00:03:01,070
y para clasificar el pedazo de esa imagen

87
00:03:01,510 --> 00:03:03,850
ya se que contenga o no un peatón.

88
00:03:05,250 --> 00:03:06,250
Esto es una forma de aplicar

89
00:03:06,470 --> 00:03:08,050
aprendizaje supervisado, ocupando

90
00:03:08,210 --> 00:03:09,290
un pedazo de imagen y poder determinar

91
00:03:09,530 --> 00:03:12,420
si aparece o no un peatón en la imagen capturada.

92
00:03:14,310 --> 00:03:15,190
Ahora, digamos que obtuvimos

93
00:03:15,400 --> 00:03:16,520
una imagen nueva, un conjunto de imágenes

94
00:03:16,850 --> 00:03:17,920
de prueba como esta y queremos intentar

95
00:03:18,030 --> 00:03:20,240
encontrar un peatón que aparezca en la imagen.

96
00:03:21,520 --> 00:03:22,340
Lo que podemos hacer, es iniciar

97
00:03:22,670 --> 00:03:25,140
tomando un pedazo rectangular de esta imagen

98
00:03:25,580 --> 00:03:26,800
como se muestra aquí, y tal vez

99
00:03:26,900 --> 00:03:27,930
un pedazo de 82 x 36

100
00:03:28,010 --> 00:03:29,440
de esta imagen y ejecutar a través

101
00:03:30,270 --> 00:03:31,530
de nuestro clasificador

102
00:03:31,830 --> 00:03:33,660
ese pedazo de imagen para determinar

103
00:03:33,840 --> 00:03:34,900
ya sea que hay o no un

104
00:03:34,980 --> 00:03:36,310
peatón en ese pedazo de imagen

105
00:03:36,620 --> 00:03:38,100
y con suerte nuestro clasificador nos regresará

106
00:03:38,260 --> 00:03:40,600
y=0 para este pedazo, ya que no hay un peatón.

107
00:03:42,020 --> 00:03:42,900
Después, tomamos ese rectángulo

108
00:03:43,140 --> 00:03:44,380
verde y lo deslizamos un poquito

109
00:03:44,490 --> 00:03:45,680
por encima y ejecutamos a ese nuevo

110
00:03:45,940 --> 00:03:47,180
pedazo de imagen nuestro clasificador

111
00:03:47,560 --> 00:03:49,700
para decidir si hay un peatón ahí.

112
00:03:50,760 --> 00:03:51,740
Después de haber hecho eso, deslizamos

113
00:03:51,920 --> 00:03:53,070
la ventana hacia adelante por la derecha

114
00:03:53,160 --> 00:03:54,160
y le ejecutamos a ese pedazo

115
00:03:54,420 --> 00:03:56,690
nuestro clasificador otra vez.

116
00:03:56,970 --> 00:03:57,850
La cantidad que intercalas por

117
00:03:58,280 --> 00:03:59,770
encima del rectángulo cada vez

118
00:04:00,260 --> 00:04:01,720
es un parámetro, a la que algunas veces

119
00:04:02,190 --> 00:04:04,000
se llama parámetro del tamaño

120
00:04:04,070 --> 00:04:06,020
de paso, algunas veces también llamado

121
00:04:06,380 --> 00:04:08,970
el parámetro de avance si

122
00:04:09,120 --> 00:04:11,050
pasas por encima a un pixel a la vez.

123
00:04:11,210 --> 00:04:12,020
Así que puedes usar el tamaño de paso

124
00:04:12,360 --> 00:04:14,020
o el parámetro de avance de 1, que generalmente

125
00:04:14,340 --> 00:04:15,560
se desempeña mejor, pero es

126
00:04:15,700 --> 00:04:16,960
mas «caro», y

127
00:04:17,430 --> 00:04:18,940
si usas un tamaño de paso de

128
00:04:19,090 --> 00:04:20,010
tal vez 4 pixeles cada

129
00:04:20,210 --> 00:04:20,970
vez, u 8 pixeles a la

130
00:04:21,250 --> 00:04:22,350
vez o un número grande de

131
00:04:22,550 --> 00:04:23,600
pixeles puede ser mas simple

132
00:04:24,010 --> 00:04:25,320
ya que estas moviendo el

133
00:04:25,430 --> 00:04:26,570
rectángulo un poquito

134
00:04:26,700 --> 00:04:28,570
mas cada vez.

135
00:04:28,870 --> 00:04:30,090
Entonces, utilizando este proceso, vas

136
00:04:30,870 --> 00:04:32,310
pasando por encima el rectángulo

137
00:04:32,340 --> 00:04:33,160
a la derecha un poquito

138
00:04:33,370 --> 00:04:34,450
a la vez y ejecutando a través

139
00:04:34,520 --> 00:04:35,780
del clasificador cada uno de los pedazos

140
00:04:36,620 --> 00:04:38,220
hasta que finalmente

141
00:04:38,900 --> 00:04:42,080
deslizaste esta ventana por encima

142
00:04:42,150 --> 00:04:43,340
de las diferentes posiciones en la imagen.

143
00:04:43,550 --> 00:04:44,680
Primero inicias por

144
00:04:44,850 --> 00:04:46,080
la primer fila y después avanzas

145
00:04:46,160 --> 00:04:47,580
por las siguientes filas de

146
00:04:47,710 --> 00:04:49,100
la imagen, habrás entonces

147
00:04:49,290 --> 00:04:50,490
ejecutado a través de tu clasificador

148
00:04:50,550 --> 00:04:52,070
todos los diferentes pedazos de imagen

149
00:04:52,240 --> 00:04:53,330
a algún un tamaño de paso

150
00:04:53,430 --> 00:04:54,990
o de avance.

151
00:04:56,990 --> 00:04:57,870
Ahora, ese era un rectángulo

152
00:04:57,970 --> 00:04:59,870
muy pequeño, que solo detecta

153
00:05:00,310 --> 00:05:02,310
peatones de un tamaño específico.

154
00:05:02,780 --> 00:05:04,210
Entonces lo que debemos hacer después

155
00:05:04,470 --> 00:05:05,990
es empezar a ver en pedazos de imagen mas grandes.

156
00:05:06,730 --> 00:05:08,270
Vamos a tomar pedazos de imagen mas

157
00:05:08,610 --> 00:05:09,700
grandes, como esos que se muestran aquí

158
00:05:10,310 --> 00:05:11,960
y ejecutar esos a través del fuego cruzado también.

159
00:05:13,540 --> 00:05:14,320
Por cierto, cuando digo

160
00:05:14,600 --> 00:05:15,830
tomar pedazos de imagen mas grandes, lo que

161
00:05:16,080 --> 00:05:17,780
realmente quiero decir es que cuando tomas

162
00:05:17,860 --> 00:05:18,850
un pedazo de imagen como este,

163
00:05:19,490 --> 00:05:20,720
lo que realmente estás haciendo es tomar

164
00:05:20,880 --> 00:05:22,110
es pedazo de imagen y reducirlo en

165
00:05:22,800 --> 00:05:24,750
tamaño a 82 x 36.

166
00:05:25,000 --> 00:05:26,260
Así que tomas ese pedazo mas grande

167
00:05:26,550 --> 00:05:28,180
y lo redimensionas a para

168
00:05:28,300 --> 00:05:29,800
que sea una imagen mas pequeña y

169
00:05:29,970 --> 00:05:31,260
sera la imagen mas pequeña

170
00:05:31,600 --> 00:05:32,620
que sera la que pases a través de tu clasificador

171
00:05:32,990 --> 00:05:35,340
para intentar y decidir si hay un peatón en ese pedazo.

172
00:05:37,230 --> 00:05:38,310
Y finalmente puedes hacer

173
00:05:38,470 --> 00:05:39,530
esto inclusive a escalas

174
00:05:39,930 --> 00:05:41,870
mayores y ejecutar ese tamaño

175
00:05:42,080 --> 00:05:43,830
de ventana al final. Y, después de

176
00:05:43,980 --> 00:05:45,920
todo este proceso, con suerte tu algoritmo

177
00:05:45,980 --> 00:05:47,480
detectará cuando aparece un

178
00:05:48,040 --> 00:05:49,670
peatón en la imagen.

179
00:05:50,140 --> 00:05:52,070
Así es como entrenas a

180
00:05:52,470 --> 00:05:53,850
tu supervisor de aprendizaje

181
00:05:54,290 --> 00:05:55,630
del clasificador, y después

182
00:05:55,890 --> 00:05:57,360
utilizas el clasificador de ventanas deslizantes,

183
00:05:57,920 --> 00:05:59,820
o utilizas un detector de ventanas deslizantes

184
00:05:59,970 --> 00:06:01,740
con el fin de encontrar peatones en la imagen.

185
00:06:03,070 --> 00:06:04,050
Regresemos al ejemplo de

186
00:06:04,150 --> 00:06:05,910
detección de texto y hablemos

187
00:06:06,100 --> 00:06:07,490
acerca de esa etapa en nuestro

188
00:06:07,790 --> 00:06:09,330
flujo de proyecto para el «foto OCR», donde nuestra

189
00:06:09,570 --> 00:06:11,340
meta es encontrar unidades de regiones de texto.

190
00:06:13,250 --> 00:06:15,010
Al igual que en la detección de peatones

191
00:06:15,250 --> 00:06:16,730
puedes salir con un conjunto mas

192
00:06:17,030 --> 00:06:18,410
grande de ejemplos positivos y

193
00:06:19,060 --> 00:06:20,930
ejemplos negativos, con ejemplos positivos

194
00:06:21,530 --> 00:06:23,810
correspondientes a regiones donde aparece texto.

195
00:06:24,300 --> 00:06:27,290
Entonces, en vez de intentar detectar peatones, ahora intentaremos detectar texto.

196
00:06:28,130 --> 00:06:29,670
Ahora los ejemplos positivos van a ser

197
00:06:29,770 --> 00:06:31,640
pedazos de imágenes donde hay texto.

198
00:06:31,970 --> 00:06:33,330
Y los ejemplos negativos van a ser

199
00:06:33,380 --> 00:06:36,000
pedazos de imágenes donde no hay texto.

200
00:06:36,330 --> 00:06:37,530
Habiendo entrenado este clasificador podemos

201
00:06:38,030 --> 00:06:39,450
aplicarlo a una nueva

202
00:06:39,870 --> 00:06:41,190
imagen, dentro de un conjunto de

203
00:06:42,460 --> 00:06:42,910
pruebas de imagen.

204
00:06:43,310 --> 00:06:44,900
Aquí esta la imagen que hemos utilizado como ejemplo.

205
00:06:46,040 --> 00:06:47,300
Ahora, vamos a ejecutar

206
00:06:47,440 --> 00:06:48,400
para este ejemplo, las

207
00:06:48,560 --> 00:06:50,300
ventanas deslizantes a una sola

208
00:06:50,640 --> 00:06:52,030
escala fija con el propósito

209
00:06:52,370 --> 00:06:54,360
de ilustración, me refiero a que solo voy

210
00:06:54,450 --> 00:06:56,000
a utilizar un solo tamaño de rectángulo.

211
00:06:56,790 --> 00:06:58,110
Pero digamos que ejecuto mi pequeño

212
00:06:58,350 --> 00:07:00,070
clasificador de ventanas en muchos

213
00:07:00,170 --> 00:07:01,570
pequeños pedazos de imagen como este,

214
00:07:01,630 --> 00:07:04,340
si hago eso,

215
00:07:04,430 --> 00:07:05,430
lo que obtendré al final

216
00:07:05,530 --> 00:07:06,670
será un resultado

217
00:07:07,040 --> 00:07:08,530
como este, que es una región

218
00:07:08,900 --> 00:07:10,700
blanca que muestra donde mi

219
00:07:10,940 --> 00:07:12,190
sistema de detección de texto encontró

220
00:07:12,210 --> 00:07:15,960
texto y si el eje de estas dos figuras son las misma

221
00:07:16,390 --> 00:07:17,700
entonces hay una región

222
00:07:18,110 --> 00:07:19,200
aquí, y por supuesto también

223
00:07:19,230 --> 00:07:20,710
una región aquí, entonces

224
00:07:20,840 --> 00:07:22,040
en virtud que aquí es negro

225
00:07:22,850 --> 00:07:24,390
representa que el clasificador

226
00:07:24,840 --> 00:07:25,940
piensa que no encontró ningún

227
00:07:26,170 --> 00:07:28,100
texto ahí, mientras que

228
00:07:28,170 --> 00:07:29,630
de hecho ahí hay muchas

229
00:07:29,810 --> 00:07:31,300
cosas blancas, que reflejan que

230
00:07:31,540 --> 00:07:33,260
el clasificador piensa que encontró un montón

231
00:07:33,520 --> 00:07:34,310
de texto sobre esa parte de la imagen.

232
00:07:35,040 --> 00:07:35,700
Lo que hice en esta

233
00:07:35,780 --> 00:07:36,870
parte inferior de la izquierda es

234
00:07:37,070 --> 00:07:38,820
en realidad usar blanco para mostrar donde

235
00:07:38,970 --> 00:07:41,050
el clasificador piensa que ha encontrado texto.

236
00:07:41,810 --> 00:07:43,280
Y las diferentes tonalidades de gris

237
00:07:43,880 --> 00:07:45,560
corresponden a la probabilidad que haya

238
00:07:45,670 --> 00:07:46,750
salido por el clasificador,

239
00:07:47,110 --> 00:07:48,000
entonces, como las tonalidades de gris

240
00:07:48,520 --> 00:07:49,860
corresponden a donde piensa que

241
00:07:49,930 --> 00:07:50,750
tal vez pueda haber texto

242
00:07:51,210 --> 00:07:53,900
pero tiene menos confianza por la

243
00:07:54,260 --> 00:07:55,980
respuesta a la brillantez del blanco donde

244
00:07:57,440 --> 00:07:58,400
ha salido con una mayor

245
00:07:58,660 --> 00:08:00,470
probabilidad, probabilidad estimada de que

246
00:08:00,630 --> 00:08:03,110
existan peatones en esa ubicación.

247
00:08:04,110 --> 00:08:05,270
Todavía no hemos terminado del todo porqué

248
00:08:05,690 --> 00:08:06,580
lo que realmente queremos hacer

249
00:08:06,830 --> 00:08:08,620
es dibujar rectángulos alrededor de toda

250
00:08:08,850 --> 00:08:09,780
la región donde hay texto

251
00:08:10,490 --> 00:08:12,540
en la imagen, entonces vamos a

252
00:08:12,650 --> 00:08:13,540
realizar un paso mas

253
00:08:13,840 --> 00:08:14,990
en donde tomaremos la salida

254
00:08:15,230 --> 00:08:16,880
del clasificador y le aplicaremos

255
00:08:17,290 --> 00:08:19,280
lo que es llamado operador de expansión.

256
00:08:20,750 --> 00:08:22,250
Pero, lo qué es,

257
00:08:22,430 --> 00:08:24,270
toma la imagen aquí,

258
00:08:25,450 --> 00:08:26,700
y toma cada una de

259
00:08:26,800 --> 00:08:28,200
las manchas blancas, toma cada una

260
00:08:28,270 --> 00:08:30,590
de las regiones blancas y la expande.

261
00:08:31,460 --> 00:08:32,460
Matemáticamente, la manera en que

262
00:08:32,610 --> 00:08:34,110
lo implementas es, si ves

263
00:08:34,270 --> 00:08:35,280
la imagen de la derecha, lo que

264
00:08:35,690 --> 00:08:36,780
hacemos para crear la

265
00:08:36,930 --> 00:08:38,110
imagen en la derecha es, por cada

266
00:08:38,370 --> 00:08:39,510
pixel nos vamos a preguntar

267
00:08:39,610 --> 00:08:40,790
si esta dentro de alguna

268
00:08:41,370 --> 00:08:42,960
distancia de un pixel blanco

269
00:08:43,100 --> 00:08:44,650
en la imagen de la izquierda

270
00:08:45,430 --> 00:08:46,800
Y, entonces, si un pixel específico

271
00:08:47,220 --> 00:08:48,420
esta dentro de digamos, 5 pixeles

272
00:08:48,950 --> 00:08:50,280
o 10 pixeles de un pixel blanco la imagen

273
00:08:50,610 --> 00:08:52,310
de hasta la izquierda, entonces también coloreamos

274
00:08:52,540 --> 00:08:55,020
ese pixel de blanco en la imagen de hasta la derecha.

275
00:08:56,190 --> 00:08:57,010
Así, el efecto de esto

276
00:08:57,300 --> 00:08:58,350
es, tomamos cada una de las

277
00:08:58,730 --> 00:08:59,630
machas blancas en la imagen de hasta

278
00:09:00,030 --> 00:09:01,370
la izquierda y las extendemos un

279
00:09:01,500 --> 00:09:02,200
poco, creciendolas un

280
00:09:02,670 --> 00:09:04,110
poquito, viendo donde los pixeles

281
00:09:04,170 --> 00:09:05,420
cercanos, los pixeles blancos,

282
00:09:05,900 --> 00:09:07,980
y coloreamos esos pixeles cercanos también de blanco.

283
00:09:08,430 --> 00:09:09,900
Finalmente, ya casi terminamos.

284
00:09:10,180 --> 00:09:11,210
Ahora podemos ver en esta imagen de

285
00:09:11,480 --> 00:09:12,900
hasta la derecha y solo

286
00:09:13,210 --> 00:09:14,650
ver los componentes que se conectan

287
00:09:15,320 --> 00:09:16,700
y ver las regiones blancas contiguas

288
00:09:16,990 --> 00:09:19,350
y dibujar cajas delimitadoras alrededor de ellas.

289
00:09:20,260 --> 00:09:20,990
De forma particular, si vemos

290
00:09:21,390 --> 00:09:22,850
todas la regiones blancas, como esta,

291
00:09:23,080 --> 00:09:24,750
esta, esta otra,

292
00:09:24,990 --> 00:09:26,670
y así sucesivamente, y

293
00:09:27,030 --> 00:09:27,810
si usamos una heurística

294
00:09:28,390 --> 00:09:30,240
simple para descartar rectángulos

295
00:09:30,660 --> 00:09:32,760
cuya proporción se ve rara, porque

296
00:09:32,870 --> 00:09:34,460
sabemos que las cajas alrededor de los textos

297
00:09:34,730 --> 00:09:36,130
deben ser mas anchas de que lo que son altas.

298
00:09:37,110 --> 00:09:38,310
Así que si ignoramos las manchas

299
00:09:38,410 --> 00:09:39,990
delgadas altas como esta y

300
00:09:40,230 --> 00:09:42,120
esta otras, y

301
00:09:42,190 --> 00:09:43,390
descartamos estas porque

302
00:09:43,880 --> 00:09:45,490
son muy altas y delgadas, y

303
00:09:45,660 --> 00:09:46,780
entonces dibujamos rectángulos

304
00:09:47,470 --> 00:09:48,440
alrededor de aquellas cuya

305
00:09:48,840 --> 00:09:50,420
proporción de su rango de altura

306
00:09:50,610 --> 00:09:51,800
la hace parecer a una

307
00:09:51,950 --> 00:09:53,310
región de texto, entonces podemos

308
00:09:53,380 --> 00:09:55,070
dibujar los rectángulos, cajas

309
00:09:55,450 --> 00:09:56,660
delimitadoras alrededor de la

310
00:09:56,970 --> 00:09:58,500
región del texto, esta región, y

311
00:09:58,610 --> 00:10:00,550
esa región de texto, correspondiente al

312
00:10:01,060 --> 00:10:02,180
logotipo de «Lula B´s antique mall»,

313
00:10:02,650 --> 00:10:04,690
y la pequeña señal de «Abierto»

314
00:10:05,840 --> 00:10:06,000
de por allá.

315
00:10:07,100 --> 00:10:09,550
A este ejemplo por cierto, realmente le falta una pieza de texto.

316
00:10:09,860 --> 00:10:12,550
Esta es muy difícil de leer, pero ahí hay una pieza de texto.

317
00:10:13,080 --> 00:10:14,710
Que dice «Lula B's...» que corresponde a

318
00:10:14,950 --> 00:10:16,180
esto, pero su proporción

319
00:10:16,530 --> 00:10:17,960
se ve mal por lo que la descartamos.

320
00:10:19,100 --> 00:10:20,240
pero sabes que esta bien

321
00:10:20,530 --> 00:10:21,460
en esta imagen, pero en este

322
00:10:21,660 --> 00:10:22,760
ejemplo en particular el clasificador

323
00:10:23,290 --> 00:10:24,400
se salto esta pieza de texto.

324
00:10:24,760 --> 00:10:25,780
Es muy difícil de leer porque

325
00:10:25,960 --> 00:10:26,900
es una pieza de texto escrita

326
00:10:27,240 --> 00:10:28,700
sobre una ventana transparente.

327
00:10:29,750 --> 00:10:31,200
Entonces, esto es la detección de texto

328
00:10:32,430 --> 00:10:33,120
usando ventanas deslizables.

329
00:10:33,800 --> 00:10:35,300
Y habiendo encontrado estos rectángulos

330
00:10:36,100 --> 00:10:37,010
con texto adentro, ahora

331
00:10:37,110 --> 00:10:38,240
podemos cortar solo estas

332
00:10:38,450 --> 00:10:39,890
regiones de imagen y utilizarlas después en etapas

333
00:10:40,070 --> 00:10:42,100
posteriores del flujo para intentar conocer el texto.

334
00:10:45,390 --> 00:10:46,820
Ahora, recuerda que la

335
00:10:46,880 --> 00:10:48,360
segunda etapa del flujo del proyecto era

336
00:10:48,570 --> 00:10:50,620
la segmentación de caracteres, así que tomando

337
00:10:50,890 --> 00:10:52,530
una imagen como la que se muestra hasta arriba,

338
00:10:52,790 --> 00:10:55,660
¿Cómo podemos segmentar individualmente los caracteres en esta imagen?

339
00:10:56,580 --> 00:10:57,460
Así que lo que podemos hacer es utilizar

340
00:10:57,910 --> 00:10:59,590
nuevamente un algoritmo de aprendizaje supervisado

341
00:11:00,010 --> 00:11:01,020
con algún conjunto de ejemplos

342
00:11:01,100 --> 00:11:01,990
positivos y algún conjunto de ejemplos

343
00:11:02,100 --> 00:11:03,810
negativos, lo que haremos

344
00:11:03,880 --> 00:11:04,840
es ver en el pedazo

345
00:11:04,900 --> 00:11:06,160
de imagen e intentar

346
00:11:06,390 --> 00:11:08,110
decidir si hay una división

347
00:11:08,370 --> 00:11:09,690
entre dos caracteres

348
00:11:10,700 --> 00:11:12,070
justo en medio de esa coincidencia de imagen.

349
00:11:13,030 --> 00:11:14,100
Así que para ejemplos positivos iniciales

350
00:11:14,960 --> 00:11:17,040
este primer ejemplo positivo, este pedazo

351
00:11:17,290 --> 00:11:18,590
de imagen se ve como

352
00:11:18,650 --> 00:11:20,050
el centro, de hecho

353
00:11:21,320 --> 00:11:22,890
es el centro que se ha dividido en dos

354
00:11:23,110 --> 00:11:24,120
caracteres y el segundo ejemplo

355
00:11:24,680 --> 00:11:25,770
de nuevo se ve como un

356
00:11:25,950 --> 00:11:27,370
ejemplo positivo, porque si separo

357
00:11:27,840 --> 00:11:29,020
dos caracteres mediante una

358
00:11:29,160 --> 00:11:31,190
linea justo en el centro, eso es lo que se debe hacer.

359
00:11:31,350 --> 00:11:33,310
Así, estos son ejemplos positivos, en los que

360
00:11:33,510 --> 00:11:35,370
el centro de la imagen representa

361
00:11:35,970 --> 00:11:36,930
un espacio o una separación

362
00:11:37,960 --> 00:11:40,320
entre dos caracteres distintos, a diferencia

363
00:11:40,560 --> 00:11:41,870
de los ejemplos negativos, bueno,

364
00:11:42,010 --> 00:11:43,160
como sabes, no quieres separar

365
00:11:43,690 --> 00:11:44,810
dos caracteres justo en el

366
00:11:44,900 --> 00:11:46,610
centro dos veces de esa forma, y así

367
00:11:46,820 --> 00:11:48,160
estos son ejemplos negativos porque

368
00:11:48,460 --> 00:11:50,660
no representan el punto medio entre dos caracteres.

369
00:11:51,760 --> 00:11:52,490
Así que lo que vamos a hacer

370
00:11:52,650 --> 00:11:53,940
es que vamos a entrenar al clasificador,

371
00:11:54,500 --> 00:11:55,910
tal vez utilizando una nueva red, tal vez

372
00:11:56,180 --> 00:11:58,000
utilizando un algoritmo de aprendizaje distinto, para

373
00:11:58,120 --> 00:12:01,420
intentar clasificar los ejemplos positivos y negativos.

374
00:12:02,770 --> 00:12:03,980
Habiendo entrenado a dicho clasificador,

375
00:12:04,320 --> 00:12:06,030
entonces podemos ejecutarlo

376
00:12:06,690 --> 00:12:07,830
en este tipo de texto que nuestro

377
00:12:07,940 --> 00:12:09,410
sistema de detección de texto ha obtenido.

378
00:12:09,590 --> 00:12:10,970
Mientras comenzamos a ver el

379
00:12:11,130 --> 00:12:12,080
rectángulo, y nos preguntamos,

380
00:12:12,230 --> 00:12:13,280
«Caramba, ¿se ve como

381
00:12:13,510 --> 00:12:15,000
el centro de aquel

382
00:12:15,100 --> 00:12:16,600
rectángulo verde?, ¿se ve como

383
00:12:16,680 --> 00:12:18,470
el punto medio entre dos caracteres?»

384
00:12:18,980 --> 00:12:20,220
Y con suerte, el clasificador dirá

385
00:12:20,320 --> 00:12:21,760
que no, entonces deslizamos

386
00:12:22,170 --> 00:12:23,280
la ventana por encima, este

387
00:12:23,410 --> 00:12:24,850
es un clasificador de deslizamiento de ventana

388
00:12:25,200 --> 00:12:26,410
unidimensional, porque vamos a

389
00:12:26,500 --> 00:12:27,820
deslizar la ventana solamente en una

390
00:12:28,470 --> 00:12:29,560
linea recta de izquierda a derecha,

391
00:12:29,780 --> 00:12:32,070
no hay distintas filas aquí.

392
00:12:32,270 --> 00:12:34,420
Aquí solo hay una sola fila.

393
00:12:34,520 --> 00:12:36,160
Pero ahora, con el clasificador

394
00:12:36,240 --> 00:12:37,250
en esta posición, nos preguntamos,

395
00:12:37,490 --> 00:12:38,700
¿Debemos separar esos dos caracteres o debemos poner

396
00:12:39,570 --> 00:12:41,580
una división justo en medio de este rectángulo?

397
00:12:41,950 --> 00:12:43,040
Y con suerte, el clasificador dirá

398
00:12:43,190 --> 00:12:44,720
dará como salida y=0, siendo este caso

399
00:12:44,780 --> 00:12:46,460
decidiremos dibujar una

400
00:12:46,630 --> 00:12:49,690
linea ahí, para intentar dividir dos caracteres.

401
00:12:50,710 --> 00:12:51,620
Entonces deslizamos la ventana por encima

402
00:12:51,870 --> 00:12:53,440
de nuevo, proceso óptico, no

403
00:12:53,650 --> 00:12:55,020
cerramos el espacio, deslizamos por encima de nuevo,

404
00:12:55,300 --> 00:12:56,580
el óptico dice que si,

405
00:12:57,230 --> 00:12:58,830
lo separamos ahí y continuamos

406
00:12:59,200 --> 00:13:00,410
lentamente deslizando el

407
00:13:00,560 --> 00:13:01,770
clasificador por encima

408
00:13:01,920 --> 00:13:03,310
a la derecha y con suerte

409
00:13:03,380 --> 00:13:05,160
clasificará este como otro ejemplo positivo y

410
00:13:05,770 --> 00:13:07,470
así sucesivamente.

411
00:13:08,010 --> 00:13:09,180
Y deslizaremos esta ventana

412
00:13:09,820 --> 00:13:10,990
sobre la derecha, ejecutando

413
00:13:11,160 --> 00:13:12,670
el clasificador a cada paso, y

414
00:13:12,800 --> 00:13:13,800
con suerte nos dirá,

415
00:13:14,210 --> 00:13:15,070
como ya sabes, cuales son las ubicaciones

416
00:13:16,190 --> 00:13:17,820
correctas para separar estos caracteres,

417
00:13:18,290 --> 00:13:20,410
solo separa esta imagen en caracteres individuales.

418
00:13:21,090 --> 00:13:22,450
Y así es el deslizamiento 1D de ventanas

419
00:13:22,810 --> 00:13:24,190
para segmentación de caracteres.

420
00:13:25,520 --> 00:13:28,430
Así que, aquí esta de nuevo completo el flujo de proyecto para el «foto OCR».

421
00:13:29,120 --> 00:13:30,280
En este video hablamos acerca del

422
00:13:30,780 --> 00:13:32,170
paso de detección de texto, donde

423
00:13:32,360 --> 00:13:34,570
utilizamos ventanas deslizantes para detectar texto.

424
00:13:35,200 --> 00:13:36,390
También utilizamos ventanas deslizantes

425
00:13:37,070 --> 00:13:38,420
unidimensionales para realizar segmentación

426
00:13:38,790 --> 00:13:40,160
de caracteres para separarlos,

427
00:13:40,730 --> 00:13:42,860
como sabes, esta imagen de texto en división de caracteres.

428
00:13:43,900 --> 00:13:44,770
El paso final a través del

429
00:13:44,810 --> 00:13:46,040
flujo de proyecto es el paso de clasificación

430
00:13:46,720 --> 00:13:48,150
de caracteres y con ese paso ya deberías

431
00:13:48,370 --> 00:13:49,750
estar mucho mas familiarizado

432
00:13:50,020 --> 00:13:51,490
con los videos anteriores

433
00:13:52,080 --> 00:13:54,470
en el aprendizaje supervisado

434
00:13:55,170 --> 00:13:56,440
donde puedes aplicar un aprendizaje

435
00:13:56,940 --> 00:13:58,150
supervisado estándar dentro de, tal vez,

436
00:13:58,360 --> 00:13:59,250
tu red o tal vez algo mas

437
00:13:59,570 --> 00:14:00,650
con el fin de

438
00:14:00,860 --> 00:14:02,100
tomar las entradas, una imagen

439
00:14:02,980 --> 00:14:05,030
como esa y clasificarla como alfabeto

440
00:14:05,480 --> 00:14:07,120
de 26 caracteres, de la A a

441
00:14:07,230 --> 00:14:08,320
la Z, o tal vez deberíamos

442
00:14:08,570 --> 00:14:09,670
tener 36 caracteres si ocupas los

443
00:14:09,780 --> 00:14:11,140
dígitos numéricos también,

444
00:14:11,270 --> 00:14:12,650
el problema de la clasificación

445
00:14:13,080 --> 00:14:14,410
múltiple donde tomas

446
00:14:14,510 --> 00:14:15,690
las entradas y la imagen que contiene

447
00:14:16,050 --> 00:14:17,390
caracteres y decides

448
00:14:18,140 --> 00:14:20,450
¿cual es el caracter que aparece en esa imagen?

449
00:14:21,080 --> 00:14:22,460
Así que, ese fue el flujo de proyecto para el

450
00:14:23,730 --> 00:14:24,750
«foto OCR» y como puedes utilizar

451
00:14:24,910 --> 00:14:26,140
ideas como el clasificador

452
00:14:26,520 --> 00:14:27,960
de ventanas deslizantes con el fin de

453
00:14:28,100 --> 00:14:29,790
unir estos diferentes componentes para

454
00:14:30,060 --> 00:14:31,570
desarrollar un sistema de «foto OCR».

455
00:14:32,430 --> 00:14:33,570
En los próximos videos seguiremos

456
00:14:33,680 --> 00:14:34,930
utilizando el problema de

457
00:14:35,150 --> 00:14:36,550
«foto OCR» para explorar de alguna forma situaciones

458
00:14:36,960 --> 00:14:39,070
interesantes alrededor de construir una aplicación similar.