在前面的视频中 我不止一次地说过 在你开发机器学习系统时 你最宝贵的资源 就是你的时间 作为一个开发者 你需要正确选择下一步的工作 或者也许你有一个开发团队 或者一个工程师小组 共同开发一个机器学习系统 同样 最宝贵的还是 开发系统所花费的时间 你需要尽量避免的 情况是你或者 你的同事 你的朋友 花费了大量时间 在某一个模块上 在几周甚至几个月的努力以后 才意识到所有这些付出的劳动 都对你最终系统的表现 并没有太大的帮助 在这段视频中 我将介绍一下关于上限分析(ceiling analysis)的内容 当你自己或你跟 你的团队在开发 机器学习系统的流水线时 这种方式通常能 提供一种很有价值的信号 或者说很有用的导向 告诉你流水线中的哪个部分最值得你花时间 为了介绍上限分析 我将继续使用之前用过的 照片OCR流水线的例子 在之前的课程中 我讲过这些方框 文字检测、字符分割 字符识别 这每一个方框都可能 需要一个小团队来完成 当然也可能 你一个人来构建整个系统 不管怎样 问题是 你应该怎样分配资源呢？ 哪一个方框最值得 你投入精力去做 投入时间去改善效果 为了解释上限分析的原理 为了解释上限分析的原理 我将继续使用照片OCR流水线的例子 在之前的视频中我讲过 这里的每个方框 都表示一个机器学习的组成部分 需要一个小工程师团队来完成 当然也可能 整个系统都由一个人来完成 但问题是 你应该如何分配有限的资源呢？ 也就是说 这些模块中 哪一个 或者哪两个、三个 是最值得你花更多的 精力去改善它的效果的？ 这便是上限分析要做的事 跟其他机器学习系统的 开发过程一样 为了决定 要开发这个系统应该 采取什么样的行动 一个有效的方法是 对学习系统使用一个 数值评价量度 所以假如我们用字符准确度作为这个量度 因此 给定一个 测试样本图像 那么这个数值就表示 我们对测试图像中的文字 识别正确的比例 或者你也可以选择 其他的某个数值评价度量值 随你选择 但不管选择什么评价量度值 我们只是假设 整个系统的估计准确率为72% 所以换句话说 我们有一些测试集图像 并且对测试集中的 每一幅图像 我们都对其分别运行 文字检测、字符分割 然后字符识别 然后我们发现 根据你选用的度量方法 整个测试集的准确率是72% 下面是上限分析的 主要思想 首先我们关注 这个机器学习流程中的 第一个模块 文字检测 而我们要做的 实际上是在 给测试集样本捣点儿乱 我们要对 每一个测试集样本 都给它提供一个 正确的文字检测结果 换句话说 我们要遍历每个测试集样本 然后人为地告诉算法 每一个测试样本中 什么地方出现了文字 因此换句话说 我们是要模拟 如果是100% 正确地检测出 图片中的文字信息 应该是什么样的 当然 要做到这个 是很容易的 现在不用你的学习算法 来检测图像中的文字了 你只需要找到对应的图像 然后人为地识别出 测试集图像中出现文字的区域 然后你要做的就是让这些 绝对正确的结果 这些绝对为真的标签 也就是告诉你 图像中哪些位置 有文字信息的标签 把它们传给下一个模块 也就是传给字符分割模块 我再说一遍 这里打钩的地方 我想做的是 遍历我的测试集 直接向它公布“标准答案” 为这个流程中的文字检测部分 直接提供正确的标签 这样好像我就会 有一个非常棒的文字检测系统 能很好地检测我的测试样本 然后我们要做的是 继续运行完接下来的几个模块 也就是字符分割和字符识别 然后使用跟之前一样的 评价量度指标 来测量整个系统的 总体准确度 这样用准确的文字检测结果 系统的表现应该会有提升 假如说 准确率 提高到89% 然后我们继续进行 接着执行流水线中的下一模块 字符分割 同前面一样 我还是去找出我的测试集 然后现在我不仅用 标准的文字检测结果 我还同时用标准的 字符分割结果 所以还是遍历测试样本 人工地给出正确的字符分割结果 然后看看这样做以后 效果怎样变化 假如我们这样做以后 整个系统准确率提高到90% 注意跟前面一样 这里说的准确率 是指整个系统的准确率 所以无论最后一个模块 字符识别模块给出的最终输出是什么 无论整个流水线的 最后输出结果是什么 我们都是测出的整个系统的准确率 最后我们还是执行最后一个模块 字符识别 同样也是人工给出这一模块的正确标签 这样做以后 我应该理所当然得到100%准确率 进行上限分析的 一个好处是 我们现在就知道了 如果对每一个模块进行改善 它们各自的上升空间是多大 所以 我们可以看到 如果我们拥有完美的文字检测模块 那么整个系统的表现将会从 准确率72%上升到89% 因此效果的增益是17% 这就意味着 如果你在现有系统的基础上 花费时间和精力改善文字检测模块的效果 那么系统的表现 可能会提高17% 看起来这还挺值得 而相对来讲 如果我们取得完美的字符分割模块 那么最终系统表现只提升了1% 这便提供了一个很重要的信息 这就告诉我们 不管我们投入多大精力在字符分割上 系统效果的潜在上升空间 也都是很小很小 所以你就不会让一个 比较大的工程师团队 花时间忙于字符分割模块 因为通过上限分析我们知道了 即使你把字符分割模块做得再好 再怎么完美 你的系统表现 最多也只能提升1% 所以这就估计出 通过改善各个模块的质量 你的系统表现 所能提升的上限值 或者说最大值 是多少 最后 如果我们取得完美的字符识别模块 那么整个系统的表现将提高10% 所以 同样 你也可以分析 10%的效果提升值得投入多少工作量 也许这也告诉你 如果把精力投入在 流水线的最后这个模块 那么系统的性能 还是能得到较大的提高 另一种认识这种分析方法的角度是 通过这样的分析 你就能总结出 改善每个模块的性能 系统的上升空间是多少 或者说如果其中的某个模块 变得绝对完美时 你能得到什么收获 这就像是给系统表现 加上了一个提升的上限值 所以 上限分析的概念是很重要的 下面我换一个复杂一点的例子再来演绎一下上限分析的原理 假如说你想对这张图像 进行人脸识别 也就是说看着这张照片 你希望识别出 照片里这个人 是不是你的朋友 希望辨识出图像中的人 这是一个偏人工智能的例子 当然这并不是现实中的 人脸识别技术 但我想通过这个例子 来向你展示一个流水线 并且给你另一个关于 上限分析的实例 假如我们有张照片 我们设计了如下的流水线 假如我们第一步要做的 是图像预处理 假如我们就用 右上角这张照片 现在我们想要 把背景去掉 那么经过预处理 背景就被去掉了 下一步我们希望检测出人脸的位置 这通常通过一个学习算法来实现 我们会运行一个滑动窗分类器 在人脸周围画一个框 在检测到脸部以后 如果你想要 识别出这个人 那么眼睛是一个很重要的线索 事实上 要辨认出你的朋友 你通常会看眼睛 这是个比较重要的线索 所以 我们需要运行另一个分类器来检测人的眼睛 分割出眼睛 这样就提供了 识别出一个人的 很重要的特征 然后继续识别脸上其他重要的部位 比如分割出鼻子 分割出嘴巴 这样找出了 眼睛、鼻子、嘴巴 所有这些都是非常有用的特征 然后这些特征可以被输入给某个 逻辑回归的分类器 然后这个分类器的任务 就是给出最终的标签 找出我们认为能 辨别出这个人是谁的 最终的标签 这是一个稍微复杂一些的流水线 如果你真的想识别出人的话 可能实际的流程比这个还要复杂 但这给出了很好的一个上限分析的例子 那么对这个流水线怎么进行上限分析呢？ 我们还是每次关注一个步骤 假如说你整个系统的准确率 达到了85% 那么我要做的第一件事情 还是找到我的测试集 然后对前景和背景 进行分割 然后使用Photoshop 或者别的什么软件 识别出哪些区域是背景 然后手动把背景删掉 然后观察准确率提高多少 假设在这个例子中 准确率提高了0.1% 这是个很明显的信号 它告诉你即便你 把背景分割做得很好 完全去除了背景图案 但整个系统的表现也并不会提高多少 所以似乎并不值得 花太多精力在预处理或者背景移除上 接下来 再遍历测试集 给出正确的脸部识别图案 接下来还是依次运行 眼睛、鼻子和嘴巴的分割 选择一种顺序就行了 给出眼睛的正确位置 鼻子的正确位置 嘴巴的正确位置 最后 再给出最终的正确标签 准确率提高到100% 在我每次通过这个系统的时候 在我每次通过这个系统的时候 随着使用有正确标签的测试集 的模块越来越多 整个系统的表现 逐步上升 这样你就能很清楚地看到 通过不同的步骤 系统的表现增加了多少 比如 有了完美的脸部识别 整个系统的表现似乎 提高了5.9% 这算是比较大的提高了 这告诉你也许在脸部检测上 多做点努力是有意义的 这里提高4% 这两步都是提高1% 这一步提高3% 所以从整体上看 最值得我付出努力的模块 按顺序排列一下 排在最前的是脸部检测 系统表现提高了 5.9% 给它完美的眼部分割 系统表现提高4% 最终是我的逻辑回归分类器 提高大约3% 因此 这很清楚地指出了 哪一个模块是最值得花精力去完善的 顺便一提 我还想讲一个真实的故事 我在预处理这里 放入背景移除这个部分的原因是 我知道一件真实的事情 原来有一个研究小组 大概有两个人 不夸张地说 花了一年半的时间 整整18个月 都在完善背景移除的效果 我不详细地讲 具体的细节和原因是什么 但确实是有两个工程师 为了开发某个 计算机视觉的应用系统 大概花了一年半的时间 就为了得到一个 更好的背景移除效果 事实上他们确实研究出了非常复杂的算法 貌似最后还发表了一篇文章 但最终他们发现 所有付出的这些劳动 都不能给他们研发系统 的整体表现带来 比较大的提升 而如果要是之前 他们组某个人做一下上限分析 他们就会提前意识到这个问题 后来 他们中有一个人 跟我说 如果他们之前 也做了某种这样的分析 他们就会在长达 18个月的辛苦劳动以前 意识到这个问题 他们就可以把精力花在 其他更重要的模块上 而不是把18个月花在背景移除上 总结一下 流水线是非常常用却又很复杂的机器学习应用 当你在开发某个 机器学习应用的时候 作为一个开发者 你的时间是相当宝贵的 所以真的不要花时间 去做一些到头来没意义的事情 因此在这节课中 我给大家介绍了上限分析的概念 我经常觉得上限分析 在判断应该改进哪个模块上 是个很有用的工具 当你真的把精力 花在那个模块上 并且改进了它 它真的会让整个系统的表现 有一个显著的提高 所以 经过这么多年 在机器学习中的摸爬滚打 我已经学会了不要凭自己的直觉 来判断应该改进哪个模块 虽然我从事 机器学习的工作 已经很多年了 但经常遇到某个机器学习问题时 总有一些直觉告诉我 我们应该跳到那一个模块 应该把时间花在那儿 但经过这么多年 我现在也开始慢慢意识到 还是不能太相信 自己的感觉 相反地 如果要解决某个机器学习问题 最好能把问题 分成多个模块 然后做一下上限分析 这通常是一个更可靠 更好的方法 来为你决定 该把劲儿往哪儿使 该提高哪个模块的效果 这样我们就会非常确信 把这个模块做好就能提高 整个系统的最终表现【教育无边界字幕组】翻译：所罗门捷列夫 校对：竹二个 审核：Naplessss