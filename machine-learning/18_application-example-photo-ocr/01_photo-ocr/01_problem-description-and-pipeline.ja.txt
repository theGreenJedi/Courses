このビデオと続く幾つかのビデオで 機械学習の応用例であるところの Photo OCRの話、および そのPhoto OCRにまつわる 歴史の話を していきたい。 それをやりたいと思う 3つの理由がある。 1つ目、複雑な機械学習の システムがどのように 組み合わせられるのかをお見せしたい。 二つ目、機械学習パイプラインの コンセプトをお伝えし、 次にやるべき事を決める時に、 どうリソースを配分するかを話したい。 これは一人で 大きなアプリケーションに 従事している場合でも、 または複雑なアプリケーションを デベロッパのチームで一緒に作ろうと いう文脈も あり得る。 そして最後に、Photo OCRの問題は 機械学習の より興味深い幾つかの アイデアについてお伝えする 口実にもなる。 一つには機械学習を コンピュータの画像に適用する やり方だ。そして二番目に、 人工的なデータ合成の アイデアだ。それは数ビデオ先で扱う事にする。 ではPhoto OCRの問題とは何なのかを話すところから始めよう。 Photo OCRはPhoto Optical Character Recognition の略だ。 デジタル写真の分野が成長するに連れて、 さらに最近では携帯にカメラが ついた事により、 我らはそこら中で撮った大量の 画像写真を所持している。 そして多くのデベロッパが 興味を持っている事の一つに、 これらの写真をコンピュータにもうちょっと良く理解させるには どうしたら良いか、というのがある。 Photo OCR問題は 撮った写真の中のテキストを コンピュータにどうやって読ませるか、という事にフォーカスする。 このような画像が与えられた時に、 もしコンピュータが この画像の中からテキストを 読む事が出来たら、素敵な事に違いない。 例えばもしこの写真を後で もう一度探したい時に LULA  B'sとかANTIQUE MALLとタイプしたら 自動的にこの写真を 取ってこれるように出来るだろう。 そうすれば大量の時間を費やして 何百とか何千とかのあなたの写真のコレクションから 頑張ってひっくり返して 探さなくて済むように出来るだろう。 Photo OCRの問題は まさにこれをやる問題だ。そしてそれは複数のステップで行う。 まず、与えられた写真に対し、 画像を見ていって、 写真の中のどこにテキストがあるかを検出する。 そしてそれを終えた後で、 あるいはそれが成功裡に終えられたら、 次にこれらの テキストの領域を見て、 その領域のテキストを実際に 読む。それが正しく 読めたら、画像の中に現れたテキストが 何なのか、という 転写が得られる。 スキャンしたドキュメントの OCR、つまりOptical Character Recognitionは より簡単な問題だが、 写真のOCRは こんにちでもまだ、 とても難しい機械学習の問題である。 もしこれが出来れば、 コンピュータに 自動で画像の内容を より良く理解させる助けに なるだけでなく、 例えば盲目の人を助ける、というような 応用例もある。 もし盲目の人にカメラを持たせて、 その前にある物が 何なのかを見る事が出来るようにすると、 その前にある道路の標識とかの 標識が何なのかを 教えてくれたり出来る。 またこんにちでは研究者は、例えばカーナビゲーションシステムなどについても 研究している。あなたの車が 道路の標識を読む事が出来て、 目的地までのナビゲーションを助けてくれる事を想像してみてくれ。 Photo OCRを実現する為には、こんな手段が可能だ。 まず最初に、画像を見ていって、 画像内のどこにテキストがあるかを探す。 ここに見せたのは、 Photo OCRのシステムが見つけた テキストと画像の一例だ。 次に、テキストの範囲のあたりの 矩形を元に、 次に文字分割を行う事が出来る。 例えばこの ANTIQUE MALL と書いてある テキストの箱を取って、 これを個々の文字の場所に 分割する事を試みる。 そして最後に、個々の文字に 分割された物を元に、 分類器を実行する、そこでは 画像の文字を見ていって そして書かれている文字の認識を 試みる： 最初の文字がAで、 二番目の文字がN、 三番目の文字がT、 という具合に。 そうして、これらを全て終えたら、 その時はこのフレーズが LULA B's ANTIQUE MALLだと 判明する事が期待出来る。 そして画像に現れる 他の単語も同様である。 いくつかのPhoto OCRのシステムは これよりさらに複雑な事もやる、という事は言っておくべきだろう。 例えば最後にちょっとしたスペル修正を行ったりとか。 例えば、文字分割と 文字分類システムが、 c 1 e a n i n gという単語を 見た、と 言ってきたら、 その時は、お分かりの通り ある種のスペリング修正システムが それは多分 cleaningだ、と 言う事だろう。 つまり文字分類アルゴリズムが単に lを1と判断ミスしたという事だろう。 だが、このビデオでやりたい 目的の為に、 この最後のステップを 無視して、これら三つの事をする システム、つまり テキスト検出、文字分割、 そして文字分類に集中しよう。 このようなシステムを 機械学習パイプラインと呼んでいる。 特に、ここでお見せしているのは、 フォトOCRパイプラインだ。 画像があって、それを テキスト検出システムに食わせて、 テキストの領域から、次に 文字を分割する-- テキスト内の各文字に -- そして最後に個々の文字を認識する。 多くの複雑な機械学習のシステムでは この種のパイプラインは 一般的で、そこでは 複数のモジュールがありうる-- この例では、 テキスト検出、文字分割、 文字認識モジュール -- それらはおのおの、機械学習のコンポーネントかもしれないし、 時には機械学習のコンポーネントでは 無い物もあるかもしれない。 何にせよ、あるデータ片に対して 次々と機能する一連のモジュールを 用いる事で、望みの出力を 生成する。 Photo OCRの例では、 画像の中に現れた テキストを探す事だ。 もしあなたが機械学習のシステムを デザインする事になったら、 もっとも重要な決定の一つは、 しばしば組み合わせるパイプラインは何であるか？という事だ。 言い換えると、Photo OCRの問題が 与えられた時に、この問題を どう別々のモジュールへと 分割するか、という事。 そしてパイプラインを設計する。 するとパイプライン内の各モジュールのパフォーマンスは しばしば最終的なアルゴリズムのパフォーマンスに とても大きな影響を与える。 このような問題に 取り組んでいるエンジニアチームが ある場合、それぞれのモジュールに対する 作業を別々の人がするのもまた、 とても一般的な事だ。 こんな風に簡単に想像出来る： 文字列検出を 1〜5人のエンジニアが 文字分割を 別の一人から5人程度のエンジニアが、 文字認識をまた別の 1〜5人のエンジニアが受け持つ、というような事を。 だからこのようなパイプラインを持つ事は、 エンジニアのチームのそれぞれのメンバーに仕事を分割する 自然な区分を提供する。 もちろん、これらの仕事全てを 一人で全部やったって構わないが、 それがお望みならね。 複雑な機械学習のシステムでは、 パイプラインのアイデアは、 機械のパイプラインというアイデアは、極めて広く行き渡っている。 そして今見て来たのは、 Photo OCRパイプラインがどう機能するかという 具体的な例だ。 次の一連のビデオで、 このパイプラインについて もうちょっと議論をしていく。 そこでもこの例を用いて、 機械学習のーー私が思うに重要なーー キーコンセプトの幾つかを例示していく。