以前のビデオで、 私は以下の事を繰り返し言ってきた: 機械学習システムを開発する時に もっとも貴重なリソースの一つは デベロッパとしてのあなたの時間だ、とーー 次に作業すべき事を 選ぶ時には。 あるいは、あなたはデベロッパのチームなり エンジニアのチーム一丸となって 機械学習のシステムを開発する時もまた、 もっとも貴重なリソースの一つはそのシステムを開発している エンジニアとかデベロッパの時間だ。 そして本当に避けたい事として、 あなたなり、あなたの同僚なり あなたの友人なりが、 あるコンポーネントに対して たくさんの作業をした後で 何週間とか何ヶ月とか時間を費やした後ではじめて それらの作業全てが 最終的なシステムのパフォーマンスには 大した違いを生まない、と気づく、という事だ。 このビデオでは、 シーリング(天井)分析と呼ばれる物について議論したい。 あなた、あるいはあなたのチームが 機械学習パイプラインのシステムの 仕事をしている時には、 この手法はパイプラインの どの部分を改善するのが もっとも良いのかについての 強力なシグナル、あるいはガイダンスを提供してくれる事がある。 シーリング分析の議論を行う為に ここでもPhoto OCRの例を 引き続き採用 していく。前にも言った通り これらの箱、 テキスト検出、 文字分割、そして文字認識、、、 これらの各箱は それぞれ小規模かチームが担当する場合もあるし、 システム全体を あなた一人だけで構築することもあるだろう。 どちらにせよ、 問題は、どこにリソースを割くべきか、という事だ。 これらの箱のうちどれが パフォーマンスを改善しよう、と労力を払うのに もっとも価値がある物だろうか？ シーリング分析のアイデアを 説明する為に、 このPhoto OCRパイプラインの例を使い続けていく。 以前述べたように、 これらの各箱は、 これらの各機械学習のコンポーネントは エンジニアの小さなチームでそれぞれ 従事しても良いし、またはシステム全体を 一人の人間が見ても良い。 だが何にせよ問題は、いったいどこに 貴重なリソースを割り振るべきだろうか？という事だ。 この場合だと、これらのコンポーネントの 一つ目か、二つ目か、または三つ目に 時間を使うのが パフォーマンスを改善するのに もっとも有益か？ シーリング分析とはこんな物だ。 これ以外の機械学習の問題と同様、 機械学習の開発の過程において、 システムを開発する時の 様々な決断を 行う為には、 学習システムに関する 単一で実数の評価指標があると とても役に立つ。 例えば文字レベルでの正確さを選んだとしよう。 つまり、、、 あるテストセットの画像が与えられた時に、 テストセットの画像内にある文字を どれだけの割合で 正しく認識出来たのか、の割合。 別にこれ以外の単一の実数の 評価指標を選んでも良い。お望みならね。 だがどんな評価指標を 使うにせよ、 とにかくシステム全体として、 現在の所72%の正確さ(accuracy)だった、と分かったとしよう。 言い換えると、 我らはあるテストセットの画像を 持っていて、それらテストセットの各画像に テキスト検出、 文字分割、 文字認識を、順番に走らせて そして我らのテストセットに対しては システム全体に対して、 あなたの選んだ指標に関して 72%の正確さだと分かった、とする。 さて、以下にシーリング分析のアイデアの 背景を述べる。それは、 我らは最初のモジュールを見て この機械学習パイプラインの最初のモジュールは テキスト検出だ。 そして我らがやる事は、 テストセットに 細工をする事だ。 テストセットに直接おもむき、 各テスト手本に対し 正解のテキスト検出の出力を 直接提供する。 言い換えると、テストセットにおもむき、 単に手動でアルゴリズムに 各テスト手本のどこに テキストがあるかを 伝える。 さらに言い換えると、 我らがもし100%正確な テキスト検出のシステムがあったら 何が起こるのかをシミュレートする訳だ。 画像のテキスト検出の 目的の為に。 そしてそれを実際に行う方法は とてもシンプルだ。 学習アルゴリズムに画像のテキストを 検出さえる代わりに、 あなたが直接画像に赴き 人力でテストセットの画像のどこに テキストがあるかをラベル付けする。 そしてこれらを正解にした上で、 つまりテストセットの 画像の中の どこにテキストがあるかの 完璧に正しいラベルを付けた上で、 これらの完璧に正しいラベルを用いて 次のステージのパイプラインに 食わせる、つまり文字分割のパイプラインに。 もう一度言おう。 このチェックマークは 私がテストセットに実際におもむき、 単純に正解の答えを 与える、正しいラベルを与える、 という事を意味している。 パイプラインのテキスト検出の部分を。 そうする事で、まるで テストセットに対して完璧なテキスト検出を 持っているフリをする為に。 そして次にやることは このデータを残りのパイプライン、つまり 文字分割と文字認識に流す。 そして次に、以前と同様の 評価指標を用いて、 システム全体の正確さを 計測する。 そして完璧なテキスト検出を用いるのだから、たぶんパフォーマンスは向上する事が期待される。 ここでは89%に 向上したとしよう。 そして次に、そのまま続けて、 次のパイプラインのセクションに進み、 文字分割に対して、またテストセットの画像におもむき、 いまや正確なテキスト検出の出力が 与えられている所に 今度は正確な文字分割の出力を 与える。つまり 手動で正確な文字の分割のラベル付けを行い 個々の文字に分割する。 そしてそれがどれだけ改善するかを見てみるのだ。 そして例えば、全体のシステムが90%の正確さに 改善したとしよう。 つまり正確さといったらいつでも システム全体の正確さだ。 つまり文字認識システムの 最終的なアウトプットが何かだ。 つまりパイプライン全体の アウトプットが何かだ。 それが正確さの指標となる。 そして最後に、文字認識システムにも 正しいラベルを与える。 もしそれをやったら、当たり前だが、100%の正確さを得られる。 今、この分析を行う 良い点としては、 我らはこれらの各コンポーネントを改善する時の ポテンシャルの上限が理解出来る、という事だ。 つまりもし、我らが完璧なテキスト検出を得たら、 我らのパフォーマンスは72%から89%へと 上昇する事が分かる。 つまり17%のパフォーマンス向上が得られる。 つまり、あなたが現在のシステムに対して テキスト検出の改善に たくさんの時間を費やしたら、 その場合は我らのシステムのパフォーマンスを 17%向上出来る可能性がある、という事を意味している。 これはやる価値がありそうに見える。 一方、対照的に、 テキスト検出から離れて、 完璧な文字分割を与えても、パフォーマンスはたったの1%しか向上しない。 これはより信頼出来るメッセージだ。 これの意味する所は、 どれだけ文字分割に時間を費やそうとも、 潜在的な上限は、 とても小さい、という事だ。 だからきっと、あなたは 大きなエンジニアのチームを この文字分割の仕事に従事させたい、とは思わないだろう。 この種の分析は、 仮に完璧な文字分割を 与えられたとしても、 パフォーマンスは1%しか向上しない、という事を示してくれる。 つまり、これは本当に推計だ。 何が天井（シーリング）なのか、 何が上限なのか。これらのうちの一つのコンポーネントに対し 作業を行った時に、 どれだけシステムのパフォーマンスを改善出来るか？ そして最後に、文字まで行って、 より良い文字認識を得たら、 パフォーマンスはさらに10%上がる。 つまり、ここでも 10%の改善に、 どれだけ時間を使うか、を決める事が出来る。 これはパイプラインの 終着駅に、 もっと労力を集中すべき、と言っているかもしれない。 システム全体のパフォーマンスも 改善出来る。 これについての別の考え方としては、 この種の分析を 行っていく事で、 これらの各コンポーネントを 改善した時の 上限のポテンシャルを調べている、と考えても良い。 あるいは、これらのコンポーネントが一つ 究極的に完璧になったら、どれだけの物が得られるか、を調べていると考えても良い。 これでシステムのパフォーマンスの上限が 設定出来る。 シーリング分析のアイデアはとても重要だ。 このアイデアを再び、もっと複雑な別の例で例示しよう。 あなたは画像の顔認識を したいとしよう。 つまり写真を見て、 この写真の人が あなたの特定の友人かどうかを 認識したい。 この画像にいる人物を認識したいとする。 これはちょっと人工的な例で、 実際の現場で顔認識がどう行われているか、 というのを正確に反映した物では無い。 だがシーリング分析のプロセスがどんな感じになるか、という 例をもう一つ挙げる為に このパイプラインがどうなっているのかを 見ていきたい。 さて、我らはカメラの 画像を持っていて、以下のようなパイプラインをデザインするとしよう。 最初にやるのは 画像の前処理としよう。 この右上に見せたような 画像を取ってきて、 そして背景を除去したい、と してみよう。 つまり前処理を通す事で背景が消える。 次に人の顔を認識したい、とする。 これは通常学習アルゴリズムを用いて行われる。 つまり我らはスライディングウィンドウの分類器を 実行していって、人の顔の回りに箱を描く。 一旦顔を認識出来たら 人を識別する為には、 目というのはとても有力な 手がかりだと分かってる。 我らは実際の所、 友人を認識する時に、 目がどんな見た目かというのは、 実際にもっとも重視している手がかりだ。 だから人間の目を検出する為の別の分類器を走らせよう。 目の部分を切りだして、 というのは人物を 認識するのに これは有用なフィーチャー（特徴）だからだが、 そして次に、顔の他の部分で使えそうな所、 例えば鼻を切り出す。 そして口を切り出す。 そして次に、目、鼻、口を 見つけた後に、 これら全てが恐らく、 ロジスティック回帰などの分類器に食わせるのに 有用なフィーチャーとなる。 そしてこの分類器の仕事は、 我らに全体として、 この人物が 誰だと思っているかの ラベルを与える。 これは複雑なパイプラインだ。 これは実際に使うべきパイプラインよりも もっと複雑な物だろう。もし実際に人を認識したいなら。 だがシーリング分析を考えてみる上では示唆に富む例だ。 ではどうやってこのパイプラインのシーリング分析を行えば良いだろう？ これらのピースを一度に一つづつ見ていこう。 あなたのシステムが全体として 85％の正確さを持つとしよう。 最初にやる事は、 テストセットにおもむき、そして手動で 前景と背景の分割を行う、という事。 つまりテストセットにおもむき Photoshopなりなんなりを用いて どれが背景かを 伝えて、そして手動で 背景を除去する。 つまり完全に正しい背景で、どれだけ正確さが向上するかを見る。 この例では、正確さは 0.1%向上した。 つまりこれは、強烈なサインとなる。 たとえ完璧な背景分離が、 本当に完璧な 背景除去であったとしても、 あなたのシステムのパフォーマンスは大して向上しない。 これはつまり、前処理の背景除去には これ以上莫大な労力を投入する価値は無い、という事だろう。 次に、またテストセットにおもむき、 正確な顔検出の 領域を与えて、また次に 目、鼻、口の分割と順番に見ていく。 順番を一つ選ぶ。 目の正確な位置を与えて、 鼻の正確な位置を与えて、 口の正確な位置を与えて、 そして最後に全体として 正解のラベルを与えると、100%正確となる。 つまり、 システムを順番に見ていって どんどん各コンポーネントに テストセットの正解のラベルを 与えていくと、パフォーマンス、、、 つまりシステム全体のパフォーマンスは向上する。 そして各別々のステップで どれだけパフォーマンスが向上するかを 見ていく事が出来る。 完璧な顔検出が提供されると、 システム全体のパフォーマンスは 5.9%向上する。 これはかなり大きなジャンプだ。 つまり、顔検出を改善するのに、 かなりの労力を費やす価値がありそうだ。 ここでは4%、 ここでは1%、 ここでは1%、ここでは3%。 つまり、どうやら 最も我らが頑張るに値する コンポーネントは、 完璧な顔検出を提供出来たら システムは5.9%向上し、 完璧な目の分割を行えたら 4%向上する。 そして最後のロジスティック分類器は、 またさらに3%のギャップがある。 つまりこうして、我らが取り組む価値が もっともありそうなコンポーネントを教えてくれる。 ところで、 これは本当にあった話なのだが、 このプリプロセスの背景除去を ここに含めた理由は、 現実にこんな話があったのを 知っているからだ。それは、 あるリサーチチームが実際に 文字通り二人を1.5年間 つまり18ヶ月 費やして、背景除去を 改善する仕事をさせた。 実際の詳細は、、、 詳細は曖昧にさせてくれ。分かるだろ？ だがとにかく、コンピュータビジョンの アプリケーションがあってさ。 二人のエンジニアのチームが 文字通り1.5年間、 背景除去の仕事に 従事したのだ。 実際に彼らはとても複雑なアルゴリズムを用いて 最終的には1本の研究論文まで出した。 だがそれらの仕事を終えた後になって 彼らは気づいたのだ。 彼らの実際のアプリケーションに関しては、 その違いは全体のパフォーマンスについては 大した違いを生まない、という事を。 そしてお分かりの通り、 もし誰かが、もし仮にシーリング分析を前もって行っていたら、 この事が分かったと思われる。 そして彼らの一人が後になって こう言った。 もしこの種の分析をやっていたら、 たぶん彼らは 18ヶ月の仕事をする前に、 彼らが文字通り18ヶ月の仕事を 背景除去に従事する前に 彼らの労力を別のコンポーネントに 注ぐべきだと気づけたんじゃないかな。 まとめよう。パイプラインは 複雑な機械学習のアプリケーションにおいては広く使われている物だ。 そして大きな機械学習のアプリケーションに 従事している時は、 あなたのデベロッパーとしての時間はあまりにも貴重だ。 だからあなたは、あまり重要では無い事に 多くの時間を費やしてはならない。 そしてこのビデオで、我らは シーリング分析のアイデアを議論してきた。 この手法は作業すべきコンポーネントを 見つけ出すのに、 とても便利なツールだと、しばしば思う物だ。 そしてあなたがそのコンポーネントに 労力を集中して、大きく改善出来たら、 最終的なシステム全体にも 巨大な影響を 与えるだろう。 何年も機械学習の 仕事をしてきて、私は本当に どのコンポーネントに取り組むべきかの 自分自身の直感を、あまり信じてはいけない、という事を学んできた。 つまり、ほんとうに良く、長い期間 機械学習の仕事をしていると、 機械学習の問題を 見た時に、 直感がこう言う事がある： このコンポーネントにもっと時間を注ぎ込んだらいいんじゃないか、と。 だが何年もかかって、 自分自身の直感すら 信じてはいけない、むしろ自分の直感を それほどは信じない、という事を学習した。 そのかわりに、何らかの機械学習の問題に 取り組む時には、 なるべくもっと系統だった、 事をする。シーリング分析などは しばしば、どこに労力を集中すべきかを決める もっと良い、そしてもっと信頼出来る 方法だ。それによって どこのコンポーネントのパフォーマンスを 実際に改善すべきかが分かる。 そして実際にそれを行えば、 全体的なシステムの最終的なパフォーマンスが 実際に大きく改善する事を確認出来るだろう。