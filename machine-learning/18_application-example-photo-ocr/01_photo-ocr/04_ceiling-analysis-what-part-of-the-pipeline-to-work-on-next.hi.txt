पहले के विडीओज़ में मैंने बार बार कहा है कि जब आप एक मशीन लर्निंग सिस्टम डिवेल्प कर रहे हो, सबसे अधिक बहुमूल्य साधन / रीसॉर्स है आपका समय बतौर डिवेलपर, कि किस पर काम करना है नेक्स्ट. या, अगर आपके पास एक टीम है डिवेलपर्ज़ की या एक टीम एंज़िनियर्स की, जो साथ काम कर रहे हैं एक मशीन लर्निंग सिस्टम पर. एक बार फिर, सबसे अधिक बहुमूल्य साधन / रीसॉर्स है समय एंज़िनियर्स का या या डिवेलपर्ज़ का जो सिस्टम पर काम कर रहे हैं. और आप वास्तव में जो टालना चाहेंगे वह है कि आप या आपके सहकर्मी आपके मित्र व्यतीत करते हैं काफ़ी समय काम करते हुए किसी कम्पोनेंट पर. हफ़्तों या महीनों के काम के बाद यह समझ आता है, कि वह सब कुछ जो काम हुआ उससे कुछ ज़्यादा अंतर नहीं आया है पर्फ़ॉर्मन्स में फ़ाइनल सिस्टम की. इस विडीओ में जो मैं करना चाहूँगा उसे कहते हैं सीलिंग अनालिसिस. जब आप या आपकी टीम काम रहे होते हैं पाइपलाइन पर आपके सिस्टम के, यह आपको कभी कभी दे सकता है एक महत्वपूर्ण इशारा, एक महत्वपूर्ण मार्ग दर्शन कि कौन से हिस्से आपके पाइप्लायन में शायद होंगे आपके समय के सही इस्तेमाल के लिए. सीलिंग अनालिसिस की बात करने के लिए, मैं प्रयोग करता रहूँगा उदाहरण फ़ोटो ओसीआर पाइप्लायन का. और देखिए यहाँ प्रत्येक बॉक्स, टेक्स्ट डिटेक्शन, कैरिक्टर सेग्मेंटेशन, कैरिक्टर रेकग्निशन, इनमें से प्रत्येक बॉक्स पर काम कर सकती है एक छोटी एंजिनियीरिंग टीम. या शायद पूरा सिस्टम ही आप ख़ुद बनाएँ, कैसे भी. लेकिन प्रश्न यह है कहाँ लगाने चाहिए अपने रीसॉर्सेज़ / साधन? कौन से बॉक्स में श्रम लगाने से सबसे अधिक लाभ होगा बेहतर करने में पर्फ़ॉर्मन्स को. समझाने के लिए सीलिंग अनालिसिस का सिद्धांत, मैं प्रयोग करता रहूँगा उदाहरण अपने फ़ोटो ओसीआर पाइप्लायन का. जैसा मैंने पहले कहा, इनमें से प्रत्येक बॉक्स यहाँ, इनमें से प्रत्येक मशीन लर्निंग कम्पोनेंट पर काम कर सकती है एक छोटी एंज़िनियीरस की टीम, या पूरा सिस्टम बनाया जा सकता है केवल एक व्यक्ति द्वारा. लेकिन प्रश्न यह है कहाँ लगाने चाहिए अपने कम मात्रा में उपलब्ध संसाधन? मतलब, इन कम्पोनेंट्स में से कौन से, कौन से एक या दो या शायद इन तीनों कम्पोनेंट्स पर ही आपका समय लगाना लाभदायक होगा बेहतर करने के लिए पर्फ़ॉर्मन्स. तो यहाँ है सिद्धांत सीलिंग अनालिसिस का. जैसे डिवेलप करने की प्रक्रिया में दूसरे मशीन लर्निंग सिस्टम्स को भी, निर्णय लेने के लिए कि क्या करना है डिवेलप करने के लिए सिस्टम को यहाँ भी होगा काफ़ी सहायक एक अकेला रोल्ड नम्बर इवैल्यूएशन का होना इस लर्निंग सिस्टम के लिए. अत: मान लीजिए हम लेते हैं कैरिक्टर लेवल एकुरेसी. अत: यदि आपके पास है एक टेस्ट सेट इमिज, क्या है फ़्रैक्शन ऐल्फ़बेट्स का या कैरिक्टर्स का एक टेस्ट इमिज में जो हम रेकग्नायज़ करते हैं सही? या आप ले सकते हैं कोई और सिंगल रोल्ड नम्बर इवैल्यूएशन जो आप ले सकते थे, यदि आप चाहें. लेकिन मान लीजिए कोई भी इवैल्यूएशन मेट्रिक के लिए, जो हम लेते हैं, हमें मिलती है पूरे सिस्टम की एकुरेसी फ़िलहाल है 72%. अत: दूसरे शब्दों में, हमारे पास हैं कुछ सेट टेस्ट इमिजेज़ का. और प्रत्येक टेस्ट सेट इमिज को, हम रन करते हैं टेक्स्ट डिटेक्शन से, फ़िट कैरिक्टर सेग्मेंटेशन, फिर कैरिक्टर रेकग्निशन से. और हमें मिलता है कि टेस्ट सेट पर हमारी ओवरॉल एकुरेसी पूरे सिस्टम की थी 72% जो भी मेट्रिक आप लें. अब यह है सिद्धांत सीलिंग अनालिसिस का, जो हम करेंगे मान लीजिए पहले मोड्यूल में हमारे मशीन लर्निंग पाइप्लायन, जो है टेक्स्ट डिटेक्शन. और जो हम करेंगे वह है कि टेस्ट सेट में हेरा-फेरी करेंगे. हम जाएँगे टेस्ट सेट पर. प्रत्येक टेस्ट इग्ज़ैम्पल के लिए, जो देगा सही टेक्स्ट डिटेक्शन आउट्पुट, अत: दूसरे शब्दों में, हम जाएँगे टेस्ट सेट पर और सिर्फ़ बताएँगे अल्गोरिद्म को कि कहाँ है टेक्स्ट प्रत्येक टेस्ट इग्ज़ैम्पल में. अत: दूसरे शब्दों में हम सिंमयूलेट / दिखावा करेंगे कि क्या होता है यदि आपके पास है एक टेक्स्ट डिटेक्शन सिस्टम जिसकी सौ प्रतिशत एकुरेसी है, टेक्स्ट डिटेक्ट करने के लिए एक इमिज में. और वास्तव में जैसे आप यह करते हैं वह काफ़ी सरल है, सही है? इसके बजाय कि आपका लर्निंग अल्गोरिद्म डिटेक्ट करे टेक्स्ट इमिज में. आप नहीं कहेंगे कि इमिज पर जाओ और सिर्फ़ हाथ से लेबल करो कि क्या लोकेशन है टेक्स्ट की मेरी टेस्ट इमिज में. और तब आप देंगे इन सही या देंगे इन वास्तविक लेबल्ज़ कि टेक्स्ट कहाँ है आपके टेस्ट सेट को. और सिर्फ़ प्रयोग करेंगे इन वास्तविक लेबल्ज़ को जो आप फ़ीड करेंगे पाइप्लायन की अगली स्टेज को, जो कैरिक्टर सेग्मेंटेशन है पाइप्लायन में. सही है? अत: एक बार फिर उसे कहते हैं. एक चेक मार्क यहाँ डालने से, मेरा मतलब है कि मैं जाऊँगा हमारे टेस्ट सेट पर और उसे दूँगा सही उत्तर. उसे देंगे सही लेबल्ज़ पाइपलाइन के टेक्स्ट डिटेक्शन पार्ट के लिए. ताकि यह ऐसा होगा जैसे कि हमारे पास है एक सही / पर्फ़ेक्ट  टेक्स्ट डिटेक्शन सिस्टम मेरे टेस्ट सेट पर. उसके बाद क्या करे हम कि रन करेंगे इस डेटा को बाक़ी के पाइप्लायन में से. कैरिक्टर सेग्मेंटेशन और  कैरिक्टर रेकग्निशन में से. और तब प्रयोग करके वही इवैल्यूएशन मेट्रिक जो पहले ली थी, मापने के लिए कुल / ओवरॉल एकुरेसी पूरे सिस्टम की. और सही टेक्स्ट डिटेक्शन से, हो सकता है पर्फ़ॉर्मन्स बेहतर हो जाए. और इस उदाहरण में यह बढ़ जाती है 89% तक. और तब हम चलते रहेंगे, जातें हैं पाइप्लायन की अगली स्टेज पर, अत: कैरिक्टर सेग्मेंटेशन. और एक बार फिर, मैं जाऊँगा हमारे टेस्ट सेट पर और उसे दूँगा सही टेक्स्ट डिटेक्शन आउट्पुट और दूँगा सही कैरिक्टर सेग्मेंटेशन आउट्पुट. अत: टेस्ट सेट जाएँ और हाथ से लेबल करें सही सेग्मेंटेशन टेक्स्ट का अलग अलग कैरिक्टर्स में और देखिए उससे कितना फ़ायदा होता है. और मान लीजिए यह बढ़ती है 90% एकुरेसी तक पूरे सिस्टम की. ठीक? तो हमेशा की तरह एकुरेसी पूरे सिस्टम की. अत: जो भी अंतिम आउट्पुट हो कैरिक्टर सेग्मेंटेशन सिस्टम की. जो भी अंतिम आउट्पुट हो पूरे पाइप्लायन की, यह मापेगा उसकी एकुरेसी. और अंत में, मैं बनाऊँगा एक कैरिक्टर रेकग्निशन सिस्टम और दूँगा उसे भी सही लेबल्ज़, और यदि मैं यह भी करता हूँ तो कोई आश्चर्य नहीं होगा कि मुझे मिले 100% एकुरेसी. अब अच्छी बात यह अनालिसिस करने की है कि, हम अब समझते है क्या है अच्छा पहलू बेहतर करने का प्रत्येक कम्पोनेंट को. तो हम देखते हैं कि यदि हमें मिलता है सही टेक्स्ट डिटेक्शन सिस्टम, हमारी पर्फ़ॉर्मन्स बढ़ गयी 72 से 89%. तो वह है 17% बढ़त पर्फ़ॉर्मन्स की. तो इसका मतलब है कि यदि हम लें अपना मौजूदा सिस्टम और व्यतीत करें काफ़ी समय बेहतर करने के लिए टेक्स्ट डिटेक्शन, उसका मतलब होगा कि हम सम्भवत: अपने सिस्टम की पर्फ़ॉर्मन्स बढ़ा सकते हैं 17% से. ऐसा लगता है कि यह हमारी चेष्टा के योग्य है. जबकि इसके विपरीत, टेक्स्ट डिटेक्शन से आगे जाते हुए, जब हमने दिया इसे एक सही कैरिक्टर सेग्मेंटेशन, पर्फ़ॉर्मन्स बढ़ी केवल 1% से, तो वह एक संयत कर देने वाला संदेश है. इसका मतलब है कि हम कितना भी समय लगाएँ कैरिक्टर सेग्मेंटेशन पर, लेकिन उसकी सम्भावना ऊपर जाने की काफ़ी कम है और शायद आप नहीं चाहेंगे रखना एक बड़ी टीम एंज़िनियर्स की, जो काम करे कैरिक्टर सेग्मेंटेशन पर. इस प्रकार का अनालिसिस यह दर्शाता है कि यद्यपि आप इसे देते हैं सही कैरिक्टर सेग्मेंटेशन, आपकी पर्फ़ॉर्मन्स बढ़ती है केवल एक प्रतिशत. उससे  वास्तव में अनुमान लगता है कि सीलिंग क्या है, क्या है उच्चतम सीमा कितना आप बड़ा सकते हैं पर्फ़ॉर्मन्स आपके सिस्टम की उनमें से एक कम्पोनेंट पर काम करके. और अंत में, कैरिक्टर सेग्मेंटेशन से जाने पर, जब हमारे पास है बेहतर कैरिक्टर रेकग्निशन, पर्फ़ॉर्मन्स बढ़ी 10 प्रतिशत. अत: आप निर्णय ले सकते हैं कि 10 प्रतिशत की बढ़त आपके परिश्रम के कितनी योग्य है? इससे आपको पता चलता है कि शायद अधिक परिश्रम करने से पाइप्लायन की आख़िरी स्टेज पर, आप बढ़ा सकते हैं पर्फ़ॉर्मन्स आपके सिस्टम की. दूसरा तरीक़ा सोचने का इसके बारे में, है कि इस प्रकार की अनालिसिस करने से आप कोशिश कर रहे हैं सोचने की कि क्या है सम्भावना बेहतर होने की इन में से प्रत्येक कम्पोनेंट की. या शायद आपको  कितना फ़ायदा होगा यदि एक इन कम्पोनेंट्स में से बन जाए एकदम सही? और यह देता है एक उच्चतम सीमा उस सिस्टम की पर्फ़ॉर्मन्स की. अत: सीलिंग अनालिसिस का सिद्धांत काफ़ी महत्वपूर्ण है, मैं इस सिद्धांत को समझाता हूँ फिर से लेकिन एक दूसरे उदाहरण के साथ लेकिन थोड़ा अधिक जटिल. मान लीजिए आप करना चाहते हैं फ़ेस रेकग्निशन इमिजेज़ से. आप चाहते हैं देखना पिक्चर और पहचानना चाहते है कि क्या है या नहीं है इस पिक्चर में आपका एक ख़ास मित्र, और कोशिश करते हैं पहचानने की इस इमिज में दिखाया गया व्यक्ति. यह एक थोड़ा कृत्रिम उदाहरण है, वास्तव में फ़ेस रेकग्निशन ऐसे नहीं किया जाता है. लेकिन हम करेंगे सेट इस उदाहरण के लिए, पाइप्लायन शायद कैसी दिखती है आपको देने के लिए एक और उदाहरण कि कैसे सीलिंग अनालिसिस की प्रक्रिया है. तो  हमारे पास है एक कैमरा इमिज, और मान लीजिए हम डिज़ाइन करते हैं पाइप्लायन इस प्रकार, पहला काम जो आप करना चाहेंगे वह है प्री-प्रॉसेस करना इमिज को. तो चलिए लेते हैं इस इमिज को हमने दिखाई है ऊपर दाईं तरफ़, और मान लीजिए हम चाहते हैं बैक्ग्राउंड / पृष्ठ भूमि हटाना. तो करें प्री-प्रासेसिंग और बैक्ग्राउंड हट जाती है. इसके बाद हम चाहते हैं करना मान लीजिए डिटेक्ट फ़ेस व्यक्ति का, जो अक्सर किया जाता है लर्निंग से. अत: हम रन करेंगे एक स्लाइडिंग विंडो क्रॉस फ़ायर एक बॉक्स बनाने के लिए व्यक्ति के चेहरे के आस पास. फ़ेस डिटेक्ट करने के बाद, ऐसा हुआ कि यदि आप पहचानना चाहते हैं व्यक्ति को, ऐसा है व्यक्ति की आँखे एक बहुत सहायक सूत्र होती हैं. हम वास्तव में, पहचानने के लिए मित्रों को, रंग-रूप उनकी आँखों का वास्तव में एक परम महत्वपूर्ण सूत्र होता है. तो चलिए रन करते हैं एक और क्रॉस फ़ायर डिटेक्ट करने के लिए व्यक्ति की आँखें. अत: सेगमेंट आँखों का और तब क्योंकि यह देगा हमें लाभदायक फ़ीचर्ज़ पहचानने के लिए व्यक्ति को. और तब चेहरे के और हिस्से जो महत्वपूर्ण हो सकते हैं. शायद नाक का सेगमेंट, मुँह का सेगमेंट. और तब ढूँढ लेने के बाद आँखे, नाक, और मुँह, ये सब देते हैं उपयोगी जानकारी / इन्फ़र्मेशन फ़ीड करने के लिए शायद लजिस्टिक रेग्रेशन क्लैसिफ़ायअर में. और वहाँ जॉब हैं जिसकी कॉस्ट की प्राथमिकता है, इससे हमें मिलेगा ओवरॉल लेबल, ढूँढने के लिए लेबल कि हमारे विचार से कौन है यह व्यक्ति. अत: यह है एक प्रकार से जटिल पाइप्लायन, यह शायद अधिक जटिल है उससे जितना आप को प्रयोग करना चाहिए, यदि आप वास्तव में पहचानना चाहते हैं व्यक्ति को, लेकिन यह एक समझाने के लिए उदाहरण है जो उपयोगी है सीलिंग अनालिसिस के बारे में सोचने के लिए. तो कैसे करते है सीलिंग अनालिसिस इस पाइप्लायन का. हम जाएँगे इन हिस्सों में से एक एक कर के. हमें मिलती है पूरे सिस्टम की एकुरेसी  85% है. पहला काम जो मैं  करुँगा वह है जाऊँगा टेस्ट सेट पर और हाथ से इसकी पूरी बैक्ग्राउंड सेग्मेंटेशन करूँगा. तो जाइए टेस्ट सेट पर. और प्रयोग करके फ़ोटोशाप या ऐसा कुछ सिर्फ़ इसे बताने के लिए कि बैक्ग्राउंड कहाँ है और सिर्फ़ स्वयं हटा दीजिए बैक ग्राउंड, तो यह है एक वास्तविक बैक्ग्राउंड, और और देखिए कितनी बदलती है एकुरेसी. और इस उदाहरण में यह बढ़ती है 0.1% से. अत: यह है एक दृढ़ इशारा कि यद्यपि आपके पास एक सही बैक्ग्राउंड सेग्मेंटेशन है, आपकी पर्फ़ॉर्मन्स, एक सही बैक्ग्राउंड हटाने पर भी पर्फ़ॉर्मन्स आपके सिस्टम की उतनी नहीं बढ़ेगी. तो शायद यह योग्य नहीं हैं  कि एक बड़ी मेहनत की जाए प्री-प्रासेसिंग पर बैक्ग्राउंड हटाने के लिए. तब शीघ्रता से जाइए टेस्ट सेट पर, और दीजिए इसे सही फ़ेस डिटेक्शन की इमिजेज़ और फिर से कीजिए आँख नाक और मुँह का सेग्मेंटेशन किसी भी क्रम में, कोई एक क्रम पकड़ लें. सिर्फ़ दें सही लोकेशन / स्थान आँखों का. सही स्थान नाक का, सही स्थान मुँह का, और तब अंत में दें इसे सही ओवरॉल लेबल, मुझे मिल सकती है 100% एकुरेसी. और जैसे मैं सिस्टम से गुज़रता हूँ और देता हूँ इसे और अधिक कम्पोनेंट्स, सही लेबल्ज़ टेस्ट सेट में, पर्फ़ॉर्मन्स पूरे सिस्टम कि बढ़ जाती है और आप देख सकते हैं कि कितनी पर्फ़ॉर्मन्स बढ़ी अलग अलग स्टेप में. अत: देने से इसे एक सही फ़ेस डिटेक्शन, ऐसा प्रतीत होता है कि पूरे सिस्टम की पर्फ़ॉर्मन्स बढ़ी 5.9% से. अत: वह एक काफ़ी बड़ी वृद्धि है. इसका मतलब है कि एक बेहतर फ़ेस डिटेक्शन पर मेहनत करना आपके परिश्रम के योग्य होगा. यह बढ़ी 4% वहाँ, यह बढ़ी 1% वहाँ. 1% वहाँ, और 3% वहाँ. अत: ऐसा प्रतीत होता है कि कम्पोनेंट जिस पर काम करना सबसे अच्छा होगा वह है, जब मैंने दिया इसे एक सही फ़ेस डिटेक्शन सिस्टम पर्फ़ॉर्मन्स बढ़ी 5.9 प्रतिशत, जब दिया सही आँखों का सेग्मेंटेशन, यह बढ़ी चार प्रतिशत. और तब मेरा अंतिम जो है कॉस्ट और वहाँ है तीन प्रतिशत का गैप शायद. अत: यह बताता है कि क्या कम्पोनेंट्स योग्य हैं कि उन पर काम किया जाए. और वैसे मैं आपको बताना चाहता हूँ एक सच्ची चेतावनी पूर्ण कहानी. मैं इसे रखता हूँ प्री प्रासेसिंग में का कारण है बैक ग्राउंड हटाने को कि मुझे वास्तव में पता है एक सच्ची कहानी जहाँ एक रीसर्च टीम में वास्तव में दो लोगों को व्यतीत करना पड़ा था लगभग डेढ़ साल, लगभग 18 महीने एक बेहतर बैक्ग्राउंड रेमूवल पर काम करते हुए. लेकिन मैं वास्तव में स्पष्ट विवरण नहीं दूँगा प्रत्यक्ष कारणों से, लेकिन एक कम्प्यूटर विज़न की ऐप्लिकेशन थी जहाँ दो एंजिनीयर्ज की एक टीम थी जिन्हें लगाने पड़े थे लगभग डेढ़ साल एक बेहतर बैक्ग्राउंड रेमूवल पर काम करते हुए, वास्तव में बनाए बहुत पेचीदा अल्गोरिद्म्स और एक रीसर्च पेपर पब्लिश किया. लेकिन इतने सब काम के बाद उन्हें पता चला कि इससे ज़्यादा अंतर नहीं आया ओवरॉल पर्फ़ॉर्मन्स में ऐप्लिकेशन की जिस पर वे काम कर रहे थे और यदि किसी ने किया होता सीलिंग अनालिसिस पहले से शायद उनको पता चल जाता. और उनमें से एक ने मुझे कहा बाद में. यदि आपने किया होता इस प्रकार का सीलिंग अनालिसिस इस प्रकार शायद उन्हें समझ आ जाती उनके 18 महीनों के काम से पहले. कि वे अपना परिश्रम केंद्रित करते किसी और कम्पोनेंट पर बजाय इसके लगाते 18 महीने एक बैक्ग्राउंड रेमूवल पर काम करते हुए. अत: सारांश में, पाइप्लायन्स काफ़ी व्यापक हैं जटिल मशीन लर्निंग ऐप्लिकेशन्स में. और जब आप एक बड़ी मशीन लर्निंग ऐप्लिकेशन पर काम कर रहे हो, आपका समय एक डिवेलपर की तरह इतना बहुमूल्य है, अत: गँवाए नहीं आपका समय काम करके उस पर जिससे अंत में कोई फ़र्क़ न पड़े. और इस विडीओ में हमने बात की इस सिद्धांत सीलिंग अनालिसिस की, जो मुझे अक्सर एक अच्छा टूल लगा है जानने के लिए कम्पोनेंट जिस पर यदि हम केंद्रित करें और एक बड़ा अंतर ला पाएँ. उससे काफ़ी ज़्यादा अंतर आएगा ओवरॉल पर्फ़ॉर्मन्स में आपके फ़ाइनल सिस्टम की. अत: कुछ वर्षों से मशीन लर्निंग पर काम करते हुए, मैंने वास्तव में सीखा है विश्वास न करना अपने आंतरिक एहसास पर कि कौन से कम्पोनेंट पर काम करना है. अत: बहुधा, मैंने मशीन लर्निंग पर एक लंबे समय से काम किया है, लेकिन अक्सर मैं देखता हूँ एक मशीन लर्निंग प्रोबलेम को, और शायद मुझे कुछ अंदर से एहसास होता है कि चलो उस कम्पोनेंट पर काम करते हैं और मैं पूरा समय उस पर व्यतीत कर देता हूँ. पर पिछले कुछ सालों से, मैंने यहाँ तक कि अपनी आंतरिक एहसास पर विश्वास करना शुरू किया है और सीखा है आंतरिक एहसास पर उतना विश्वास न करना भी. और उसके बजाय, यदि आपके पास है एक प्रकार की मशीन लर्निंग प्रॉब्लम जहाँ सम्भव है चीज़ों को स्ट्रक्चर करना और सीलिंग अनालिसिस करना, अक्सर वहाँ एक अधिक बेहतर और अधिक विश्वसनीय ढंग है निर्णय लेने का कि कहाँ श्रम डालना है, वास्तव में बेहतर करने के लिए पर्फ़ॉर्मन्स किसी कम्पोनेंट की. और आश्वासित रहें कि यदि आप वह करते हैं उससे वास्तव में एक बड़ा प्रभाव होगा अन्तिम पर्फ़ॉर्मन्स पर ओवरॉल सिस्टम की.