En este vídeo me gustaría hablar acerca de una nueva configuración del aprendizaje automático a gran escala que se llama configuración de aprendizaje en línea. La configuración de aprendizaje en línea nos permite modelar problemas en donde tenemos una inundación continua o un flujo continuo de datos entrantes y nos gustaría un algoritmo que aprenda a partir de eso. Hoy en día, muchos de los sitios web más grandes, o muchas de las empresas de sitios web más grandes utilizan diferentes versiones de algoritmos de aprendizaje en línea para que aprendan de la avalancha de usuarios que siguen llegando, de regreso al sitio web. Específicamente, si tienen un flujo continuo de datos generado por un flujo continuo de usuarios que visitan su sitio web, lo que puede hacer es usar, algunas veces, un algoritmo de aprendizaje en línea para conocer las preferencias de los usuarios a partir del flujo de datos y usar eso para optimizar algunas de las decisiones sobre su sitio web. Supongamos que dirigen un servicio de envíos. Los usuarios vienen y piden ayuda para enviar sus paquetes de la ubicación de A a la ubicación B, y supongamos que dirige un sitio web, en donde los usuarios repetidas veces entran y les dicen desde dónde quieren enviar el paquete y a dónde desean enviarlo (así que el origen y el destino), y su sitio web ofrece enviar el paquete por algún precio de venta, así que yo voy a enviar el paquete por $ 50, yo lo enviaré por $20. Y con base en el precio que ustedes les ofrecen a los usuarios, los usuarios algunas veces eligen utilizar su servicio de envíos; eso es un ejemplo positivo y algunas veces se van y deciden no usar su servicio de envíos. Así que digamos que queremos un algoritmo de aprendizaje para que nos ayude a optimizar lo que es el precio de venta que queremos ofrecer a nuestros usuarios. Y específicamente, digamos que nos encontramos con algún conjunto de variables que capturen las propiedades de los usuarios. Si conocemos algo de las variables demográficas, estas capturan el origen y el destino del paquete, a dónde quieren enviar el paquete y cuál es el precio que les ofrecemos para enviar el paquete, y lo que queremos hacer es conocer cuál es la la probabilidad de que elijan enviar el paquete usando nuestro servicio de envío dadas estas variables, y nuevamente sólo como recordatorio, estas variables «X» también capturan el precio que estamos pidiendo. De modo que si pudiéramos estimar la probabilidad de que vayan a estar de acuerdo en usar nuestro servicio por cualquier precio dado; entonces podemos tratar de elegir un precio para que tengan una probabilidad bastante alta de elegir nuestro sitio web mientras que, de manera simultánea, con suerte nos ofrezcan una retribución justa, ofreciéndonos una ganancia justa por enviar su paquete. Así que si podemos conocer esta propiedad de «y» es igual a 1 dado cualquier precio y dadas las otras variables, realmente podríamos usar esto para elegir los precios adecuados a medida que tenemos usuarios nuevos. Así que para modelar la probabilidad de que «y» es igual a 1, lo que podemos hacer es usar la regresión logística o la red neuronal o algún otro algoritmo como ese. Pero vamos a empezar con la regresión logística. Ahora, si tienen un sitio web que sólo funciona de forma continua, esto es lo que un algoritmo de aprendizaje en línea haría. Voy a escribir «repetir por siempre.» Esto sólo significa que nuestro sitio web va a seguir manteniéndose en funcionamiento. Lo que sucede en el sitio web es que, de vez en cuando, un usuario vendrá, y para el usuario que viene vamos a obtener algún par «x,y» que corresponde a un cliente o a un usuario en el sitio web. De modo que las variables «x» son, ya saben, el origen y el destino especificado por este usuario y el precio que le ofrecimos en esta ocasión, y «y» es ya sea uno o cero, dependiendo de si eligieron o no usar nuestro servicio de envíos. Ahora, una vez que tenemos este par {x, y}, lo que hace un algoritmo de aprendizaje en línea es entonces actualizar los parámetros «theta» usando sólo este ejemplo «x,y» y, en particular, actualizaríamos los parámetros «theta» ya que «theta» j se actualiza como «theta» j menos el índice de aprendizaje «alfa» multiplicado por mi regla de gradiente de descenso habitual para la regresión logística. Así que hacemos esto para «j» es igual a cero hasta n, y ese es mi corchete cerrado. Así que para otros algoritmos de aprendizaje, en lugar de escribir «X-Y», cierto, escribí cosas como «Xi, Yi» pero en esta configuración de aprendizaje en línea en realidad estamos desechando la noción de la existencia de un conjunto de entrenamiento fijo, en su lugar tenemos un algoritmo. Ahora, lo que ocurre a medida que obtenemos un ejemplo y luego aprendemos a usar ese ejemplo de esta manera, y luego tiramos ese ejemplo, descartamos ese ejemplo y nunca lo usamos de nuevo, de modo que sólo miramos a un ejemplo a la vez; aprendemos de ese ejemplo, lo descartamos, que es la razón por la que, ya saben, también estamos acabando con esta noción de la existencia de este tipo de conjunto de entrenamiento fijo indexado por «i». Y, si realmente dirigen un sitio web importante en donde en realidad tienen un flujo continuo de usuarios que lo visitan, entonces este tipo de algoritmo de aprendizaje en línea es en realidad un algoritmo bastante razonable, porque los datos están esencialmente gratis, si tienen demasiados datos, esos datos son esencialmente ilimitados, entonces en realidad tal vez no hay necesidad de mirar un ejemplo de entrenamiento más de una vez. Por supuesto, si sólo tuviéramos un número reducido de usuarios, entonces en lugar de utilizar un algoritmo de  aprendizaje en línea como éste, quizás sería mejor que guardaran todos sus datos en un conjunto de entrenamiento fijo y después ejecutaran algún algoritmo sobre ese conjunto de entrenamiento. Pero si realmente tienen un flujo continuo de datos, entonces un algoritmo de aprendizaje en línea puede ser muy eficaz. También debo mencionar que un efecto interesante de este tipo de algoritmo de aprendizaje en línea es que puede adaptarse a las preferencias cambiantes del usuario. Y, en particular, si al paso tiempo, debido a cambios en la la economía, tal vez los usuarios se empiezan a hacer sensibles al precio y están dispuestos a pagar, ya saben, menos dispuestos a pagar precios más altos; O si se vuelven menos sensibles a los precios y están dispuestos a pagar precios más altos, O si diferentes asuntos llegan a ser más importantes para los usuarios; si empiezan a tener nuevos tipos de usuarios que visitan su sitio web; este tipo de algoritmo de aprendizaje en línea también se puede adaptar a las preferencias cambiantes del usuario y realizar un seguimiento de lo que su cambiante población de usuarios podría estar dispuesta a pagar. Y lo hace porque si su grupo de usuarios cambia, entonces estas actualizaciones a sus parámetros «theta» simplemente se adaptarán lentamente a sus parámetros para lo que sea que se parezca su último grupo de usuarios. Aquí hay otro ejemplo de un tipo de aplicación a la que pueden aplicar el aprendizaje en línea. Esta es una aplicación en la búsqueda de producto en la que queremos aplicar el algoritmo de aprendizaje en línea para aprender a dar buenos listados de búsqueda a un usuario. Digamos que dirigen una tienda en línea que vende teléfonos - que vende teléfonos móviles o vende teléfonos celulares. Y tienen una interfaz de usuario en donde el usuario puede visitar su sitio web y escribir una consulta como "teléfono Android 1080p cámara". Así que 1080p es un tipo de una especificación para una cámara de vídeo que podrían tener en un teléfono, un teléfono celular, un teléfono móvil. Supongamos que tenemos un centenar de teléfonos en nuestra tienda. Y debido a la manera en la que nuestro sitio web está diseñado, cuando un usuario escribe una consulta, si se trata de una consulta de búsqueda, nos gustaría encontrar un elección de diez teléfonos diferentes para mostrar qué ofrecer al usuario. Lo que nos gustaría hacer es tener un algoritmo de aprendizaje que nos ayude a averiguar cuáles son los diez teléfonos, de los 100, que deberíamos regresar al usuario en respuesta a la consulta de búsqueda del usuario, como la que está aquí. Así es como podemos abordar el problema. Para cada teléfono y dada una consulta específica  de un usuario, podemos construir un vector de dirección “X”. De modo que el vector de dirección «X» puede capturar diferentes propiedades del teléfono. Puede capturar cosas como, cuán similar es la consulta de búsqueda del usuario con  los teléfonos; Capturamos cosas como cuántas palabras en la consulta de búsqueda del usuario coinciden con el nombre del teléfono, cuántas palabras en la consulta de búsqueda del usuario coinciden con la descripción del teléfono, y así sucesivamente. De modo que las variables «x» capturan las propiedades del teléfono y captura cosas acerca de cuán similar o lo bien que el teléfono coincide con la consulta del usuario a lo largo de diferentes dimensiones. Lo que nos gustaría hacer, es calcular la probabilidad de que un usuario haga clic en el enlace para un teléfono específico, porque le queremos mostrar al usuario los teléfonos que probablemente desee comprar, le queremos mostrar al usuario los teléfonos que tienen alta probabilidad de ser seleccionados con un clic en el navegador web. Así que voy a definir «y» es igual a uno si el usuario hace clic en el enlace para un teléfono, y «y» es igual a cero en caso contrario; y lo que me gustaría hacer es conocer la probabilidad de que el usuario hará clic en un teléfono determinado dadas, ya saben, las variables «x», que  capturan las propiedades del teléfono y lo bien que la consulta coincide con el teléfono. Para dar a este problema un nombre en el idioma de las personas que dirigen los sitios web como éste, el problema de aprender esto, se llama en realidad el problema de conocer el porcentaje de clics predicho, el CTR predicho. Simplemente significa conocer la probabilidad de que el usuario haga clic en el enlace específico que le están ofreciendo, así que CTR es una abreviatura para el porcentaje de clics. Y si pueden estimar el porcentaje de clics predicho para cualquier teléfono, lo que podemos hacer es usar esto para mostrarle al usuario los diez teléfonos sobre los cuales es más probable que hagan clic, porque de los cien teléfonos, podemos calcular esto para cada uno de los 100 teléfonos y sólo seleccionar los 10 teléfonos en los que es más probable que el usuario haga clic, y esto será una manera bastante razonable de decidir cuáles son los diez resultados para mostrar al usuario. Para que quede claro, supongamos que cada vez que un usuario realiza una búsqueda, regresamos diez resultados; lo que esto va a hacer es que, en realidad, nos dará diez pares «x, y», esto realmente nos da diez ejemplos de entrenamiento cada vez que un usuario entra a nuestro sitio web debido a los diez teléfonos que decidimos enseñarle al usuario, por cada uno de los 10 teléfonos obtenemos un vector de dirección «X» y para cada uno de esos 10 teléfonos, que le mostramos al usuario, también obtendremos un valor para «y», también observaremos el valor de «y», dependiendo de si hicimos clic o no en ese URL, así que una manera de dirigir un sitio web como este sería mostrarle de forma continua al usuario, ya saben, sus diez mejores estimaciones para otros teléfonos que les pudieran agradar así que, cada vez que un usuario los visite, tendrían diez ejemplos, diez pares «x, y» y después usarían un algoritmo de aprendizaje en línea para actualizar los parámetros utilizando esencialmente 10 pasos del gradiente de descenso sobre estos 10 ejemplos, y luego pueden eliminar los datos, y si realmente tienen un flujo continuo de usuarios que visitan su sitio web, esto sería una manera bastante razonable para conocer los parámetros para su algoritmo, de modo que podamos mostrar los diez teléfonos a sus usuarios que pudieran ser más prometedores y los más probables para que hagan clic en ellos. Así que este es un problema de búsqueda de productos o un ejemplo de aprendizaje para clasificar teléfonos, aprender a buscar teléfonos. Así que voy a mencionar rápidamente algunos más. Uno es, si tienen un sitio web y están tratando de decidir, ya saben, cuál oferta especial mostrarle al usuario, esto es muy similar a los teléfonos, o si tienen un sitio web y le muestran a diferentes usuarios diferentes noticias; así que si son un sitio web que agrega noticias, entonces pueden nuevamente usar un sistema similar para seleccionar, para mostrarle al usuario, ya saben, cuáles son las noticias en las que sea más probable que estén interesados y cuáles son las noticias sobre las que es más probable que hagan clic. En estrecha relación con las ofertas especiales, tenemos recomendaciones de producto. Y de hecho, si tienen un sistema de filtrado colaborativo, pueden hasta imaginar un sistema de filtrado colaborativo que les proporcione variables adicionales para alimentar en un clasificador de regresión logística para tratar de predecir el índice de clic para los diferentes productos que pudieran recomendar a un usuario. Desde luego, debo decir que cualquiera de estos problemas también se podrían haber formulado como un problema de aprendizaje automático estándar, en el que tienen un conjunto de entrenamiento fijo. Tal vez podrían dirigir su sitio web durante unos días y después guardar un conjunto de entrenamiento, un conjunto de entrenamiento fijo y ejecutar un algoritmo de aprendizaje sobre eso. Pero estos son el tipo real de problemas, en donde  observan a las grandes empresas obtener tanta cantidad de datos, que en realidad pudiera no haber necesidad de guardar un conjunto de entrenamiento fijo, sino en lugar de esto, pueden utilizar un algoritmo de aprendizaje en línea para simplemente aprender de manera continua a partir de los datos que los usuarios están generando en su sitio web. Así que, esa fue la configuración de aprendizaje en línea y como vimos, el algoritmo que aplicamos a ésta es realmente muy similar al algoritmo del gradiente de descenso estocástico, sólo que en lugar de buscar a través de un conjunto de entrenamiento fijo, estamos obteniendo un ejemplo de un usuario, aprendiendo de ese ejemplo, y luego descartándolo y siguiendo adelante. Y si tienen un un flujo continuo de datos para alguna aplicación, valdría la pena tomar en cuenta este tipo de algoritmo para su aplicación. Y, por supuesto, una ventaja del aprendizaje en línea es que también, si tienen un grupo cambiante de usuarios, o si las cosas que están tratando de predecir están cambiando lentamente, si el gusto de sus usuarios está cambiando poco a poco, el algoritmo de aprendizaje en línea puede adaptarse poco a poco a sus hipótesis aprendidas para cualesquiera que sean los últimos conjuntos de comportamientos de los usuarios también.