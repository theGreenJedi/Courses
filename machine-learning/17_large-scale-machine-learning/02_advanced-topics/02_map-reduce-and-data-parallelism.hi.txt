पिछले कुछ वीडियोस में, हमने बात की स्टोकस्टिक ग्रेडीयंट डिसेंट की, और, जानते हैं, दूसरे वेरिएशंज / रूपांतरण स्टोकस्टिक ग्रेडीयंट डिसेंट अल्गोरिद्म के, जिसमें शामिल हैं वे एडेप्टेशञ्ज / परिवर्तन ऑनलाइन लर्निंग के लिए, लेकिन वे सब अल्गोरिद्मज़ रन की जा सकती थीं एक मशीन पर, या रन कर सकते थे एक कम्प्यूटर पर. और कुछ मशीन लर्निंग प्रॉब्लम्स होती हैं काफ़ी बड़ी कि उन्हें सम्भव नहीं होता रन करना एक मशीन पर, कभी-कभी शायद आपके पास होता है इतना अधिक डेटा कि आप नहीं चाहते रन करना कभी भी वह सारा डेटा एक अकेले कम्प्यूटर से, इससे अंतर नहीं पड़ता कि आप कौन सा अल्गोरिद्म इस्तेमाल कर रहे हैं उस कम्प्यूटर पर. अत: इस विडीओ में मैं बात करना चाहूँगा एक भिन्न पद्धति की बड़े स्केल की मशीन लर्निंग के लिए, जिसे कहते हैं मैप रिड़ूस पद्धति. और यद्यपि हमारे पास हैं काफ़ी सारे विडीओज़ स्टोकस्टिक ग्रेडीयंट डिसेंट पर और हम करेंगे व्यतीत अपेक्षाकृत कम समय मैप रिड़ूस पर -- न बनाएँ राय इससे तुलनात्मक महत्व मैप रिड़ूस की ग्रेडीयंट डिसेंट के मुक़ाबले में निर्भर करते हुए मात्रा पर समय की जो मैं व्यतीत करूँगा इन सुझावों पर ख़ासकर. बहुत से लोग कहेंगे कि मैप रिड़ूस है कम से कम एक उतना ही महत्वपूर्ण, और कुछ कहेंगे एक और भी अधिक महत्वपूर्ण सुझाव तुलना में ग्रेडीयंट डिसेंट की, केवल यह है अपेक्षाकृत सरल समझाने के लिए, जिस वजह से मैं बिताऊँगा कम समय इस पर, लेकिन इन सुझावों को इस्तेमाल करते हुए आप शायद कर पाएँगे स्केल लर्निंग अल्गोरिद्म्स को स्केल और भी प्रॉब्लम्स के लिए जितनी सम्भव हैं स्टोकस्टिक ग्रेडीयंट डिसेंट से. यहाँ है सुझाव. मान लीजिए हम करना चाहते हैं फ़िट एक लिनीअर रेग्रेशन मॉडल या एक लोजिस्टिक रेग्रेशन मॉडल या कुछ ऐसा, और चलिए शुरू करते हैं फिर से बैच ग्रेडीयंट डिसेंट से, तो वह है हमारा बैच ग्रेडीयंट डिसेंट लर्निंग रूल. और रखने के लिए लिखावट इस स्लाइड पर ट्रेकटेबल / शिक्षणीय, मैं मान कर चलूँगा इस दौरान कि मेरे पास हैं एम बराबर 400 इग्ज़ाम्पल्ज़. निश्चय ही, हमारे स्टैंडर्ड से, बड़े स्केल की मशीन लर्निंग के लिए, आप जानते हैं, एम शायद काफ़ी छोटा है और इसलिए, यह शायद अमूमन अप्लाई किया जाता है प्रॉब्लम्स को, जहाँ आपके पास होते हैं शायद आसपास 400 मिल्यन इग्ज़ाम्पल, या कुछ इतने, लेकिन सिर्फ़ करने के लिए लिखना स्लाइड पर सरल, मैं मानूँगा कि हमारे पास हैं 400 इग्ज़ाम्पल्ज़. अत: उस स्थिति में, बैच ग्रेडीयंट डिसेंट लर्निंग रूल के पास है यह 400 और सम आइ ईक्वल्ज़ वन से 400 तक मेरे 400 इग्ज़ाम्पल्ज़ यहाँ, और यदि एम है बड़ा, तब यह है एक कॉम्प्यूटेशनली महँगा स्टेप. तो, जो  मैप रिड़ूस का आइडिया करता है वह निम्नलिखित है, और मुझे कहना चाहिए मैप रिड़ूस आइडिया है बदौलत दो खोज करने वालों की, जेफ़ डीन और संजय गिमावत. जेफ़ डीन है, वैसे, एक सबसे महत्वपूर्ण एंज़िनियर पूरी सिलिकन वैली में और उन्होंने बनाया है एक तरह से बड़ा हिस्सा आर्किटेक्चर के बुनियादी ढाँचा का जिस पर पूरा गूगल आज रन करता है. लेकिन यहाँ है मैप रिड़ूस का आइडिया. तो, मान लो मेरे पास है कोई ट्रेनिंग सेट, यदि हम चाहते हैं डिनोट करना इस बॉक्स से यहाँ एक्स वाय युग्म के, जहाँ यह है एक्स 1, वाय 1, नीचे मेरे 400 इग्ज़ाम्पल्ज़ तक, एक्स एम, वाय एम. तो, वह है मेरा ट्रेनिंग सेट 400 ट्रेनिंग इग्ज़ाम्पल्ज़ का. मैप रिड़ूस के आइडिया में, एक तरीक़ा करने का है, कि विभाजित करें इस ट्रेनिंग सेट को भिन्न भिन्न सबसेट्स में. मैं करूँगा मान लूँगा कि इस उदाहरण में जहाँ मेरे पास हैं 4 कम्प्यूटर्ज़, या 4 मशींज़ रन करने के लिए समानांतर मेरे ट्रेनिंग सेट पर, इस वजह से मैं विभाजित कर रहा हूँ इसे 4 मशींज़ पर. यदि आपके पास हैं 10 मशींज़ या 100 मशींज़, तब आप करेंगे विभाजित आपके ट्रेनिंग सेट को 10 हिस्सों या 100 हिस्सों या जो भी आपके पास है. और क्या मेरी पहली इन 4 मशींज़ को करना है, मान लो, इस्तेमाल करेगी सिर्फ़ पहला एक चौथाई मेरे ट्रेनिंग सेट का - अत: केवल इस्तेमाल करेगी मेरे पहले 100 ट्रेनिंग इग्ज़ाम्पल्ज़. और विशेषत:, यह क्या करेगी कि देखेगी इस समेशन पर, और कम्प्यूट करेगी उस समेशन को केवल पहले 100 ट्रेनिंग इग्ज़ाम्पल्ज़ के लिए. तो मैं लिखता हूँ वह मैं करूँगा कम्प्यूट एक वेरीयबल टेम्प 1 सूपर स्क्रिप्ट 1 पहली मशीन जे बराबर है सम बराबर 1 से 100 तक, और तब मैं करूँगा प्लग इन बिल्कुल वही टर्म वहाँ - तो मेरे पास है एक्स-थीटा, एक्स आइ, माइनस वाय आइ टाइम्ज़ एक्स आइ जे, सही? तो वह है केवल वह ग्रेडीयंट डिसेंट टर्म ऊपर यहाँ. और इसी प्रकार, मैं जा रहा हूँ लेने दूसरा एक चौथाई मेरे डेटा का और भेजूँगा इसे मेरी दूसरी मशीन को, और मेरी दूसरी मशीन इस्तेमाल करेगी ट्रेनिंग इग्ज़ाम्पल्ज़ 101 से 200 तक और आप करेंगे कम्प्यूट वैसे ही वेरीयबल्स टेम्प जे के जो है वही सम इंडेक्स इग्ज़ाम्पल्ज़ 101 से 200 तक. और इसी प्रकार मशीन्स 3 और 4 इस्तेमाल करेंगे तीसरा और चौथा एक चौथाई मेरे ट्रेनिंग सेट का. तो अब प्रत्येक मशीन को सम करना है 100 पर बजाय 400 इग्ज़ाम्पल्ज़ पर और इसलिए करना है सिर्फ़ एक एक चौथाई काम और इसलिए सम्भवत: यह करेगी इसे लगभग 4 गुणा अधिक तीव्र. अंत में, बाद में ये सारी मशीन्स का यह काम हो जाने पर, मैं लूँगा ये टेम्प वेरीयबल्स और उनको रखूँगा वापिस एक साथ. तो मैं लेता हूँ ये वेरीयबल्स और भेजता हूँ उन सबको एक आप जानते हैं केंद्रीय मास्टर सर्वर पर और मास्टर क्या करेगा कि मिलाएगा इन परिणामों को एक साथ. और विशेषत:, यह करेगा अप्डेट मेरे पेरमिटर्स थीटा जे इस प्रकार थीटा जे अप्डेट होगा इस प्रकार थीटा जे माइनस लर्निंग रेट अल्फ़ा टाइम्ज़ वन ओवर 400 टाइम्ज़ टेम्प, 1, जे, प्लस टेम्प 2जे प्लस टेम्प 3जे प्लस टेम्प 4जे और निश्चय ही हमें यह करना है अलग से जे ईक्वल्ज़ 0 के लिए॰ आप जानते हैं, इतने तक और फ़ीचर्ज़ इस संख्या के अंदर तक के लिए. तो मैं लिख रहा था यह इक्वेज़न बहुत सी लाइन्स में, आशा है यह स्पष्ट है. तो यह इक्वेज़न क्या करती है बिल्कुल वैसा ही जो जब आपके पास है एक केंद्रीय मास्टर सर्वर जो लेता है परिणाम, दस एक जे दस दो जे दस तीन जे और दस चार जे और जोड़ देता है उन्हें और इसलिए निश्चय ही सम है इन चार चीज़ों का. सही, वह है सिर्फ़ सम इसका, प्लस सम इसका, प्लस सम इसका, प्लस सम उसका, और वे चार चीज़ें सिर्फ़ जोड़ कर बराबर हैं इस सम के जो हम आरम्भ में कम्प्यूट कर रहे थे बैच ग्रेडीयंट डिसेंट में. और तब हमारे पास है अल्फ़ा टाइम्ज़ 1 से 400, अल्फ़ा टाइम्ज़ 1 से 100 और यह है बिल्कुल बराबर बैच ग्रेडीयंट डिसेंट अल्गोरिद्म के ही. बजाय आवश्यक होने के निकालना सम पूरे चार सौ ट्रेनिंग इग्ज़ाम्पल्ज़ पर केवल एक मशीन पर, हम कर सकते हैं इसके स्थान पर विभाजित वर्क लोड को चार मशीन्स पर. तो, यहाँ है कि क्या है सामान्य पिक्चर जो मैप रिड़ूस टेक्नीक दिखती है. हमारे पास हैं कुछ ट्रेनिंग सेट्स, और यदि हम करना चाहते हैं समानांतर चार मशीन पर, हम करेंगे कि लें ट्रेनिंग सेट को और इसे विभाजित करें, आप जानते हैं बराबर. विभाजित करे इसे एक सा जितना हो सके चार सब सेट्स में. तब हम लेंगे 4 सब सेट्स ट्रेनिंग डेटा के और भेजेंगे उन्हें 4 भिन्न कम्प्यूटर्ज़ पर. और प्रत्येक उन 4 कम्प्यूटर्ज़ में कर सकता है कम्प्यूट एक समेशन केवल एक चौथाई ट्रेनिंग सेट पर, और तब अंत में लेंगे प्रत्येक कम्प्यूटर का परिणाम, भेजेंगे उन्हें एक केंद्रीय सर्वर पर, जो तब मिलाएगा / जोड़ेगा परिणामों को एक साथ. तो, पिछली लाइन पर उस उदाहरण में, अधिकांश कार्य ग्रेडीयंट डिसेंट का, था कम्प्यूट करना सम आइ बराबर 1 से 400 तक किसी चीज़ का. अत: सामान्य तौर पर, सम आइ बराबर 1 से एम उस फ़ॉर्म्युला का ग्रेडीयंट डिसेंट के लिए. और अब, क्योंकि प्रत्येक चार कम्प्यूटर्ज़ में से कर सकता है सिर्फ़ एक चौथाई काम, सम्भवत: आपको मिल सकती है एक 4x गति ज़्यादा. विशेषत:, यदि वहाँ होती नहीं कोई नेटवर्क लेटेन्सी और न कोई क़ीमत नेटवर्क कम्यूनिकेशन पर भेजने के लिए डेटा आगे पीछे, आपको संभवत: मिल सकती है 4x गति अधिक. निश्चय ही, व्यवहार में, नेटवर्क लेटेन्सी की वजह से, ओवरहेड / ऊपर का ख़र्चा जोड़ने का परिणाम बाद में और अन्य फेकटर्ज़ / कारक, व्यवहार में आपको मिलती है 4x से थोड़ी कम गति. लेकिन, फिर भी, इस प्रकार की मैप रिड़ूस पद्धति अवश्य ही देता है हमें एक ढंग प्रॉसेस करने का उससे बड़े डेटा सेट्स उससे जो है सम्भव एक अकेले कम्प्यूटर से. यदि आप सोच रहे हैं अप्लाई करने का मैप रिड़ूस किसी लर्निंग अल्गोरिद्म में, उसे तीव्र करने के लिए. समानांतर करने से कॉम्प्यूटेशन को विभिन्न कम्प्यूटर्ज़ पर, प्रमुख प्रश्न जो आपको अपने आप से पूछना चाहिए है, क्या आपका लर्निंग अल्गोरिद्म व्यक्त किया जा सकता हैं एक समेशन की तरह ट्रेनिंग सेट पर? और ऐसा होता है कि बहुत से लर्निंग अल्गोरिद्म्स वास्तव में किए जा सकते हैं व्यक्त कम्प्यूट करते हुए सम फ़ंक्शन्स की तरह ट्रेनिंग सेट पर और कॉम्प्यूटेशनल क़ीमत रन करने की उन्हें एक बड़े डेटा सेट पर है क्योंकि उन्हें आवश्यकता है सम करने की एक बहुत बड़े ट्रेनिंग सेट पर. तो, जब भी आपका लर्निंग अल्गोरिद्म व्यक्त किया जा सकता हैं एक सम की तरह ट्रेनिंग सेट के और जब भी अधिकांश कार्य लर्निंग अल्गोरिद्म का किया जा सकता हैं व्यक्त सम की तरह ट्रेनिंग सेट के, तब मैप रिड़ूस हो सकता है एक अच्छा विकल्प स्केल करने के लिए आपके अल्गोरिद्म को एक बहुत बड़े डेटा सेट से. चलिये सिर्फ़ एक और उदाहरण पर नज़र डालते हैं. मान लो हम चाहते हैं इस्तेमाल करना कोई एक एडवांस्ड ऑप्टिमायज़ेशन अल्गोरिद्म. तो, चीज़ें जैसे, आप जानते हैं, एल-बी एफ़ जी एस कॉंजुगेट ग्रेडीयंट और इसी प्रकार. मान लो हम चाहते हैं ट्रेन करना एक लजिस्टिक रेग्रेशन अल्गोरिद्म का. उसके लिए, हमें कम्प्यूट करनी हैं दो प्रमुख संख्याएँ. पहली है एडवांस्ड ऑप्टिमायज़ेशन अल्गोरिद्म के लिए, जैसे आप जानते हैं, एल-बीएफ़जीएस और कॉंजुगेट ग्रेडीयंट. हमें देना है इसे एक रूटीन कम्प्यूट करने के लिए कॉस्ट फ़ंक्शन ऑप्टिमायज़ेशन अब्जेक्टिव का. और इसलिए लजिस्टिक रेग्रेशन के लिए, आप याद करें कि एक कोस्ट फ़ंक्शन के पास है इस प्रकार का सम ट्रेनिंग सेट पर, और इसलिए यदि आप समानांतर कर रहे हैं दस मशीन्स पर, आप करेंगे विभाजित ट्रेनिंग सेट को दस मशीन्स पर और करवाएँगे दस मशीन्स से कम्प्यूट सम इस संख्या का केवल दसवें हिस्से पर ट्रेनिंग डेटा के. तब, दूसरी चीज़ जो एडवांस्ड ऑप्टिमायज़ेशन अल्गोरिद्म को चाहिए, वह है एक रूटीन कम्प्यूट करने के लिए इन पारशियल डेरिवेटिव टर्म्ज़ को. एक बार फिर, ये डेरिवेटिव टर्म्ज़ जिनके लिए यह एक लजिस्टिक रेग्रेशन है, की जा सकती हैं व्यक्त सम की तरह ट्रेनिंग सेट पर, और इसलिए एक बार फिर से, समान हमारे पहले के उदाहरण के, आप के पास होगा प्रत्येक मशीन कम्प्यूट करते हुए वह समेशन केवल कुछ छोटे अंश पर आपके ट्रेनिंग डेटा के. और अंत में, कम्प्यूट कर लेने के बाद ये सब चीज़ें, वे तब भेज सकते हैं उनके परिणाम केंद्रीय सर्वर को, जो कर सकता हैं तब जमा पर्शियल समज़ को. यह कॉरेस्पॉंड करता हैं जमा करने को वे दसवें आइ या दसवें आई जे वेरीयबल्स को, जो कम्प्यूट किए गए थे उसी मशीन संख्या आइ पर, और इसलिए केंद्रीय सर्वर कर सकता है सम इन चीज़ों का और पा सकता है ओवरॉल कोस्ट फ़ंक्शन और पा सकता है ओवरॉल पर्शियल डेरिवेटिव, जो आप तब भेज सकते हैं एडवांस्ड ऑप्टिमायज़ेशन अल्गोरिद्म को. तो, अधिक विस्तार से, लेने से दूसरे लर्निंग अल्गोरिद्म्स और व्यक्त करके उन्हें इस प्रकार की समेशन रूप में या व्यक्त करके उन्हें टर्म्ज़ में कम्प्यूट करने के लिए सम फ़ंक्शंज़ का ट्रेनिंग सेट पर, आप कर सकते हैं इस्तेमाल मैप रिड़ूस टेक्नीक का समानांतर करने के लिए दूसरे लर्निंग अल्गोरिद्म्स को भी, और स्केल कर सकते हैं उन्हें बहुत बड़े ट्रेनिंग सेट्स पर भी. अंत में, एक आख़िरी टिप्पणी, अभी तक हम चर्चा कर रहे थे मैप रिड़ूस अल्गोरिद्म की जो आपको समानांतर करने दे सकता हैं बहुत से कम्प्यूटर्ज़ पर, शायद विभिन्न कम्प्यूटर्ज़ पर एक कम्प्यूटर क्लस्टर में या विभिन्न कम्प्यूटर्ज़ पर एक डेटा सेंटर में. ऐसा होता हैं कि कभी कभी यदि आपके पास एक अकेला कम्प्यूटर ही है, मैप रिड़ूस तब भी अप्लाई कर सकते हैं. ख़ासतौर पर, बहुत से सिंगल कम्प्यूटर्ज़ पर आजकल, आपके पास हो सकते हैं बहुत से प्रासेसिंग कोरज़. आपके पास हो सकते हैं बहुत से सीपीयू. और प्रत्येक सीपीयू में हो सकते हैं बहुत से प्रासेसिंग कोरज़. यदि आपके पास है एक बड़ा ट्रेनिंग सेट, आप क्या कर सकते हैं, यदि, मान लो, आपके पास है एक कम्प्यूटर 4 कम्प्यूटिंग कोरज़ के साथ, आप क्या कर सकते हैं, एक सिंगल कम्प्यूटर पर भी आप विभाजित कर सकते हैं ट्रेनिंग सेट को हिस्सों में और भेज सकते हैं ट्रेनिंग सेट को विभिन्न कोर्स पर एक सिंगल बॉक्स में, जैसे एक सिंगल डेस्क्टाप कम्प्यूटर में या एक सिंगल सर्वर में और इस्तेमाल कर सकते हैं मैप रिड़ूस इस प्रकार विभाजित करने के लिए वर्क लोड को. प्रत्येक कोर तब कर सकता है सम, मान लो, एक चौथाई आपके ट्रेनिंग सेट पर, और तब वे ले सकते हैं पर्शियल समज़ और मिला / जोड़ सकते हैं उन्हें, पाने के लिए समेशन पूरे ट्रेनिंग सेट पर. लाभ सोचने का मैप रिड़ूस के बारे में इस तरह से है कि, समानांतर करने का एक सिंगल मशीन पर ही, बजाय समानांतर करने के विभिन्न मशीन्स पर है कि, इस तरह आपको नहीं करनी पड़ती चिंता नेटवर्क लेटेन्सी की क्योंकि पूरा कम्यूनिकेशन, सारा भेजना [एक्स एक्स] का पीछे और आगे, वह पूरा होता है एक सिंगल मशीन में. और इसलिए नेटवर्क लेटेन्सी हो जाती है एक काफ़ी कम समस्या तुलना में यदि आप इस्तेमाल कर रहे होते इसे विभिन्न कम्प्यूटर्ज़ पर एक डेटा सेंटर में. अंत में, एक आख़िरी चेतावनी समानांतर करने में एक मल्टी-कोर मशीन पर. निर्भर करते हुए विस्तृत जानकारी पर आपकी इम्प्लमेंटेशन की, यदि आपके पास है एक मल्टी-कोर मशीन और यदि आपके पास हैं कुछ नूमेरिकल ऐल्जेब्रा लाइब्रेरीज़. ऐसा होता हैं कुछ नूमेरिकल लिनीअर ऐल्जेब्रा लाइब्रेरीज़ कर सकती हैं समानांतर अपने आप उनके लिनीअर ऐल्जेब्रा ऑपरेशंज़ को बहुत से कोर्स पर उस मशीन पर. अत यदि आप भाग्यशाली हैं कि आप इस्तेमाल कर रहे हैं वे नूमेरिकल लिनीअर ऐल्जेब्रा लाईब्रेरीज़ और निश्चय ही यह अप्लाई नहीं करता है प्रत्येक लाइब्रेरी को. यदि आप इस्तेमाल कर रहे हैं उनमें से एक लाइब्रेरी और यदि आपके पास है एक अच्छी वेक्टराइज्ड इम्प्लमेंटेशन लर्निंग अल्गोरिद्म की. कभी कभी आप सिर्फ़ इम्प्लमेंट कर सकते हैं आपका स्टैंडर्ड लर्निंग अल्गोरिद्म एक वेक्टराइज्ड तरीक़े से और नहीं करते चिंता समानांतर करने की और नूमेरिकल ऐल्जेब्रा लाइब्रेरीज़ उसमें से कुछ आपके लिए कर सकती हैं. तो आपको इम्प्लमेंट करने की आवश्यकता नहीं है [एक्स एक्स] लेकिन किसी और प्रॉब्लम के लिए, लाभ उठाने के लिए इस प्रकार की मैप रिड़ूस इम्प्लमेंटेशन का, ढूँढना और इस्तेमाल करना इस मैप रिड़ूस फ़ॉर्म्युलेशन को और समानांतर करना विभिन्न मशीन्स पर अपने आप शायद होगा एक बेहतर आइडिया भी और आपको करने देगा तीव्र आपके लर्निंग अल्गोरिद्म को. इस विडीओ में, हमने बात की मैप रिड़ूस पद्धति की समानांतर करने के लिए मशीन लर्निंग को लेकर एक डेटा और फैला कर उसे बहुत से कम्प्यूटर्ज़ पर एक डेटा सेंटर में. यद्यपि ये आइडियास हैं क्रिटिकल / समीक्षात्मक  समानांतर करने के लिए बहुत से कोर्स पर एक सिंगल मशीन में भी. आजकल कुछ अच्छे ओपन सोर्स इम्प्लमेंटेशन उपलब्ध हैं मैप रिड़ूस के, तो बहुत से यूज़र्ज़ हैं ओपन सोर्स सिस्टम में जिसे कहते हैं हडूप और इस्तेमाल करके आपकी अपनी इम्प्लमेंटेशन या इस्तेमाल करके किसी और की ओपन सोर्स इम्प्लमेंटेशन, आप कर सकते हैं इस्तेमाल इन आइडियास को समानांतर करने के लिए लर्निंग अल्गोरिद्म्स को और कर सकते हैं रन उन्हें एक काफ़ी बड़े डेटा सेट्स पर जो है सम्भव एक अकेले कम्प्यूटर के इस्तेमाल से.