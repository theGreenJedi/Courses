1
00:00:00,000 --> 00:00:07,306
前回のビデオでは、確率的最急降下法について議論した、
そしてそれがどうバッチ最急降下法に比べて早くなりうるのかも。

2
00:00:07,306 --> 00:00:12,866
このビデオでは、ミニバッチ最急降下法と呼ばれる、もう一つのこの種の変種について見ていこう。

3
00:00:12,866 --> 00:00:16,906
それは時には、確率的最急降下法よりもちょっと早くなる事すらある。

4
00:00:16,906 --> 00:00:22,046
まとめてしまうと、ここまで議論してきたアルゴリズムは

5
00:00:22,046 --> 00:00:26,619
バッチ最急降下法は、一回のイテレーションに全てのm個の手本をなめる物だった。

6
00:00:26,619 --> 00:00:31,792
一方確率的最急降下法は一回のイテレーションで手本一つだけを見る。

7
00:00:31,792 --> 00:00:36,120
そしてミニバッチ最急降下法は、この間のどこかしらに位置する。

8
00:00:36,120 --> 00:00:46,559
具体的には、このアルゴリズムで各イテレーションでb個の手本をなめる、ここでbはミニバッチサイズと呼ばれるパラメータ。

9
00:00:46,559 --> 00:00:52,688
つまりこれは、バッチ最急降下法と確率的最急降下法の間あたりを狙うアイデアだ。

10
00:00:52,688 --> 00:00:57,488
これはバッチ最急降下法みたいな物だが、もっと小さなバッチサイズを使う、っていう所が違う。

11
00:00:57,488 --> 00:01:08,672
典型的なbの値の選択肢としては、10とかその辺で、典型的と言える範囲はだいたい2から100くらいの間かな。

12
00:01:08,672 --> 00:01:13,668
以上がミニバッチサイズの典型的なサイズだ。

13
00:01:13,668 --> 00:01:21,153
そしてアイデアとしては、一度に手本を一つだけ使うのでもm個全部使うのでも無く、一度にb個だけの手本を使っていく、という物。

14
00:01:21,153 --> 00:01:28,833
これをインフォーマルに書き下すと、まずb個の手本を取り出して、、、この例ではbを10としようか、

15
00:01:28,833 --> 00:01:37,782
すると次の10個の手本をトレーニングセットから取り出す。つまり、10個の手本の場合、インデックスはxi, yiから

16
00:01:37,782 --> 00:01:46,114
x (i+9), y(i+9)までの10個の手本の集合が得られる。

17
00:01:46,114 --> 00:01:57,794
つまり全部で10個の手本が得られて、それに対して本質的には最急降下法のアップデートを実行する。

18
00:01:57,794 --> 00:02:19,012
学習率 掛ける 1/10掛ける k=iからi+9までの和を取る事のhの下付き添字シータ x(k) - y(i) 掛けるx(k)のj。

19
00:02:19,012 --> 00:02:27,213
この式では、微分項の和は10個の手本に渡って取られる。

20
00:02:27,229 --> 00:02:32,370
だからこれは10個で、これがバッチサイズで、i+9もまた、

21
00:02:32,370 --> 00:02:39,384
この9もパラメータbの選択した値から来てる。
そしてこれを増やしていって、10番目のiまで来たら、

22
00:02:39,384 --> 00:02:46,755
そのあとは次の10個の手本に進む、それを以後続けて進めていく。

23
00:02:46,755 --> 00:02:50,584
だからアルゴリズム全体を書きだすと、

24
00:02:50,584 --> 00:02:55,231
ここでのインデクシングをシンプルにする為に、

25
00:02:55,231 --> 00:02:59,843
ミニバッチサイズとして10を、トレーニングセットのサイズとして1000を想定すると、

26
00:02:59,843 --> 00:03:05,045
我らがやるのは、こんなforループ、for i=1, 11, 21...など、

27
00:03:05,045 --> 00:03:07,926
つまり10ずつのステップで進む、何故なら一度に10個の手本を見るから。

28
00:03:07,926 --> 00:03:13,648
そしてこの種の最急降下法アップデートを一度に10個の手本を用いて実行する。

29
00:03:13,648 --> 00:03:21,566
ここでこの10とi+9はミニバッチサイズを10と選んだ結果だ。

30
00:03:21,566 --> 00:03:27,435
そしてこの外側のforループは、991で終わってる、

31
00:03:27,435 --> 00:03:34,457
何故なら、もしトレーニング手本が1000個なら、サイズが10の100ステップが、トレーニングセットを全部なめるのに必要だからだ。

32
00:03:34,457 --> 00:03:37,729
以上がミニバッチ最急降下法だ。

33
00:03:37,729 --> 00:03:43,219
バッチ最急降下法と比較すると、この手法もまた、進捗がより早くなる。

34
00:03:43,219 --> 00:03:49,487
動く例として今回もUS国勢調査の3億のレコードを見てみよう。

35
00:03:49,487 --> 00:03:55,621
その場合やるべき事は、まず最初の10個の手本を見て、パラメータシータを改善する為に

36
00:03:55,621 --> 00:04:00,873
歩を進める。つまりトレーニングセット全体をスキャンする必要は無い。

37
00:04:00,873 --> 00:04:05,377
最初の10個の手本しか見る必要がない。そうすれば歩を進める事が出来て、

38
00:04:05,377 --> 00:04:09,289
そして次にまた、二番目の10個の手本を見る、そしてパラメータをちょっと改善する。以下同様。

39
00:04:09,289 --> 00:04:14,186
つまり、こんな訳でミニバッチ最急降下法はバッチ最急降下法よりも早くなりうる。

40
00:04:14,186 --> 00:04:19,578
つまり、パラメータの改善を、たった10個の手本を見た後ですぐに始められる、

41
00:04:19,578 --> 00:04:24,836
各イテレーションで3億個の手本を一つ一つスキャンする必要がある代わりに。

42
00:04:24,836 --> 00:04:29,699
では、確率的最急降下法と比べた場合ミニバッチ最急降下法はどうだろう？

43
00:04:29,699 --> 00:04:38,237
つまり、一度に一個では無くて、なんでb個の手本を見たい、と思うのだろうか？

44
00:04:38,237 --> 00:04:42,044
その答えはベクトル化だ。

45
00:04:42,044 --> 00:04:47,450
具体的には、ミニバッチ最急降下法が確率的最急降下法を大きくアウトパフォームすると期待出来るのは

46
00:04:47,450 --> 00:04:50,817
良いベクトル化実装がある時だけだ。

47
00:04:50,817 --> 00:04:58,571
その場合、10個の手本に渡る和は、よりベクトル化した形で実行出来て、

48
00:04:58,571 --> 00:05:05,376
その方が10個の手本に対する計算が部分的に並列化されやすい。

49
00:05:05,376 --> 00:05:09,953
言い換えると、微分項を計算する為に適切なベクトル化実装を使えば、

50
00:05:09,953 --> 00:05:18,565
時には部分的に良い数値計算代数ライブラリが使えて、b手本に渡る微分の計算を並列化出来る、

51
00:05:18,565 --> 00:05:24,152
一方で確率的最急降下法のように一度に一つの手本しか見ないと、

52
00:05:24,152 --> 00:05:27,456
一度に一つの手本しか見ないと、並列化するような物が無いまま終わってしまう。

53
00:05:27,456 --> 00:05:29,824
少なくとも、相対的によりちょっとしか並列化する物が無い。

54
00:05:29,824 --> 00:05:34,866
ミニバッチ最急降下法の欠点の一つには、追加のパラメータbという、ミニバッチサイズという物が増える事で、

55
00:05:34,866 --> 00:05:39,006
そこでも時間を浪費するはめになるかもしれない、つまりもっと時間を食うという事だ。

56
00:05:39,006 --> 00:05:45,611
だが良いベクトル化した実装があれば、確率的最急降下法ですらよりも、早く走る事もある。

57
00:05:45,611 --> 00:05:52,937
以上がミニバッチ最急降下法だ。
これはある意味でバッチ最急降下法と確率的最急降下法の

58
00:05:52,937 --> 00:05:57,697
間をやるような物だ。

59
00:05:57,697 --> 00:06:02,626
そしてもしbにまともな値を選べば、、、私は普通b=10を使ってるが、

60
00:06:02,626 --> 00:06:07,343
それ以外の値でも、2から100の間あたりならこれもまともで良く使われている範囲と言える。

61
00:06:07,343 --> 00:06:11,917
そしてbの値を選んで、良いベクトル化した実装を使えば、

62
00:06:11,917 --> 00:06:15,917
確率的最急降下法よりもバッチ最急降下法よりも早くなる場合がある。