前回のビデオでは、確率的最急降下法について議論した、
そしてそれがどうバッチ最急降下法に比べて早くなりうるのかも。 このビデオでは、ミニバッチ最急降下法と呼ばれる、もう一つのこの種の変種について見ていこう。 それは時には、確率的最急降下法よりもちょっと早くなる事すらある。 まとめてしまうと、ここまで議論してきたアルゴリズムは バッチ最急降下法は、一回のイテレーションに全てのm個の手本をなめる物だった。 一方確率的最急降下法は一回のイテレーションで手本一つだけを見る。 そしてミニバッチ最急降下法は、この間のどこかしらに位置する。 具体的には、このアルゴリズムで各イテレーションでb個の手本をなめる、ここでbはミニバッチサイズと呼ばれるパラメータ。 つまりこれは、バッチ最急降下法と確率的最急降下法の間あたりを狙うアイデアだ。 これはバッチ最急降下法みたいな物だが、もっと小さなバッチサイズを使う、っていう所が違う。 典型的なbの値の選択肢としては、10とかその辺で、典型的と言える範囲はだいたい2から100くらいの間かな。 以上がミニバッチサイズの典型的なサイズだ。 そしてアイデアとしては、一度に手本を一つだけ使うのでもm個全部使うのでも無く、一度にb個だけの手本を使っていく、という物。 これをインフォーマルに書き下すと、まずb個の手本を取り出して、、、この例ではbを10としようか、 すると次の10個の手本をトレーニングセットから取り出す。つまり、10個の手本の場合、インデックスはxi, yiから x (i+9), y(i+9)までの10個の手本の集合が得られる。 つまり全部で10個の手本が得られて、それに対して本質的には最急降下法のアップデートを実行する。 学習率 掛ける 1/10掛ける k=iからi+9までの和を取る事のhの下付き添字シータ x(k) - y(i) 掛けるx(k)のj。 この式では、微分項の和は10個の手本に渡って取られる。 だからこれは10個で、これがバッチサイズで、i+9もまた、 この9もパラメータbの選択した値から来てる。
そしてこれを増やしていって、10番目のiまで来たら、 そのあとは次の10個の手本に進む、それを以後続けて進めていく。 だからアルゴリズム全体を書きだすと、 ここでのインデクシングをシンプルにする為に、 ミニバッチサイズとして10を、トレーニングセットのサイズとして1000を想定すると、 我らがやるのは、こんなforループ、for i=1, 11, 21...など、 つまり10ずつのステップで進む、何故なら一度に10個の手本を見るから。 そしてこの種の最急降下法アップデートを一度に10個の手本を用いて実行する。 ここでこの10とi+9はミニバッチサイズを10と選んだ結果だ。 そしてこの外側のforループは、991で終わってる、 何故なら、もしトレーニング手本が1000個なら、サイズが10の100ステップが、トレーニングセットを全部なめるのに必要だからだ。 以上がミニバッチ最急降下法だ。 バッチ最急降下法と比較すると、この手法もまた、進捗がより早くなる。 動く例として今回もUS国勢調査の3億のレコードを見てみよう。 その場合やるべき事は、まず最初の10個の手本を見て、パラメータシータを改善する為に 歩を進める。つまりトレーニングセット全体をスキャンする必要は無い。 最初の10個の手本しか見る必要がない。そうすれば歩を進める事が出来て、 そして次にまた、二番目の10個の手本を見る、そしてパラメータをちょっと改善する。以下同様。 つまり、こんな訳でミニバッチ最急降下法はバッチ最急降下法よりも早くなりうる。 つまり、パラメータの改善を、たった10個の手本を見た後ですぐに始められる、 各イテレーションで3億個の手本を一つ一つスキャンする必要がある代わりに。 では、確率的最急降下法と比べた場合ミニバッチ最急降下法はどうだろう？ つまり、一度に一個では無くて、なんでb個の手本を見たい、と思うのだろうか？ その答えはベクトル化だ。 具体的には、ミニバッチ最急降下法が確率的最急降下法を大きくアウトパフォームすると期待出来るのは 良いベクトル化実装がある時だけだ。 その場合、10個の手本に渡る和は、よりベクトル化した形で実行出来て、 その方が10個の手本に対する計算が部分的に並列化されやすい。 言い換えると、微分項を計算する為に適切なベクトル化実装を使えば、 時には部分的に良い数値計算代数ライブラリが使えて、b手本に渡る微分の計算を並列化出来る、 一方で確率的最急降下法のように一度に一つの手本しか見ないと、 一度に一つの手本しか見ないと、並列化するような物が無いまま終わってしまう。 少なくとも、相対的によりちょっとしか並列化する物が無い。 ミニバッチ最急降下法の欠点の一つには、追加のパラメータbという、ミニバッチサイズという物が増える事で、 そこでも時間を浪費するはめになるかもしれない、つまりもっと時間を食うという事だ。 だが良いベクトル化した実装があれば、確率的最急降下法ですらよりも、早く走る事もある。 以上がミニバッチ最急降下法だ。
これはある意味でバッチ最急降下法と確率的最急降下法の 間をやるような物だ。 そしてもしbにまともな値を選べば、、、私は普通b=10を使ってるが、 それ以外の値でも、2から100の間あたりならこれもまともで良く使われている範囲と言える。 そしてbの値を選んで、良いベクトル化した実装を使えば、 確率的最急降下法よりもバッチ最急降下法よりも早くなる場合がある。