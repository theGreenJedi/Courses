이번 비디오에서는, 
비용함수의 직감에 대해서 더 깊게 들어가보도록 하겠습니다.
이 비디오는 당신이 등고선 그래프와 익숙하다고 가정하겠습니다. 만약 등고선 그래프와 익숙하지 않다면,
이미지로 등고선에 대해 이해할 수 있습니다. 이 비디오에서 당신이 이해할 수 있든 없든
원한다면 건너뛰어도 좋습니다. 이 비디오에서 아마 여러분 중 몇분은,
등고선 그래프를 본적이 없어서 이해하기가 어려울 수도 있습니다.
만약 다른 비디오를 이해하고 있다면 이 부분을 보지 않아도 좋습니다.
여기에 우리가 주로 쓰던 공식이 있습니다. 가설, 파라메터, 비용함수, 
그리고 우리의 최적의 목표 기존의 비디오와는 다르게,
저는 저의 파라메터 Θ0과 Θ1을 비용 함수의 시각화를 위해서
만든 것으로 사용하겠습니다. 저번시간에 이어, 우리는 가설 h와
비용함수 j에 대해 이해했었습니다. 여기에 주택 가격에 대한 훈련 집합이 있고,
몇몇 가설들을 만들어봅시다. 이 일차함수처럼 생긴 것은
좋은 가설이 아닙니다. Θ0는 50이고 Θ1은 0.06, 
그리고 가설은 이 밑에 있는 일차함수 직선과 일치합니다.
이제 Θ0, Θ1에 값을 줘봅시다. 그래프가 일치해야합니다.
아시다시피, 비용함수는 오른쪽에 있습니다. 저번시간에 했던 내용은
Θ1만 가지고 계산했었습니다. 그 말인 즉슨, Θ1 함수는 이런식으로 생기게됩니다.
하지만 우리는 이제 2개의 파라메터를 쓸 것입니다. Θ0과 Θ1을 사용하겠습니다.
그리고 그래프도 좀 더 복잡해집니다. 우리가 1가지 파라메터만을 사용했을때 보다요.
그래프는 활 모양이 됩니다. 이제 2개의 파라메터를 가졌으니,
비용함수로 넘어가보겠습니다. 마찬가지로 활 모양과 비슷한 형태입니다.
사실 이 모양은 훈련 집합에  달렸습니다. 당신은 아마 이런 형태의 비용함수를
도출했을 수 있습니다. 네, 이건 3차원 그래프인데요.
축에 Θ0과 Θ1이 써 있습니다. 2개의 파라메터 
Θ0과 Θ1이 다르기때문에, 아마 다른 값의 비용함수 j(Θ0, Θ1)을 가지게 될겁니다.
그리고 높이는 표면으로부터 어떤 Θ0, Θ1의 점까지 입니다.
맞습니다 이것은 수평축입니다. 표면부터 점까지의 높이는
j Θ0, Θ1의 값을 나타냅니다. 그리고 여러분은 활 형태를 하고
있는 것을 볼 수 있을텐데요. 같은 그래프를 3D 도면에서 보여드리겠습니다.
여기에 3D도면이 있고, 수평축은 Θ1, 그리고 수직축은 j(Θ0, Θ1), 그리고
제가 이 그래프를 이런식으로 움직인다면, 느낌이 오시길 바랍니다.
오목한 형태의 표면이 만들어지고 이게 바로 비용함수 j의 형태입니다. 비용함수 j를 보여주기 위해
이런 3D표면을 계속 사용할 것은 아닙니다. 대신에 등고선 그래프를 사용하겠습니다.
아니면 등고선 형태라고도 말할 수 있습니다. 의미는 같다고 봅니다.
이 표면을 보여주기 위해서, 오른쪽에 등고선 형태의 예시가 있습니다,
축은 Θ0와 Θ1로 이루어져 있고요. 그리고 각각의 타원형, 
각각의 것들이 보여주는 것은 j(Θ0, Θ1)의 값과 같은 것을 보여주고 있습니다. 구체적으로 예를 들자면, 
이 점, 이 점, 이 점을 표시해보겠습니다. 제가 방금 분홍색으로 그린 세개의 점은 j(Θ0, Θ1)과 같은 값을 가지고 있습니다. 여기가 Θ0, Θ1 축입니다. 
그러나 이 세가지 점은 j(Θ0, Θ1)과 같은 값을 가지고 있습니다. 그리고 만약 전에 등고선 그래프를 본 적이 없다면,
상상해보세요. 활 형태의 함수가 스크린 밖으로 
나오고 있다고 할 때, 활의 가장 밑이 최소값입니다, 맞죠? 이 타원형의 중심, 중심부분을 봅시다.
그리고 활 형태가 스크린 밖으로 나온다고 했을 때, 나온다고 했을때, 각각의 타원들은
아시다시피 같은 높이입니다. 그리고 활 모양의 최소값은 제일 밑에 있죠. 등고선 형태는 이런식으로 파악하면 됩니다.
함수 j를 보는데 더 편리한 방법입니다. [sound] 그래서 이제 예시를 봅시다. 이 점이 보이시죠? 이 점에서 Θ0 값은 800이고,
Θ1 값은 약 -0.15입니다. 그래서 빨간색으로 표시한 이 점은
이 Θ0, Θ1쌍의 값과 같습니다. 사실 가설에서 Θ0이 800이라는 것은 수직축을 지나는 값이
대략 800이라는 말입니다. 그리고 경사는 약 -0.15가 됩니다.
그래서 이 일차함수는 현재 가설 h(x)와 비슷하지 않은
형태를 보이고 있습니다. 이 Θ0, Θ1값에서요. 
정말 잘 안맞는군요. 보시다시피 여기 있는 이 값은,
최소값과 상당히 멀리 떨어져있습니다. 최소값과 꽤 멀리 떨어져있고,
꽤 높은 비용을 쓰고있죠. 그 이유는 데이터와 비슷한 형태를 보이지 않기 때문입니다.
이제 다른 예제를 살펴봅시다. 여기에 다른 가설이 있는데, 
보시다시피 이것도 자료와 그닥 비슷한 형태는 아닙니다. 그렇지만 아까 했던 Θ0, Θ1값보다는 조금 나은 형태입니다. 맞죠?
여기서 Θ0의 값은 360입니다. Θ1의 값은 0과 같습니다.
Θ0은 360과 같다고 해봅시다. Θ0이 360, Θ0이 0일때, 
이 파라메터의 쌍은 저 가설과 일치합니다. 가설은 납작한 선의 형태를 보이고 있네요.
이것은 h(x)값이 360 + 0x 값과 같다는 뜻입니다. 그래서 저런 가설이 나오는 것입니다. 그리고 비용은 이 점에서 j함수의 높이입니다. 한쌍의 예시를 봅시다. Θ0의 값과 Θ1의 값이 만나서 
이 가설, h(x)를 도출해냅니다. 그리고 이것또한 그렇게 좋은 가설은 아닙니다.
실제로 최소값에서 많이 떨어져있습니다. 아까 예시는 최소값에서 많이 떨어져있지만,
이 예시는 최소값에서 꽤 가깝습니다. 그리고 자료와도 그렇게 다른 형태는 아닙니다. 이 Θ0의 값과 이 Θ1의 값이 만나는 점이 바로 h(x)값입니다. 
그리고 최소값은 아닙니다만, 꽤 비슷한 값입니다.
그래서 오차의 제곱은 가설과 훈련집합들의 거리의 제곱값이라는 것입니다.
실제로 거리제곱의 합말입니다. 최소값과 거의 비슷한 형태를 보이고 있습니다. 최소값은 아니지만 말입니다.
그래서 이 형태는 비용함수 j를 이해하는데
더 쉽게 해줍니다. 그래서 더 좋은 가설은 비용함수 j의 최소값과 비슷할 수록
더 좋은 가설입니다. 그래서 오늘 강의에서, 
더 효과적인 알고리즘이 어떤 것인지에 대해 배웠습니다. 자동적으로, Θ0, Θ1, 그리고 함수 j의 
최소값을 구하는 법도 배웠습니다, 맞죠? 그리고 우리가 하기 싫은 것은, 아시다시피 도표에서 점을 직고,
수작업으로 숫자를 읽는 것입니다. 좋은 방법은 아니죠.
사실 다음시간에 우리는 더 복잡한 예시에 대해 볼 것입니다.
우리는 고차원 형태와 더 많은 파라메터를 사용할 것입니다. 이 과정 끝에 쯤에 가면, 
사실 직접 그래프를 그릴 수는 없습니다. 그래서 더 시각화하기가 어려워집니다. 결국 우리가 해야할 것은
Θ0, Θ1 그리고 함수의 최소값을 찾는 것입니다. 다음시간에는 자동적으로
Θ0, Θ1, 그리고 비용함수 j의 최소값을 찾아주는 알고리즘에 대해 
공부해보겠습니다.