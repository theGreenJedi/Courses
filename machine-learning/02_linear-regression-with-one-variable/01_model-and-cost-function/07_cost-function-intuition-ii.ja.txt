このビデオでは、もっと深く掘り下げて、目的関数が何をしているかさらに直感的理解を 深めていきます。このビデオは皆さんが等高線図をご存知であることを前提にしています。 もし等高線図に馴染みがなければ、このビデオで見る図の中には 意味をなさないものがあるかもしれません。でも大丈夫です。このビデオを飛ばしたり その一部の意味が等高線図を見たことがないためによくわからなくても、 それは大丈夫です。こうした部分が抜けてもこのコースの他の内容の理解には 支障ありません。ここに、いつも通りの問題の定式があります。 仮説、パラメータ、目的関数、そして最適化の目的です。 前のビデオとは異なり、今回は両方のパラメータをキープし、 theta 0 と theta 1 を使って目的関数の可視化を行います。 さて、前と同じように、仮説 h と 目的関数 J を理解したいと思います。 ですから、ここに住宅価格の訓練セットがあり、適当に仮説を設定しましょう。そうですね、こんな感じに。 これは特に良い仮説ではありませんが、theta 0 = 50 theta 1 = 0.06 と設定するとこの下の仮説になり、 それがこの直線に対応します。さて、こうしたtheta 0 と theta 1 の値に対して、 それに対応する目的関数を右にプロットしたいと思います。 前回の場合は、theta 1 しかありませんでしたので、このようなプロットを theta 1 の関数として作成しました。しかし今回はパラメータが theta 0 と theta 1 の二つです。 ですからプロットは少し複雑になります。実は パラメータが一つだけであれば、プロットはこのように弓なりの形の関数になります。 今回のようにパラメータが二つある場合、実は目的関数は また弓なりの形に似たものになります。そして実際に、訓練セット次第では、 目的関数はこのようなものになるかもしれません。さて、これは三次元表面プロットです。 その軸は theta 0 と theta 1 とラベル付けされています。 ですから、二つのパラメータ theta 0 と theta 1 を変えるに従い、 目的関数 J(theta 0, theta 1) の値も変わります。 そしてこの表面の高さが theta 0 と theta 1 の特定の点の上に来ています。これが、縦軸です。 ある点の表面の高さは、J(theta 0, theta 1) の値を示しています。 そして、ご覧になってお分かりの通り、これはボウルの形状をしています。このプロットを 三次元的に見てみましょう。これは、同じプロットを三次元にしたものです。横軸はtheta 0 と theta 1 、縦軸は J(theta 0, theta 1) 、そしてこのプロットを回転させてみると、感覚的に 表面がボウルの形をしているのがお分かりいただけると思います。これが目的関数 J の形です。さて、図解を目的として今後このビデオでは このような三次元表面を使って目的関数 J をお見せすることはしません。代わりに、 等高線図を使って このような表面をお見せします。さて、ここに 等高線図の例が右にあります。横軸と縦軸は theta 0 と theta 1 です。そして、これらの長円形、これらの楕円形がそれぞれ示しているのは J(theta 0, theta 1) の値が同じになる点の一組です。ですから 具体的に、例えば、その点と、その点と、その点を選びます。 今マジェンタ色で書いたこの三つの点は全て同じ値です。 J (theta 0, theta 1) の値が。これらは、軸は theta 0 と theta 1 となっていますが、これら三つの値が同じなのは、J(theta 0, theta 1) に対してです。 そしてもし以前にあまり等高線図を見たことがなければ、想像してみて下さい。 ボウルの形をした関数が画面から飛び出していると。最小値、 つまり、ボウルの底は、この点です。分かりますか。この真ん中、 同中心の楕円の真ん中です。そしてボウルの形をしたものが、このように画面から飛び出していると 想像してください。そして、これらの楕円はそれぞれ同じ高さで 画面から飛び出していると。そしてボウルの最小値がちょうどそこにあると。ですから、 等高線図は、目的関数 J を可視化する一つの方法、 たぶんもっと便利な方法です。では、いくつか例を見てみましょう。こちらに、 ある特定の点があります。そしてこれは、だいたい、theta 0 = 800、 そして多分 theta 1 = -0.15 ぐらいでしょう。そしてこの点、 この赤い点は、theta 0、theta 1 のある特定の値の組み合わせに対応します。 そして実際に、それはこの仮説に対応しています。theta 0 は ほぼ 800、つまり縦軸と 800 あたりで交差し、そして傾きはほぼ -0.15です。さて、この線は、データに対してあまりよく 適合していません。この仮説 h(x) とこの値の theta 0 と theta 1, これは実にあまりデータによくフィットしているとは言えません。ですから、その評価値、 そこにある値は、最小値からはほど遠いということが分かります。 これは、かなり遠く、かなり高い評価値です。これはあまりにもデータによくフィットしていないからです。 さらにいくつか例を見てみましょう。さて、ここに別の仮説があります。 これも、それほどデータにフィットしてはいませんが、多少はましなようです。ですから、これがその点、 パラメータ theta 0 と theta 1 の値です。 ですから、theta 0 の値は、これは約 360 です。そしてtheta 1 の値は = 0 です。ではこれを書き出しましょう。theta 0 = 360、 theta 1 = 0。そしてこの一組のパラメータはこの 仮説に対応し、それはこの横線に対応します。これは h(x) = 360 + 0 * x です。ですからこれが仮説です。そしてこの仮説にも評価値があり、そして その評価値は、その点での J 関数の高さとしてプロットされています。 さらに二つほど例を見てみましょう。ここにもう一つあります。この値の theta 0 と この値の theta 1 は、この仮説 h(x) に対応します。 そしてまた、データに対しあまりよいフィットではありません。事実、最小値から遠ざかっています。最後の例として、 これは完全には最小値ではありませんが、かなり最小値に近くなっています。ですから、これはそれほど データへのフィットは悪くありません。ある特定の値の theta 0 に対し その値がなんであれ、そして特定の値の theta 1 では、 特定の h(x) が得られます。これは最小値にはなっていませんが、かなり近くなっています。 二乗誤差の総和は、訓練サンプルと仮説の間の 距離の二乗の総和です。実際、これは距離の二乗の総和ですよね。 こうした全ての誤差の。これはかなり最小値に近くなっています、 完全に最小値ではないにしろ。さて、こうした図解を通して、 目的関数 J の値が何か、どのような形をしていて、 どのように異なる仮説に対応するか、そしていかに仮説がよいほど、対応する点が、目的関数 J の最小値に より近くなるか、お分かり頂けたと思います。さて、もちろん、 本当に欲しいのは、効率的なアルゴリズム、効率的なソフトウェアを使って、 自動的に目的関数 J を最小化する theta 0 と theta 1 の値を見つけることです。 私たちが避けたいのは、 こうした点をプロットして目視で数値を読み取っていくようなソフトウェアを書くことです。 それは、あまり良いやり方ではありません。そして、事実、後ほど見る通り もっと複雑な例を見る場合、高次元の図でより多くのパラメータ を扱うことになり、結果的に、後で実例をいくつか このコースで見ますが、こうした図をプロットすることはできず、 可視化がより困難になって行きます。ですから、私たちが欲しいのは この関数を最小化するような theta 0 と theta 1 の値を見つけてくれるソフトウェアです。そして 次のビデオで、自動的に目的関数 J を最小化するような theta 0 と theta 1 の値を見つけるアルゴリズムについてお話して行きます。