저번시간에 우리는 비용함수 j를 
구하는 법을 배웠습니다. 이번 시간에는, 기울기 하강이라고 불리는 비용함수 j의 최소값을 구하는
알고리즘에 대해 배워보려합니다. 기울기 하강은 자주
사용되는 알고리즘으로 선형회귀에서만 사용되는
알고리즘이 아닙니다. 기계학습의 모든 곳에서
실제로 사용되고 있습니다. 이 강의의 끝 쯤에,
우리는 다른 함수들의 최소값을 구하기 위해 기울기 하강 알고리즘을 사용할 것입니다. 그래서 이번 비디오에서, 
임의의 함수 j의 최소값을 구하기 위해 기울기 하강 알고리즘을 사용하고,
이 비디오의 끝 쯤에, 선형회귀를 공부하기 위해,
비용함수 j에도 적용을 시켜보도록 하겠습니다. 여기에 문제 조건이 있습니다. 선형회귀의 비용함수인 
함수 j(Θ0, Θ1)이 있다고 가정해봅시다. 우리가 최소화 하고자 하는 
함수라고 합시다. 그리고 우리는 함수 j(Θ0, Θ1)의 최소값을 구하는 
알고리즘을 찾으려고 합니다. 한편으로, 기울기 하강은 더 많은 일반적인 함수들에 적용된다는 것을 
명심합시다. 그래서 만약 함수 j 가 있고, Θ0, Θ1, 그리고 Θ2, ... Θn 까지고 있다고 가정해봅시다.
그리고 Θ0을 최소화하려고 합니다. 함수 j 의 Θ0부터 Θn까지의 값을 
최소화하려고 합니다. 그리고 다시한번 기울기 하강은 더 많은 일반적인 문제를 푸는 알고리즘을
말씀드립니다. 하지만 간결하게 하기 위해, 
표기를 간단하게 하기위해 공식을 쓰는 것에 더 성공적으로 하기위해 저는 이 비디오에서 2가지 파라메터만을 
사용하겠습니다. 여기에 기울기 하강 알고리즘의
개념이 있습니다. 우리는 제일 먼저 Θ0과 Θ1의 초기값들을 추측해봐야합니다. 어떤 값인지 사실 중요하지는 않지만,
일반적으로 사용되는 값은 Θ0은 0으로 Θ1도 0으로 설정합니다.
그들을 모두 0으로 초기화 하는 것입니다. 기울기 하강 알고리즘에서 우리는 
Θ0과 Θ1을 조금씩 바꾸면서 j(Θ0, Θ1)을 조금이라도 줄이기 위해서입니다. 우리는 아마 최소값을 구할 수
있을지도 모릅니다. 이제 그림을 보며 기울기 하강이 
어떤 일을 하는지 봅시다. 이 함수를 최소화시키려고 해봅시다. 그래서 축을 살펴보시면, 
이 값은 Θ0. 그리고 수평축에 Θ1이 있습니다. 
그리고 함수 j는 수직축입니다. 그래서 표면으로부터의 높이는
j의 값을 보여줍니다. 우리는 어떤 Θ0과 Θ1의 점에서 
시작해보겠습니다. Θ0, Θ1값을 고른다고 가정해봅시다. 그래서 이 함수의 면의 어떤 점에서
만나게됩니다. 그래서 Θ0이 어떤 값이든, 
Θ1은 이 점에 있게됩니다. 제가 0, 0으로 초기화했었습니다. 하지만 다른 값으로도 초기화할 수 있습니다. 그래서 이 형태에 구멍이 있다고 생각해봅시다. 초록 잔디가 깔린 공원에 두개의 언덕이 있고 물리적으로 언덕의 꼭대기 위에 서있다고 가정해봅시다.
당신의 공원에서 작은 빨간색 언덕위에 말입니다. 기울기 하강에서, 우리는
360도를 돌려 보겠습니다. 만약 우리가 조금씩 걸어 내려간다고 할때, 작은 걸음걸이로
언덕을 최대한 빠르게 내려가고자 할 때, 어떤 길이 가장 빠른 길일까요? 밑으로 내려가자고 한다면, 물리적으로 밑으로 빨리 내려가려고
한다고 할 때, 그리고 지금 표시한 이 점에,
당신이 서있다고 가정해봅시다. 당신은 주위를 둘러보며 언덕을 내려가는
가장 빠른 길을 찾습니다. 그 길은 대충 이런 길일 것입니다. 좋습니다. 이제 당신은 언덕 위
새로운 지점에 서있습니다. 다시 한번 주위를 둘러봅시다. 어느 쪽으로 가야 가장 조금 걸으면서,
밑으로 내려갈 수 있을까요? 내려가기 위해 또 다른 길로 가봅시다. 이렇게 또 계속 이동합니다. 새로운 지점에서 주위를 둘러봅니다. 어떤 길이 밑으로 가장 빨리
내려갈 수 있을까요? 또 조금 걷고, 또 조금 걸어봅시다. 여기까지 도달하기 위해, 
지역적으로 최소의 거리를 선택했습니다. 기울기 하강은 흥미로운 개념입니다. 기울기 하강을 처음 시작했을 때,
우리는 이 지점에서 시작했습니다. 여기에서요, 맞죠? 이번에는 이 점에서 시작해봅시다. 이제 우리는 초기화된 기울기 하강 알고리즘을 
가지고 있다고 해봅시다. 이 위에 있는 지점에서
기울기 하강을 초기화한다고 해봅시다. 그리고 계속해서 그 과정을 반복해봅시다.
이 지점에서 주위를 둘러봅니다. 그리고 가장 적은 걸음의 기울기로
발걸음을 옮겨봅시다. 그리고 주위를 둘러보고, 
또 다른 걸음을 걷습니다. 그리고 몇걸음을 더 걷는다면, 기울기하강은 두번째 
지역적 최적값을 도출해 낼 것입니다. 그래서 만약 당신이 이 지점에서 시작했다면, 여기에 있는 지역 최적값으로 도달했을 것입니다.
하지만 당신은 다른곳에서 시작했죠. 그래서 다른 지역적 최적값에
도달하게 되는 겁니다. 이 기울기 하강의 특징에 대해서는 나중에 좀 더 이야기해보도록 합시다. 이것이 그래프에 대한 개념입니다. 수학으로 가봅시다. 기울기 하강 알고리즘의 개념입니다. 다시 한번 그 개념을 반복해봅시다. 파라메터 Θj를 Θj를 활용해서 
업데이트 해볼겁니다. 여기의 이 말은 α번 빼라는 이야기입니다.
아시겠죠? 한번 봐 봅시다.
이 공식에는 많은 의미가 숨어있어요, 여기있는 이 기호, := 는 할당받는 것을 의미합니다.
할당기호입니다. 그래서 간단하게 말하자면, 
a := b라는 공식이 있을 때, 컴퓨터에서 이 의미는 
b의 값을 a에 씌운다는 것입니다. 그래서 b의 값과 같다라는 의미입니다. 또한 a := a + 1 의 식으로도 쓰일 수 있습니다. 이 식의 의미는 a값에 1을 더한다는 의미입니다. 반대로 등호을 사용하게 되면 a = b라고 쓰게 된다면, 
이것은 참거짓 의미입니다. 맞죠? 제가 만약 a = b라고 썼다면, 저는 a값이 b와 같다고 주장하고 있는 겁니다. 그래서 왼쪽에, 이건 컴퓨터 코드인데요, 왼쪽에는 우리가 새 값으로 
지정할 값을 놓습니다. 오른쪽에는 대입 될 값을 놓습니다. a := b일때 a는 b값이 되므로, 
a := a + 1의 의미는 a값에 1을 더해준다는 의미가 됩니다.
a = a + 1이라고 쓰면 틀린 공식이 됩니다. a 는 절대 a + 1과 같은 값이 될 수없기 때문이죠. 알겠죠? 첫번째 명제에 대한 설명이였습니다. 여기에 있는 α값은 훈련비율이라고 불립니다. 그래서 α가 의미하는 바는 기본적으로 우리가 언덕을 내려가기 위해 얼만큼
큰 걸음을 내딛어야하는가 에 대한것입니다. 그래서 만약 α값이 매우 크다면, 
꽤 공격적인 기울기 하강이 될것입니다. 그리고 우리가 언덕을 내려가기 위해 
걷는 걸음도 매우 클 것이고요. 만약에  α값이 매우 작다면, 
우리는 매우 작은 걸음을 걷게 될 것입니다. 나중에 α의 값을 어떻게 정하는 지에 대해
더 자세히 이야기하겠습니다. 마지막으로 여기에 있는 용어는
미분계수입니다. 지금은 이 개념에 대해 설명하지 않겠습니다만, 나중에 정확히 어떤 것인지 
설명드리겠습니다, 아시겠죠? 그리고 아마 여러분들중 몇분은
계산하는 것에 익숙하시겠지만, 혹시 계산하는 것에 익숙하지 않다고 해도,
걱정하지마세요. 이 식을 풀기위해 무엇을 알아야하는지
설명 드리겠습니다. 이제, 기울기 하강의 좀 더 
자세한 개념에 대해 설명드리겠습니다. Θ0 과 Θ1에 대해서는 아시죠? 여기에 j = 0이고 j = 1이라고 정의되어 있습니다. 이제 Θ0의 값과 Θ1의 값을 바꿀겁니다. 그리고 이 공식을 값을 바꾸기위해 어떻게 사용해야하는지에 대해 설명드리겠습니다. 계속해서 Θ0과 Θ1값을 바꾸기를 원하고 있습니다. 그래서 이 공식에서 우리는
Θ0 := Θ0 := Θ0 - 어떤값 이라고 두겠습니다.
그리고 Θ1 := Θ1 - 어떤값 이라고 둡니다. 이 식을 계산하기 위해서 당신은
오른쪽을 풀어야합니다. 맞죠? Θ0과 Θ1을 동시에 계산해봅시다. 같은 시간에 Θ0과 Θ1값을 바꿉니다. 의미한 것이 뭔지 말해두는 것이 좋겠습니다. 기울기 하강에서 가장 적합한 값은 이 값이 됩니다. temp0이 temp1값과 같다고 둬 봅시다. 그래서 오른쪽에 있는 공식을 계산하고 temp0에 계산한 값을 집어 넣습니다.
그리고 temp1 값은 Θ0과 Θ1에 동시에 들어가게 되는데요,
그게 바로 그게 바로 올바른 대입입니다. 반대로, 여기에 틀린 공식이 있습니다. 
그리고 이 공식은 동시에 값이 대입되자 않습니다. 그래서 틀린 대입에서는,
우리는 temp0값을 계산하고 Θ0값을 바꿉니다.
그리고 temp1을 계산하고 temp1 값을 바꿉니다. 그리고 오른쪽의 공식과 왼쪽의 공식의 차이는 여기 밑을 보시면 이 단계에서 이미 당신은 Θ0값을 바꿨습니다. 그리고 새로운 Θ0의 값을, 
미분계수를 계산하기 위해 사용합니다. 그리고 왼쪽에 있는 temp1에 다른 값을 주게 됩니다. 왜냐면 이 공식에서 Θ0에 새로운 값을
대입했기 때문입니다. 그래서 이 오른쪽에 있는 기울기 하강에서는 맞지않는 공식입니다, 아시겠죠? 그래서 왜 동시에 값을 바꿔야 하는지에 대해서는
설명드리지 않겠습니다. 이것이 주로 기울기 하강에서 값을
대입하는 방식입니다. 나중에 더 자세히 이야기 해보도록 하죠. 사실 그냥 말로 설명할때는 동시에 값을 바꾸는 것이 자연스러울 수 있습니다. 항상 동시에 값을 바꾼다는 식으로 설명하기 때문이죠. 만약에 동시에 값을 바꾸지 않는다면 아마도 어떻게든 돌아가겠죠. 하지만 이 알고리즘은 좋지 않습니다. 사람들이 기울기 하강에서 
주로 표현하는 것은 아니고, 다른 속성을 가진 다른 알고리즘입니다. 그리고 여러가지 이유때문에, 
약간 익숙하지 않은 방법을 쓰게 될것입니다. 그래서 당신은 기울기 하강에서 
동시에 값을 바꾸도록 해야합니다. 그래서 이것이 바로 기울기 하강 알고리즘의
뼈대입니다. 다음 비디오에서, 우리는 미분계수에 대해
더 자세히 이야기해보도록 하겠습니다. 제가 적어는 놨지만
자세하게 설명드리지 않은 것 말입니다. 그리고 이 수업을 듣기 전에
계산수업을 듣고 오신다면 부분 미분계수와 미분계수가 더 익숙하게 다가오실 겁니다. 하지만 계산에 익숙하지 않다고 해도,
너무 걱정하지마세요. 다음 비디오에서는, 미분계수를 계산하기 위한 모든 개념에 대한 설명을 해드리겠습니다. 계산에 익숙하지 않거나,
미분계수를 본 적이 없다고 해도 괜찮습니다. 다음 비디오에서는 기울기 하강에 적용하실 수 있는 실제 개념들을 설명드릴겁니다.