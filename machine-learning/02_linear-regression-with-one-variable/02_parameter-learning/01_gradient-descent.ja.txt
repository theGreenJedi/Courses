前に目的関数 J を定義しました。このビデオでは、 目的関数 J を最小化する、最急降下法というアルゴリズムについてお話ししたいと思います。実は 最急降下法はより汎用的なアルゴリズムで、線形回帰 以外でも使われます。実際には機械学習では至るところで使われています。そして後ほどこのクラスでは 最急降下法を使って他の関数も最小化します。線形回帰の目的関数 J だけではなく。ですから、このビデオでは、 最急降下法の説明に、任意の関数 J を使います。そして 後のビデオで、このアルゴリズムを使って、それを特に線形回帰で使った 目的関数 J に適用します。では、これが問題の設定です。 ある関数 J(theta 0, theta 1) があります。 これは線形回帰の目的関数かもしれません。最小化したいそれ以外のなんらかの関数かもしれません。 そして、それを J(theta 0, theta1) の関数として 最小化するアルゴリズムを見つけたいと思います。余談ですが、実は 最急降下法は実はもっと一般的な関数にも適用されます。 ですから、ある関数が、 J(theta 0, theta 1, theta 2, と theta n まで続く ) に対する関数であると想像してください。そして この J(theta 0 から theta n) を theta 0 から theta n にかけて 最小化したいとします。実は最急降下法はこのような もっと一般的な問題を解くためのアルゴリズムですが、簡潔さのために、そして 表記の簡明さのために、これ以降ビデオでは二つのパラメータだけを 表記して行きます。これが最急降下法の考え方です。何を行うかというと、 最初になんらかの初期値を theta 0 と theta 1 に対し推定します。 それはなんでも構いません。しかし、一般的な選択は、 theta 0 = 0、theta 1 = 0 と設定することです。単に 0 に初期化するのです。 最急降下法で行うのは、theta 0 と theta 1 の値を少しずつ変え続けて、J(theta 0, theta 1) を減少させられないか試していくことです。 するといずれ最小値、あるいは、もしかして局所的最小値に到達します。では、 最急降下法が何をするのか、図解を見てみましょう。例えば、この関数を最小化しようとしている とします。座標軸をご覧下さい。これは、theta 0、theta 1 が横軸に、 J は縦軸に取られています。よって、表面の高さが J を示しており、 そしてこの関数を最小化したいのです。まず始めに、(theta 0, theta 1) を どこかの点に設定します。ですから、なんらかの値を (theta 0, theta 1) に取ると想像してください。 そしてそれはこの関数の表面のどこかの点に対応します。ですから (theta 0, theta 1) の値が何であれ、それはこの上のどこかの点となります。今回は (0, 0) としませんでしたが、時には他の値に初期化することがあります。 さて、この図が丘を表示していると想像してください。 これが二つ丘がある緑の草の生えた公園の風景であると想像してください。 そして、自分が実際に丘のその地点に立っていると想像してください。 この公園の小さな赤い丘の上です。最急降下法で行うのは、 ここで360度回転し、周囲を見渡して自問します「もし、なんらかの方向に 小さく一歩踏み出すとしたら、そしてなるべく急いで斜面を 降りたいとしたら、どの方向にその一歩を踏み出すべきか、もし 降りたければ、もしなるべく急いで実際に丘を下っていくには」と。 丘のその地点に立ち、周りを見渡して、 下るための小さな一歩を踏み出すのに最良の方向は、 ほぼこちらだと見極めました。これで丘の上の新しい地点に移動しました。 また、周囲を見渡して自問します。「下るための小さな一歩を踏み 出すのに最良の方向はどれか」と。そうして、もう一歩踏み出すと、 その方向に一歩移動します。そして、これを続けます。この新しい地点で周囲を見渡し、 どの方向なら最も速く下に降りられるか決め、また一歩 また一歩、と続け、やがてこの局所的 最小値に収束します。最急降下法には興味深い特性があります。この 最初に最急降下法を実行した時、この地点から始めましたよね。 この地点から始めました。さて、最急降下法を実行する時に、 ほんの数歩ほど右の地点から始めたと想像してください。最急降下法の初期値が その右上の地点だと想像してください。このプロセスを繰り返して、その地点で立ち止まって、周りを見渡し、 最も急な下り方面に一歩踏み出すとします。移動して、周囲を 見渡します。また一歩移動し、これを繰り返します。 もしほんの二歩ほど右から開始すると、最急降下法はこの右の二番目の 局所的最適解に導きます。ですから、この最初の地点から 開始すると、この局所的最適解に落ち着きます。しかし、もし少しだけ やや別の場所から始めると、全く別の局所的最適解に落ち着きます。 そしてこれが最急降下法の特性で、後でまた少しお話します。さて、 これが図解による説明です。では、数学的に見てみましょう。 これが最急降下法アルゴリズムの定義です。単に繰り返し これを実行し、収束するまで続けます。 パラメータ theta j から alpha 掛けるこの項を引いて theta j を 更新します。さて、この式には色々なポイントがありますので それを少し分解しましょう。まず、この表記、:= この := は代入を表記するために使いますので、これは代入演算子です。 ですから、具体的には、もし a := b と書いたら、それは コンピュータでは、これは b の値を取って、それを使って a の値を上書きするということです。つまり、a を b の値と同じにするということです。これは代入です。 また a := a+1 と書くことも出来ます。これは a の値を 1 インクリメントするということです。 一方、対照的に、もし 等号を使って a = b と書いたら、 これは真理表明です。ですから、もし a = b と書いたら、私は a の値が b の値に等しいと表明していることになります。 ですから左側は、これはコンピュータ演算で、a の値をなんらかに設定します。 右側は、これは表明で、a と b の値が同じであると主張しているわけです。 a := a + 1 と書くことができ、それが、a を 1 インクリメントすることを意味するのに対し、 願わくば a = a + 1 とは決して書かないはずです。間違いですので。 a と a + 1 は絶対に同じ値にはなれません。これは、定義の最初の 部分です。この alpha は、学習率という 数字です。alpha の役割は、基本的にどれだけ大きな降下ステップを 最急降下法で取るかを制御します。もし alpha が非常に大きい場合、それが対応するのは、 非常に積極的な最急降下法のやり方となり、大きなステップで降下します。 もし alpha が非常に小さければ、小刻みなステップで降下していくことになります。 そして、これについては後ほど戻ってもう少しお話します。どうやって alpha を設定するかなどについて。 そして最後に、この項。これは 導関数項です。これについては今はお話したくありませんが、 後でこの導関数を導出し、それが一体何かを説明します。皆さんの中には 他の人より微分積分をご存知の方もいると思いますが、もし微分積分をよく知らなくても 心配しないでください。この項について知る必要のあることは説明します。 さて、もう一つ 最急降下法について大事なポイントがあります。それは、 最急降下法では、theta 0 と theta 1 を更新します。ですから、 この更新は j = 0 と j = 1 に対して実行されます。よって theta 0 を更新し、theta 1 を更新します。そして 最急降下法を実装する方法のポイントは、 この式では、この更新の式では、 同時に theta 0 と theta 1 を更新すべきだという点です。 私が言いたいのは、この式では、 theta 0 := theta 0 - 何か、を更新し、theta 1 := theta 1 - 何か、を更新します。 これを実装する方法は、右辺を計算することです。 これを計算します。theta 0 と theta 1 の両方に対して。そして
同時に 同時に theta 0 と theta 1 を更新します。では、その意味を 説明します。これが、最急降下法の正しい実装方法、つまり同時 更新です。temp 0 = それ、と設定し、temp 1 = それ、 と設定します。 つまり基本的に右辺を計算するわけです。そして右辺を計算して、変数 temp 0 と temp 1 に代入した後で、theta 0 と theta 1 を同時に更新します。 それが正しい実装です。それと対照的に、これが間違った実装方法です。 同時更新を行わないものです。では、この間違った 実装方法では、temp 0 を計算し、次に theta 0 を更新します。 そして temp 1 を計算し、次に theta 1 を更新します。そして、右側と左側の 実装方法の違いは、ここを見ると、このステップを見ると この時点では、既に theta 0 を更新してしまっているので、 theta 0 の新しい値を使ってこの導関数項を計算することになり、 結果的に左側と比べて temp 1 の値が異なることになります。 この式に theta 0 の新しい値を使ってしまっているからです。 ですから、この右側のものは正しい最急降下法の 実装方法ではありません。なぜ同時更新が必要なのかについては 説明したくありません。単にこれが最急降下法 を通常実装するやり方なのです。後でこれについてはさらにお話します。実は、 同時更新を実装する方がより自然なのです。人々が 最急降下法について話す時は、常に同時更新という意味で使っています。もし 非同時更新を実装しても、おそらく動作はすると思います。 しかし、右側のアルゴリズムは人々が最急降下法として言及するものではなく、 それは何か異なる特性をもつ別のアルゴリズムです。色々な 理由で、これは少し変わった動作をする可能性があります。そして 皆さんがすべきなのは、最急降下法の同時更新を実装することです。 さて、これが最急降下法アルゴリズムの概要です。次のビデオでは、 導関数項の詳細について説明します。書き出しはしましたが定義しません でしたので。もし以前に微分積分の授業を受けたことがあり、 導関数や偏導関数をご存知の方は、導関数項がまさにそれと 同じものだと分かります。しかしたとえ微分積分に詳しくなくても 心配しないでください。次のビデオで全ての直感的理解が得られ、 導関数項を計算するのに必要なことは全て説明します。たとえ 微分積分を見たことがなくても、偏導関数を見たことがなくても。 以上です。次のビデオでは、十分に直感的理解が得られ 最急降下法を応用できるようになると思います。