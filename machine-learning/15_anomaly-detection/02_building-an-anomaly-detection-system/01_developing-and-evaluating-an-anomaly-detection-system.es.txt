En el último video, desarrollamos un algoritmo de detección de anomalías. En este video, me gustaría hablar sobre el proceso de cómo proceder para desarrollar una aplicación específica de detección de anomalías a un problema y en particular esto se centrará en el problema de cómo evaluar un algoritmo de detección de anomalías. En videos anteriores, ya hemos hablado sobre la importancia de la evaluación de números reales y esto capta la idea de que cuando usted está tratando de desarrollar un algoritmo de aprendizaje para una aplicación específica, necesita a menudo hacer muchas elecciones tales como, por ejemplo, elegir qué funciones usar y así sucesivamente. Y tomar decisiones sobre todas estas opciones es a menudo mucho más fácil si tiene una forma de evaluar su algoritmo de aprendizaje que de como resultado un sólo número. Pero si está tratando de decidir, ya sabe, tengo una idea para una variable adicional, ¿debo incluir esta variable o no? Si puede ejecutar el algoritmo con la función y ejecutar el algoritmo sin la función, sólo obteniendo como resultado un número que le indica, ya sabe, si mejoró o empeoró el desempeño al añadir esta variable. Entonces le da una mucho mejor manera, una manera mucho más simple, con la cual decidir si desea o no incluir esa variable. Así que con el fin de ser capaz de desarrollar de forma rápida un sistema de detección anomalía, sería muy útil contar con una manera de evaluar un sistema de detección de anomalías. Para hacer esto, con el fin de evaluar un sistema de detección de anomalías, en realidad vamos a asumir que tenemos algunos datos con valores asignados. Así que, hasta ahora, estaremos considerando a la detección de anomalías como un problema de aprendizaje no supervisado, que usa datos sin valores asignados pero si tiene algunos datos con valores asignados que especifiquen cuáles son algunos ejemplos anómalos y cuáles son algunos ejemplos no anómalos, entonces, así es realmente como pensamos que es la manera estándar de evaluar un algoritmo de detección de anomalías. Así que, retomando el ejemplo del motor de avión, digamos que, tenemos algunos datos con valores asignados de unos pocos ejemplos anómalos de algunos motores de avión que fueron fabricados en el pasado y que resultaron ser anómalos. Resultó que eran deficientes o extraños de alguna manera, digamos que también tenemos algunos ejemplos normales o no anómalos, algunos ejemplos perfectamente buenos. Voy a utilizar y= 0 para denotar al ejemplo normal o no anómalo y y=1 para denotar los ejemplos anómalos. El proceso de desarrollar y evaluar un algoritmo de detección de anomalías es el siguiente: Vamos a pensar en esto como un grupo de de entrenamiento y vamos a hablar acerca de la validación cruzada en grupos de prueba más tarde pero con frecuencia pensamos en el grupo de entrenamiento como un grupo de datos que aún no tiene valores asignados. Así es que, esta es una gran colección de ejemplos normales, no anómalos, no anormales. Y generalmente consideramos esto como no anómalo pero en realidad está bien, incluso si algunas anomalías se infiltraron en su conjunto de entrenamiento con valores no asignados. A continuación, vamos a definir un conjunto de validación cruzada y un conjunto de prueba, con el cual evaluar un algoritmo de detección de anomalías. Así que, específicamente, para ambos grupos de prueba de validación cruzada, asumiremos que, ya sabe, podemos incluir algunos ejemplos en el conjunto de validación cruzada y conjunto de prueba que contienen ejemplos que son conocidos por ser anómalos. De modo que los conjuntos de prueba, digamos que tenemos unos cuantos ejemplos con y=1 que corresponden a los motores de avión anómalos, aquí tenemos un ejemplo concreto: Digamos que, en conjunto, estos son los datos que tenemos, hemos fabricado 10,000 ejemplos de motores que, hasta donde sabemos son motores de avión perfectamente normales, elaborados perfectamente. Y una vez más, está bien incluso si algún motor deficiente se infiltra en el conjunto de 10, 000, en realidad está bien pero de algún modo supusimos que la gran la mayoría de estos 10,000 ejemplos son, ya sabe, motores buenos y normales, no anómalos. Y digamos que, históricamente, sin importar cuanto tiempo hemos estado trabajando en la planta de fabricación, digamos que terminamos obteniendo las variables, de 24 a 28 motores anómalos también. Un uso muy típico de la detección de anomalías, ya sabe, los ejemplos de número no anómalos, esto es, con y=1, podemos tener en algún lugar, por ejemplo, 20 a 50. Sería un rango de ejemplos muy típico, un número de ejemplos que tenemos con y=1. Y, por lo general, tendremos un número mucho mayor de buenos ejemplos. Con estos datos, una forma bastante típica de dividirlos entre el conjunto de entrenamiento, el conjunto de validación y el conjunto de prueba, sería esta: Vamos a tomar 10,000 motores de avión buenos y ponemos 6,000 de estos en el conjunto de entrenamiento sin valores asignados. Entonces, denomino esto como un grupo de entrenamiento sin valores asignados pero en todos estos ejemplos son los que realmente corresponden a y=0, hasta donde sabemos, y así, vamos a utilizar esto para ajustar p(x), ¿verdad? Así que, vamos a utilizar estos 6,000 motores para ajustar p(x), que es la p(x) 1 parametrizada por "mi 1", «sigma» al cuadrado 1, hasta p(xn) parametrizada por «Mu» n, «sigma» al "n". Estos serían los 6,000 ejemplos que queremos utilizar para estimar los parámetros: letra griega «Mu»1, «sigma» cuadrada 1, hasta mi "n", «sigma» cuadrada "n", entonces, ese es nuestro conjunto de entrenamiento de todos, ya sabe, buenos ejemplos o la gran mayoría de buenos ejemplos. A continuación, tomaremos nuestros motores de avión buenos y vamos a colocar algunos de ellos en un grupo de validación cruzada, más algunos otros de ellos en los conjuntos de prueba. Entonces, 6,000 más 2,000 más 2,000, así es cómo separamos nuestros mil motores de avión elaborados perfectamente. Posteriormente, también tenemos 20 motores de aviones defectuosos, los tomaremos y tal vez los dividiremos para poner diez de ellos en el conjunto de validación cruzada y otros diez en los conjuntos de prueba. En la siguiente diapositiva, hablaremos sobre cómo usar en realidad esto para evaluar un algoritmo de detección de anomalías. Bien, lo que ha descrito aquí es, cómo decirlo, probablemente la recomendación de una buena manera de dividir el ejemplo asignación de valores y sin valores sin asignar de los motores de avión buenos y los defectuosos, donde utilizamos una separación de 60, 20, 20% para los motores buenos y tomamos los motores defectuosos y los colocamos en el grupo de validación cruzada y sólo en el conjunto de prueba. Luego, en la siguiente diapositiva veremos porqué se da este caso. Como nota, si usted mira cómo la gente aplica los algoritmos de detección de anomalías, a veces ve que otras personas dividen los datos de forma distinta también. Otra alternativa, esta no es en realidad una alternativa recomendable pero algunas personas quieren quitar sus 10,000 motores buenos, tal vez poner 6,000 de ellos en su conjunto de entrenamiento y y después poner los mismos 4,000 en el grupo de validación cruzada y en el conjunto de pruebas. Y entonces, ya sabe, nos gusta pensar que el conjunto de validación cruzada y el conjunto de prueba son conjuntos de datos totalmente diferentes entre sí. Pero sabe, en la detección de anomalías, a veces vemos personas que de cierto modo usan el mismo conjunto de motores buenos en el conjunto de validación cruzada y en los conjuntos de prueba y a veces ve gente que usa exactamente los mismos conjuntos de motores anómalos en el conjunto de validación cruzada y en el conjunto de prueba. Y así, todas estas son consideradas, ya sabe, prácticas menos adecuadas y definitivamente menos recomendables. Ciertamente, usando los mismos datos en el grupo de validación cruzada y en el conjunto de pruebas, no se considera una buena práctica de aprendizaje automático. Pero, a veces ve gente que también hace este tipo de cosas. Dados los conjuntos de entrenamiento, de validación cruzada y de prueba, así es cómo se evalúa o cómo se desarrolla y evalúa un algoritmo: Primero, tomamos los conjuntos de entrenamiento y ajustamos el modelo p(x). Entonces, ajustamos así, todas estas Gaussianas a mis ejemplos de valores no asignados a "m" de motores de avión anómalos y a estos, los llamo ejemplos con valores no asignados pero en realidad son ejemplos que estamos asumiendo como ejemplos buenos, son los motores de avión normales. Imagine que su algoritmo de detección de anomalías en realidad está haciendo una predicción, entonces en la validación cruzada del grupo de prueba dado el, digamos, ejemplo de prueba "x", piense que el algoritmo está prediciendo que y=1, p(x) es menor que «épsilon», debemos estar tomando cero, si p(x) es mayor o igual a «épsilon». Así, dada x, está tratando de predecir, cuál es el valor asignado, dada "y= 1",que corresponde a una anomalía o ¿será que y= 0 corresponde a un ejemplo normal? Dados los conjuntos de entrenamiento, validación cruzada y de prueba, ¿cómo desarrolla un algoritmo? Y más específicamente, ¿cómo evalúa un algoritmo de detección de anomalías? Bueno, a todo esto, el primer paso es tomar el conjunto de entrenamiento  valor no asignado etiquetado y ajustar el modelo p(x) para guiar los datos de entrenamiento. Así que toma este, ya sabe, que llamamos el conjunto de entrenamiento con valores no asignados pero realmente, estos son ejemplos que suponemos, la mayoría de los cuales son los motores de avión normales, no porque no sean anómalos y esto ajustará el modelo p(x). Ajustará todos aquellos parámetros para todas las Gaussianas en estos datos. Después, en la validación cruzada de este conjunto de prueba, vamos a pensar que el algoritmo de detección de anomalías está tratando de predecir el valor de "y". Así que en cada uno de, digamos, los ejemplos de prueba, tenemos estas "x1 prueba", "y1 prueba", donde "y" será igual a 1 o 0, dependiendo de si este era un ejemplo anómalo. Dada la entrada "x" en mi conjunto de prueba, pienso que mi algoritmo de detección de anomalías esta prediciendo la "y" como 1 si p(x) es menor que «épsilon». Así que la probabilidad de predecir que esta es una anomalía, es muy baja y pensamos que el algoritmo está prediciendo que y es igual a 0. Si p(x) es mayor o igual a «épsilon», entonces la predicción de esos ejemplos normales en la p(x) es razonablemente grande. Así que ahora podemos pensar que el algoritmo de detección de anomalías está realizando predicciones para saber cuáles son los valores de estas etiquetas "y" en los conjuntos de prueba o en el conjunto de validación cruzada y esto nos pone de forma más similar al entorno de aprendizaje supervisado, ¿verdad? en donde tenemos el conjunto de prueba con valores asignados y nuestro algoritmo está haciendo predicciones sobre estos valores asignados y así podemos evaluarlo, ya sabe, al ver qué tan a menudo obtiene correctamente estos valores asignados. Por supuesto, estos valores asignados serán muy sesgadas porque y=0, que representa los ejemplos normales, suele ser mucho más común que y=1, que representa los ejemplos anómalos. Pero, como sabe, esto está mucho más cerca a la fuente de métrica de evaluación que podemos usar en el aprendizaje supervisado. Entonces ¿cuál es una buena métrica de evaluación para utilizar? Bueno, debido a que los datos son muy sesgados porque y=0 es mucho más común, la exactitud de la clasificación no sería una buena métrica de evaluación, ya habíamos hablado de esto en el video anterior. Por lo que si tiene conjuntos de datos muy sesgados, entonces predecir y=0 todo el tiempo tendrá una precisión de clasificación muy alta, por el contrario, deberíamos usar una métrica de evaluación como el cálculo de la fracción de positivos verdaderos, falsos positivos, falsos negativos, verdaderos negativos o calcular la posición de la curva "v" de este algoritmo o hacer cosas como calcular el puntaje F1,¿verdad?, que es un único número real, a manera de resumir la posición y los números de memoria. Así que éstas serían las maneras de evaluar un algoritmo de detección de anomalías en su conjunto de validación o en su conjunto de prueba. Finalmente, al inicio del algoritmo de detección de anomalías, también teníamos este parámetro «épsilon», ¿no? entonces, «épsilon» es este umbral que usaríamos para decidir cuándo marcar algo como una anomalía. Así que si tiene un conjunto de validación cruzada, otra forma de elegir este parámetro «épsilon» sería tratar con, probar con muchos valores diferentes de «épsilon», y luego elegir el del valor de «épsilon», que, digamos, maximiza el puntaje F1 o que de otro modo, funciona bien en su conjunto de validación cruzada. De manera más general, la forma de reducir los conjuntos de entrenamiento, de prueba y de validación cruzada es que cuando estamos tratando de tomar decisiones, como qué variables incluir o tratamos de, por ejemplo, ajustar el parámetro «épsilon», entonces tendríamos que evaluar continuamente el algoritmo en los conjuntos de validación cruzada y tomar todas esas decisiones, tales como qué variables uso, cómo ajustar «épsilon», usar esto para evaluar el algoritmo en el conjunto de validación cruzada y luego cuando hayamos elegido el conjunto de variables, cuando hayamos encontrado el valor de «épsilon» con el que estemos satisfechos, entonces podemos tomar el modelo final y evaluarlo, ya sabe, hacer la evaluación final del algoritmo en los conjuntos de prueba. En este vídeo hablamos acerca del proceso de cómo evaluar un algoritmo de detección de anomalías y de nuevo, habiendo sido capaces de evaluar un algoritmo, con una evaluación de un solo número real con un número, tal como el puntaje de F1, que a menudo le permite usar de manera más eficiente manera de invertir tu tiempo de desarrollar un sistema de detección de anomalías, cuando tratamos de tomar este tipo de decisiones, si tengo que elegir «épsilon», qué variables voy incluir y cosas por el estilo. En este video, empezamos a utilizar un poco de datos valores asignados, con el fin de evaluar el algoritmo de detección de anomalías y esto nos acerca un poco más a un entorno de aprendizaje supervisado. En el siguiente video, voy a decir un poco más sobre eso y en particular, vamos a hablar acerca de cuándo debe debe usar un algoritmo de detección de anomalías y cuando deberíamos estar considerando el uso del aprendizaje supervisado en su lugar, y cuáles son las diferencias entre estos dos formalismos.