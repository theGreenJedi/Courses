在此之前 你已经学习了 异常检测算法 并且 我们也讨论了如何 评估一个异常检测算法 事实上 当你应用异常检测时 对它的效率 影响最大的 因素之一是 你使用什么特征变量 你选择什么特征变量 来输入异常检测算法 那么 在本视频中 我将要做的事情就是 给你们一些建议 关于如何设计或选择 异常检测算法的 特征变量 在我们的异常检测算法中 我们做的事情之一就是 使用这种正态(高斯)分布来对特征向量建模 就是有 xi 服从正态分布 期望为μi 方差为 σi 平方 那么 我常做的一件事 就是画出这些数据 或者用直方图表示数据 以确保 这些数据在 应用我的异常检测算法前 看起来像高斯分布 当然即使你的数据并不是高斯分布 它也基本上可以良好地运行 它也基本上可以良好地运行 如果你的数据 看起来不像正态分布 算法也常常可以正常运行 但是具体而言 我将数据画成这样 如果它的柱状图看起来 像这样 另外说一下 画柱状图的方法是 使用 hist 命令 就是 Octave 里面的 hist 命令 但看起来好像 这个图形近似像一个高斯分布 所以如果我的特征变量是这样的 那么我可以很高兴地把它们送入我的学习算法了 但如果我画出来的 直方图是这样的话 好吧 那么这就看起来完全不像钟形曲线 这个分布很不对称 它的峰值非常偏向一边 如果我的数据是这样的话 通常我要做的事情 是对数据进行一些不同的转换 来确保这些数据 看起来更像高斯分布 虽然通常来说你不这么做 算法也会运行地很好 但如果你使用一些转换方法 使你的数据更像高斯分布的话 你的算法会工作得更好 所以 如果给我这样的数据集 我通常要做的是 进行一个求对数的转换 如果我这样做的话 重新把直方图画出来 对于这个具体的例子 我就会得到 像这样的一个直方图 这样就看起来更像高斯分布了 对吧？ 这看起来就更像 典型的钟形曲线 这样我就能拟合出期望和方差参数了 所以这里我说的 进行一个取对数的转换 意思是这样的 如果我有一个特征变量 比如 x1 直方图是这样的 那么我就用 x1 的对数 log(x1) 来替换掉 x1 所以 经过替换 这就是我的新 x1 我把它的直方图画在右边 这看起来更像高斯分布了 除了取对数变换之外 还有别的一些方法也可以用 假如这是另一个特征 x2 现在我用 log(x2 + 1) 来取代 或者更一般地 我可以在 x2 后面加上 某个常数 c 然后求对数来取代 x2 我会调整这个常数 c 的值 使得这个分布看起来尽可能地像高斯分布 或者对于另一个特征 x3 也许我可以用 它的平方根来取代 x3 的平方根也就是 x3 的二分之一次方 对吧？ 而这个 二分之一 又是一个可以由我来确定的参数 所以 或许对另一个特征 x4 我可以用 x4 的另一个幂次方 来取代 x4 比如说可以用 三分之一次幂 所有这些 所有这些参数 这个指数参数 或者这个参数 c 所有这些参数你都可以进行调整 目的只有一个 就是让数据看起来更像高斯分布 下面我给你演示一下 如何对这些参数进行调整 来让我的数据看起来更像高斯分布 这里我已经在 Octave 中 加载了一系列特征 x 这里我加载了1000个样本 这里我加载了1000个样本 所以让我们来画出数据的直方图 使用 hist(x) 命令 这就是我的直方图了 默认情况下 直方图有十个柱 可以重新把样条设置地更好一点 我们输入 hist(x, 50) 这样就画出了50个柱 这样看起来好多了 但现在看起来还不够"高斯" 所以下面我们来调整一下参数 首先试试 x 的0.5次方 也就是说 我们对数据取平方根 然后画出直方图 好了 现在看起来 有那么一点像高斯分布了 但还是不够好 我们再调整一下 我们来看 把0.5减小到0.2试试 又更像高斯分布了一点 我们再减小一点 试试0.1 耶！好极了 所以我可以使用0.1 我们再试试更小的 0.05 然后 你看 这样看起来更像高斯分布了 因此 我们可以定义一个 新的特征变量 xNew 等于 x 的0.05次方 现在我的新特征变量 xNew 比原来的特征变量 看起来更具像高斯分布 因此我就可以用这个新的 特征变量来输入到我的 异常检测算法中 当然 实现这一功能的方法不唯一 你也可以用 hist(log(x), 50) 这是另一种你可以选择的转换方法 这同样会让你的数据看起来更像高斯分布 所以 我们也可以 让 xNew 等于 log(x) 这是另一种可以选用的 很好的特征变量 我们来总结一下 如果你画出数据的直方图 并且发现图形看起来 非常不像正态分布 那么应该进行一些 不同的转换 就像这些 通过这些方法 来让你的数据看起来 更具有高斯分布的特点 然后你再把数据输入到学习算法 虽然说 你不这么做也可以 但我通常还是会进行这一步 下面我想讲第二个问题 那就是你如何得到 异常检测算法的特征变量 我通常用的办法是 通过一个误差分析步骤 我的意思是 这跟我们之前 学习监督学习算法时的 误差分析步骤是类似的 也就是说 我们先完整地训练出 一个学习算法 然后在一组交叉验证集上运行算法 然后找出那些预测出错的样本 然后再看看 我们能否找到一些其他的特征变量 来帮助学习算法 让它在那些交叉验证时 判断出错的样本中表现更好 让我们来用一个例子 详细解释一下刚才说的这一过程 在异常检测中 我们希望 p(x) 的值 对正常样本来说是比较大的 而对异常样本来说 值是很小的 因此 一个很常见的问题是 p(x) 是具有可比性的 也许正常样本和异常样本的值都很大 我们来看一个具体点的例子 假如说这是我的无标签数据 那么 我只有一个特征变量 x1 我要用一个高斯分布来拟合它 假如我的数据拟合出的高斯分布是这样的 现在假如我有一个异常样本 假如我的异常样本中 x 的取值为2.5 因此 我画出我的异常样本 你不难发现 它看起来就像被淹没在 一堆正常样本中似的 我用绿色画出来的 这个异常样本 它的概率值很大 是蓝色曲线的高度 而我们的算法 没能把这个样本判断为异常 现在如果说这代表 飞机引擎的制造或者别的什么 那么我会做的是 我会看看我的训练样本 然后看看到底是 哪一个具体的飞机引擎出错了 看看通过这个样本 能不能启发我 想出一个新的特征 x2 来帮助算法区别出 不好的样本 和我剩下的正确的样本 也就是那些红色的叉叉 或者说正常的飞机引擎样本 如果我这样做的话 我们的期望是 创建一个新的特征 x2 使得 当我重新画数据时 如果我用训练集中的 所有正常样本 我应该就会发现 所有的训练样本都是这里的红叉了 我们也希望能看到 对于异常样本 这个新特征变量 x2 的值会看起来是异常的 因此对于我这里的绿色的样本 这是异常的样本 对吧 我的 x1 值仍然是2.5 那么我的 x2 很有可能 是一个比较大的值 比如这里的3.5 或者一个非常小的值 现在如果我再来给数据建模 我会发现 我的异常检测算法 会在中间区域 给出一个较高的概率 然后越到外层越小 到了那个绿色的样本 我的异常检测算法 会给出非常小的概率值 会给出非常小的概率值 所以这个过程 实际上就是 看看哪里出了错 看看那些 算法没能正确标记的异常点 看看你能不能得到启发来创造新的特征变量 所以也就是说 找一找飞机引擎中的不寻常的问题 然后来建立一些新特征变量 有了这些新的特征变量 应该就能更容易 从正常样本中区别出异常来 这就是误差分析的过程 这就是误差分析的过程 以及如何为异常检查算法 建立新的特征变量 最后 我想与你分享一些 我平时在为异常检查算法 选择特征变量时的一些思考 通常来说 我想到的选择特征变量的方法是 我会选那些取值 既不会特别特别大 也不会特别特别小的 那些特征变量 比如说 我们还是用这个数据中心中 监控计算机的例子 比如 在一个数据中心 你有很多台电脑 也许上千 或者上万台 我们想要知道的是 是不是有哪一台机器 运作不正常了 这里给出了几种可选的特征变量 包括占用内存 磁盘每秒访问次数 CPU负载 网络流量 现在假如说 我怀疑某个出错的情况 假如说 我认为 在我的数据中 我的CPU负载和网络流量 应该互为线性关系 可能我运行了一组 网络服务器 如果其中一个服务器 在对许多用户服务 那么我的CPU负载和网络流量都很大 现在假如说 我怀疑其中一个出错的情形 是我的计算机在执行一个任务时 进入了一个死循环 因此被卡住了 意思就是说 假如我感觉 我的其中一台机器 或者说其中一台服务器的代码 执行到一个死循环卡住了 因此CPU负载升高 但网络流量没有升高 因为只是CPU执行了 较多的工作 所以负载较大 卡在了死循环里 在这种情况下 要检测出异常 我可以新建一个特征 x5 x5 等于 CPU负载 除以网络流量 因此 x5 的值 将会变得不寻常地大 如果某一台机器 具有较大的CPU负载 但网络流量正常的话 因此 这将成为一个 很好的特征 能帮助你 检测出某种类型的异常情况 你就会看到有个名为 mycode.R 的文件 用同样的方法得到更多其他的特征 比如说我可以 建立一个特征 x6 等于 CPU负载的平方除以网络流量 这就像是特征 x5 的一个变体 实际上它捕捉的异常 仍然是你的机器 是否具有一个比较高的 CPU 负载 但没有一个 同样很大的网络流量 通过这样的方法 建立新的特征变量 你就可以通过不同特征变量的组合 捕捉到对应的不寻常现象 在这段视频中 我们介绍了如何选择特征 以及对特征进行一些 小小的转换 让数据更像正态分布 然后再把数据输入异常检测算法 同时也介绍了建立特征时 进行的误差分析方法 来捕捉各种异常的可能 希望你通过这些方法 能够了解如何选择好的特征变量 从而帮助你的异常检测算法 捕捉到各种不同的异常情况 【教育无边界字幕组】翻译：所罗门捷列夫 校对：竹二个 审核：小白_远游