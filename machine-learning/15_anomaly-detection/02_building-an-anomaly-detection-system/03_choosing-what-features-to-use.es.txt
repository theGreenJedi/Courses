Para este momento, ya ha visto el algoritmo de detección y también hemos hablado de cómo evaluar un algoritmo de detección de anomalías Resulta que, cuando está aplicando una detección de anomalía, una de las cosas que tiene un enorme efecto sobre su buen funcionamiento es qué variables usted usa y qué variables elige para dar el algoritmo de detección de anomalías. En este video, lo que me gustaría hacer es decir algunas palabras, dar algunas sugerencias y pautas para saber cómo diseñar o seleccionar variables para dar a su algoritmo de detección de anomalías. En nuestro algoritmo de detección de anomalías, una de las cosas que hicimos fue modelar las funciones usando este tipo de distribución Gaussiana. Con xi, «Mu» i, «sigma» cuadrada i, por ejemplo. Y una cosa que a menudo hago es trazar los datos o el histograma de los datos, para asegurarme de que los datos parecen vagamente Gaussianos antes de alimentarlos a mi algoritmo de detección de anomalías. Y, generalmente podrá funcionar bien, aunque los datos no sean Gaussianos, sin embargo, se trata de un buen chequeo sanitario para ejecutar. Por cierto, en caso de que sus datos no parezcan Gaussianos, los algoritmos aún así funcionarán bien. En concreto, si trazo mis datos así y si se parecen a un histograma como este, y la manera de trazar un histograma es usar HIST, o el comando HIST en Octave pero así es como luce, parece vagamente Gaussiano, así que si mis variables lucen así, estaría muy feliz de alimentarlas a mi algoritmo pero si fuera a trazar un histograma de mis datos y luciera así, bueno, esto no se parece en absoluto a una curva en forma de campana, esta es una distribución muy asimétrica, tiene forma de pico a un lado. Si así es como se ven mis datos, lo que a menudo haré será jugar con diferentes transformaciones de los datos, con el fin de que luzcan más Gaussianos. Otra vez, el algoritmo generalmente funcionará bien, incluso si no hace esto pero si usa estas transformaciones para hacer sus datos más Gaussianos, podría funcionar un poco mejor. Así que tenemos el conjunto de datos que se ve así, lo que puedo hacer es tomar una transformación logarítmica de datos, si hago eso y vuelvo a trazar el histograma, lo que obtengo en este ejemplo particular, es un histograma que tiene este aspecto. Y esto se ve mucho más Gaussiano, ¿verdad? se parece mucho más a la clásica curva en forma de campana, que podemos ajustar con algunos parámetros «sigma» de media y varianza. A lo que me refiero con una transformación logarítmica, es realmente, si tengo alguna variable x1 y luego el histograma de x1 se ve así, entonces podría tomar mi variable x1 y reemplazarla con el registro de x1 y esta es mi nueva x1 que podré trazar al histograma más a la derecha y esto parece mucho más Gaussiano. En lugar de sólo hacer una transformación logarítmica, otras cosas que puede hacer, podría ser, vamos a decir que tengo una variable diferente, x2, tal vez voy a reemplazar ese log(x+1) o o más generalmente con log(x2+c) y algunas constante c y esta constante puede ser algo con que jugar, para tratar de hacer que parezca lo más Gaussiano posible. O para otra variable x 3, tal vez la reemplazaré con x3 que puede ser en raíz cuadrada. La raíz cuadrada es sólo x3 a la potencia de una mitad, ¿verdad? y esta mitad es otro ejemplo de un parámetro con el que puedo jugar. Entonces, tendría x4 y tal vez podría reemplazar en su lugar con x4 a otra potencia, tal vez a la potencia de 1/3. Y éstos, todos estos, este otro, este parámetro exponente, o el parámetro "c", todos estos son ejemplos de parámetros con los que puede jugar, con el fin de hacer parecer sus datos un poco más Gaussianos. Déjeme darle una demostración en vivo de cómo jugar en realidad con mis datos para que parezcan más Gaussianos. Bien, ya lo cargué en Octave, aquí hay un conjunto de variables x, tengo mil ejemplos cargados allí. Vamos a jalar el histograma de mis datos, use el comando hist(x), y aquí está mi histograma. Por defecto, creo que esto utiliza 10 contenedores de histogramas, pero yo quiero ver un histograma de cuadrícula más fina. Así que activamos hist(x, 50), entonces, esto se traza en 50 contenedores diferentes. Muy bien, se ve mejor. Ahora, esto no parece muy Gaussiano, ¿verdad? entonces, vamos a empezar a jugar con los datos. Probemos con un hist(x, 0.5, 50), así que tomamos la raíz cuadrada de los datos y trazamos el histograma. Y, bueno, parece un poco más de Gaussiano, pero no bastante allí, así que vamos a jugar en el parámetro 0.5. Veamos, si coloco esto a 0.2, se ve un poco más Gaussiano, vamos reducir un poco más a 0.1. Sí, se ve muy bien, en realidad podría usar 0.1, bueno, vamos a reducirla a 0.05 y como puede ver esto parece bastante Gaussiano, entonces puedo definir una nueva variable que es "xnueva= x.0.05" y ahora mi nueva función "xnueva" se ve más Gaussiana que la anterior y ahora podría usar en su lugar esta nueva variable para alimentar a mi algoritmo de detección de anomalías. Y por supuesto, hay más de una manera de hacer esto. También puede usar hist de log(x), que es otro ejemplo de una transformación que puede utilizar. Y, sabe, eso también se ve muy Gaussiano, también puedo definir xnueva=log(x) y esa sería otra muy buena opción de una función que puedo usar. Para resumir, si traza un histograma con los datos y nota que no luce muy Gaussiano, vale la pena jugar un poco con diferentes transformaciones como estas, para ver si puede hacer que sus datos parezcan un poco más Gaussianos, antes de alimentarlos a su algoritmo de aprendizaje, aunque incluso si no lo hace, puede que funcione bien. Pero normalmente realizo este paso, lo segundo que quiero mencionar es cómo encontrar las variables para un algoritmo de detección de anomalías. La forma en que lo hago a menudo es a través de un procedimiento de análisis de error. A lo que me refiero con eso es que es muy similar al procedimiento de análisis de error que tenemos para aprendizaje supervisado, donde entrenaría un algoritmo completo y le ejecutaría en un conjunto de validación cruzada, mire los ejemplos que fallaron y vea si se nos ocurren variables adicionales para ayudar al algoritmo a funcionar mejor en los ejemplo que fallaron en el conjunto de validación cruzada. Así que vamos a intentar razonar a través de un ejemplo de este proceso. En la detección de anomalías, esperamos que p(x) sea grande para los ejemplos normales y que sea pequeña para los ejemplos anómalos. Un problema bastante común sería si p(x) es comparable, tal vez ambas son grandes para los ejemplos normales y los anómalos. Veamos un ejemplo concreto de ello: Digamos que estos son mis datos sin valores asignados, entonces aquí sólo tengo una variable, x1 y voy a aplicar una Gaussiana a esto. Puede ser que la Gaussiana que apliqué a mis datos se vea así y ahora digamos que tengo un ejemplo anómalo, por decir, tengo un ejemplo anómalo que adquiere un valor x de 2.5. Entonces, trazo mi ejemplo anómalo allí y ya sabe, de cierta manera se entierra en medio de un grupo de ejemplos normales y este simple ejemplo anómalo que he dibujado en verde, adquiere una probabilidad bastante alta, a la altura de la curva azul, y el algoritmo falla al marcar esto como un ejemplo anómalo. Ahora, si esto se tratara tal vez de la fabricación de motores de avión u otra cosa, lo que haría sería revisar mis ejemplos de entrenamiento y estudiar lo que salió mal con ese motor de avión particular, y a ver, si analizando ese ejemplo puedo inspirarme a encontrar una nueva variable, x2, que ayude a distinguir entre este mal ejemplo, en comparación con el resto de mis ejemplos en rojo, en comparación con todos mis motores de avión normales. Si puedo hacer esto, la esperanza entonces sería que, si puedo crear una nueva variable, x2, cuando vuelva a trazar mis datos, si tomo todos mis ejemplos normales de mi conjunto de entrenamiento, quizá encuentre que todos mis ejemplos de entrenamiento son estas cruces rojas aquí. Y con suerte, si encuentro eso para mi ejemplo anómalo, la función x2 toma el valor inusual. Para mi ejemplo en color verde aquí, esta anomalía, mi valor x1, sigue siendo 2.5. Luego, tal vez mi valor x2, con suerte adquiera un valor muy grande, tal como 3.5 allí, o un valor muy pequeño. Pero ahora, si modelo mis datos, encontraré que mi algoritmo de detección de anomalías da una alta probabilidad a los datos en las regiones centrales, una probabilidad ligeramente menor a eso, y probabilidad inferior a eso. Un ejemplo en esta parte exterior, sería que mi algoritmo ahora da una muy baja probabilidad en esta parte y así, el proceso de esto consiste en mirar realmente los errores que está cometiendo. Mire la anomalía que el algoritmo está fallando en etiquetar y vea le ayuda a crear alguna nueva variable. Encuentre algo inusual sobre ese motor de avión y úselo para crear una nueva variable, con esta nueva variable resulta más fácil distinguir las anomalías de sus buenos ejemplos. Ese es el proceso de análisis de errores y su uso para crear nuevas variables para la detección de anomalías Por último, permítame compartirle mi forma de pensar sobre cómo suelo elegir las variables para detección de anomalías. Con frecuencia, la forma en que concibo la elección de variables es que quiero elegir las variables que tomarán, ya sean valores muy muy grandes o muy muy pequeños, para ejemplos que creo que pueden resultar ser anomalías. Así que nuevamente vamos a usar nuestro ejemplo de la supervisión de equipos en un centro de datos. De modo que tiene varias máquinas, tal vez miles o decenas de miles de máquinas en un centro de datos y queremos saber si una de las máquinas, una de nuestras computadoras está fallando, haciendo algo extraño. Aquí están los ejemplos de las variables que usted puede elegir, quizá la memoria usada, el número de accesos de disco, la carga de CPU, el tráfico de red. Ahora, digamos que sospecho que uno de los casos de falla, digamos que en mi grupo de datos creo que la carga de CPU y el tráfico de red tienden a crecer linealmente uno con el otro. Tal vez estoy corriendo muchos servidores web y de ser así, si uno de mis servidores es usado por muchos usuarios, tengo una carga de CPU muy alta, y un tráfico de red muy alto, digamos que creo, por ejemplo que tengo la sospecha de que uno de los casos de falla es si uno de mis equipos tiene un trabajo que se atora en un bucle infinito. Entonces, si pienso que uno de los casos de falla es que una de mis máquinas, uno de mis servidores web (código de servidor) se atoró en un bucle infinito, por lo que aumenta la carga deCPU pero el tráfico de red no porque sólo lo está girando sus ruedas y haciendo mucho del trabajo del CPU, ya sabe, está atorado en un bucle infinito. En este caso, para detectar ese tipo de anomalía, puedo crear una nueva variable, x5 que puede ser más grande que la carga de CPU dividida entre el tráfico de red. De ese modo, 5x tomará un valor inusualmente grande, si una de las máquinas tiene una carga de CPU muy grande pero no tanto  tráfico de red, esta será una variable que ayudará a su captura de detección de anomalías, un cierto tipo de anomalía. También puede ser creativo e inventar otras variables. Como tal vez tenga una función x6, que es la carga de CPU al cuadrado dividida entre el tráfico de red. Esta sería otra variante de una variable, tal como x5 para tratar de capturar anomalías donde una de sus máquinas tiene una carga de CPU muy alta, que tal vez no tiene un tráfico de red proporcionalmente grande. Mediante la creación de funciones como estas, puede empezar a capturar anomalías que realmente corresponden a combinaciones inusuales de valores de las variables. En este video, hablamos de cómo crear y tomar una variable y tal vez transformarla un poco, de modo que se vuelva un poco más Gaussiana, antes de alimentarla en un algoritmo de detección de anomalías. También vimos el análisis del error en este proceso de creación de funciones para tratar de capturar diferentes tipos de anomalías. Espero que este tipo de pautas le ayuden a elegir buenas variables para añadir a su algoritmo de detección de anomalías y ayudarle así a capturar todo tipo de anomalías.