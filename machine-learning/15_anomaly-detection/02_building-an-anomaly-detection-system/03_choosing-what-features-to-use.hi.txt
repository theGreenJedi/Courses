अब तक अपने देखा है अनॉमली डिटेक्शन अल्गोरिद्म और हमने हमने बात भी की कि कैसे करते हैं इवैल्यूएट एक अनॉमली डिटेक्शन अल्गोरिद्म. ऐसा होता है, कि जब आप अप्लाई करते हैं अनॉमली डिटेक्शन, एक चीज़ जिसका बड़ा प्रभाव होता है कि कितना अच्छा यह करता है, वह है कि कौन से फ़ीचर्ज़ आप प्रयोग करते हैं और कौन से फ़ीचर्ज़ का आप चुनाव करते हैं अनॉमली डिटेक्शन अल्गोरिद्म को देने के लिए. अत: इस वीडियो में, मैं चाहूँगा कहना कुछ शब्द, दूँगा कुछ सुझाव और दिशा निर्देश कि कैसे करना है डिज़ाइन या चयन फ़ीचर्ज़ का अनॉमली डिटेक्शन अल्गोरिद्म को देने के लिए. हमारे एनोमली डिटेक्शन अल्गोरिद्म में, एक काम जो हमने किया था वह था फ़ीचर्ज़ को मॉडल करना इस प्रकार के गॉशीयन डिस्ट्रिब्यूशन से. एक्स आइ को मयू आइ, सिग्मा स्क्वेर्ड आइ, के साथ, मान लीजिए. और इसलिए एक काम जो मैं अक्सर करता हूँ वह होगा प्लॉट करना डेटा या हिस्टोग्राम डेटा का, यह सुनिश्चित करने के लिए कि डेटा दिखता है लगभग गॉशीयन देने से पहले इसे मेरे अनॉमली डिटेक्शन अल्गोरिद्म को. और, आम तौर पर यह सही काम करेगा, यदि आपका डेटा गॉशीयन नहीं भी है तो भी , लेकिन यह एक प्रकार से एक अच्छा परीक्षण है करने के लिए. और वैसे तो, यदि आपका डेटा दिखता है नॉन-गॉशीयन, तो भी यह अल्गोरिद्म अक्सर सही काम करता है. लेकिन, वास्तव में अगर मैं करूँ प्लॉट डेटा को इस प्रकार, और यदि यह दिखता है एक हिस्टोग्राम इस तरह, और शैली प्लॉट करने की हिस्टोग्राम की है कि प्रयोग करें एचआईएसटी, या हिस्ट कमांड ओकटेव में, लेकिन यदि यह ऐसा दिखता है, यह दिखता हैं अस्पष्ट रूप से गॉशीयन, अत: यदि मेरे फ़ीचर्ज़ ऐसे दिखते है, मैं बहुत ख़ुशी से फ़ीड करूँगा मेरे अल्गोरिद्म में. लेकिन यदि मुझे प्लॉट करना है एक  हिस्टोग्राम मेरे डेटा का, और यदि वह दिखेगा ऐसा, यह बिलकुल नहीं दिखता एक घंटी के आकार का कर्व, यह है एक एसिमेट्रिक डिस्ट्रिब्यूशन, इसकी चोटी एक तरफ़ को है. यदि ऐसा है जो मेरा डेटा दिखता है, मैं अक्सर क्या करता हूँ कि कोशिश करता हूँ विभिन्न ट्रैन्स्फ़र्मेशन्स / परिवर्तन डेटा के इसे बनाने के लिए गॉशीयन की तरह. और फिर से, अल्गोरिद्म अधिकतर सही काम करेगा, यदि आप नहीं भी करेंगे. लेकिन यदि आप करेंगे ये परिवर्तन अपने डेटा को बनाने के लिए गॉशीयन की तरह, यह थोड़ा बेहतर काम करेगा. तो एक डेटासेट दिया होने पर जो ऐसा दिखता है, मैं क्या करूँगा शायद कि लूँगा एक लॉग  ट्रैन्स्फ़र्मेशन्स / परिवर्तन डेटा का और यदि मैं यह करता हूँ और दोबारा प्लॉट करता हूँ हिस्टोग्राम, मुझे क्या मिलेगा इस ख़ास उदाहरण में, एक हिस्टोग्राम जो ऐसा दिखता है. और यह दिखता है अधिक गॉशीयन, सही है? यह दिखता है अधिक  अच्छा घंटी के आकार का कर्व, कि हम फ़िट कर सकते हैं कुछ मीन और वेरीयन्स पेरामिटर सिग्मा. अत: क्या मतलब है मेरा लेने से एक लॉग  ट्रैन्स्फ़र्मेशन्स / परिवर्तन, वास्तव में कि यदि मेरे पास हैं कुछ फ़ीचर्ज़ एक्स 1 और तब हिस्टोग्राम एक्स 1 का दिखता है ऐसा तब मैं शायद लूँगा मेरा फ़ीचर एक्स 1 और बदल दूँगा उसे लॉग एक्स 1 से और यह है मेरा नया एक्स 1 जो मैं प्लॉट करूँगा हिस्टोग्राम में यहाँ दाईं तरफ़, और यह दिखता है काफ़ी कुछ गॉशीयन. एक लॉग ट्रैन्स्फ़र्मेशन के स्थान पर कुछ और चीज़ें जो आप कर सकते हैं, शायद होंगी, मान लीजिए मेरे पास है एक अलग फ़ीचर एक्स 2, शायद मैं उसे बदलूँगा लॉग एक्स प्लस 1 से, या साधारणतया लॉग एक्स को एक्स 2 से और कोई कांस्टेंट सी और यह कॉन्स्टंट हो सकता है कुछ भी जो मैं ले सकता हूँ, इसे गॉशीयन जैसे बनाने की कोशिश करते हुए जितना सम्भव हो सके. या एक अलग फ़ीचर एक्स 3 के लिए, शायद शायद मैं उसे बदलूँगा एक्स3 से, मैं शायद लूँगा स्क्वेर रूट. स्क्वेर रूट है सिर्फ़ एक्स 3 की पावर आधा, सही है? और यह आधा है एक और उदाहरण एक पेरामिटर का जो मैं बदल सकता हूँ. अत:, मेरे पास हो सकता है एक्स 4 और मैं शायद बदलूँगा उसे एक्स 4 की पावर कुछ और से, शायद पावर 1/3 से. और ये, ये सब यह वाला, यह एक्स्पोनेंट पेरामिटर, या सी पेरामिटर, ये सब हैं उदाहरण पेरमिटर्स के जो बदल बदल कर देख सकते हैं बनाने के लिए आपके डेटा को अधिक गॉशीयन. तो, मै आपको एक लाइव डेमो दिखाता हूँ कि कैसे में वास्तव मैं करता हूँ बदलाव मेरे डेटा में बनाने के लिए इसे अधिक गॉशीयन. अत:, मैंने पहले ही लोड किया है ओकटेव में यहाँ एक सेट फ़ीचर्ज़ एक्स का मेरे पास एक हज़ार इग्ज़ैम्पल्ज़ लोडेड है यहाँ पर. तो चलिए बनाते हैं हिस्टोग्राम मेरे डेटा का. प्रयोग करें हिस्ट एक्स कमांड. तो यह रहा मेरा हिस्टोग्राम. बिना बताए, शायद यह लेता है 10 बिन्स हिस्टोग्राम्स के, लेकिन मैं देखना चाहता हूँ एक अधिक महीन ग्रीड हिस्टोग्राम. तो हम करते है हिस्ट एक्स, 50, तो, यह प्लॉट करता है इसे 50 अलग बिन्स में. ओके, वह बेहतर दिखता है. अब, यह नहीं दिखता बहुत गॉशीयन, क्या? अत:, चलिए डेटा में बदलाव करना शुरू करते हैं. चलिए करते हैं एक हिस्ट एक्स 0.5 का. तो हम लेते हैं स्क्वेर रूट डेटा का, और प्लॉट करते हैं वह हिस्टोग्राम. और, ओके, यह दिखता है थोड़ा अधिक गॉशीयन, लेकिन अभी नहीं है पूरी तरह वहाँ, तो चलिए बदलते हैं 0.5 पेरामिटर. चलिए देखते हैं. सेट करें इसे 0.2 दिखता है थोड़ा अधिक गॉशीयन. चलिए थोड़ा और कम करते हैं 0.1 तक. हाँ, वह दिखता है काफ़ी अच्छा. मैं वास्तव में ले सकता हूँ केवल 0.1 ही. चलिए, कम करते हैं इसे 0.05 तक. और आप जानते हैं? ओके, यह दिखता है अधिक गॉशीयन, तो मैं परिभाषित कर सकता हूँ एक नया फ़ीचर जो है एक्स मयू ईक्वल्ज़ एक्स टु 0.05, और अब मेरा नया फ़ीचर एक्स मयू दिखता है अधिक गॉशीयन पहले वाले की अपेक्षा और तब मैं शायद उसके स्थान पर लूँगा यह नया फ़ीचर फ़ीड करने के लिए मेरे अनॉमली डिटेक्शन अल्गोरिद्म को. और निस्संदेह, ऐसा करने के एक से अधिक तरीके हैं. आप कर सकते थे हिस्ट लॉग ऑफ़ एक्स का भी, जो एक और उदाहरण है एक ट्रैन्स्फ़र्मेशन का जो आप कर सकते हैं. और, आप जानते हैं, यह भी दिखता है अधिक गॉशीयन, तो मैं परिभाषित भी कर सकता हूँ एक्स मयू ईक्वल्ज़ लॉग ऑफ एक्स, और वह भी होगा एक और अच्छा विकल्प एक फ़ीचर को लेने का. अत: सारांश में, यदि आप प्लॉट करते है हिस्टोग्राम डेटा के साथ, और पाते हैं कि वह दिखता है काफ़ी नॉन-गॉशियन, वह योग्य होगा करने के लिए थोड़ा बहुत विभिन्न ट्रैन्स्फ़र्मेशन्स इन जैसी, देखने के लिए कि क्या आप बना सकते है आपके डेटा को थोड़ा अधिक गॉशीयन, इसे फ़ीड करने से पहले आपके लर्निंग अल्गोरिद्म को, जबकि यदि नहीं भी करते आप, यह शायद फिर भी सही काम करे. लेकिन मैं अक्सर करता हूँ यह स्टेप. अब, दूसरी बात जो मैं चाहता हूँ बताना कि कैसे आप बनाते है फ़ीचर्ज़ अनॉमली डिटेक्शन अल्गोरिद्म को देने के लिए. और जिस तरह मैं प्रायः करता हूँ ऐसा, वह है एक एरर अनालिसिस प्रसीजर के रास्ते. अत: क्या मतलब है मेरा उससे, कि यह है वास्तव में वैसा ही समान एरर अनालिसिस प्रसीजर के जो हम करते है सूपरवाइज़्ड लर्निंग में, जहां करते हैं ट्रेन एक पूरा अल्गोरिद्म, और रन करते हैं अल्गोरिद्म को एक क्रॉस वैलिडेशन सेट पर, और देखते हैं इग्ज़ैम्पल्स को जो यह ग़लत बताता है, और देखते है यदि हम बना सकते हैं अतिरिक्त फ़ीचर्ज़ सहायता करने के लिए अल्गोरिद्म की बेहतर करने के लिए इग्ज़ाम्पल्ज़ पर जो यह ग़लत बताता है क्रॉस-वैलिडेशन सेट में. तो आइये कोशिश करते हैं समझने की एक इग्ज़ैम्पल से इस प्रक्रिया को. एनोमली डिटेक्शन में, हम आशा करते हैं कि पी ऑफ़ एक्स होगा काफ़ी बड़ा नोर्मल / सामान्य इग्ज़ैम्पल्ज़ के लिए और यह काफ़ी कम होगा अनॉमलस / अनियमित इग्ज़ैम्पल्ज़ के लिए. और इसलिए एक काफ़ी कॉमन / सामान्य समस्या होगी यदि पी ऑफ़ एक्स होगा समतुल्य, शायद काफ़ी बड़ा दोनों नोर्मल इग्ज़ैम्पल्ज़ और अनॉमलस इग्ज़ैम्पल्ज़ के लिए. चलिए लेते हैं उसका एक विशेष उदाहरण. मान लेते हैं यह मेरा अनलेबल्ड डेटा है. अत:, मेरे पास है केवल एक फ़ीचर, एक्स 1 और इसलिए मैं फ़िट करूँगा गॉशीयन इसमें. और शायद मेरा गॉशीयन जो मैं फ़िट करता हूँ डेटा को वह दिखता है ऐसा. और मान लीजिए मेरे पास है एक अनॉमलस / अनियमित इग्ज़ैम्पल, और मान लीजिए कि मेरा एक अनॉमलस / अनियमित इग्ज़ैम्पल, लेता है एक्स वैल्यू 2.5. तो मैं प्लॉट करता हूँ  मेरा एक अनॉमलस / अनियमित इग्ज़ैम्पल वहाँ. और आप जानते हैं, यह एक प्रकार से दबा हुआ है मध्य में कुछ नोर्मल इग्ज़ैम्पल्ज़ के गुच्छे में, और इसलिए, केवल यह अनॉमलस / अनियमित इग्ज़ैम्पल जो मैंने बनाया है हरे रंग में, इसे मिलती है एक काफ़ी अधिक प्रॉबबिलिटी, जहाँ यह हाइट / ऊँचाई नीले कर्व की है, और अल्गोरिद्म नहीं कर पाता फ्लेग / सूचित इसे एक अनॉमलस / अनियमित इग्ज़ैम्पल. अब, यदि यह होता शायद एयरक्राफ़्ट एंजिन उत्पादन या ऐसा कुछ, क्या करता मैं कि मैं वास्तव में देखूँगा मेरे ट्रेनिंग एग्जामपल्स और देखूँगा कि क्या ग़लत हुआ उस विशेष एयर क्राफ़्ट एंजिन में, और देखिए, यदि देखने से उस इग्ज़ाम्पल को मुझे लगता है कि एक नया फ़ीचर बन सकता है एक्स 2, जो सहायक हो सकता है पहचानने में इस अनियमित इग्ज़ाम्पल को, तुलना में मेरे बाक़ी के लाल इग्ज़ाम्पल्ज़ से, तुलना में सारे मेरे नियमित एयर क्राफ़्ट एंजिन्स से. और यदि मैं वह कर पाता हूँ, आशा होगी तब, कि, यदि मैं बना सकता हूँ एक नया फ़ीचर, एक्स 2, ताकि जब मैं दोबारा प्लॉट करूँ मेरा डेटा, यदि मैं लेता हूँ मेरे नियमित इग्ज़ाम्पल्ज़ मेरे ट्रेनिंग सेट के, आशा है मुझे मिलेगा कि मेरे ट्रेनिंग इग्ज़ाम्पल्ज़ हैं ये लाल क्रॉसेज़ यहाँ. और आशा है, यदि मुझे मिलता है कि मेरे अनॉमलस इग्ज़ाम्पल के लिए, फ़ीचर एक्स 2 लेता है असामान्य वैल्यू. अत: मेरे हरे रंग के इग्ज़ाम्पल के लिए यहाँ, यह अनॉमली, सही, मेरी एक्स 1 की वैल्यू अभी भी 2.5 है. तब शायद मेरी एक्स 2 की वैल्यू, आशा है यह लेता है एक बहुत बड़ी वैल्यू जैसे 3.5 यहाँ पर, या एक बहुत छोटी वैल्यू. लेकिन अब, यदि मैं मॉडल करता हूँ मेरे डेटा को, मुझे मिलेगा कि मेरा अनॉमली डिटेक्शन अल्गोरिद्म देता है अधिक प्रॉबबिलिटी डेटा को मध्य क्षेत्र में, थोड़ी कम प्रॉबबिलिटी उसको, थोड़ी कम उसको. एक इग्ज़ाम्पल जो बहुत दूर वहाँ है, मेरा अल्गोरिद्म अब देगा एक बहुत कम प्रॉबबिलिटी उसे. और इसलिए, प्रक्रिया इसकी है, वास्तव में देखिए ग़लतियाँ जो यह कर रहा है. देखिए अनॉमली को जो अल्गोरिद्म सूचित नहीं कर पा रहा है, और देखिए यदि उससे आपको लगता है कि नया फ़ीचर बनाया जा सकता है. तो ढूँढिए कुछ असामान्य उस एयरक्राफ़्ट एंजिन के बारे में और प्रयोग कीजिए उसे बनाने के लिए एक नया फ़ीचर, ताकि उस नए फ़ीचर से आसान हो जाए पहचानना अनॉमलीज़ को आपके नियमित इग्ज़ाम्पल्ज़ से. और इसलिए वह है प्रक्रिया एरर अनालिसिस की और उसे काम में लाकर बनाना नए फ़ीचर्ज़  अनॉमली डिटेक्शन के लिए. अंत में, मैं बताना चाहूँगा आपको मेरे विचार कि कैसे मैं प्रायः चयन करता हूँ फ़ीचर्ज़ का अनॉमली डिटेक्शन के लिए. अत: प्रायः मैं जैसे सोचता हूँ चयन करने के लिए फ़ीचर्ज़ वह है मैं चाहता हूँ चुनना उन फ़ीचर्ज़ को जो लेते हैं या तो बहुत अधिक बड़ी वैल्यूज़, या बहुत अधिक छोटी वैल्यूज़, उन इग्ज़ाम्पल्ज़ के लिए जो मैं सोचता हूँ शायद अनॉमलीज़ होंगे. तो चलिए लेते हैं हमारा उदाहरण फिर से मॉनिटर करने का कम्प्यूटर्ज़ को डेटा सेंटर में. और इसलिए आपके पास बहुत सी मशीन्स हैं, शायद हज़ारों में, या दस हज़ारों में मशीन्सज़ हैं एक डेटा सेंटर में. हम जानना चाहते हैं कि यदि एक इन में से मशीन्स, हमारा एक कम्प्यूटर कुछ असमान्य कर रहा है. तो यहाँ है उदाहरण फ़ीचर्ज़ के जो आप ले सकते हैं, शायद मेमरी यूज़्ड, नम्बर ऑफ़ डिस्क अकेस्सेस, सीपीयू लोड, नेटवर्क ट्रैफ़िक. लेकिन अब, मान लीजिए कि मुझे लगता है कि एक फ़ेल्यर है, मान लीजिए कि मेरे डेटा सेट में शायद कि सीपीयू लोड और नेटवर्क ट्रैफ़िक बढ़ते हैं लिनीअर्ली एक दूसरे के साथ. शायद मैं रन कर रहा हूँ कुछ वेब सर्वर्ज़, और इसलिए, यहाँ यदि मेरे सर्वर्ज़ में से एक सर्व कर रहा है बहुत से यूज़र्ज़ को, मेर पास बहुत अधिक सीपीयू लोड है और एक बहुत अधिक नेटवर्क ट्रैफ़िक है. लेकिन मान लीजिए, शायद मान लीजिए मुझे शक है, कि फ़ेल्यर केसेज़ में से एक है यदि मेरे एक कम्प्यूटर के पास एक जॉब है जो अटक जाता है किसी इन्फ़िनिट लूप में. इसलिए यदि शायद एक फ़ेल्यर केस, है एक मेरी मशीनों में, मेरा एक वेब सर्वर - सर्वर कोड- अटक जाता है किसी इन्फ़िनिट लूप में, और इसलिए सीपीयू लोड बढ़ जाता है, लेकिन नेटवर्क ट्रैफ़िक नहीं बढ़ता क्योंकि यह सिर्फ़ घूम रहा है इसके चक्र में और कर रहा बहुत सा सीपीयू वर्क, आप जानते हैं, अटके हुए किसी इन्फ़िनिट लूप में. उस केस में, डिटेक्ट करना उस तरह की अनॉमली, मैं शायद बनाऊँगा एक नया फ़ीचर, एक्स 5, जो शायद होगा सीपीयू लोड विभाजित किया गया नेटवर्क ट्रैफ़िक से. और इसलिए यहाँ एक्स 5 लेगा एक असामान्य रूप से बड़ी वैल्यू यदि इन में से एक मशीन पर है बहुत अधिक सीपीयू लोड लेकिन उतना अधिक नेटवर्क ट्रैफ़िक नहीं और तो यह होगा एक फ़ीचर जो सहायता करेगा आपके अनॉमली डिटेक्शन को पकड़ने में, एक निश्चित प्रकार की अनॉमली को. और आप हो सकते हैं रचनात्मक और बना सकते हैं दूसरे फ़ीचर्ज़ भी. जैसे शायद मेरे पास है एक फ़ीचर एक्स 6 जो है सीपीयू लोड स्क्वेर्ड विभाजित किया गया नेटवर्क ट्रैफ़िक से. और यह होगा एक और रूप एक्स 5 जैसे फ़ीचर का कोशिश में कैप्चर करने की अनॉमलीज़ को जहाँ एक आपकी मशीन पर है एक बहुत अधिक सीपीयू लोड, जिस पर शायद नहीं उतना समतुल्य रूप से बड़ा नेटवर्क ट्रैफ़िक. और बनाने से फ़ीचर्ज़ इस प्रकार के,  आप कर सकते हैं कैप्चर अनॉमलीज़ जो कॉरेस्पॉंड करती है फ़ीचर्ज़ की वैल्यूज़ के असामान्य संयोजन को. तो इस  वीडियो में हमने बात भी की कि कैसे करते हैं और लेते हैं एक फ़ीचर, और शायद उसे ट्रैन्स्फ़ॉर्म करते हैं थोड़ा बहुत, ताकि यह थोड़ा और गॉशीयन  हो जाए, फ़ीड करने से पहले एक अनॉमली डिटेक्शन अल्गोरिद्म में. और एरर अनालिसिस की भी इस प्रक्रिया में फ़ीचर्ज़ बनाने की कैप्चर करने की कोशिश में विभिन्न प्रकार की अनॉमलीज़ को. और इन दिशा निर्देशों के साथ, उम्मीद है वे आपको सहायता करेंगे चुनाव में उपयुक्त फ़ीचर्ज़ के, देने के लिए आपके अनॉमली डिटेक्शन अल्गोरिद्म को, ताकि उससे सहायता हो सके कैप्चर करने के लिए विभिन्न प्रकार की अनॉमलीज़ को.