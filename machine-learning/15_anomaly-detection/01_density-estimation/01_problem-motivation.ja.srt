1
00:00:00,170 --> 00:00:01,190
今後の一連のビデオで、

2
00:00:01,720 --> 00:00:02,680
アノマリー検出、と言われる

3
00:00:03,050 --> 00:00:04,560
問題を扱いたい。

4
00:00:05,710 --> 00:00:07,220
これは割と良く使われる種類の

5
00:00:07,870 --> 00:00:08,740
機械学習で、

6
00:00:09,580 --> 00:00:10,990
そして興味深い側面の一つに、

7
00:00:11,580 --> 00:00:13,250
これはだいたい教師なし学習の

8
00:00:14,020 --> 00:00:15,860
問題でありながら、またある側面では

9
00:00:16,320 --> 00:00:17,240
教師有り学習の問題に

10
00:00:17,510 --> 00:00:20,000
とても似ている部分もある。

11
00:00:21,160 --> 00:00:22,440
で、アノマリー検出とは何か？

12
00:00:23,380 --> 00:00:25,000
それを説明する為に、

13
00:00:25,240 --> 00:00:27,780
やる気になりそうな例として、、、

14
00:00:28,440 --> 00:00:30,040
航空機のエンジンの

15
00:00:30,330 --> 00:00:32,370
製造者だとしよう。

16
00:00:32,600 --> 00:00:33,850
そしてあなたの航空機のエンジンが

17
00:00:34,280 --> 00:00:35,330
組み立てラインからロールオフして、

18
00:00:35,620 --> 00:00:37,580
そしてQAをしている、つまり

19
00:00:37,820 --> 00:00:39,850
品質保証テストをしているとしよう。

20
00:00:40,030 --> 00:00:41,340
そしてそのテストの一貫として、

21
00:00:41,410 --> 00:00:43,140
航空機のエンジンの

22
00:00:43,510 --> 00:00:44,900
ある機能ーーそうだなぁ、生成される熱とか

23
00:00:45,180 --> 00:00:46,820
振動とかを

24
00:00:46,860 --> 00:00:48,340
測っているとしよう。

25
00:00:48,630 --> 00:00:49,570
ずっと昔に私の友人達が

26
00:00:49,860 --> 00:00:50,940
この問題に挑んでいて

27
00:00:51,010 --> 00:00:52,610
これらのフィーチャーは本当に

28
00:00:52,710 --> 00:00:53,960
彼らが実際の航空機エンジンから

29
00:00:54,470 --> 00:00:55,910
集めた物だ。

30
00:00:56,280 --> 00:00:58,540
あなたは今、

31
00:00:58,630 --> 00:00:59,570
X1からXmのデータセットを

32
00:00:59,700 --> 00:01:01,000
持っている。

33
00:01:01,760 --> 00:01:04,490
m個の航空機エンジンを作ったとして、

34
00:01:05,030 --> 00:01:06,740
そのデータをプロットすると、こんな感じになるだろう。

35
00:01:07,130 --> 00:01:08,640
この各点、各バッテンは

36
00:01:08,770 --> 00:01:10,580
あなたのラベル無し手本だ。

37
00:01:11,990 --> 00:01:15,220
そしてアノマリー検出の問題は以下のような感じ。

38
00:01:16,450 --> 00:01:17,770
翌日、新しい航空機のエンジンが

39
00:01:17,880 --> 00:01:18,970
組立ラインから

40
00:01:19,140 --> 00:01:20,390
ロールオフしたと

41
00:01:20,810 --> 00:01:21,860
してみよう。

42
00:01:22,320 --> 00:01:23,890
あなたの新しい航空エンジンは

43
00:01:24,160 --> 00:01:25,440
幾つかのフィーチャーの集合、x-testを持つ。

44
00:01:26,290 --> 00:01:27,680
アノマリー検出問題とは

45
00:01:27,930 --> 00:01:29,070
この航空機エンジンが

46
00:01:29,420 --> 00:01:31,310
とにかく何かしら普通でないかを

47
00:01:31,520 --> 00:01:32,480
知りたい。言い換えると、

48
00:01:32,740 --> 00:01:34,110
たとえばこのエンジンを

49
00:01:34,570 --> 00:01:36,290
さらなるテストに回さなきゃいけないかを知りたい、

50
00:01:37,330 --> 00:01:38,370
またはこのエンジンは

51
00:01:38,710 --> 00:01:40,560
問題なさそうなのかを。

52
00:01:40,740 --> 00:01:41,700
問題なさそうで、

53
00:01:41,880 --> 00:01:43,260
追加のテスト無しで客に出荷して良さそうかを。

54
00:01:44,560 --> 00:01:45,670
つまり、その新しい

55
00:01:45,840 --> 00:01:47,330
航空機エンジンが

56
00:01:47,540 --> 00:01:49,150
そこの点なら

57
00:01:49,260 --> 00:01:50,200
うーむ、それ以前の

58
00:01:50,360 --> 00:01:51,440
たくさんの航空機エンジンと

59
00:01:51,650 --> 00:01:53,860
似てるので、たぶんOKそうでしょう。

60
00:01:54,750 --> 00:01:55,740
一方、新しい航空機エンジンが

61
00:01:56,200 --> 00:01:59,390
x-testが、

62
00:01:59,620 --> 00:02:00,430
ここの点なら、

63
00:02:00,910 --> 00:02:02,270
つまりx1とx2が

64
00:02:02,410 --> 00:02:04,800
この新しい手本のフィーチャーなら、

65
00:02:05,360 --> 00:02:06,530
x-testがはるかこの

66
00:02:06,590 --> 00:02:08,930
外にあるなら、それはアノマリーと呼んで良かろう。

67
00:02:10,420 --> 00:02:11,640
だからたぶん、顧客に出荷する前に

68
00:02:12,070 --> 00:02:13,720
追加のテストに送り出しても

69
00:02:13,870 --> 00:02:15,130
良いといえよう。

70
00:02:16,010 --> 00:02:18,340
だってこのエンジンは、

71
00:02:18,600 --> 00:02:20,350
それ以外に見た物と大きく異なっているから。

72
00:02:21,000 --> 00:02:22,560
より正式には、アノマリー検出の問題では

73
00:02:22,960 --> 00:02:24,230
なんらかのデータセットが与えられて、

74
00:02:24,900 --> 00:02:26,160
それはx1からxmまでの

75
00:02:26,280 --> 00:02:28,340
手本としておく、そして、

76
00:02:28,460 --> 00:02:29,720
普通はこれらのm個の手本を

77
00:02:29,880 --> 00:02:32,250
ノーマル、または

78
00:02:33,120 --> 00:02:34,910
アノマリーでは無い、と想定する。

79
00:02:34,980 --> 00:02:36,100
そしてある新しいサンプル、

80
00:02:36,290 --> 00:02:38,300
x-testが来た時にに、それがアノマリーっぽいかをアルゴリズムに教えて欲しい。

81
00:02:38,850 --> 00:02:40,080
その為に我らがとるアプローチは

82
00:02:40,130 --> 00:02:41,670
与えられたデータセットに対し

83
00:02:42,060 --> 00:02:43,300
ラベル無しのトレーニングセットが与えられた時に

84
00:02:43,690 --> 00:02:45,280
モデルp(x)を

85
00:02:45,420 --> 00:02:46,920
構築する。

86
00:02:47,020 --> 00:02:48,060
言い換えると、

87
00:02:48,140 --> 00:02:49,320
xの時の確率のモデルを

88
00:02:49,520 --> 00:02:51,230
構築するということ、ここで

89
00:02:51,390 --> 00:02:53,330
xはこれらのフィーチャー、例えば航空機のエンジンとかの。

90
00:02:54,620 --> 00:02:56,290
そしてxの時の確率のモデルを

91
00:02:56,530 --> 00:02:57,350
構築して、

92
00:02:58,070 --> 00:02:59,230
新しい航空機エンジンに対し、

93
00:02:59,820 --> 00:03:01,280
p(x-test)が、

94
00:03:01,520 --> 00:03:04,670
あるエプシロンより

95
00:03:04,920 --> 00:03:07,180
小さいかを見る。

96
00:03:07,930 --> 00:03:09,170
そしてこれがアノマリーかどうかのフラグをつける。

97
00:03:11,410 --> 00:03:12,260
つまり新しいエンジンで

98
00:03:12,660 --> 00:03:13,960
データから推計した

99
00:03:14,850 --> 00:03:15,900
モデル、p(x)による確率が

100
00:03:16,020 --> 00:03:17,130
とても小さいのを見かけたら、

101
00:03:17,790 --> 00:03:19,370
これをアノマリーとフラグをつける。

102
00:03:19,730 --> 00:03:21,880
もしp(x-test)が、例えば

103
00:03:22,320 --> 00:03:24,110
ある小さな閾値より大きければ

104
00:03:25,120 --> 00:03:26,620
それはオーケーっぽいと言うわけ。

105
00:03:27,780 --> 00:03:28,740
そして与えられたトレーニングセットが

106
00:03:28,980 --> 00:03:30,890
ここにプロットしたような物だとして、

107
00:03:31,060 --> 00:03:31,940
以下のようなモデルを構築して、

108
00:03:32,560 --> 00:03:34,020
航空機エンジンの、、、

109
00:03:34,470 --> 00:03:35,500
いや、モデルp(x)に、

110
00:03:35,560 --> 00:03:37,070
どこかこの中のあたりに

111
00:03:37,260 --> 00:03:38,540
ある点に対しては、

112
00:03:38,580 --> 00:03:39,550
とても高い確率だと言って欲しく、

113
00:03:40,720 --> 00:03:42,830
他方、ちょっと離れた所にある点には、低い確率だと言って欲しい。

114
00:03:43,850 --> 00:03:45,050
さらに遠く離れた点に対しては

115
00:03:45,530 --> 00:03:47,220
なんらかの、より低い確率になって欲しい。

116
00:03:47,480 --> 00:03:48,420
そしてこの離れた点や

117
00:03:49,080 --> 00:03:50,400
この離れた点は

118
00:03:50,520 --> 00:03:52,100
アノマリーだろう。

119
00:03:54,150 --> 00:03:55,280
他方ここにある点、

120
00:03:55,470 --> 00:03:56,460
ちょうどなかほどにある点、

121
00:03:56,520 --> 00:03:57,720
これはOKだろう、

122
00:03:57,830 --> 00:03:59,080
だってp(x)は

123
00:03:59,370 --> 00:04:00,300
なかほどの点に対しては

124
00:04:00,460 --> 00:04:01,320
とても高くなるだろうから、だって

125
00:04:01,520 --> 00:04:03,320
その辺にはたくさんの点が見られているから。

126
00:04:04,620 --> 00:04:07,580
これはアノマリー検出の応用の一例だ。

127
00:04:08,450 --> 00:04:09,990
たぷん一番一般的なアノマリー検出の

128
00:04:10,080 --> 00:04:11,420
応用例は、

129
00:04:11,560 --> 00:04:13,260
たくさんのユーザーが居て、

130
00:04:13,360 --> 00:04:14,820
各ユーザーが異なるアクティビティを行なっている時に、

131
00:04:15,070 --> 00:04:16,360
たとえば

132
00:04:16,670 --> 00:04:17,740
webサイト上とか

133
00:04:17,920 --> 00:04:18,560
物理的な工場とかそういうので、

134
00:04:18,630 --> 00:04:20,180
各ユーザーごとのアクティビティの

135
00:04:20,300 --> 00:04:23,670
フィーチャーを計算する事が出来る時に、

136
00:04:24,830 --> 00:04:25,730
モデルを構築して、

137
00:04:25,940 --> 00:04:27,240
いわば、異なるユーザーが

138
00:04:27,310 --> 00:04:28,960
別々の行動をとる確率を言わせる事が

139
00:04:29,170 --> 00:04:30,730
出来る。

140
00:04:30,890 --> 00:04:32,280
ユーザー行動を表すフィーチャーの

141
00:04:32,460 --> 00:04:34,590
あるベクトルがどの位の

142
00:04:34,840 --> 00:04:36,750
確率となるのか、

143
00:04:36,900 --> 00:04:38,360
たとえばユーザーアクティビティの

144
00:04:38,450 --> 00:04:40,480
フィーチャーの例としては、

145
00:04:40,650 --> 00:04:41,650
webサイトの場合なら、

146
00:04:42,710 --> 00:04:44,350
x1がユーザーのログインの頻度で、

147
00:04:44,840 --> 00:04:46,460
x2は、うーん、

148
00:04:46,850 --> 00:04:47,920
訪問したページの

149
00:04:48,130 --> 00:04:49,330
総数とか、取引の総数で、

150
00:04:49,730 --> 00:04:51,420
x3は、うーん、

151
00:04:51,440 --> 00:04:52,820
そのユーザーがフォーラムにポストした

152
00:04:53,120 --> 00:04:53,990
投稿の総数で、

153
00:04:54,130 --> 00:04:55,850
フィーチャーx4は

154
00:04:56,000 --> 00:04:56,910
ユーザーのタイピング速度とかの

155
00:04:57,440 --> 00:04:58,660
可能性だってありえる。

156
00:04:58,920 --> 00:04:59,980
実際一秒あたりのユーザーの

157
00:05:00,280 --> 00:05:01,410
タイプした文字速度を

158
00:05:01,600 --> 00:05:03,010
トラックしているwebサイトもある。

159
00:05:03,730 --> 00:05:06,610
そしてこんな類のデータに対して、p(x)をモデリング出来るわけだ。

160
00:05:08,150 --> 00:05:09,140
そして最後に、その得られたモデルp(x)を使って、

161
00:05:09,270 --> 00:05:10,530
あなたのwebサイトで

162
00:05:10,790 --> 00:05:12,570
凄く奇妙な行動をとっているユーザーを

163
00:05:12,760 --> 00:05:14,210
特定する事が出来る、

164
00:05:14,350 --> 00:05:15,590
どのユーザーが確率的に

165
00:05:16,320 --> 00:05:18,100
エプシロン以下なのかをチェックする事によって。

166
00:05:18,240 --> 00:05:21,140
そしてそれらのユーザーのプロファイルをさらなるレビューに送り出すとか、

167
00:05:22,330 --> 00:05:24,560
または、それらのユーザーからは追加の身分証明を

168
00:05:24,740 --> 00:05:26,190
提出させるとか、

169
00:05:26,650 --> 00:05:28,370
そういう、あなたのwebサイトを奇妙な行動や

170
00:05:29,200 --> 00:05:31,650
詐欺っぽい行動からガードする何らかの措置を講ずるのだ。

171
00:05:33,030 --> 00:05:34,960
この種の技術は、

172
00:05:35,160 --> 00:05:36,470
普通でない行動をしているユーザーをフラグ付けしてしまい、

173
00:05:36,720 --> 00:05:38,250
それは必ずしも

174
00:05:39,480 --> 00:05:41,420
不正をしているユーザーだけとは限らない。

175
00:05:42,190 --> 00:05:44,030
つまりいっつも盗みを働いているユーザーだけじゃなく

176
00:05:44,370 --> 00:05:45,670
たんにふざけてるだけのユーザーも。

177
00:05:45,780 --> 00:05:47,780
普通でないユーザーを探すだけ。

178
00:05:48,560 --> 00:05:49,770
だがこれは実際に

179
00:05:50,040 --> 00:05:51,430
たくさんの商品を販売している

180
00:05:52,500 --> 00:05:53,570
オンラインwebサイトにおいて、

181
00:05:53,750 --> 00:05:55,860
詐欺行為をしているか

182
00:05:56,240 --> 00:05:57,900
不正にのっとったアカウントを使っている事を示す事を期待すべく、

183
00:05:58,040 --> 00:05:59,160
奇妙な行動をとっているユーザーを見つける為に

184
00:05:59,760 --> 00:06:02,420
使われているテクニックだ。

185
00:06:03,580 --> 00:06:06,410
アノマリー検出のもう一つの応用例は製造業だ。

186
00:06:07,180 --> 00:06:08,470
航空機エンジンのケースを

187
00:06:08,530 --> 00:06:09,770
既に話したが、そこでは

188
00:06:10,030 --> 00:06:11,460
普通とは異なる航空機エンジンを

189
00:06:11,900 --> 00:06:13,600
見つけ出して、それらをさらなるレビューへと送り出すのだった。

190
00:06:15,430 --> 00:06:16,740
三番目の応用例はデータセンターの

191
00:06:17,070 --> 00:06:19,210
コンピュータをモニタリングするという事。

192
00:06:19,390 --> 00:06:20,410
これに実際に従事してる友達が何人かいるよ。

193
00:06:21,260 --> 00:06:22,280
コンピュータのクラスタなりデータセンターなりに

194
00:06:22,580 --> 00:06:23,550
たくさんのコンピュータが

195
00:06:23,730 --> 00:06:24,690
あったとして、

196
00:06:24,780 --> 00:06:25,710
各マシンの

197
00:06:25,920 --> 00:06:28,560
フィーチャーを計算出来る。

198
00:06:29,020 --> 00:06:30,650
例えばどれだけのメモリを使ってるかとか

199
00:06:31,170 --> 00:06:32,730
ディスクアクセスの総数だとか

200
00:06:32,870 --> 00:06:34,280
CPU負荷だとか

201
00:06:35,060 --> 00:06:36,050
もっと複雑なフィーチャーでも良い、

202
00:06:36,440 --> 00:06:37,450
このマシンのCPUロードを

203
00:06:37,830 --> 00:06:39,650
このマシンのネットワークトラフィックの量で

204
00:06:39,960 --> 00:06:41,340
割ったりだとか、

205
00:06:41,950 --> 00:06:43,050
そういう物を捉えたようなフィーチャー。

206
00:06:43,340 --> 00:06:44,580
そしてデータセンターの

207
00:06:44,820 --> 00:06:45,780
通常時の振る舞いのデータを

208
00:06:46,070 --> 00:06:47,230
与えられた時に、

209
00:06:47,390 --> 00:06:48,460
xとなる確率をモデリング出来る。

210
00:06:48,590 --> 00:06:49,730
つまりこれらのマシンが

211
00:06:50,350 --> 00:06:51,840
様々なメモリ使用量となる確率、

212
00:06:52,840 --> 00:06:53,790
またはこれらのマシンが

213
00:06:54,060 --> 00:06:55,200
様々なディスクアクセスの回数となる確率、

214
00:06:55,920 --> 00:06:57,160
様々なCPU負荷となる確率などを

215
00:06:57,780 --> 00:06:59,880
モデリング出来る。

216
00:07:00,030 --> 00:07:01,100
そしてもし確率xが、

217
00:07:02,030 --> 00:07:03,530
p(x)が

218
00:07:03,800 --> 00:07:05,330
とても小さいマシンがあったら、

219
00:07:05,440 --> 00:07:06,880
そのマシンは普通でなく振舞ってるという事が分かり、

220
00:07:07,970 --> 00:07:08,950
そのマシンは落ちる所かもしれないので

221
00:07:09,050 --> 00:07:11,630
それをフラグ付けして

222
00:07:11,700 --> 00:07:13,620
システム管理者にレビューさせたり出来る。

223
00:07:14,690 --> 00:07:15,890
そしてこれは実際に、

224
00:07:16,060 --> 00:07:17,800
こんにち様々なデータセンターで

225
00:07:18,020 --> 00:07:19,550
自分たちのマシンに普通でない事が起きていないか

226
00:07:20,040 --> 00:07:21,430
監視するのに使われている。

227
00:07:22,920 --> 00:07:24,420
以上がアノマリー検出。

228
00:07:25,540 --> 00:07:26,880
次のビデオでは

229
00:07:27,120 --> 00:07:29,400
ガウス分布とガウス分布の性質を

230
00:07:29,580 --> 00:07:31,030
ちょこっと議論し、

231
00:07:31,580 --> 00:07:33,540
そしてその後のビデオで

232
00:07:33,690 --> 00:07:34,650
アノマリー検出のアルゴリズムを

233
00:07:34,790 --> 00:07:37,390
開発するのにそれを使っていく。