1
00:00:00,340 --> 00:00:01,410
इस वीडियो में, मैं चाहूँगा

2
00:00:01,550 --> 00:00:03,020
आपको बताना प्रिन्सिपल

3
00:00:03,340 --> 00:00:04,570
कम्पोनेंट अनालिसिस अल्गोरिद्म के बारे में.

4
00:00:05,600 --> 00:00:06,560
और अंत तक इस

5
00:00:06,710 --> 00:00:09,200
वीडीयो के आप इम्प्लमेंट कर पाएँगे PCA ख़ुद से.

6
00:00:10,170 --> 00:00:12,540
और इस्तेमाल कर पाएँगे इसे कम करने के लिए डिमेन्शन आपके डेटा की.

7
00:00:13,100 --> 00:00:14,690
PCA अप्लाई करने से पहले, होता है

8
00:00:14,800 --> 00:00:17,760
एक डेटा प्री-प्रॉसेसिंग सटेप जो आपको हमेशा करना चाहिए.

9
00:00:18,510 --> 00:00:20,220
दिया होने पर ट्रेनिंग सेट

10
00:00:20,520 --> 00:00:22,290
इग्ज़ाम्पल्ज़ का यह महत्वपूर्ण है

11
00:00:22,600 --> 00:00:24,070
हमेशा करना मीन नॉर्मलाइज़ेशन,

12
00:00:25,330 --> 00:00:26,140
और फिर निर्भर करते हुए आपके डेटा पर,

13
00:00:26,840 --> 00:00:28,540
शायद करना फ़ीचर स्केलिंग भी.

14
00:00:29,620 --> 00:00:30,950
यह बहुत ही समान है

15
00:00:31,650 --> 00:00:33,250
मीन नॉर्मलाइज़ेशन और फ़ीचर स्केलिंग

16
00:00:34,080 --> 00:00:36,580
प्रक्रिया के जो हमारे पास है सूपर्वायज़्ड लर्निंग के लिए.

17
00:00:36,910 --> 00:00:38,240
वास्तव में यह है बिल्कुल

18
00:00:38,390 --> 00:00:40,160
वही प्रक्रिया सिवाय कि हम

19
00:00:40,310 --> 00:00:41,790
कर रहे हैं इसे अब हमारे अनलेबल्ड

20
00:00:42,930 --> 00:00:43,670
डेटा को, x1 से xm तक.

21
00:00:44,180 --> 00:00:45,530
अत: मीन नॉर्मलाइज़ेशन के लिए हम

22
00:00:45,720 --> 00:00:47,080
पहले कम्प्यूट करते हैं मीन

23
00:00:47,390 --> 00:00:49,070
प्रत्येक फ़ीचर की और फिर

24
00:00:49,340 --> 00:00:50,900
हम बदल देते हैं प्रत्येक फ़ीचर, x को

25
00:00:51,150 --> 00:00:52,680
x घटा इसकी मीन से,

26
00:00:52,810 --> 00:00:54,120
और इसलिए इससे प्रत्येक फ़ीचर

27
00:00:54,520 --> 00:00:57,450
की मीन अब हो जाती है ज़ीरो

28
00:00:58,690 --> 00:01:00,690
विभिन्न फ़ीचर्ज़ के होते हैं भिन्न स्केल्ज़.

29
00:01:01,540 --> 00:01:03,050
अत: उदाहरण के लिए, यदि x1 है

30
00:01:03,080 --> 00:01:04,060
साइज़ एक घर का, और

31
00:01:04,100 --> 00:01:05,390
x2 है संख्या शयन कक्षों की,

32
00:01:05,580 --> 00:01:07,370
इस्तेमाल करते हुए हमारा पिछला उदाहरण, हम

33
00:01:07,480 --> 00:01:08,680
फिर स्केल भी करते हैं प्रत्येक फ़ीचर को

34
00:01:09,130 --> 00:01:10,540
ताकि उनकी हो तुलनात्मक रेंज वैल्यूज़ की.

35
00:01:10,980 --> 00:01:12,490
और इसी प्रकार जैसे

36
00:01:12,680 --> 00:01:13,860
हमारे पास था सूपर्वायज़्ड लर्निंग में,

37
00:01:14,060 --> 00:01:16,200
हम लेंगे x i,सबस्क्रिप्ट

38
00:01:16,680 --> 00:01:17,620
j, जो है फ़ीचर j

39
00:01:23,250 --> 00:01:25,530
और इसलिए हम करेंगे

40
00:01:25,890 --> 00:01:27,610
घटा मीन,

41
00:01:28,370 --> 00:01:29,520
अब वह हमारे पास है ऊपर और फिर विभाजित करेंगे sj से.

42
00:01:29,610 --> 00:01:30,020
यहाँ, sj है माप बीटा वैल्यूज़ का फ़ीचर j की. तो यह हो सकता है max माइनस

43
00:01:30,080 --> 00:01:31,310
min वैल्यू, या अधिक साधारणतया,

44
00:01:31,890 --> 00:01:33,540
यह है स्टैंडर्ड डीवीएशन

45
00:01:33,640 --> 00:01:35,520
फ़ीचर j का. कर लेने के बाद

46
00:01:36,230 --> 00:01:39,480
इस तरह की डेटा प्री-प्रासेसिंग, यहाँ है जो PCA अल्गोरिद्म करता है.

47
00:01:40,620 --> 00:01:41,630
हमने देखा पिछले वीडियो में

48
00:01:41,960 --> 00:01:43,050
कि PCA क्या करता है कि, यह

49
00:01:43,170 --> 00:01:44,520
कोशिश करता है ढूँढने की एक कम

50
00:01:44,790 --> 00:01:46,080
डिमेन्शन की सब-स्पेस जिस पर

51
00:01:46,170 --> 00:01:47,500
प्रोजेक्ट करें डेटा को, ताकि

52
00:01:47,650 --> 00:01:49,780
न्यूनतम हो जाए यह स्क्वेर्ड प्रोजेक्शन

53
00:01:50,540 --> 00:01:51,660
एरर, सम

54
00:01:51,740 --> 00:01:53,080
स्क्वेर्ड प्रोजेक्शन एरर का,

55
00:01:53,420 --> 00:01:54,800
स्क्वेर लम्बाई का

56
00:01:54,870 --> 00:01:56,790
उन नीली लाइन्स का और इसलिए

57
00:01:57,110 --> 00:01:58,510
हम क्या करना चाहते थे, विशेषतौर से

58
00:01:59,210 --> 00:02:02,730
ढूँढना एक वेक्टर, u1, जो

59
00:02:03,280 --> 00:02:04,750
निर्दिष्ट करता है वह दिशा या

60
00:02:05,040 --> 00:02:06,630
2D के केस में हम चाहते हैं

61
00:02:06,880 --> 00:02:08,760
ढूँढना दो वेक्टर्स, u1 और

62
00:02:10,640 --> 00:02:12,980
u2, परिभाषित करने के लिए यह सरफ़ेस

63
00:02:13,590 --> 00:02:14,610
जिस पर प्रोजेक्ट कर सकते हैं डेटा.

64
00:02:16,620 --> 00:02:17,920
तो, बस एक

65
00:02:18,040 --> 00:02:19,160
जल्दी से स्मरण कराने के लिए क्या कम करने का

66
00:02:19,730 --> 00:02:20,820
मतलब है डिमेन्शन्स को,

67
00:02:21,490 --> 00:02:22,430
इस उदाहरण के लिए जो

68
00:02:22,470 --> 00:02:23,560
बाईं तरफ़ है हमें दिए गए थे

69
00:02:23,680 --> 00:02:26,010
इग्ज़ाम्पल xi जो हैं R2 में.

70
00:02:26,300 --> 00:02:28,390
और क्या हम

71
00:02:28,660 --> 00:02:29,500
चाहते हैं हैं ढूँढे

72
00:02:29,970 --> 00:02:32,400
एक सेट नम्बर्ज़ zi का

73
00:02:33,000 --> 00:02:34,950
R में दर्शाने के लिए हमारा डेटा.

74
00:02:36,000 --> 00:02:37,820
तो वह है कम करने का मतलब 2D से 1D में.

75
00:02:39,020 --> 00:02:41,450
तो विशेष रूप से प्रोजेक्ट करना

76
00:02:42,710 --> 00:02:44,080
डेटा को इस लाल लाइन पर वहाँ.

77
00:02:44,800 --> 00:02:46,320
हमें चाहिए केवल एक नम्बर

78
00:02:46,450 --> 00:02:48,340
निर्दिष्ट करने के लिए पोईँट्स को लाइन पर.

79
00:02:48,590 --> 00:02:49,380
तो मैं कहूँगा उस नम्बर को

80
00:02:50,700 --> 00:02:51,830
z या z1.

81
00:02:52,020 --> 00:02:54,850
z यहाँ है एक रियल नम्बर, तो वह है जैसे एक डिमेन्शन का वेक्टर.

82
00:02:55,380 --> 00:02:56,650
तो z1 रेफ़र करता है

83
00:02:56,690 --> 00:02:58,080
पहले कम्पोनेंट को इसका,

84
00:02:58,280 --> 00:03:00,430
आप जानते हैं, एक बाई एक मेट्रिक्स, या यह एक डिमेन्शन का वेक्टर.

85
00:03:01,670 --> 00:03:03,170
और इसलिए हमें चाहिए केवल

86
00:03:03,490 --> 00:03:05,590
एक नम्बर निर्दिष्ट करने के लिए पोज़िशन एक पोईँट की.

87
00:03:06,330 --> 00:03:07,940
तो यदि यह इग्ज़ाम्पल

88
00:03:08,460 --> 00:03:09,510
यहाँ था मेरा इग्ज़ाम्पल

89
00:03:10,610 --> 00:03:13,160
x1, तब शायद वह मैप होता है यहाँ.

90
00:03:13,900 --> 00:03:15,450
और यदि यह इग्ज़ाम्पल था x2

91
00:03:15,680 --> 00:03:17,250
हो सकता है वह इग्ज़ाम्पल मैप होता है

92
00:03:17,530 --> 00:03:18,790
और इसलिए यह पोईँट

93
00:03:19,060 --> 00:03:20,400
यहाँ होगा z1

94
00:03:20,840 --> 00:03:21,920
और यह पोईँट यहाँ होगा

95
00:03:22,080 --> 00:03:24,240
z2, और इसी प्रकार हमें

96
00:03:24,620 --> 00:03:26,410
मिलेंगे वे अन्य पोईँट्स.

97
00:03:26,840 --> 00:03:30,230
इनके लिए, शायद x3,

98
00:03:30,510 --> 00:03:32,550
x4, x5 मैप होते हैं z3, z4, z5 पर.

99
00:03:34,360 --> 00:03:35,940
तो PCA को क्या

100
00:03:36,050 --> 00:03:36,830
करना है कि हमें चाहिए

101
00:03:36,930 --> 00:03:38,920
बनाना एक ढंग कम्प्यूट करने का दो चीज़ें.

102
00:03:39,310 --> 00:03:40,710
एक है कम्प्यूट करना ये वेक्टर्स,

103
00:03:41,830 --> 00:03:44,970
u1, और इस केस में u1 और u2.

104
00:03:45,230 --> 00:03:46,880
और दूसरा है

105
00:03:47,130 --> 00:03:48,140
कैसे कम्प्यूट करते हैं हम ये नम्बर्स,

106
00:03:49,360 --> 00:03:51,200
z. तो

107
00:03:51,430 --> 00:03:53,910
उदाहरण में जो बाईं तरफ़ है हम कम कर रहे हैं डेटा को 2D से 1D में.

108
00:03:55,290 --> 00:03:56,100
उदाहरण में दाईं तरफ़ के,

109
00:03:56,510 --> 00:03:58,100
हम कम कर रहे हैं डेटा को

110
00:03:58,450 --> 00:04:00,600
3 डिमेन्शन से जो हैं

111
00:04:00,710 --> 00:04:04,840
R3 से zi में जो है दो डिमेन्शन का.

112
00:04:05,390 --> 00:04:07,790
तो ये z वेक्टर्स अब होंगे दो डिमेन्शन के.

113
00:04:08,450 --> 00:04:09,590
तो यह होगा z1

114
00:04:10,150 --> 00:04:11,410
z2 इस तरह, और इसलिए

115
00:04:11,640 --> 00:04:12,940
हमें चाहिए एक ढंग कम्प्यूट करने के लिये

116
00:04:13,670 --> 00:04:15,410
ये नई रेप्रेज़ेंटेशन्स, z1

117
00:04:15,570 --> 00:04:17,350
z2 डेटा की भी.

118
00:04:18,280 --> 00:04:20,350
तो कैसे कम्प्यूट करते हैं ये सब संख्याएँ?

119
00:04:20,520 --> 00:04:21,520
ऐसा होता है कि एक गणितीय

120
00:04:22,490 --> 00:04:23,660
डेरिवेशन, गणितीय

121
00:04:24,300 --> 00:04:26,020
प्रूफ़ भी, कि क्या हैं

122
00:04:26,090 --> 00:04:27,970
सही वैल्यूज़ u1, u2, z1,

123
00:04:28,290 --> 00:04:29,480
z2 इत्यादि की.

124
00:04:29,690 --> 00:04:31,230
गणितीय प्रमाण है बहुत

125
00:04:31,480 --> 00:04:32,890
जटिल और बाहर है

126
00:04:32,950 --> 00:04:34,620
स्कोप से इस कोर्स के.

127
00:04:35,280 --> 00:04:37,290
लेकिन एक बार आपने कर लिया है तो

128
00:04:37,590 --> 00:04:38,590
ऐसा है कि प्रक्रिया है

129
00:04:39,350 --> 00:04:40,570
वास्तव में जानना वैल्यू

130
00:04:41,200 --> 00:04:42,210
u1 जो आप चाहते हैं

131
00:04:42,950 --> 00:04:43,950
उतनी मुश्किल नहीं है, भले ही

132
00:04:44,180 --> 00:04:45,640
गणितीय प्रमाण है कि

133
00:04:45,840 --> 00:04:46,940
यह वैल्यू है सही

134
00:04:47,260 --> 00:04:48,450
वैल्यू थोड़ा

135
00:04:48,700 --> 00:04:49,960
कठिन हैं और ज़्यादा है उससे जो मैं करना चाहता हूँ.

136
00:04:50,880 --> 00:04:52,070
लेकिन मैं सिर्फ़ वर्णन करता हूँ

137
00:04:52,480 --> 00:04:53,830
विशिष्ट प्रक्रिया का जो आपको

138
00:04:53,960 --> 00:04:55,250
इम्प्लमेंट करनी हैं करने के लिए

139
00:04:55,440 --> 00:04:56,450
कम्प्यूटर सारी ये

140
00:04:56,570 --> 00:04:57,840
चीज़ें, वेक्टर्स, u1, u2,

141
00:04:58,910 --> 00:05:00,980
वेक्टर z. यहाँ है प्रक्रिया.

142
00:05:02,070 --> 00:05:02,970
मान लो हम चाहते हैं कम करना

143
00:05:03,170 --> 00:05:04,220
डेटा को n डिमेन्शन से

144
00:05:04,840 --> 00:05:05,760
k डिमेन्शन पर. हम क्या

145
00:05:06,760 --> 00:05:07,640
करेंगे कि पहले

146
00:05:07,900 --> 00:05:09,400
कम्प्यूट करें कुछ जिसे कहते हैं

147
00:05:09,830 --> 00:05:11,140
को-वेरीयन्स मेट्रिक्स, और कोवेरीयन्स

148
00:05:11,700 --> 00:05:13,620
मेट्रिक्स को आमतौर पर डिनोट करते हैं

149
00:05:13,820 --> 00:05:15,050
ग्रीक वर्ण से जो है

150
00:05:15,190 --> 00:05:16,880
कैपिटल ग्रीक वर्ण सिग्मा.

151
00:05:18,000 --> 00:05:19,210
यह थोड़ा दुर्भाग्यपूर्ण है कि

152
00:05:19,310 --> 00:05:21,080
ग्रीक वर्ण सिग्मा दिखता हैं एकदम

153
00:05:21,760 --> 00:05:22,710
समेशन चिन्ह जैसे.

154
00:05:23,210 --> 00:05:24,620
तो यह है

155
00:05:24,700 --> 00:05:26,220
ग्रीक वर्ण सिग्मा जो इस्तेमाल करते हैं

156
00:05:26,420 --> 00:05:29,540
डिनोट करने के लिए एक मेट्रिक्स, और यह है समेशन चिन्ह.

157
00:05:30,510 --> 00:05:32,330
तो, उम्मीद है इन स्लाइड्स में

158
00:05:32,680 --> 00:05:34,190
कोई अस्पष्टता नहीं होगी कि कौन सा

159
00:05:34,410 --> 00:05:36,340
सिग्मा मेट्रिक्स,

160
00:05:36,520 --> 00:05:37,850
मेट्रिक्स, कौन सा है एक

161
00:05:38,090 --> 00:05:39,620
समेशन चिन्ह, और उम्मीद है

162
00:05:39,940 --> 00:05:41,460
यह स्पष्ट हो जाएगा संदर्भ से जब

163
00:05:41,820 --> 00:05:43,510
मैं प्रत्येक को इस्तेमाल करूँगा.

164
00:05:43,740 --> 00:05:44,790
कैसे कम्प्यूट करते हैं आप यह मेट्रिक्स?

165
00:05:45,530 --> 00:05:46,550
मान लो हम चाहते हैं

166
00:05:47,135 --> 00:05:47,640
स्टोर करना इसे ओकटेव के

167
00:05:48,120 --> 00:05:49,970
वेरीयबल में जिसे सिग्मा कहते हैं.

168
00:05:50,840 --> 00:05:51,890
हमें क्या करने की जरूरत है कि

169
00:05:52,030 --> 00:05:53,660
कम्प्यूट करें कुछ जिसे कहते हैं

170
00:05:54,130 --> 00:05:56,190
आइगन वेक्टर्स मेट्रिक्स सिग्मा के.

171
00:05:57,560 --> 00:05:58,450
और ओकटेव में जिस तरह आप

172
00:05:58,590 --> 00:05:59,820
वह करते हैं कि आप इस्तेमाल करते हैं यह

173
00:05:59,970 --> 00:06:01,020
कमांड u s v बराबर है

174
00:06:01,350 --> 00:06:02,600
s v d ऑफ़ सिग्मा.

175
00:06:03,650 --> 00:06:06,090
SVD, का मतलब है सिंगुलर वैल्यू डीकॉम्पज़िशन.

176
00:06:08,520 --> 00:06:10,590
यह है एक अधिक

177
00:06:10,790 --> 00:06:12,660
उन्नत सिंगुलर वैल्यू डीकॉम्पज़िशन.

178
00:06:14,450 --> 00:06:15,560
यह है बहुत अधिक एडवांस्ड लिनीअर

179
00:06:15,800 --> 00:06:16,950
ऐल्जेब्रा तुलना में जो वास्तव में आपको

180
00:06:16,950 --> 00:06:18,770
जानने की आवश्यकता है. लेकिन अब ऐसा होता है

181
00:06:18,950 --> 00:06:20,250
कि जब सिग्मा है बराबर

182
00:06:20,480 --> 00:06:21,800
मेट्रिक्स के, ऐसे

183
00:06:21,880 --> 00:06:23,420
कुछ ही ढंग हैं कम्प्यूट करने के ये

184
00:06:23,610 --> 00:06:25,810
आइगन वेक्टर्स और यदि आप

185
00:06:25,960 --> 00:06:27,350
अच्छी तरह से परिचित हैं लिनीअर ऐल्जेब्रा से

186
00:06:27,700 --> 00:06:28,610
और यदि अपने सुना है आइगन

187
00:06:28,860 --> 00:06:30,170
वेक्टर्स के बारे में पहले से आप शायद जानते होंगे

188
00:06:30,350 --> 00:06:31,660
कि एक और ओकटेव फ़ंक्शन है

189
00:06:31,990 --> 00:06:33,420
जिसे कहते हैं I, जो किया जा सकता

190
00:06:33,520 --> 00:06:35,030
इस्तेमाल कम्प्यूट करने के लिए यही चीज़.

191
00:06:35,950 --> 00:06:36,980
और यह होता है कि

192
00:06:37,370 --> 00:06:39,180
SVD फ़ंक्शन और

193
00:06:39,290 --> 00:06:40,310
I फ़ंक्शन ये देंगे

194
00:06:40,370 --> 00:06:42,170
आपको वही वेक्टर्स, हालाँकि SVD

195
00:06:42,840 --> 00:06:44,210
है थोड़ा अधिक नूमेरिक्ली स्थिर.

196
00:06:44,540 --> 00:06:45,890
तो मैं अक्सर SVD इस्तेमाल करता हूँ, जबकि

197
00:06:46,140 --> 00:06:47,040
मेरे कुछ मित्र हैं जो इस्तेमाल करते हैं

198
00:06:47,280 --> 00:06:48,720
I फ़ंक्शन करने के लिए

199
00:06:48,920 --> 00:06:50,050
इसे भी, लेकिन जब आप

200
00:06:50,130 --> 00:06:51,270
अप्लाई करते हैं इसे एक कोवेरीयन्स मेट्रिक्स

201
00:06:51,750 --> 00:06:52,960
सिग्मा पर यह देता है आपको वही चीज़.

202
00:06:53,870 --> 00:06:55,070
यह इसलिए क्योंकि कोवेरीयन्स मेट्रिक्स

203
00:06:55,500 --> 00:06:57,250
हमेशा संतुष्ट करती है एक गणितीय

204
00:06:57,940 --> 00:07:00,560
गुण जिसे कहते हैं सेमेट्रिक पॉज़िटिव डेफ़िनिट.

205
00:07:01,360 --> 00:07:02,140
आपको वास्तव में जरूरत नहीं है जानना

206
00:07:02,280 --> 00:07:03,890
उसका क्या मतलब है, लेकिन SVD

207
00:07:05,340 --> 00:07:07,090
I-फ़ंक्शन भिन्न फ़ंक्शन्स हैं लेकिन

208
00:07:07,400 --> 00:07:08,670
जब वे अप्लाई किए जाते हैं एक

209
00:07:08,780 --> 00:07:10,410
को-वेरीयन्स मेट्रिक्स को जो किया जा सकता है

210
00:07:10,550 --> 00:07:12,080
प्रमाणित कि हमेशा संतुष्ट करती हैं

211
00:07:13,190 --> 00:07:15,220
यह गणितीय गुण; वे हमेशा देंगे आपको वही चीज़.

212
00:07:16,580 --> 00:07:19,180
ठीक है, वह था शायद बहुत अधिक लिनीअर ऐल्जेब्रा 
तुलना में जितना आपको जानने की आवश्यकता है.

213
00:07:19,260 --> 00:07:22,380
यदि यह समझ नहीं आता है, तो इसकी चिंता न करें.

214
00:07:22,560 --> 00:07:23,490
आपको सिर्फ़ जानने की आवश्यकता है कि

215
00:07:24,130 --> 00:07:27,840
यह सिस्टम कमांड आपको

216
00:07:28,140 --> 00:07:29,690
करनी चाहिए इम्प्लमेंट ओकटेव में.

217
00:07:30,080 --> 00:07:30,550
और यदि आप इम्प्लमेंट कर रहे हैं इसे एक

218
00:07:30,710 --> 00:07:32,120
ओकटेव या मैटलैब के अलावा किसी और लैंग्विज में,

219
00:07:32,710 --> 00:07:33,790
आपको क्या करना चाहिए कि जाने

220
00:07:34,190 --> 00:07:35,860
नूमेरिकल लिनीअर ऐल्जेब्रा लाइब्रेरी

221
00:07:36,730 --> 00:07:37,960
कम्प्यूट कर सकती है SVD

222
00:07:38,230 --> 00:07:40,460
या सिंगुलर वैल्यू डीकॉम्पज़िशन, और

223
00:07:40,970 --> 00:07:42,680
ऐसी बहुत सी लाइब्रेरीस है

224
00:07:43,570 --> 00:07:45,060
शायद सभी प्रमुख प्रोग्रामिंग लैंग्विजेज़ के लिए.

225
00:07:45,300 --> 00:07:46,920
लोग इस्तेमाल कर सकते हैं उनका

226
00:07:47,050 --> 00:07:48,920
कम्प्यूट करने के लिए मेट्रिसीज़ u,

227
00:07:49,200 --> 00:07:52,770
s, और d कोवेरीयन्स मेट्रिक्स सिग्मा की.

228
00:07:53,340 --> 00:07:54,490
तो सिर्फ़ डालने के लिए

229
00:07:54,620 --> 00:07:56,090
कुछ और जानकारी, यह कोवेरीयन्स

230
00:07:56,660 --> 00:07:58,080
मैट्रिक्स सिग्मा होगी

231
00:07:58,250 --> 00:08:01,480
एक n बाई n मेट्रिक्स.

232
00:08:02,250 --> 00:08:03,240
एक तरीक़ा देखने का उसे है कि

233
00:08:03,510 --> 00:08:04,220
यदि आप देखते हैं परिभाषा

234
00:08:05,250 --> 00:08:06,280
यह है एक n बाई 1

235
00:08:06,660 --> 00:08:08,680
वेक्टर और यह

236
00:08:08,920 --> 00:08:10,830
यहाँ I ट्रान्स्पोज़ है

237
00:08:11,010 --> 00:08:13,260
1 बाई n सो

238
00:08:13,380 --> 00:08:14,480
गुणन इन दो चीज़ों का

239
00:08:15,150 --> 00:08:15,800
होगा एक n

240
00:08:16,570 --> 00:08:17,530
बाई n मेट्रिक्स.

241
00:08:19,100 --> 00:08:22,130
1 x n ट्रान्स्पोज़, 1 x n, तो

242
00:08:22,280 --> 00:08:22,840
वह है एक n x n मेट्रिक्स और जब

243
00:08:22,910 --> 00:08:23,710
जोड़ते हैं ये सब आपके पास अभी भी

244
00:08:23,840 --> 00:08:26,140
है एक n x n मेट्रिक्स.

245
00:08:27,600 --> 00:08:29,920
और SVD आउट्पुट करता है क्या तीन

246
00:08:30,500 --> 00:08:32,580
मेट्रिसीज़, u, s, और

247
00:08:32,830 --> 00:08:35,070
v. जो चीज़ आपको वास्तव में चाहिए SVD से है u मेट्रिक्स.

248
00:08:36,230 --> 00:08:40,160
u मेट्रिक्स भी होगी एक n x n मेट्रिक्स.

249
00:08:41,510 --> 00:08:42,280
और यदि हम देखते हैं

250
00:08:42,350 --> 00:08:43,260
कॉलम्स पर u

251
00:08:43,480 --> 00:08:45,330
मेट्रिक्स के, ऐसा होता है

252
00:08:45,630 --> 00:08:47,210
कि कॉलम्स

253
00:08:48,570 --> 00:08:50,180
u मेट्रिक्स के होंगे

254
00:08:50,350 --> 00:08:53,860
बिल्कुल समान उन वेक्टर्स के, u1,

255
00:08:54,260 --> 00:08:56,290
u2 इत्यादि.

256
00:08:57,640 --> 00:08:59,330
तो u, होगी मेट्रिक्स.

257
00:09:00,910 --> 00:09:01,830
और यदि हम चाहते हैं कम करना

258
00:09:02,230 --> 00:09:03,200
डेटा को n डिमेन्शन से

259
00:09:03,800 --> 00:09:05,380
नीचे k डिमेन्शन्स तक, तब क्या

260
00:09:05,490 --> 00:09:07,950
हमें करना चाहिए कि लें पहले k वेक्टर्स.

261
00:09:09,800 --> 00:09:12,670
वह देता है हमें u1 से

262
00:09:12,860 --> 00:09:14,700
uk तक जो देता है

263
00:09:14,780 --> 00:09:16,930
हमें K दिशाएँ जिन पर

264
00:09:17,200 --> 00:09:19,770
हम प्रोजेक्ट करना चाहते हैं डेटा.

265
00:09:20,090 --> 00:09:21,640
बाक़ी की प्रक्रिया से

266
00:09:22,410 --> 00:09:24,170
इस SVD नूमेरिकल लिनीअर

267
00:09:24,490 --> 00:09:25,580
ऐल्जेब्रा रूटीन से हमें मिलती है यह

268
00:09:25,840 --> 00:09:27,140
मेट्रिक्स u. हम कहेंगे

269
00:09:27,530 --> 00:09:29,080
इन कॉलम्स को u1-uN.

270
00:09:30,580 --> 00:09:31,620
तो, समाप्त करते हुए

271
00:09:31,830 --> 00:09:32,520
वर्णन बाक़ी की

272
00:09:32,540 --> 00:09:34,550
प्रक्रिया का, SVD

273
00:09:35,320 --> 00:09:36,940
नूमेरिकल लिनीअर ऐल्जेब्रा रूटीन से हमें

274
00:09:37,240 --> 00:09:38,650
मिलती हैं ये मेट्रिसीज़ u, s,

275
00:09:38,830 --> 00:09:41,320
और d, हम करेंगे

276
00:09:41,900 --> 00:09:44,460
इस्तेमाल पहले K कॉलन्स का

277
00:09:45,050 --> 00:09:46,310
मेट्रिक्स के पाने के लिए u1-uK.

278
00:09:48,710 --> 00:09:49,460
अब दूसरी चीज़ हमें चाहिए

279
00:09:49,700 --> 00:09:53,730
कि लें मेरा प्रारम्भिक

280
00:09:54,110 --> 00:09:55,430
डेटा सेट, x जो है

281
00:09:55,630 --> 00:09:57,080
एक Rn और ढूँढे एक

282
00:09:57,250 --> 00:09:59,210
कम डिमेन्शन की रेप्रेज़ेंटेशन z, जो है

283
00:09:59,420 --> 00:10:01,280
एक RK इस डेटा के लिए.

284
00:10:01,570 --> 00:10:02,800
तो जिस तरह हम

285
00:10:02,900 --> 00:10:03,930
करंगे वह कि

286
00:10:04,180 --> 00:10:06,690
लेंगे पहले K कॉलम्स u मेट्रिक्स के.

287
00:10:08,330 --> 00:10:09,790
बनाएँगे यह मेट्रिक्स.

288
00:10:11,060 --> 00:10:13,040
जोड़ेंगे u1, u2 और

289
00:10:14,170 --> 00:10:16,690
इसी तरह uK तक कॉलम्स में.

290
00:10:17,350 --> 00:10:19,120
यह वास्तव में लेना, आप जानते हैं,

291
00:10:19,280 --> 00:10:20,350
यह हिस्सा मेट्रिक्स का,

292
00:10:20,530 --> 00:10:22,260
लेंगे पहले K कॉलम्स इस मेट्रिक्स के.

293
00:10:23,420 --> 00:10:25,370
और इसलिए यह है 

294
00:10:25,600 --> 00:10:26,920
होगी एक n

295
00:10:27,200 --> 00:10:28,580
बाई K मेट्रिक्स.

296
00:10:29,500 --> 00:10:30,690
मैं दूँगा इस मेट्रिक्स को एक नाम.

297
00:10:30,880 --> 00:10:32,200
मैं कहूँगा इस मेट्रिक्स को

298
00:10:32,930 --> 00:10:35,760
U सब्स्क्रिप्ट "रेडूस", एक तरह से

299
00:10:36,090 --> 00:10:38,620
एक छोटा वर्ज़न U मेट्रिक्स का शायद.

300
00:10:39,140 --> 00:10:41,250
मैं करूँगा इस्तेमाल इसे कम करने के लिए डिमेन्शन मेरे डेटा की.

301
00:10:43,040 --> 00:10:43,950
और जिस तरह मैं कम्प्यूट करूँगा z होगा

302
00:10:44,250 --> 00:10:45,960
कि रखूँ z बराबर इस

303
00:10:46,220 --> 00:10:49,570
U reduce मेट्रिक्स ट्रान्स्पोज़ गुणा

304
00:10:50,010 --> 00:10:52,030
x. या वैकल्पिक रूप से, आप जानते हैं,

305
00:10:52,510 --> 00:10:53,860
लिखते हैं इस ट्रान्स्पोज़ का क्या मतलब है.

306
00:10:54,630 --> 00:10:55,910
जब मैं लेता हूँ ट्रान्स्पोज़

307
00:10:56,010 --> 00:10:57,920
इस U मेट्रिक्स का, क्या मुझे

308
00:10:58,010 --> 00:11:00,680
मिलेगा यही वेक्टर्स अब रोज़ में.

309
00:11:00,950 --> 00:11:04,540
मेरे पास है u1 ट्रान्स्पोज़ से uK ट्रान्स्पोज़ तक.

310
00:11:07,060 --> 00:11:08,860
फिर ले वह गुणा X,

311
00:11:09,700 --> 00:11:10,740
और इस तरह मुझे मिलता है

312
00:11:10,920 --> 00:11:12,670
मेरा वेक्टर z. सिर्फ़

313
00:11:12,740 --> 00:11:14,280
सुनिश्चित करें कि ये डिमेन्शन्स समझ आयी हैं,

314
00:11:15,370 --> 00:11:16,380
यह मेट्रिक्स यहाँ होगी

315
00:11:16,560 --> 00:11:17,450
k बाई n

316
00:11:18,270 --> 00:11:19,350
और x यहाँ होगा

317
00:11:19,420 --> 00:11:20,530
n बाई 1

318
00:11:20,750 --> 00:11:21,810
और इसलिए गुणन

319
00:11:22,320 --> 00:11:24,330
यहाँ होगा k बाई 1.

320
00:11:24,820 --> 00:11:27,920
और इसलिए z है k

321
00:11:28,790 --> 00:11:29,810
डिमेन्शन्स का, है एक k

322
00:11:30,010 --> 00:11:31,230
डिमेन्शनल वेक्टर, जो है एकदम

323
00:11:32,000 --> 00:11:33,180
वही जो हम चाहते थे.

324
00:11:33,550 --> 00:11:34,640
और निश्चय ही ये x यहाँ, ठीक है, हो

325
00:11:34,890 --> 00:11:36,010
सकते हैं इग्ज़ाम्पल्ज़ हमारे

326
00:11:36,100 --> 00:11:36,970
ट्रेनिंग सेट में, हो सकते हैं इग्ज़ाम्पल्ज़

327
00:11:37,540 --> 00:11:38,750
हमारे क्रॉस-वैलिडेशन सेट में, हो सकते हैं

328
00:11:38,980 --> 00:11:40,330
इग्ज़ाम्पल्ज़ हमारे टेस्ट सेट में, और

329
00:11:40,500 --> 00:11:41,590
उदाहरण के लिए यदि, आप जानते हैं,

330
00:11:41,930 --> 00:11:43,830
मैं चाहता हूँ लेना ट्रेनिंग सेट इग्ज़ाम्पल i,

331
00:11:44,260 --> 00:11:45,910
मैं लिख सकता हूँ इसे xi

332
00:11:47,270 --> 00:11:48,430
XI और वह है जो

333
00:11:48,510 --> 00:11:50,080
देगा मुझे ZI वहाँ पर.

334
00:11:50,940 --> 00:11:53,140
अत: सारांश में, यहाँ है

335
00:11:53,460 --> 00:11:54,820
PCA अल्गोरिद्म के स्लाइड पर.

336
00:11:56,250 --> 00:11:58,200
मीन नोर्मलाइज़ेशन के बाद, सुनिश्चित करने के लिए

337
00:11:58,420 --> 00:11:59,230
प्रत्येक फ़ीचर की है ज़ीरो मीन

338
00:11:59,610 --> 00:12:01,420
और वैकल्पिक फ़ीचर स्केलिंग जो आपको

339
00:12:02,280 --> 00:12:03,780
वास्तव में अवश्य करनी चाहिए फ़ीचर स्केलिंग यदि

340
00:12:03,890 --> 00:12:05,820
आपके फ़ीचर्ज़ लेते हैं बहुत भिन्न भिन्न रेंज वैल्यूज़ की.

341
00:12:06,620 --> 00:12:08,610
और इस प्री-प्रासेसिंग के बाद हम कम्प्यूट करते हैं

342
00:12:09,130 --> 00:12:12,010
को-वेरीयन्स मेट्रिक्स सिग्मा इस

343
00:12:12,240 --> 00:12:14,070
तरह, वैसे तो,

344
00:12:14,210 --> 00:12:16,340
यदि आपका डेटा

345
00:12:16,610 --> 00:12:17,780
दिया है एक मेट्रिक्स जैसे

346
00:12:18,030 --> 00:12:18,960
इस तरह यदि आपके पास है आपका

347
00:12:19,230 --> 00:12:22,580
डेटा दिया रोज़ में इस तरह.

348
00:12:22,780 --> 00:12:24,370
यदि आपके पास है एक मेट्रिक्स X

349
00:12:24,960 --> 00:12:26,190
जो है आपका ट्रेनिंग सेट

350
00:12:27,030 --> 00:12:28,830
लिखा हुआ रोज़ में जहाँ x1

351
00:12:29,210 --> 00:12:30,400
ट्रैन्स्पोज़ से x n ट्रान्स्पोज़ तक,

352
00:12:31,530 --> 00:12:32,700
इस को-वेरीयन्स मेट्रिक्स सिग्मा में है वास्तव में

353
00:12:33,020 --> 00:12:36,040
एक अच्छी वेक्टराइज्ड इम्प्लमेंटेशन.

354
00:12:37,390 --> 00:12:38,980
आप इम्प्लमेंट कर सकते हैं ओकटेव में,

355
00:12:39,440 --> 00:12:41,130
आप रन भी कर सकते हैं सिग्मा बराबर 1

356
00:12:41,670 --> 00:12:45,250
ओवर m, गुणा x,

357
00:12:45,550 --> 00:12:46,440
जो है यह मेट्रिक्स ऊपर यहाँ,

358
00:12:47,250 --> 00:12:50,770
ट्रान्स्पोज़ गुणा x और

359
00:12:50,980 --> 00:12:53,320
यह सरल इक्स्प्रेशन, वह है

360
00:12:53,570 --> 00:12:55,070
वेक्टराइज्ड इम्प्लमेंटेशन कि कैसे

361
00:12:55,220 --> 00:12:56,910
कम्प्यूट करते हैं मेट्रिक्स सिग्मा.

362
00:12:58,020 --> 00:12:59,020
मैं नहीं करूँगा उसे प्रूव / प्रमाणित आज.

363
00:12:59,160 --> 00:13:00,600
यह है सही वेक्टराइज़ेशन यदि आप

364
00:13:00,740 --> 00:13:02,460
चाहें, आप या तो नूमेरिक्ली टेस्ट कर सकते हैं

365
00:13:02,870 --> 00:13:03,900
इसे अपने आप ट्राई कर एक

366
00:13:03,980 --> 00:13:05,100
ओकटेव की और तय करने से कि

367
00:13:05,840 --> 00:13:06,890
दोनो यह और यह इम्प्लमेंटेशन

368
00:13:06,920 --> 00:13:10,050
देती हैं समान उत्तर या आप ख़ुद प्रयास कर सकते हैं प्रमाणित करने का उसे गणितीय रूप में.

369
00:13:11,250 --> 00:13:12,330
किसी भी तरह लेकिन यह है

370
00:13:12,430 --> 00:13:14,580
सही वेक्टराइज्ड इम्प्लमेंटेशन, बिना कम्प्यूट किए इसे. फिर

371
00:13:16,480 --> 00:13:17,570
हम अप्लाई कर सकते हैं SVD

372
00:13:17,920 --> 00:13:19,050
रूटीन पाने के लिए u, s,

373
00:13:19,250 --> 00:13:20,840
और d. और फिर हम

374
00:13:21,100 --> 00:13:22,720
लेते हैं पहले K

375
00:13:23,050 --> 00:13:24,450
कॉलम्स u

376
00:13:24,660 --> 00:13:26,550
मेट्रिक्स के U reduce में और

377
00:13:26,650 --> 00:13:28,540
अंत में यह परिभाषित करता है कैसे

378
00:13:28,740 --> 00:13:29,980
हम जाते हैं एक फ़ीचर

379
00:13:30,290 --> 00:13:31,600
x से इस

380
00:13:31,850 --> 00:13:34,340
कम डिमेन्शन की रेप्रेज़ेंटेशन z में. और

381
00:13:34,540 --> 00:13:35,760
K-मीन्स के समान

382
00:13:36,090 --> 00:13:37,860
यदि आप अप्लाई करते हैं PCA, जिस तरह

383
00:13:38,030 --> 00:13:40,300
आप अप्लाई करेंगे है कि वेक्टर्स x और Rn के साथ.

384
00:13:41,100 --> 00:13:43,990
तो, यह नहीं करते x01 के साथ.

385
00:13:44,200 --> 00:13:46,080
तो वह था

386
00:13:46,990 --> 00:13:48,680
PCA अल्गोरिद्म.

387
00:13:50,120 --> 00:13:51,380
एक काम जो मैंने नहीं किया है

388
00:13:51,590 --> 00:13:53,190
कि नहीं दिया है गणितीय प्रमाण कि

389
00:13:53,520 --> 00:13:54,600
यह वास्तव में देता है

390
00:13:54,970 --> 00:13:56,560
प्रजेक्शन डेटा का

391
00:13:57,230 --> 00:13:58,730
Kडिमेन्शन की सब-स्पेस

392
00:13:58,870 --> 00:14:00,620
K डिमेन्शन की सरफ़ेस पर जो वास्तव में

393
00:14:02,170 --> 00:14:04,800
न्यूनतम करता है स्क्वेर्ड प्रोजेक्शन एरर. प्रूफ़

394
00:14:05,110 --> 00:14:07,170
उसका बाहर है स्कोप से इस कोर्स के.

395
00:14:07,700 --> 00:14:09,110
सौभाग्य से PCA अल्गोरिद्म

396
00:14:09,470 --> 00:14:10,940
किया जा सकता है इम्प्लमेंट

397
00:14:11,320 --> 00:14:12,510
बहुत कम लाइन्स से कोड की.

398
00:14:13,190 --> 00:14:14,510
और यदि आप इम्प्लमेंट करते हैं इसे

399
00:14:14,640 --> 00:14:16,120
ओकटेव में या मैटलैब में, आपको

400
00:14:16,520 --> 00:14:17,590
वास्तव में मिलता है एक बहुत प्रभावशाली

401
00:14:18,110 --> 00:14:19,710
डिमेन्शनैलिटी रिडक्शन अल्गोरिद्म की.

402
00:14:22,430 --> 00:14:23,850
तो वह था PCA अल्गोरिद्म.

403
00:14:25,010 --> 00:14:26,290
एक काम जो मैंने नहीं किया था

404
00:14:26,840 --> 00:14:28,420
कि नहीं दिया है गणितीय प्रमाण कि

405
00:14:29,170 --> 00:14:30,360
u1 और u2 इत्यादि

406
00:14:30,720 --> 00:14:31,630
और z इत्यादि

407
00:14:31,770 --> 00:14:32,830
जो आपको मिलते हैं इस

408
00:14:32,980 --> 00:14:34,330
प्रक्रिया से, वास्तव में है

409
00:14:34,680 --> 00:14:35,870
विकल्प, जो करेगा न्यूनतम/ मिनमायज़

410
00:14:36,500 --> 00:14:37,800
इस स्क्वेर्ड प्रोजेक्शन एरर को.

411
00:14:38,140 --> 00:14:39,350
ठीक है, याद रखें कि हमने कहा है कि क्या

412
00:14:39,610 --> 00:14:40,660
PCA करने की कोशिश करता हैं कि

413
00:14:40,960 --> 00:14:42,170
ढूँढे एक सरफ़ेस या लाइन

414
00:14:42,570 --> 00:14:43,690
जिस पर प्रोजेक्ट कर सकते हैं डेटा

415
00:14:44,280 --> 00:14:46,340
ताकि यह स्क्वेर्ड प्रोजेक्शन एरर न्यूनतम हो जाए.

416
00:14:46,700 --> 00:14:48,610
तो मैंने नहीं साबित किया इसे

417
00:14:49,140 --> 00:14:50,680
कि, और गणितीय प्रमाण

418
00:14:50,970 --> 00:14:52,520
उसका बाहर है स्कोप से इस कोर्स के.

419
00:14:53,170 --> 00:14:55,550
लेकिन सौभाग्य से PCA अल्गोरिद्म किया जा सकता है

420
00:14:55,730 --> 00:14:58,890
इम्प्लमेंट बहुत कम लाइन्स से ओकटेव कोड की.

421
00:14:59,350 --> 00:15:00,740
और यदि आप इम्प्लमेंट करते हैं इसे,

422
00:15:01,430 --> 00:15:02,560
यह है वास्तव में जो करेगा

423
00:15:02,770 --> 00:15:03,730
काम, या यह काम करेगा सही,

424
00:15:04,710 --> 00:15:05,940
और यदि आप इम्प्लमेंट करते हैं यह अल्गोरिद्म,

425
00:15:06,500 --> 00:15:09,220
आपको मिलता है एक बहुत प्रभावी डिमेन्शनैलिटी रिडक्शन अल्गोरिद्म.

426
00:15:09,780 --> 00:15:10,650
जो करता है सही काम

427
00:15:11,050 --> 00:15:13,460
न्यूनतम करने का यह स्क्वेर्ड प्रोजेक्शन एरर.