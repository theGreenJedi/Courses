1
00:00:00,110 --> 00:00:04,230
डिमेन्शनैलिटी रिडक्शन की प्रॉब्लम के लिए, अब तक का सबसे लोकप्रिय,

2
00:00:04,230 --> 00:00:07,180
अब तक का सबसे अधिक इस्तेमाल किया जाने वाला अल्गोरिद्म है कुछ जिसे कहते हैं

3
00:00:07,180 --> 00:00:10,230
प्रिन्सिपल कम्पोनेंट अनालिसिस, या PCA.

4
00:00:10,230 --> 00:00:14,920
इस वीडियो में मैं आप को बताना चाहता हूँ प्रॉब्लम फ़ॉर्म्युलेशन के बारे में PCA के लिए.

5
00:00:14,920 --> 00:00:17,040
दूसरे शब्दों में, चलो प्रयास करते हैं फ़ॉर्म्युलेट करने का

6
00:00:17,040 --> 00:00:20,690
विधिवत रूप से, जो वास्तव में हम चाहते हैं कि PCA करे.

7
00:00:20,690 --> 00:00:22,220
मान लो हमारे पास है एक डेटा सेट इस तरह का.

8
00:00:22,220 --> 00:00:26,520
तो, यह है एक डेटा सेट इग्ज़ाम्पल्ज़ x का जो R2 में है और मान लो मैं चाहता हूँ

9
00:00:26,520 --> 00:00:31,190
कम करना डिमेन्शन डेटा की दो-डिमेन्शनल से एक-डिमेन्शनल.

10
00:00:31,190 --> 00:00:35,190
दूसरे शब्दों में, मैं जानना चाहता हूँ एक लाइन जिस पर प्रोजेक्ट कर सकूँ डेटा को.

11
00:00:35,190 --> 00:00:38,329
तो क्या लगती है एक अच्छी लाइन जिस पर प्रोजेक्ट कर सकूँ डेटा को,

12
00:00:38,329 --> 00:00:41,177
यह है एक लाइन इस तरह की, यह हो सकता है काफ़ी अच्छा विकल्प.

13
00:00:41,177 --> 00:00:45,463
और क्यों हम सोचते है कि यह एक अच्छा विकल्प है क्योंकि यदि आप देखे कहाँ

14
00:00:45,463 --> 00:00:49,342
प्रोजेक्ट किए हुए पोईँट के वर्ज़नज़ स्केल होता है, तो मैं लेता हूँ यह पोईँट और

15
00:00:49,342 --> 00:00:50,656
प्रोजेक्ट करता हूँ इसे नीचे यहाँ.

16
00:00:50,656 --> 00:00:55,440
देखा क्या, यह पोईँट प्रोजेक्ट होता है यहाँ, यहाँ, यहाँ.

17
00:00:55,440 --> 00:00:59,905
यदि हम निकालें दूरी प्रत्येक पोईँट के बीच और

18
00:00:59,905 --> 00:01:03,219
प्रोजेक्ट किए वर्ज़न के बीच वह बहुत कम है.

19
00:01:03,219 --> 00:01:08,769
मतलब कि ये नीले लाइन सेगमेंट्स बहुत छोटे हैं.

20
00:01:08,769 --> 00:01:13,961
तो PCA क्या करता है कि यह चाहता है ढूँढना एक निचली डिमेन्शन की सरफ़ेस,

21
00:01:13,961 --> 00:01:18,147
वास्तव में एक लाइन इस केस में, जिस पर प्रोजेक्ट कर सके डेटा को ताकि

22
00:01:18,147 --> 00:01:23,580
सम स्क्वेर्ज़ का इन छोटी नीली लाइन सेगमेंट्स का हो कम से कम.

23
00:01:23,580 --> 00:01:25,605
लंबाई उन नीली सेगेमेंट्स की,

24
00:01:25,605 --> 00:01:28,850
जिसे कभी कभी प्रोजेक्शन एरर भी कहते हैं.

25
00:01:28,850 --> 00:01:33,022
और इसलिए PCA क्या करता है यह कोशिश करता है जानने कि 
एक सरफ़ेस जिस पर प्रोजेक्ट कर सके डेटा को ताकि

26
00:01:33,022 --> 00:01:34,810
न्यूनतम कर सके उसे.

27
00:01:34,810 --> 00:01:39,820
सिर्फ़ थोड़ा अलग से, PCA अप्लाई करने से पहले, यह एक स्टैंडर्ड प्रैक्टिस है कि पहले

28
00:01:39,820 --> 00:01:44,490
करते हैं मीन नॉर्मलाइज़ेशन, फ़ीचर स्केलिंग के लिए ताकि फ़ीचर्ज़ x1 और

29
00:01:44,490 --> 00:01:49,160
x2 की हो ज़ीरो मीन, और होनी चाहिए तुलनात्मक वैल्यूज़.

30
00:01:49,160 --> 00:01:52,700
मैंने पहले ही किया है यह इस उदाहरण के लिए, लेकिन मैं वापिस इस पर आऊँगा बाद में

31
00:01:52,700 --> 00:01:57,385
और बात करूँगा फ़ीचर स्केलिंग की और नोर्मलाइज़ेशन की PCA के संदर्भ में बाद में.

32
00:01:58,540 --> 00:02:03,340
लेकिन वापिस आते हुए इस उदाहरण पर, लाल लाइन का विपरीत जो मैंने अभी बनाई थी,

33
00:02:03,340 --> 00:02:06,370
यहाँ है एक भिन्न लाइन जिस पर मैं प्रोजेक्ट कर सकता हूँ मेरा डेटा,

34
00:02:06,370 --> 00:02:07,808
जो है यह मजेंटा लाइन.

35
00:02:07,808 --> 00:02:12,380
और, जैसे कि हम देखेंगे, यह मजेंटा लाइन है एक बहुत ग़लत दिशा में

36
00:02:12,380 --> 00:02:14,120
मेरे डेटा को प्रोजेक्ट करने के लिए, ठीक है?

37
00:02:14,120 --> 00:02:17,070
तो यदि मुझे करना होता प्रोजेक्ट मेरा डेटा इस मजेंटा लाइन पर,

38
00:02:17,070 --> 00:02:19,140
हमें मिलेगा एक सेट पोएंट्स का इस तरह का.

39
00:02:19,140 --> 00:02:24,950
और प्रोजेक्शन एरर, जो हैं ये नीले लाइन सेगमेंट्स, होंगे बहुत बड़े.

40
00:02:24,950 --> 00:02:29,650
तो इन पोईँट्स को चलना पड़ेगा काफ़ी दूर होने के लिए

41
00:02:29,650 --> 00:02:33,760
प्रोजेक्ट मजेंटा लाइन पर.

42
00:02:33,760 --> 00:02:37,430
और इसीलिए PCA, प्रिन्सिपल कम्पोनेंट अनालिसिस,

43
00:02:37,430 --> 00:02:41,658
चुनेगा कुछ लाल लाइन जैसा बजाय मजेंटा लाइन नीचे यहाँ.

44
00:02:42,915 --> 00:02:45,791
चलो लिखते हैं PCA प्रॉब्लम थोड़ी विधिवत.

45
00:02:45,791 --> 00:02:50,504
उद्देश्य PCA का, यदि हम कम करना चाहते हैं डेटा को दो-डिमेन्शनल से

46
00:02:50,504 --> 00:02:55,974
एक डिमेन्शनल पर, हम प्रयास कर रहे हैं ढूँढने के लिए एक वेक्टर अर्थात् एक वेक्टर u1,

47
00:02:55,974 --> 00:03:00,367
जो होगा Rn, तो वह होगा R2 इस केस में.

48
00:03:00,367 --> 00:03:03,365
मैं जानना चाहता हूँ दिशा जिस पर मुझे प्रोजेक्ट करना है डेटा, ताकि

49
00:03:03,365 --> 00:03:05,350
प्रोजेक्शन एरर न्यूनतम हो जाए.

50
00:03:05,350 --> 00:03:10,273
तो, इस उदाहरण में मैं उम्मीद कर रहा हूँ कि PCA ढूँढेगा इस वेक्टर को,

51
00:03:10,273 --> 00:03:15,105
जिसे मैं कहूँगा u(1), ताकि जब मैं प्रोजेक्ट करूँ डेटा

52
00:03:15,105 --> 00:03:19,116
उस लाइन पर जो मैं परिभाषित करता हूँ बढ़ाते हुए इस वेक्टर को,

53
00:03:19,116 --> 00:03:23,055
मुझे मिलती है बहुत कम प्रोजेक्शन एरर.

54
00:03:23,055 --> 00:03:25,736
और वह डेटा जो दिखता है ऐसा.

55
00:03:25,736 --> 00:03:30,392
और वैसे तो, मुझे बताना चाहिए कि कहाँ PCA देता है मुझे u(1) या

56
00:03:30,392 --> 00:03:32,630
-उ(1), उससे अंतर नहीं पड़ता.

57
00:03:32,630 --> 00:03:35,020
तो यदि यह देता है मुझे एक पॉज़िटिव वेक्टर इस दिशा में, वह ठीक है.

58
00:03:35,020 --> 00:03:40,170
यदि यह देता है मुझे विपरीत वेक्टर, विपरीत दिशा में, तो

59
00:03:40,170 --> 00:03:42,190
वह होगा जैसे माइनस u(1).

60
00:03:42,190 --> 00:03:43,900
चलो बनाते हैं उसे नीले से इसके बजाय, ठीक है?

61
00:03:43,900 --> 00:03:48,010
लेकिन यह दे एक पॉज़िटिव u(1) या नेगेटिव u(1), उससे अंतर नहीं पड़ता क्योंकि

62
00:03:48,010 --> 00:03:52,950
प्रत्येक यह वेक्टर परिभाषित करता है वही लाल लाइन 
जिस पर मैं प्रोजेक्ट कर रहा था मेरा डेटा.

63
00:03:54,110 --> 00:03:58,970
तो यह है एक केस काम करने का डेटा को दो-डिमेन्शनल से एक-डिमेन्शनल पर.

64
00:03:58,970 --> 00:04:02,336
अधिक सामान्य रूप से हमारे पास है n-डिमेन्शनल डेटा और

65
00:04:02,336 --> 00:04:05,020
हम चाहेंगे उसे कम करना k-डिमेन्शन्स में.

66
00:04:05,020 --> 00:04:08,880
उस केस में हम चाहते हैं ढूँढना न केवल एक वेक्टर जिस पर प्रोजेक्ट करें

67
00:04:08,880 --> 00:04:13,340
डेटा को लेकिन हम चाहते हैं ढूँढना k-डिमेन्शन्स जिस पर प्रोजेक्ट करें डेटा को.

68
00:04:13,340 --> 00:04:16,420
ताकि प्रोजेक्शन एरर न्यूनतम हो जाए.

69
00:04:16,420 --> 00:04:17,540
तो यहाँ है उदाहरण.

70
00:04:17,540 --> 00:04:24,910
यदि मेरे पास है एक 3D पोईँट क्लाउड इस तरह का, 
तब शायद मैं क्या चाहता हूँ करना कि जान पाऊँ वेक्टर्स.

71
00:04:24,910 --> 00:04:27,030
तो मिलता है एक युग्म वेक्टर्स का.

72
00:04:27,030 --> 00:04:29,010
और मैं कहूँगा इन्हें वेक्टर्स.

73
00:04:29,010 --> 00:04:30,430
मैं बनाता हूँ इन्हें लाल रंग से.

74
00:04:30,430 --> 00:04:33,340
यहाँ है u(1), और यहाँ है मेरा दूसरा वेक्टर, u(2).

75
00:04:33,340 --> 00:04:40,421
यहाँ है u(1), और यहाँ है मेरा दूसरा वेक्टर, u(2).

76
00:04:40,421 --> 00:04:46,776
और एक साथ, ये दो वेक्टर्स परिभाषित करते हैं एक प्लेन, या वे परिभाषित करते हैं एक 2D सरफ़ेस, ठीक है?

77
00:04:46,776 --> 00:04:52,160
इस तरह की एक 2D सरफ़ेस जिस पर मैं प्रोजेक्ट करूँगा मेरा डेटा.

78
00:04:52,160 --> 00:04:55,170
आप में से वे जो परिचित हैं लिनीअर ऐल्जेब्रा से,

79
00:04:55,170 --> 00:04:58,850
आप में से वे जो विशेषज्ञ हैं लिनीअर ऐल्जेब्रा में, विधिवत परिभाषा इसकी है

80
00:04:58,850 --> 00:05:03,230
कि हम पाना चाहते हैं एक सेट वेक्टर्स u(1), u(2) से u(k) तक.

81
00:05:03,230 --> 00:05:05,930
और हम क्या करेंगे कि प्रोजेक्ट करेंगे डेटा को

82
00:05:05,930 --> 00:05:10,570
लिनीअर सबस्पेस पर जो बनती हैं इस सेट से k वेक्टर्स के.

83
00:05:10,570 --> 00:05:14,130
लेकिन यदि आप परिचित नहीं है लिनीअर ऐल्जेब्रा से, सिर्फ़ सोचें इसे

84
00:05:14,130 --> 00:05:18,710
ढूँढने की तरह k दिशाएँ बजाय सिर्फ़ एक दिशा के जिस पर प्रोजेक्ट करना है डेटा को.

85
00:05:18,710 --> 00:05:23,490
तो जानना एक k-डिमेन्शनल सरफ़ेस है वास्तव में जानना एक 2D प्लेन इस केस में.

86
00:05:23,490 --> 00:05:24,940
जो दिखाया है इस चित्र में,

87
00:05:24,940 --> 00:05:30,260
जहाँ हम परिभाषित कर सकते हैं स्थान पोईँट्स का एक प्लेन मैं इस्तेमाल करके k दिशाएँ.

88
00:05:30,260 --> 00:05:34,660
और यही कारण है PCA चाहता है ढूँढना k-डिमेन्शन्स जिस पर प्रोजेक्ट करें डेटा को.

89
00:05:34,660 --> 00:05:39,582
और अधिक विधिवत रूप में PCA में, हम चाहते हैं जानना 
यह रास्ता प्रोजेक्ट करने के लिए डेटा को

90
00:05:39,582 --> 00:05:42,742
ताकि प्रोजेक्शन एरर न्यूनतम हो जाए,

91
00:05:42,742 --> 00:05:46,644
जो है दूरी पोईँट और प्रोजेक्शन के बीच की.

92
00:05:46,644 --> 00:05:48,870
और ऐसा ही है इस 3D उदाहरण में भी.

93
00:05:48,870 --> 00:05:54,667
दिया होने पर एक पोईँट हम लेंगे पोईँट और उसे प्रोजेक्ट करेंगे इस 2D सरफ़ेस पर.

94
00:05:55,760 --> 00:05:57,290
हमने कर लिया वह.

95
00:05:57,290 --> 00:06:02,120
और इसलिए प्रोजेक्शन एरर होगी, दूरी पोईँट और

96
00:06:02,120 --> 00:06:05,910
जहाँ यह प्रोजेक्ट होता है नीचे मेरी 2D सरफ़ेस पर.

97
00:06:05,910 --> 00:06:09,994
और इसलिए PCA क्या करता है कि यह ढूँढता है लाइन, या एक प्लेन, या जो भी,

98
00:06:09,994 --> 00:06:14,428
जिस पर डेटा को प्रोजेक्ट करना है, न्यूनतम करने के लिव वह स्क्वेर प्रोजेक्शन,

99
00:06:14,428 --> 00:06:18,110
वह 90 डिग्री, या वह ओर्थोग्नल प्रजेक्शन एरर.

100
00:06:18,110 --> 00:06:22,400
अंत में, एक प्रश्न जो मुझसे कभी कभी पूछा जाता है कि कैसे PCA सम्बंधित करता है

101
00:06:22,400 --> 00:06:23,278
लिनीअर रेग्रेशन से?

102
00:06:23,278 --> 00:06:27,520
क्योंकि जब समझाता हूँ PCA, मैं कभी कभी बनाता हूँ चित्र इस तरह के और

103
00:06:27,520 --> 00:06:28,719
वह लगता है थोड़ा लिनीअर रेग्रेशन जैसे.

104
00:06:30,710 --> 00:06:34,000
ऐसा है कि PCA नहीं है लिनीअर रेग्रेशन, और

105
00:06:34,000 --> 00:06:38,740
दिखने में समानता होने के बावजूद, ये हैं वास्तव में बिल्कुल भिन्न अल्गोरिद्म्स.

106
00:06:38,740 --> 00:06:42,811
यदि हम कर रहे होते लिनीअर रेग्रेशन, हम जो करते वह होता, बाईं तरफ हम करते

107
00:06:42,811 --> 00:06:46,590
प्रिडिक्ट वैल्यू किसी वेरीयबल y की दी होने पर कुछ जानकारी फ़ीचर्ज़ x की.

108
00:06:46,590 --> 00:06:51,723
और इसलिए लिनीअर रेग्रेशन, हम कोशिश कर रहे हैं फ़िट करने की एक लाइन ताकि

109
00:06:51,723 --> 00:06:56,188
न्यूनतम कर सकें स्क्वेर एरर को पोईँट और इस सीधी लाइन में.

110
00:06:56,188 --> 00:07:01,240
और इसलिए हम जो न्यूनतम कर रहे हैं वह होगी लम्बाई इन नीली लाइन्स की.

111
00:07:01,240 --> 00:07:04,390
और ध्यान दें कि बना रहा हूँ ये नीली लाइएस वर्टिकल रूप में.

112
00:07:04,390 --> 00:07:07,660
कि ये नीली लाइन्स हैं वर्टिकल दूरी पोईँट और

113
00:07:07,660 --> 00:07:10,270
वैल्यू में जो हायपॉथिसस ने प्रिडिक्ट की है.

114
00:07:10,270 --> 00:07:15,036
जबकि इसके विपरीत, PCA में, यह क्या करता है कि न्यूनतम करता है

115
00:07:15,036 --> 00:07:19,729
लम्बाई इन नीली लाइन्स की, जो हैं बनाई एक कोण पर.

116
00:07:19,729 --> 00:07:22,435
ये हैं वास्तव में न्यूनतम ऑर्थोग्नल दूरियाँ.

117
00:07:22,435 --> 00:07:26,180
न्यूनतम दूरी पोईँट x और इस नीली लाइन में.

118
00:07:27,370 --> 00:07:33,030
और यह देता है एक बिल्कुल भिन्न प्रभाव निर्भर करते हुए डेटा सेट पर.

119
00:07:33,030 --> 00:07:37,380
और अधिक सामान्य रूप में, जब आप कर रहे हैं लिनीअर रेग्रेशन,

120
00:07:37,380 --> 00:07:40,990
वहाँ है यह अलग वेरीयबल y जो हम प्रिडिक्ट कर रहे हैं.

121
00:07:40,990 --> 00:07:44,656
तो लिनीअर रेग्रेशन क्या करता है कि लेता है सारी वैल्यूज़ x और

122
00:07:44,656 --> 00:07:46,266
इस्तेमाल करते हुए उसे प्रिडिक्ट करता है y.

123
00:07:46,266 --> 00:07:48,894
जबकि PCA में, कुछ अलग नहीं है, या

124
00:07:48,894 --> 00:07:52,503
नहीं है विशेष वेरीयबल y जो हम प्रिडिक्ट कर रहे हैं.

125
00:07:52,503 --> 00:07:57,390
और इसके बजाय, हमारे पास है एक लिस्ट फ़ीचर्ज़ की, x1, x2 आगे xn तक, और

126
00:07:57,390 --> 00:08:02,005
सारे ये फ़ीचर्ज़ हैं एक समान, तो कोई एक उनमें से नहीं है विशेष.

127
00:08:02,005 --> 00:08:06,515
एक आख़िरी उदाहरण के रूप में, यदि मेरे पास है तीन-डिमेन्शनल डेटा और

128
00:08:06,515 --> 00:08:12,194
मैं चाहता हूँ कम करना 3D से 2D पर, तो शायद मैं जानना चाहता हूँ दो दिशाएँ,

129
00:08:12,194 --> 00:08:16,271
u(1) और u(2), जिस पर मैं प्रोजेक्ट कर सकता हूँ मेरा डेटा,

130
00:08:16,271 --> 00:08:20,388
तब मेरे पास क्या है कि मेरे पास हैं तीन फ़ीचर्ज़ x1, x2, x3, और

131
00:08:20,388 --> 00:08:22,501
सब ये एक समान हैं.

132
00:08:22,501 --> 00:08:24,878
सारे ये सेमेट्रिक हैं और

133
00:08:24,878 --> 00:08:28,250
नहीं है कोई विशेष वेरीयबल y जो मैं प्रिडिक्ट कर रहा हूँ.

134
00:08:28,250 --> 00:08:31,655
और इसलिए PCA नहीं है एक लिनीअर रेग्रेशन, और

135
00:08:31,655 --> 00:08:36,618
हालाँकि शायद वे समान दिखते हैं कुछ हद तक, वे सम्बंधित नहीं हैं,

136
00:08:36,618 --> 00:08:40,627
ये हैं वास्तव में बिल्कुल भिन्न अल्गोरिद्म्स.

137
00:08:40,627 --> 00:08:44,612
तो उम्मीद है अब आप समझ गए होंगे कि PCA क्या कर रहा है.

138
00:08:44,612 --> 00:08:49,286
यह जानना चाह रहा है एक कम डिमेन्शन की सरफ़ेस जिस पर प्रोजेक्ट करना है डेटा, ताकि

139
00:08:49,286 --> 00:08:52,695
यह स्क्वेर्ड प्रोजेक्शन एरर न्यूनतम हो जाए.

140
00:08:52,695 --> 00:08:55,465
न्यूनतम करने के लिए स्क्वेर्ड दूरी प्रत्यके पोईँट और

141
00:08:55,465 --> 00:08:57,845
स्थान जहाँ यह प्रोजेक्ट हुआ है.

142
00:08:57,845 --> 00:09:00,415
अगले वीडियो में, हम शुरू करेंगे बात करना कि कैसे

143
00:09:00,415 --> 00:09:04,665
वास्तव में ढूढे / जाने यह एक कम डिमेन्शन की सरफ़ेस जिस पर प्रोजेक्ट करना है डेटा.