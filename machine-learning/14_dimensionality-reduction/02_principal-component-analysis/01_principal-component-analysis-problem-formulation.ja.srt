1
00:00:00,090 --> 00:00:01,010
次元削減の問題において、

2
00:00:01,920 --> 00:00:03,420
現在の所一番人気で、

3
00:00:03,490 --> 00:00:04,620
一番良く使われている

4
00:00:04,690 --> 00:00:06,180
アルゴリズムは、

5
00:00:06,390 --> 00:00:08,460
主成分分析(Principal Components Analysis)、またはPCAと呼ばれる物だ。

6
00:00:10,200 --> 00:00:11,160
このビデオでは、

7
00:00:11,220 --> 00:00:12,610
PCAの問題の定式化について

8
00:00:12,740 --> 00:00:14,240
議論を開始する。

9
00:00:14,910 --> 00:00:16,090
言い換えると、

10
00:00:16,260 --> 00:00:18,630
PCAに何をして欲しいのか、を

11
00:00:18,900 --> 00:00:19,980
詳細かつ厳密に定式化しよう。

12
00:00:20,670 --> 00:00:21,820
こんなデータセットがあるとしよう。

13
00:00:22,020 --> 00:00:23,050
つまり手本xがR 2にあるような

14
00:00:23,360 --> 00:00:24,710
データセット。

15
00:00:25,040 --> 00:00:26,140
そしてデータの次元を

16
00:00:26,470 --> 00:00:27,640
2次元から1次元に

17
00:00:27,810 --> 00:00:29,850
削減したいとしよう。

18
00:00:31,170 --> 00:00:32,130
言い換えると、私は、データを射影する先の

19
00:00:32,690 --> 00:00:34,400
直線を探したい。

20
00:00:35,140 --> 00:00:37,680
では、データを射影するのに良さそうな直線とは、どんな物か？

21
00:00:38,730 --> 00:00:40,760
こんな感じの直線はかなり良い選択だと言えそうだ。

22
00:00:41,510 --> 00:00:42,790
そしてこれが良い選択だと

23
00:00:43,020 --> 00:00:43,990
思う理由は、

24
00:00:44,150 --> 00:00:45,420
もし射影された点が

25
00:00:46,020 --> 00:00:48,230
どこに行くのかを見てみると、

26
00:00:48,530 --> 00:00:51,180
つまりこの点に対して、ここに射影するとこれを得る。

27
00:00:51,640 --> 00:00:53,500
この点はここに射影される、ここ、

28
00:00:53,640 --> 00:00:55,220
ここ、ここ、ここ、

29
00:00:56,120 --> 00:00:57,360
各点と射影された点との

30
00:00:57,420 --> 00:00:58,860
距離がとても小さくなっている事に

31
00:00:59,460 --> 00:01:02,520
気付くだろう。

32
00:01:03,790 --> 00:01:06,490
つまり、この青い線は

33
00:01:06,690 --> 00:01:08,210
きわめて短い。

34
00:01:09,270 --> 00:01:10,260
つまり、PCAがやる事は

35
00:01:10,430 --> 00:01:11,730
より低次元の平面、この場合は

36
00:01:12,180 --> 00:01:14,320
実際は直線になるが、

37
00:01:14,340 --> 00:01:15,250
そういう平面で

38
00:01:15,330 --> 00:01:16,660
射影する先として、

39
00:01:16,740 --> 00:01:18,260
これらの青い線分の

40
00:01:18,520 --> 00:01:20,130
二乗和を最小化する物を

41
00:01:20,360 --> 00:01:22,570
探そうと試みる事だ。

42
00:01:23,550 --> 00:01:24,780
これらの青い線分の長さは

43
00:01:25,020 --> 00:01:26,530
射影誤差と呼ばれる事もある。

44
00:01:27,100 --> 00:01:29,710
するとPCAがやる事は

45
00:01:29,750 --> 00:01:30,480
それを最小化するような

46
00:01:30,770 --> 00:01:31,840
射影先の平面を

47
00:01:32,010 --> 00:01:33,350
探す事と言える。

48
00:01:33,480 --> 00:01:35,050
ちよっと脇にそれるが、

49
00:01:35,090 --> 00:01:37,460
PCAを適用する前には

50
00:01:37,960 --> 00:01:39,750
ます平均標準化を、

51
00:01:39,960 --> 00:01:41,300
そしてフィーチャースケーリングを

52
00:01:41,820 --> 00:01:43,190
かけておく、そうする事で

53
00:01:43,560 --> 00:01:44,760
フィーチャーx1とフィーチャーx2が

54
00:01:44,880 --> 00:01:46,770
平均0で、

55
00:01:46,880 --> 00:01:48,740
比較可能な範囲の値を持つようにしておく。

56
00:01:49,110 --> 00:01:50,320
この例に関しては既に私がやった。

57
00:01:50,490 --> 00:01:51,590
だがこの件については、

58
00:01:51,680 --> 00:01:52,990
PCAという文脈でのフィーチャースケーリングと

59
00:01:53,190 --> 00:01:54,960
平均標準化については、後でもっと詳しく議論する事にする。

60
00:01:58,600 --> 00:01:59,420
この例に戻ると、

61
00:02:00,260 --> 00:02:01,470
このさっき引いた

62
00:02:01,710 --> 00:02:03,300
赤の直線とは別の

63
00:02:03,530 --> 00:02:05,970
データを射影する直線もあり得る。

64
00:02:06,810 --> 00:02:08,260
このマゼンタの直線とか。

65
00:02:08,520 --> 00:02:09,260
見て分かるように、

66
00:02:09,370 --> 00:02:10,660
このマゼンタの直線は

67
00:02:10,810 --> 00:02:13,920
データの射影先としては、よりまずい方向だ。でしょ？

68
00:02:14,090 --> 00:02:15,020
つまりもしこのマゼンタの直線に

69
00:02:15,120 --> 00:02:16,430
データを射影すると、

70
00:02:16,730 --> 00:02:18,050
他の点もこんな感じで。

71
00:02:19,140 --> 00:02:21,240
そして射影誤差、つまり

72
00:02:21,420 --> 00:02:24,460
青い線分は巨大になる。

73
00:02:24,910 --> 00:02:25,930
つまりこれらの点は

74
00:02:26,010 --> 00:02:28,170
マゼンタの直線の上に

75
00:02:28,320 --> 00:02:29,840
移動するには、つまり

76
00:02:30,360 --> 00:02:31,760
射影するには、

77
00:02:31,930 --> 00:02:33,440
大きな距離を移動しなくてはならない。

78
00:02:33,740 --> 00:02:35,390
つまりPCA、Principal Component Analysis(主成分分析)は、

79
00:02:36,010 --> 00:02:37,540
ここのマゼンタの直線のような物じゃなく

80
00:02:37,860 --> 00:02:38,840
赤い線みたいな物を

81
00:02:39,230 --> 00:02:41,410
選ぶ物だ。

82
00:02:42,870 --> 00:02:45,280
PCAの問題をよりフォーマルに書こう。

83
00:02:46,140 --> 00:02:47,660
PCAのゴールは

84
00:02:47,810 --> 00:02:49,150
仮にデータを2次元から

85
00:02:49,360 --> 00:02:50,580
1次元に削減したいとすると、

86
00:02:51,450 --> 00:02:52,160
以下のようなベクトルを探す、と言える。

87
00:02:52,640 --> 00:02:54,590
そのベクトルは

88
00:02:54,970 --> 00:02:56,160
uiと呼ぶ事にしよう、

89
00:02:57,150 --> 00:02:58,250
それはR nのベクトルで、

90
00:02:58,780 --> 00:03:00,170
この場合はR 2だ。

91
00:03:01,130 --> 00:03:02,300
それは射影誤差を最小化するような

92
00:03:02,600 --> 00:03:04,990
データの射影先の方向を持つようなベクトルだ。

93
00:03:05,400 --> 00:03:06,710
つまりこの例では、

94
00:03:07,190 --> 00:03:09,180
PCAにはこのベクトルを探してくれる事を期待している、

95
00:03:09,380 --> 00:03:10,590
それをu1と呼ぼう、

96
00:03:10,720 --> 00:03:12,960
それの持つ性質は、

97
00:03:13,120 --> 00:03:14,340
そのベクトルを延長して定義した

98
00:03:15,590 --> 00:03:17,620
直線にデータを射影すると、

99
00:03:18,170 --> 00:03:19,840
とても小さな

100
00:03:20,370 --> 00:03:21,650
射影誤差となるような

101
00:03:22,100 --> 00:03:23,400
ベクトルだ。

102
00:03:24,310 --> 00:03:25,220
データの例はこんな感じだ。

103
00:03:26,180 --> 00:03:26,640
ところで、

104
00:03:26,840 --> 00:03:28,310
PCAはu1を与えるか-u1を与えるかは、

105
00:03:28,920 --> 00:03:32,150
重要では無い、という事は言っておこう。

106
00:03:32,650 --> 00:03:33,630
だからPCAが正のベクトルで

107
00:03:33,890 --> 00:03:35,530
この向きの物を与えたら、それはそれで良い。
またもし、

108
00:03:35,950 --> 00:03:37,910
反対方向のベクトル、反対の向きを向いた

109
00:03:38,330 --> 00:03:40,160
ベクトルを与えたら、つまり

110
00:03:40,720 --> 00:03:43,150
-u1だったとして、代わりに青で描くと、

111
00:03:43,300 --> 00:03:44,400
正のu1を与えようが-u1を与えようが、

112
00:03:45,120 --> 00:03:46,310
それはどっちでも良い。

113
00:03:46,440 --> 00:03:48,120
何故ならこれらのベクトルはどちらも、

114
00:03:48,230 --> 00:03:50,030
同じ赤い直線を

115
00:03:50,110 --> 00:03:51,660
定義する物で、そこに私はデータを

116
00:03:51,870 --> 00:03:54,430
射影する訳だから。

117
00:03:54,610 --> 00:03:56,300
以上が、データを2次元から1次元に

118
00:03:56,680 --> 00:03:58,120
削減するケースだ。

119
00:03:58,920 --> 00:04:00,220
より一般的には、

120
00:04:00,350 --> 00:04:01,680
N次元のデータセットを持っていて、

121
00:04:01,840 --> 00:04:03,790
そしてそれをK次元へと削減したい。

122
00:04:04,970 --> 00:04:06,010
その場合は、データを射影する先の

123
00:04:06,160 --> 00:04:07,450
単独のベクトルを

124
00:04:07,940 --> 00:04:09,020
探したいのでは無く、

125
00:04:09,320 --> 00:04:10,660
データを射影するK次元を

126
00:04:11,520 --> 00:04:12,420
探したい。

127
00:04:13,290 --> 00:04:15,680
射影誤差を最小化するように。

128
00:04:16,440 --> 00:04:17,100
例えばこんなだ。

129
00:04:17,480 --> 00:04:19,100
仮に、こんな感じの

130
00:04:19,390 --> 00:04:21,030
3D点の雲があったとしよう、

131
00:04:21,290 --> 00:04:22,620
そこて私が見つけたいのは、ベクトル、、、

132
00:04:23,880 --> 00:04:26,120
じゃなかった、ベクトルのペアを探したい。

133
00:04:27,020 --> 00:04:28,180
このベクトルをどう呼ぼうか、、、

134
00:04:29,080 --> 00:04:30,530
これらは赤で描く事にしよう。

135
00:04:30,710 --> 00:04:32,210
私はベクトルのペアを探したい、

136
00:04:32,580 --> 00:04:33,580
ここを原点として、

137
00:04:34,490 --> 00:04:37,280
これがu1、

138
00:04:37,580 --> 00:04:39,800
これが二番目のベクトルu2と呼ぼう。

139
00:04:40,180 --> 00:04:42,110
そしてこれらを合わせて、これら二つのベクトルが、

140
00:04:42,320 --> 00:04:43,850
平面を定義する。

141
00:04:44,400 --> 00:04:45,590
言い換えるとそれらが2D平面を定義する。

142
00:04:46,790 --> 00:04:47,900
たとえばこんな感じの2D平面、

143
00:04:48,270 --> 00:04:51,140
データを射影する先の。

144
00:04:52,050 --> 00:04:52,900
線形代数に通じた

145
00:04:53,080 --> 00:04:54,980
視聴者の方々には、

146
00:04:55,170 --> 00:04:56,010
真の線形代数マスターの

147
00:04:56,230 --> 00:04:57,380
方々にとっては、

148
00:04:57,780 --> 00:04:58,820
これの正式な定義は、

149
00:04:59,230 --> 00:05:00,500
我らはu1, u2,...,ukまでの

150
00:05:00,610 --> 00:05:01,680
ベクトルを探す、

151
00:05:01,800 --> 00:05:03,370
そして我らがやる事は、

152
00:05:03,460 --> 00:05:04,490
このk本のベクトルが張る

153
00:05:04,980 --> 00:05:06,600
線形部分空間に、

154
00:05:06,830 --> 00:05:09,520
データを射影する、という事だ。

155
00:05:10,520 --> 00:05:11,570
だが線形代数にあんまり

156
00:05:12,070 --> 00:05:13,200
慣れていないなら、

157
00:05:13,400 --> 00:05:14,790
データを射影する先として、

158
00:05:15,510 --> 00:05:18,380
1方向の代わりにk方向を探す、と考えておけばよろしい。

159
00:05:18,740 --> 00:05:19,950
さて、k次元の平面を探す為に、

160
00:05:20,610 --> 00:05:21,560
このケースでは実際は2D平面だが、

161
00:05:22,370 --> 00:05:23,870
この図に示したように、

162
00:05:24,040 --> 00:05:25,340
ここでは平面上の点の位置を、

163
00:05:26,800 --> 00:05:29,700
k本の方向で定義出来る。

164
00:05:30,410 --> 00:05:31,690
そんな訳で、PCAにおいては、

165
00:05:31,950 --> 00:05:34,440
我らはデータを射影する先となるk本のベクトルを見つけたい。

166
00:05:35,030 --> 00:05:36,920
つまり、よりフォーマルに言うと、

167
00:05:37,050 --> 00:05:38,430
PCAにおいては、我らがやりたい事は、

168
00:05:38,700 --> 00:05:40,400
ある種の射影距離、

169
00:05:40,590 --> 00:05:41,940
つまり射影先の点と射影元の点との

170
00:05:42,040 --> 00:05:43,570
距離を最小化するような、

171
00:05:43,850 --> 00:05:46,210
射影方法を見つけたい。

172
00:05:47,060 --> 00:05:48,060
つまりこの3Dの例でも、

173
00:05:48,560 --> 00:05:50,100
所与の点に対し、

174
00:05:50,280 --> 00:05:51,450
この各点を2Dの平面に

175
00:05:51,980 --> 00:05:53,950
射影する。

176
00:05:55,560 --> 00:05:56,580
それを行う時には、

177
00:05:57,280 --> 00:05:58,690
射影誤差は、

178
00:05:58,870 --> 00:06:00,830
元の点と2D平面へ

179
00:06:01,440 --> 00:06:03,160
射影した先の点との

180
00:06:03,970 --> 00:06:05,360
距離となる。

181
00:06:05,880 --> 00:06:06,990
つまりPCAがやる事とは、

182
00:06:07,070 --> 00:06:08,480
データを射影する、直線なり平面なり

183
00:06:08,620 --> 00:06:10,430
それ以外なり、とにかく射影先で、

184
00:06:10,660 --> 00:06:11,810
射影の二乗を最小化するような物を

185
00:06:12,010 --> 00:06:14,160
探すという事だ、

186
00:06:15,100 --> 00:06:17,430
射影とは90度、または直行する射影の誤差だ。

187
00:06:18,100 --> 00:06:19,240
最後に、たまに質問される事の

188
00:06:19,280 --> 00:06:20,060
一つに、PCAと線形回帰の

189
00:06:20,280 --> 00:06:22,100
関係について、というのがある。

190
00:06:22,350 --> 00:06:24,180
何故なら私がPCAを

191
00:06:24,600 --> 00:06:25,780
説明する時に、たまにこんな図を描くので、

192
00:06:26,190 --> 00:06:28,720
これが線形回帰みたいだからだろう。

193
00:06:30,790 --> 00:06:32,130
実はPCAは、線形回帰では無い。

194
00:06:32,370 --> 00:06:33,950
表面上はある程度似ているにもかかわらず、

195
00:06:34,350 --> 00:06:37,560
これらは実は全く異なるアルゴリズムなのだ。

196
00:06:38,680 --> 00:06:39,680
線形回帰をやる時というのは、

197
00:06:40,770 --> 00:06:42,170
我らがやるのは、この左側で、

198
00:06:42,270 --> 00:06:42,940
あるフィーチャーxを入力として

199
00:06:43,230 --> 00:06:44,400
ある変数yを予想しようと

200
00:06:44,540 --> 00:06:45,830
試みる、という事だ。

201
00:06:46,120 --> 00:06:47,330
つまり線形回帰においては、

202
00:06:47,570 --> 00:06:48,760
我らがやっている事は、

203
00:06:49,150 --> 00:06:50,350
点と直線との距離による

204
00:06:51,900 --> 00:06:52,970
二乗誤差を最小化するような、

205
00:06:53,390 --> 00:06:56,160
直線をフィッティングしているのだ。

206
00:06:56,360 --> 00:06:57,270
だから我らが最小化するのは、

207
00:06:57,900 --> 00:07:00,320
この青い線の二乗だ。

208
00:07:00,790 --> 00:07:02,240
そして私はこれらの青い線を

209
00:07:02,550 --> 00:07:04,650
垂直に書いた事に気づいただろうか。

210
00:07:05,150 --> 00:07:06,500
それらは点と仮説が予測した値との

211
00:07:06,520 --> 00:07:07,700
垂直な距離となっている、

212
00:07:08,090 --> 00:07:10,470
一方で対称的に

213
00:07:10,510 --> 00:07:13,100
PCAにおいては、

214
00:07:13,190 --> 00:07:14,170
これらの青い線の

215
00:07:14,320 --> 00:07:16,890
大きさを最小化したい、

216
00:07:17,460 --> 00:07:19,550
これは角度をつけて描いてあり、

217
00:07:19,980 --> 00:07:21,590
実際は直行した最短距離で、

218
00:07:22,090 --> 00:07:23,900
点とこの赤い直線との

219
00:07:24,050 --> 00:07:26,620
最短距離で、

220
00:07:27,000 --> 00:07:28,320
そしてこれは、

221
00:07:28,530 --> 00:07:29,870
データセットによっては、

222
00:07:30,600 --> 00:07:32,050
大きく異なった結果となる。

223
00:07:32,400 --> 00:07:34,610
より一般的には、、、

224
00:07:34,760 --> 00:07:35,890
より一般的には、線形回帰をする時には、

225
00:07:36,150 --> 00:07:37,740
特別な変数yという物が

226
00:07:38,160 --> 00:07:39,810
予測しようとする変数として

227
00:07:40,000 --> 00:07:41,130
存在する。線形回帰とは、

228
00:07:41,560 --> 00:07:43,610
Xを全て使って

229
00:07:44,060 --> 00:07:45,060
Yを予測しようと

230
00:07:45,260 --> 00:07:46,930
する物だ。

231
00:07:47,210 --> 00:07:48,920
一方でPCAは、

232
00:07:49,230 --> 00:07:50,200
特別な役割の変数Y、

233
00:07:50,400 --> 00:07:51,900
予測しようとする変数Yは

234
00:07:52,040 --> 00:07:52,770
存在しない。

235
00:07:53,230 --> 00:07:54,100
その代わりに、フィーチャーのリスト

236
00:07:54,740 --> 00:07:56,130
x1, x2...とxnまでのフィーチャーがあって、

237
00:07:56,280 --> 00:07:57,830
これらのフィーチャーは全て

238
00:07:57,940 --> 00:07:59,460
等しく扱われる。

239
00:08:00,360 --> 00:08:01,560
つまりどれも特別では無い。

240
00:08:02,980 --> 00:08:05,180
最後の例として、

241
00:08:05,400 --> 00:08:07,220
三次元のデータの場合、

242
00:08:07,390 --> 00:08:08,660
そしてこれを3Dから2Dに削減したい場合、

243
00:08:08,820 --> 00:08:10,110
つまり例えば

244
00:08:10,380 --> 00:08:11,630
二つの方向、u1とu2を

245
00:08:12,780 --> 00:08:14,110
探して、

246
00:08:14,920 --> 00:08:16,030
そこにデータを射影したい。

247
00:08:16,960 --> 00:08:17,840
その場合、最初にあるのは、

248
00:08:18,390 --> 00:08:20,190
3つのフィーチャーx1, x2, x3で、

249
00:08:20,860 --> 00:08:22,410
これらは全て同じように扱われる。

250
00:08:22,780 --> 00:08:24,100
これら三つは全て対称的に扱われて、

251
00:08:25,020 --> 00:08:26,240
予測をしたいと思う

252
00:08:26,740 --> 00:08:27,740
特別な変数yは存在していない。

253
00:08:28,870 --> 00:08:30,320
つまり、PCAは

254
00:08:30,650 --> 00:08:33,210
線形回帰じゃないって事だ。

255
00:08:34,020 --> 00:08:35,870
表面上はある程度

256
00:08:36,040 --> 00:08:37,260
関係しているように見えるかもしれないが、

257
00:08:37,600 --> 00:08:41,580
これらは実際のところ、とても異なったアルゴリズムだ。

258
00:08:41,810 --> 00:08:43,360
以上で、PCAが何をしているか、

259
00:08:43,630 --> 00:08:44,960
わかったかな。PCAは、

260
00:08:45,220 --> 00:08:46,520
以下の条件を満たすような、

261
00:08:47,130 --> 00:08:48,290
より低い次元の平面を

262
00:08:48,680 --> 00:08:50,230
探す事を試みる、その条件とは

263
00:08:50,450 --> 00:08:52,420
この二乗射影誤差を最小化するような物、

264
00:08:52,650 --> 00:08:54,140
各点と射影先の点の位置との距離の二乗を

265
00:08:54,390 --> 00:08:56,660
最小化する、という条件。

266
00:08:57,800 --> 00:08:59,040
次のビデオでは、データを射影する先の

267
00:08:59,340 --> 00:09:00,490
低次元の平面を

268
00:09:00,900 --> 00:09:02,350
実際にどうやって探すのかについて、

269
00:09:03,210 --> 00:09:04,470
議論を開始する。