1
00:00:00,090 --> 00:00:01,330
在这段视频中

2
00:00:01,500 --> 00:00:02,560
我要开始介绍

3
00:00:03,030 --> 00:00:04,620
第二种无监督学习问题

4
00:00:04,950 --> 00:00:06,320
它叫维数约减 (dimensionality reduction)

5
00:00:07,600 --> 00:00:08,460
我们希望使用维数约简

6
00:00:08,660 --> 00:00:09,710
的原因有以下几个

7
00:00:09,890 --> 00:00:11,270
的原因有以下几个

8
00:00:12,220 --> 00:00:14,420
一个原因是数据压缩

9
00:00:14,600 --> 00:00:15,860
我们会在后几个视频中看到

10
00:00:16,570 --> 00:00:18,200
数据压缩不仅通过

11
00:00:18,490 --> 00:00:19,660
压缩数据使得数据

12
00:00:19,970 --> 00:00:20,940
占用更少的计算机

13
00:00:21,330 --> 00:00:22,670
内存和硬盘空间

14
00:00:23,050 --> 00:00:24,410
它还能给算法提速

15
00:00:24,730 --> 00:00:26,960
它还能给算法提速

16
00:00:27,980 --> 00:00:29,490
首先 我们来介绍

17
00:00:29,620 --> 00:00:31,840
什么是维数约减

18
00:00:33,490 --> 00:00:35,800
举一个例子

19
00:00:35,990 --> 00:00:37,440
假如我们有一个有很多很多很多

20
00:00:37,680 --> 00:00:38,700
特征变量的数据集

21
00:00:39,290 --> 00:00:40,600
我在这里只画了其中两个

22
00:00:41,600 --> 00:00:42,770
假设我们不知道

23
00:00:42,890 --> 00:00:44,000
这两个特征量

24
00:00:44,070 --> 00:00:45,730
一个某个物体的长度

25
00:00:45,860 --> 00:00:47,150
以厘米为单位

26
00:00:47,550 --> 00:00:48,920
另一个 x2

27
00:00:49,460 --> 00:00:51,150
是它以英寸为单位的长度

28
00:00:52,250 --> 00:00:53,030
所以这是一个

29
00:00:53,500 --> 00:00:55,910
非常冗余的数据

30
00:00:56,170 --> 00:00:57,920
所以与其用

31
00:00:58,430 --> 00:00:58,820
两个特征变量 x1 和 x2

32
00:00:59,090 --> 00:01:00,240
它们都是测量到的长度

33
00:01:00,370 --> 00:01:01,490
或许我们应该把

34
00:01:01,640 --> 00:01:03,340
这个数据降到一维

35
00:01:03,430 --> 00:01:06,800
这样一来

36
00:01:06,920 --> 00:01:08,840
只用一个长度的数据

37
00:01:09,620 --> 00:01:11,080
这个例子可能看起来好像是我生造的

38
00:01:11,150 --> 00:01:13,920
但这个厘米英寸的例子

39
00:01:14,030 --> 00:01:15,850
其实还真不是那么无聊

40
00:01:16,220 --> 00:01:17,140
我在工业界看到的情况

41
00:01:17,510 --> 00:01:18,870
也是大同小异

42
00:01:19,970 --> 00:01:21,320
如果你有上百

43
00:01:21,790 --> 00:01:23,160
或者上千的特征变量

44
00:01:23,240 --> 00:01:24,450
很容易就会忘记

45
00:01:24,680 --> 00:01:26,580
你到底有什么特征变量

46
00:01:26,930 --> 00:01:28,190
而且有时候可能有

47
00:01:28,420 --> 00:01:29,650
几个不同的工程师团队

48
00:01:30,110 --> 00:01:31,090
一队工程师可能给你

49
00:01:31,200 --> 00:01:32,500
200个特征变量

50
00:01:32,770 --> 00:01:34,000
第二队工程师可能再给你

51
00:01:34,340 --> 00:01:35,420
300个特征变量

52
00:01:35,550 --> 00:01:36,640
然后第三队工程师给你

53
00:01:36,940 --> 00:01:38,150
五百个特征变量

54
00:01:38,290 --> 00:01:39,220
所以你一共有1000个特征变量

55
00:01:39,940 --> 00:01:40,910
这样就很难搞清

56
00:01:41,040 --> 00:01:42,820
哪个队给了你

57
00:01:43,200 --> 00:01:44,540
什么特征变量

58
00:01:44,860 --> 00:01:47,310
实际上得到这样冗余的特征变量并不难

59
00:01:47,530 --> 00:01:49,440
所以

60
00:01:50,090 --> 00:01:51,520
如果以厘米计的长度

61
00:01:51,940 --> 00:01:53,920
被取整到最近的厘米整数

62
00:01:54,060 --> 00:01:56,480
以英寸计的长度被取整到最近的英寸整数

63
00:01:57,070 --> 00:01:58,050
这就是为什么这些样本

64
00:01:58,720 --> 00:01:59,900
没有完美地在一条直线上

65
00:02:00,100 --> 00:02:01,270
就是因为取整

66
00:02:01,740 --> 00:02:03,420
所造成的误差

67
00:02:04,260 --> 00:02:05,160
如果我们可以把数据

68
00:02:05,610 --> 00:02:06,680
降到一维而不是二维

69
00:02:07,130 --> 00:02:10,320
就可以减少冗余

70
00:02:11,590 --> 00:02:14,030
再举一个例子 可能看起来更实际一些

71
00:02:14,590 --> 00:02:16,560
这些年来

72
00:02:16,920 --> 00:02:19,920
我和直升机飞行员们

73
00:02:20,990 --> 00:02:22,610
在一起工作了很多年

74
00:02:23,950 --> 00:02:24,040
那么

75
00:02:25,080 --> 00:02:28,090
如果你要测量 研究

76
00:02:28,250 --> 00:02:29,100
或者给这些不同的飞行员

77
00:02:29,590 --> 00:02:30,500
做测试的话

78
00:02:30,770 --> 00:02:32,200
你就可能会有一个特征 x1

79
00:02:32,440 --> 00:02:33,780
它可能是这些

80
00:02:34,050 --> 00:02:35,600
直升机飞行员的技术

81
00:02:35,820 --> 00:02:38,190
x2 可能是

82
00:02:38,460 --> 00:02:41,810
飞行员的工作愉快程度

83
00:02:42,700 --> 00:02:43,770
这是指他们有多享受飞行

84
00:02:43,870 --> 00:02:45,050
可能这两个特征变量的

85
00:02:45,280 --> 00:02:46,810
相关程度非常高

86
00:02:48,310 --> 00:02:49,730
你真正关心的可能是

87
00:02:49,940 --> 00:02:52,530
这个方向

88
00:02:53,610 --> 00:02:55,120
这是另一个特征变量

89
00:02:55,370 --> 00:02:57,190
它测量的是飞行员的资质

90
00:03:00,450 --> 00:03:01,240
当然资质这个词

91
00:03:01,590 --> 00:03:03,220
是我自己随便编的

92
00:03:03,320 --> 00:03:04,780
但是如果你的两个特征高度相关

93
00:03:04,990 --> 00:03:06,500
你可能真的需要降低维度

94
00:03:07,570 --> 00:03:08,760
让我们再详细讲讲

95
00:03:09,040 --> 00:03:09,950
从二维

96
00:03:10,060 --> 00:03:11,390
 也就是 2D

97
00:03:11,520 --> 00:03:12,950
降到一维

98
00:03:13,150 --> 00:03:14,400
也就是 1D

99
00:03:14,600 --> 00:03:16,300
到底意味着什么

100
00:03:16,840 --> 00:03:18,660
让我给这些样本

101
00:03:18,830 --> 00:03:19,940
涂上不同的颜色

102
00:03:21,600 --> 00:03:21,600
涂上不同的颜色

103
00:03:21,730 --> 00:03:22,890
在这个例子中

104
00:03:23,370 --> 00:03:24,740
降低维度的意思是

105
00:03:25,010 --> 00:03:26,320
我希望找到

106
00:03:26,540 --> 00:03:28,400
这样一条线

107
00:03:28,660 --> 00:03:30,560
基本所有点

108
00:03:30,710 --> 00:03:31,700
都落在这个方向上

109
00:03:31,910 --> 00:03:33,150
然后把所有的数据

110
00:03:33,380 --> 00:03:34,740
映射到这条线上

111
00:03:34,910 --> 00:03:36,230
这样做之后

112
00:03:36,510 --> 00:03:37,430
我就可以直接

113
00:03:37,970 --> 00:03:39,420
测量这条线上

114
00:03:39,580 --> 00:03:41,480
每个样本的位置

115
00:03:42,010 --> 00:03:42,820
我想把这个新特征

116
00:03:43,100 --> 00:03:45,080
叫做 z1

117
00:03:46,830 --> 00:03:48,200
要确定这条线上的位置

118
00:03:48,730 --> 00:03:49,530
我只需要一个数字

119
00:03:49,890 --> 00:03:50,940
这就是说

120
00:03:51,200 --> 00:03:51,980
新特征变量 z1 

121
00:03:52,750 --> 00:03:54,630
能够表示

122
00:03:54,830 --> 00:03:57,610
这条绿线上每一个点的位置

123
00:03:58,060 --> 00:03:59,300
这个意思就是说

124
00:03:59,400 --> 00:04:00,680
在之前 如果我有一个样本 x(1)

125
00:04:00,930 --> 00:04:02,540
比如这是我的

126
00:04:03,430 --> 00:04:04,740
第一个样本 x(1)

127
00:04:05,040 --> 00:04:06,480
所以为了表示

128
00:04:06,820 --> 00:04:08,550
原本的 x(1)

129
00:04:09,620 --> 00:04:10,760
我需要一个二维数字

130
00:04:11,570 --> 00:04:12,800
或者一个二维特征向量

131
00:04:13,700 --> 00:04:14,920
但是现在我可以表示为 z(1)

132
00:04:18,120 --> 00:04:20,330
我可以只用 z(1) 

133
00:04:20,520 --> 00:04:22,170
来表示我的第一个样本

134
00:04:23,270 --> 00:04:25,380
它就是一个实数

135
00:04:25,940 --> 00:04:29,260
类似地 如果 x(2) 

136
00:04:29,590 --> 00:04:31,400
是我这里的第二个样本

137
00:04:32,690 --> 00:04:35,110
那么在之前

138
00:04:35,830 --> 00:04:37,520
需要两个数字来表示它

139
00:04:37,720 --> 00:04:39,930
但是如果我计算

140
00:04:40,930 --> 00:04:42,730
这条线上那个

141
00:04:43,130 --> 00:04:44,250
黑色×的投影

142
00:04:44,700 --> 00:04:45,980
那么现在我只需要一个实数

143
00:04:46,210 --> 00:04:47,350
也就是 z(2)

144
00:04:47,550 --> 00:04:49,580
来表示这条线上

145
00:04:49,620 --> 00:04:51,230
这个点 z(2) 的位置

146
00:04:51,790 --> 00:04:53,070
这个点 z(2) 的位置

147
00:04:54,300 --> 00:04:56,730
以此类推到我的 m 个样本上

148
00:04:57,790 --> 00:04:59,560
总结一下

149
00:04:59,810 --> 00:05:01,310
如果我们允许

150
00:05:02,340 --> 00:05:03,800
通过把所有原始的样本

151
00:05:04,000 --> 00:05:05,270
映射到这条绿线上

152
00:05:05,590 --> 00:05:07,690
来近似原始的数据集

153
00:05:07,880 --> 00:05:10,260
那么我就

154
00:05:10,360 --> 00:05:12,090
只需要一个数字

155
00:05:12,170 --> 00:05:13,700
我只需要一个实数

156
00:05:13,820 --> 00:05:15,270
来确定这条线上

157
00:05:15,370 --> 00:05:16,710
一个点的位置

158
00:05:17,080 --> 00:05:18,220
这样一来

159
00:05:18,300 --> 00:05:19,730
在把所有训练样本

160
00:05:20,070 --> 00:05:21,850
映射到这条绿线上之后

161
00:05:21,930 --> 00:05:23,170
我就能只用一个数字来表示

162
00:05:23,280 --> 00:05:26,520
每个训练样本的位置

163
00:05:27,570 --> 00:05:29,060
所以这是一个对原始训练样本的近似

164
00:05:29,210 --> 00:05:30,300
这是因为我把所有训练样本

165
00:05:30,570 --> 00:05:32,770
映射到这条线上了

166
00:05:33,630 --> 00:05:34,790
但是现在

167
00:05:35,130 --> 00:05:36,140
我只需要给

168
00:05:36,530 --> 00:05:39,800
每个样本保留一个数

169
00:05:41,220 --> 00:05:42,960
这样就减少了一半的内存需求

170
00:05:43,340 --> 00:05:44,640
或者硬盘需求

171
00:05:45,090 --> 00:05:47,760
或者是你用来储存数据的东西

172
00:05:49,100 --> 00:05:50,530
可能更令人感兴趣

173
00:05:50,700 --> 00:05:51,940
也更重要的是 我们之后会看到

174
00:05:52,200 --> 00:05:53,520
我们在之后的视频要讲的

175
00:05:53,780 --> 00:05:55,730
是数据压缩还会

176
00:05:55,930 --> 00:05:56,940
让我们的学习算法

177
00:05:57,200 --> 00:05:59,170
运行地更快

178
00:05:59,480 --> 00:06:00,600
而那实际上可能是

179
00:06:00,920 --> 00:06:02,060
在数据压缩的应用里

180
00:06:02,140 --> 00:06:03,800
比减少硬盘存储空间的需求

181
00:06:04,580 --> 00:06:06,220
这一应用

182
00:06:06,680 --> 00:06:08,620
更令人感兴趣的

183
00:06:10,250 --> 00:06:11,490
在上一页幻灯片中

184
00:06:11,580 --> 00:06:13,140
我们展示了一个

185
00:06:13,620 --> 00:06:15,060
把数据从 2D 降到 1D 的例子

186
00:06:15,210 --> 00:06:16,290
在这页幻灯片中

187
00:06:16,660 --> 00:06:18,010
我要展示另一个

188
00:06:18,450 --> 00:06:21,080
把数据从三维 3D 降到二维 2D 的例子

189
00:06:22,590 --> 00:06:23,360
顺便说一下

190
00:06:23,750 --> 00:06:25,570
在更典型的维数约减例子中

191
00:06:26,390 --> 00:06:27,790
我们可能有1000维

192
00:06:28,230 --> 00:06:30,330
1000D 的数据

193
00:06:30,720 --> 00:06:31,880
我们可能想降低到100维

194
00:06:32,150 --> 00:06:34,080
也就是 100D

195
00:06:34,110 --> 00:06:35,590
但是因为我在幻灯片上

196
00:06:35,700 --> 00:06:37,760
能画的图是有限制的

197
00:06:38,460 --> 00:06:41,520
所以我要用的例子是 3D 到 2D 或者 2D 到 1D 的

198
00:06:43,160 --> 00:06:45,830
所以我们有一个图上这样的数据集

199
00:06:46,050 --> 00:06:47,420
我有一个样本 x(i) 的集合

200
00:06:48,110 --> 00:06:49,430
x(i) 是一个三维实数的点

201
00:06:49,800 --> 00:06:51,790
所以 我的样本是三维的

202
00:06:52,740 --> 00:06:53,300
从这个幻灯片上

203
00:06:53,690 --> 00:06:54,610
可能难以看出这点

204
00:06:54,920 --> 00:06:55,980
但是我一会儿会

205
00:06:56,310 --> 00:06:58,190
展示一个 3D 点云

206
00:06:59,050 --> 00:07:00,280
虽然可能从这里很难看出来

207
00:07:00,380 --> 00:07:01,970
但所有这些数据

208
00:07:02,230 --> 00:07:04,020
可能都差不多

209
00:07:04,130 --> 00:07:05,700
在这样的一个平面上

210
00:07:07,110 --> 00:07:08,130
那么维数约减在这儿怎么用呢

211
00:07:08,380 --> 00:07:09,970
那么维数约减的作用

212
00:07:10,210 --> 00:07:11,960
就是把所有数据

213
00:07:12,110 --> 00:07:13,800
投影到一个二维平面上

214
00:07:14,630 --> 00:07:15,350
投影到一个二维平面上

215
00:07:15,700 --> 00:07:16,670
所以在这里我做的是

216
00:07:16,730 --> 00:07:18,060
对所有的数据

217
00:07:18,300 --> 00:07:19,250
进行投影

218
00:07:19,770 --> 00:07:21,390
使得它们落在这个平面上

219
00:07:22,590 --> 00:07:23,910
现在 最后 为了表示

220
00:07:24,040 --> 00:07:25,580
一个点在平面上的位置

221
00:07:25,750 --> 00:07:27,810
我们需要两个数 对吧？

222
00:07:28,000 --> 00:07:29,150
我们需要表示这个点

223
00:07:29,290 --> 00:07:30,660
沿着这个坐标轴的位置

224
00:07:30,970 --> 00:07:32,370
然后还要表示这个点

225
00:07:32,650 --> 00:07:35,090
沿着另一个坐标轴的位置

226
00:07:35,730 --> 00:07:37,470
所以 我们需要两个数

227
00:07:37,850 --> 00:07:39,900
来表示平面上一个点的位置

228
00:07:40,600 --> 00:07:42,450
这两个数可能叫做 z1 和 z2

229
00:07:43,290 --> 00:07:44,730
这个意思是

230
00:07:44,890 --> 00:07:45,910
我们现在可以用

231
00:07:46,690 --> 00:07:48,310
两个数来表示

232
00:07:48,740 --> 00:07:50,310
每一个训练样本

233
00:07:50,630 --> 00:07:52,950
就是写在这里的 z1 和 z2

234
00:07:53,990 --> 00:07:55,890
所以我们的数据可以用向量 z 表示

235
00:07:56,610 --> 00:07:59,130
它是一个二维实数

236
00:08:00,580 --> 00:08:02,110
这些下标

237
00:08:02,350 --> 00:08:03,990
z下标1 z下标2

238
00:08:04,560 --> 00:08:05,440
他们的意思是

239
00:08:05,500 --> 00:08:07,520
这个向量z

240
00:08:07,750 --> 00:08:09,680
是二维向量 z1 z2

241
00:08:10,600 --> 00:08:11,580
所以如果我的

242
00:08:11,790 --> 00:08:13,690
某个样本是 z(i)

243
00:08:13,760 --> 00:08:15,700
它就是一个

244
00:08:16,350 --> 00:08:19,110
二维向量 z(i)1 z(i)2

245
00:08:20,580 --> 00:08:21,990
在上一个幻灯片中

246
00:08:22,230 --> 00:08:23,750
当我把数据的维度

247
00:08:23,950 --> 00:08:25,270
降到一维时

248
00:08:25,360 --> 00:08:27,500
我只有 z1 对吧？

249
00:08:27,760 --> 00:08:28,610
在之前的幻灯片中

250
00:08:28,700 --> 00:08:29,830
是 z1 下标是1

251
00:08:30,550 --> 00:08:31,720
但是这里我的数据是二维的

252
00:08:32,100 --> 00:08:32,730
所以我有 z1 和 z2

253
00:08:33,040 --> 00:08:34,940
作为数据的两个元素

254
00:08:36,690 --> 00:08:37,830
现在 让我们来确认一下

255
00:08:38,020 --> 00:08:39,200
都能理解这些图片的意义

256
00:08:39,290 --> 00:08:40,790
现在让我们用 3D 绘图

257
00:08:41,600 --> 00:08:45,080
来重现一样的这三幅图

258
00:08:45,540 --> 00:08:46,570
我们走的过程是这样的

259
00:08:47,040 --> 00:08:48,110
左边是原始数据集

260
00:08:48,480 --> 00:08:49,520
中间是投影到

261
00:08:49,590 --> 00:08:50,540
2D 的数据集

262
00:08:51,040 --> 00:08:52,140
右边是以 z1 和 z2

263
00:08:52,820 --> 00:08:54,900
为坐标轴的 2D 数据集

264
00:08:55,780 --> 00:08:56,610
我们来更详细地看一下

265
00:08:56,820 --> 00:08:57,960
左边这个

266
00:08:58,270 --> 00:08:59,210
这是我的原始数据集

267
00:08:59,410 --> 00:09:00,680
所以我从一个这样的

268
00:09:01,380 --> 00:09:02,420
3D 点云开始

269
00:09:02,660 --> 00:09:04,000
3D 点云开始

270
00:09:04,360 --> 00:09:05,390
它的坐标轴是 x1 x2 x3

271
00:09:05,570 --> 00:09:07,410
所以这是一个 3D 的点云

272
00:09:07,960 --> 00:09:08,970
但是大部分数据

273
00:09:09,500 --> 00:09:10,750
差不多可能都落在某个 2D 平面上

274
00:09:10,850 --> 00:09:12,800
或者说距离某个 2D 平面不远

275
00:09:13,930 --> 00:09:14,950
所以 我们可以做的是

276
00:09:15,040 --> 00:09:17,460
取这些数据 这是我中间的图片

277
00:09:17,800 --> 00:09:19,110
我要把它们投影到 2D

278
00:09:19,370 --> 00:09:20,790
所以 我投影这些数据

279
00:09:20,900 --> 00:09:23,220
使得它们全部落在这个 2D 平面上

280
00:09:23,750 --> 00:09:25,330
你可以看到所有的数据落在一个平面上

281
00:09:26,190 --> 00:09:27,470
因为我们把所有的东西

282
00:09:27,700 --> 00:09:30,520
都投影到一个平面上了

283
00:09:30,570 --> 00:09:31,490
所以这个意思是

284
00:09:31,800 --> 00:09:33,190
我们现在只需要

285
00:09:33,820 --> 00:09:35,090
两个数 z1 和 z2

286
00:09:35,620 --> 00:09:37,470
来表示点在平面上的位置

287
00:09:40,530 --> 00:09:41,480
所以这就是

288
00:09:41,810 --> 00:09:42,990
把数据从三维

289
00:09:43,500 --> 00:09:45,180
降到二维的过程

290
00:09:45,340 --> 00:09:48,520
降到二维的过程

291
00:09:49,230 --> 00:09:50,850
这就是维数约减

292
00:09:51,070 --> 00:09:52,740
以及如何使用它来压缩数据

293
00:09:54,010 --> 00:09:55,400
我们之后会看到

294
00:09:55,580 --> 00:09:56,970
它还会让我们的某些算法

295
00:09:57,110 --> 00:09:58,020
运行得更快

296
00:09:58,580 --> 00:09:59,670
我们在后面的课中继续介绍

297
00:09:59,740 --> 00:10:01,210
【教育无边界字幕组】翻译:竹二个 校对/审核: 所罗门捷列夫