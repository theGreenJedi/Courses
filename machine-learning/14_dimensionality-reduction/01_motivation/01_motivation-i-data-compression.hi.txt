इस विडीओ में, मैं चाहूँगा शुरू करते हैं बात करना एक दूसरी तरह की अनसुपरवाईज्ड लर्निंग प्रॉब्लम की जिसे कहते हैं डिमेन्शनैलिटी रिडक्शन. कुछ और भिन्न कारण है कि क्यों कोई शायद करना चाहता है डिमेन्शनैलिटी रिडक्शन. एक है डेटा कम्प्रेशन, और जैसे हम देखेंगे बाद में, कुछ वीडीयो के बाद, डेटा कम्प्रेशन न केवल हमें कम्प्रेस करने देता है डेटा को और इसलिए इसे उपयोग करने देता है कम कम्प्यूटर मेमरी का या डिस्क स्पेस का, बल्कि यह हमें गति बढ़ाने में सहायता करता है हमारे लर्निंग अल्गोरिद्म की. लेकिन पहले, चलो शुरू करते हैं बात करने से डिमेन्शनैलिटी रिडक्शन के बारे में. एक प्रेरक उदाहरण के रूप में, मान लो कि हमने एकत्र किया है एक डेटा सेट जिसमें बहुत, बहुत, बहुत फ़ीचर्ज़ हैं, और मैंने प्लॉट किए हैं केवल दो उनमें से यहाँ. और मान लो कि बिना पता चले हमें, दो फ़ीचर्ज़ वास्तव में थे लम्बाई किसी चीज़ की सेंटिमीटर में, और एक भिन्न फ़ीचर, x2, है लम्बाई उसी चीज़ की इंच में. तो, यह देता है हमें एक बहुत ही अनावश्यक रेप्रेज़ेंटेशन और शायद बजाय रखने के दो भिन्न फ़ीचर्ज़ x1 फिर x2, दोनो इनमें से मूल रूप से मापते हैं लम्बाई, शायद हम क्या करना चाहते हैं कि कम करें डेटा को एक डिमेन्शनल तक और सिर्फ़ रखें एक नम्बर जो मापता है इस लम्बाई को. यदि यह उदाहरण लगता है थोड़ा काल्पनिक, यह सेंटिमीटर और इंच का उदाहरण वास्तव में नहीं है उतना अवास्तविक, और नहीं है उतना भिन्न चीज़ों से जो मैंने देखी हैं होती हुई इंडस्ट्री में. यदि आपके पास हैं सेंकडो या हज़ारों फ़ीचर्ज़, यह होता है अक्सर इतना आसान खो देना ट्रैक कि वास्तव में कौन से फ़ीचर्ज़ आपके पास है. और कभी कभी होती हैं कुछ भिन्न एंजिनीरिंग टीम, शायद एक एंजिनीरिंग टीम देती है आपको दो सौ फ़ीचर्ज़, एक दूसरी एंजिनीरिंग टीम देती है आपको अन्य तीन सौ फ़ीचर्ज़, और एक तीसरी एंजिनीरिंग टीम देती है आपको पाँच सौ फ़ीचर्ज़ तो आपके पास है एक हज़ार फ़ीचर्ज़ कुल मिला कर, और यह हो जाता है कठिन ट्रैक रखना आप जानते हैं, कि वास्तव में कौन से फ़ीचर्ज़ आपको मिले किस टीम से, और इससे वास्तव में हमें मिलते हैं बहुत से अनावश्यक फ़ीचर्ज़ इस तरह के. और इसलिए यदि लम्बाई सेंटिमीटर में राउंड ऑफ़ करते नज़दीकी सेंटिमीटर तक और लम्बाई इंच में राउंड ऑफ़ करते नज़दीकी इंच तक, तब, वह है करना कि क्यों ये इग्ज़ाम्पल्ज़ पूरी तरह से नहीं हैं एक सीधी लाइन में, जिसकी वजह है, आप जानते हैं, राउंड-ऑफ़ एरर नज़दीकी सेंटिमीटर तक या नज़दीकी इंच तक. और यदि हम कम कर सकते हैं डेटा को एक डिमेन्शन तक बजाय दो डिमेन्शन्स के, वह कम करता है अतिरिक्तता. एक भिन्न उदाहरण में, शायद जो लगे थोड़ा कम काल्पनिक. कई वर्षों से मैं काम कर रहा हूँ एक ऑटानमस हेलिकॉप्टर पाइलट पर. या मैं काम कर रहा हूँ पाइलट्स के साथ जो हेलिकॉप्टर उड़ाते है. और इसलिए. यदि आपको मापना होता - यदि आपको करना होता, आप जानते हैं, एक सर्वे या करना होता एक टेस्ट इन भिन्न पाइलट्स का - आपके पास होता एक फ़ीचर x1, जो है शायद स्किल इन हेलिकॉप्टर पाइलट्स का, और शायद x2 हो सकता था पाइलट एंजोयमेंट. मतलब, आप जानते है, कितना वे एंजोय करते हैं उड़ाना, और शायद ये दो फ़ीचर्ज़ होते बहुत को-रिलेटेड. और आप वास्तव में जिसकी परवाह करते शायद होता इस तरह का इस तरह का, यह दिशा, एक भिन्न फ़ीचर जो वास्तव में मापता पाइलट की ऐप्टिटूड / योग्यता. और मैं ले रहा हूँ नाम ऐप्टिटूड, निश्चय ही, लेकिन फिर से, यदि आपके पास हैं बहुत को-रिलेटेड फ़ीचर्ज़, शायद आप वास्तव में कम करना चाहते हैं डिमेन्शन. तो, चलो मैं बताता हूँ थोड़ा और कि क्या इसका वास्तव में मतलब है कम करना डिमेन्शन डेटा की 2 डिमेन्शन से, 2D से 1 डिमेन्शन या 1D पर. चलो मैं रंग करता हूँ ये इग्ज़ाम्पल्ज़ लेकर भिन्न रंग. और इस केस में कम करने से डिमेन्शन्स से क्या मेरा मतलब है कि मैं चाहूँगा ढूँढना शायद यह लाइन, यह, आप जानते हैं, दिशा जिसमें सबसे अधिक मेरा डेटा पड़ता / लगता है और प्रोजेक्ट करना सारे डेटा को उस लाइन पर जो है ट्रू, और ऐसा करने से, मैं क्या कर सकता हूँ कि सिर्फ़ मापूँ स्थान प्रत्येक इग्ज़ाम्पल का उस लाइन पर. और मैं क्या कर सकता हूँ कि बनाऊँ एक नया फ़ीचर, z1, और निर्दिष्ट करने के लिए पोज़िशन लाइन पर मुझे चाहिए केवल एक नम्बर, तो इसका मतलब है z1 है एक नया फ़ीचर निर्दिष्ट करता है स्थान प्रत्येक इन पोईटस का इस हरी लाइन पर. और इसका क्या मतलब है, कि जहाँ पहले मेरे पास था यदि मेरे पास था एक इग्ज़ाम्पल x1, शायद यह था मेरा पहला इग्ज़ाम्पल x1. तो करने के लिए रेप्रेज़ेंट x1 मूल रूप में x1. मुझे चाहिए था एक दो डिमेन्शनल नम्बर, या एक दो-डिमेन्शनल फ़ीचर वेक्टर. इसके बजाय अब मैं रेप्रेज़ेंट कर सकता हूँ z1, मैं कर सकता हूँ इस्तेमाल सिर्फ़ z1 रेप्रेज़ेंट करने के लिए मेरा पहला इग्ज़ाम्पल, और वह होगा एक रियल नम्बर. और इसी प्रकार x2 आप जानते हैं, यदि x2 है मेरा दूसरा इग्ज़ाम्पल वहाँ, तब पहले, जहाँ इसे चाहिए था दो डिमेन्शनल नम्बर रेप्रेज़ेंट करने के लिए यदि मैं इसके स्थान पर कम्प्यूट करता हूँ प्रजेक्शन उसका उस काले क्रॉस का उस लाइन पर. और अब मुझे चाहिए केवल एक रियल नम्बर जो है z2 रेप्रेज़ेंट करने के लिए स्थान इस पोईँट z2 उस लाइन पर. और इसी प्रकार आगे मेरे m इग्ज़ाम्पल्ज़ तक. अत: सारांश में, यदि हम अपने को करने देते हैं लगभग करना प्रारम्भिक डेटा सेट को प्रोजेक्ट करके सारे मेरे प्रारम्भिक इग्ज़ाम्पल्ज़ को इस हरी लाइन पर यहाँ, तब मुझे चाहिए केवल एक नम्बर, मुझे चाहिए केवल रियल नम्बर निर्दिष्ट करने के लिए पज़िशन एक पोईँट की लाइन पर, और इसलिए मैं क्या कर सकता हूँ कि इस्तेमाल करूँ सिर्फ़ एक नम्बर रेप्रेज़ेंट करने के लिए स्थान प्रत्येक मेरे ट्रेनिंग इग्ज़ाम्पल की प्रोजेक्ट करने के बाद उस हरी लाइन पर. तो यह है एक लगभग सही अनुमान प्रारम्भिक ट्रेनिंग सेट का क्योंकि मैंने प्रोजेक्ट किए हैं सारे मेरे ट्रेनिंग इग्ज़ाम्पल एक लाइन पर. लेकिन अब, मुझे चाहिए रखना केवल एक नम्बर मेरे प्रत्येक इग्ज़ाम्पल के लिए. और इसलिए यह आधा कर देता है मेमरी की आवश्यकता, या एक स्पेस आवश्यकता, या जो भी आप इस्तेमाल करते हैं स्टोर करने के लिए डेटा. और शायद अधिक दिलचस्प है, और अधिक महत्वपूर्ण बात, हम देखेंगे बाद में, बाद के वीडियो में भी है कि यह हमें बनाने देता है आपके लर्निंग अल्गोरिद्म को रन करना अधिक शीघ्रता से भी. और वह है वास्तव में, शायद, और भी दिलचस्प ऐप्लिकेशन इस डेटा कम्प्रेशन की बजाय सिर्फ़ कम करने के मेमरी या डिस्क स्पेस आवश्यकता स्टोर करने के लिए डेटा. पिछली स्लाइड पर हमने दिखाया था एक उदाहरण कम / रिड्यूस करने का डेटा 2D से 1D में. इस स्लाइड पर मैं दिखाऊँगा एक और उदाहरण कम करने का डेटा को तीन डिमेन्शन्स 3D से दो डिमेन्शन्स 2D में. वैसे तो, अधिक सूचक उदाहरण डिमेन्शनैलिटी रिडक्शन का होगा कि हमारे पास शायद है एक हज़ार डिमेन्शनल डेटा या 1000D डेटा जो शायद हम करना चाहते हैं मान लो एक सौ डिमेन्शनल तक या 100D, लेकिन क्योंकि जो मैं प्लॉट कर सकता हूँ इस स्लाइड पर वह सीमित है, मैं इस्तेमाल करूँगा उदाहरण 3D से 2D का, या 2D से 1D का. तो, हमारे पास है एक डेटा सेट जैसा यहाँ दिखाया है. और इसलिए, मेरे पास होगा एक सेट इग्ज़ाम्पल्ज़ x(i) का जो है पोईँट्स R3 में. तो, मेरे पास हैं तीन डिमेन्शनल इग्ज़ाम्पल्ज़. मैं जानता हूँ यह हो सकता है थोड़ा कठिन देख पाना इसे स्लाइड पर, लेकिन मैं दिखाऊँगा एक 3D पोईँट क्लाउड कुछ देर में. और यह हो सकता है कठिन देख पाना यहाँ, लेकिन सारा यह डेटा लगभग निहित है एक प्लेन में, इस तरह. और इसलिए हम क्या कर सकते हैं डिमेन्शनैलिटी रिडक्शन से, कि लें सारा यह डेटा और प्रोजेक्ट करें डेटा को नीचे एक दो डिमेन्शनल प्लेन में. तो यहाँ है जो मैंने किया है. मैंने लिया है सारा डेटा और मैंने प्रोजेक्ट किया है सारा डेटा; ताकि यह सारा निहित है प्लेन में. अब, अंत में, करने के लिए निर्दिष्ट स्थान एक पोईँट का प्लेन में, हमें चाहिए दो नम्बर, सही है? हमें चाहिए, शायद निर्दिष्ट करना स्थान एक पोईँट का साथ साथ इस ऐक्सिस के, और फिर निर्दिष्ट करना इसका स्थान उस ऐक्सिस के साथ. तो, हमें चाहिए दो नम्बर, शायद कहेंगे z1 और z2 निर्दिष्ट करने के लिए स्थान एक पोईँट का प्लेन में. और इसलिए, इसका क्या मतलब है, कि हम अब रेप्रेज़ेंट कर सकते हैं प्रत्येक इग्ज़ाम्पल को, प्रत्येक ट्रेनिंग इग्ज़ाम्पल को, दो नम्बर से जो मैंने बनाए हैं यहाँ, z1 और z2. तो हमारा डेटा दर्शाया जा सकता हैं वेक्टर z से जो है R2 में. और ये सबस्क्रिप्ट, z सबस्क्रिप्ट 1, z सबस्क्रिप्ट 2, क्या मेरा मतलब है उससे कि मेरा वेक्टर यहाँ, z, आप जानते है, है दो डिमेन्शनल वेक्टर, z1, z2. और इसलिए यदि मेरे पास हैं कुछ विशेष इग्ज़ाम्पल्ज़, z(i), या वह है दो डिमेन्शनल वेक्टर, z(i)1, z(i) 2. और पिछली स्लाइड पर जब मैं रिड्यूस / कम कर रहा था डेटा को एक डिमेन्शनल डेटा में तब मेरे पास था केवल z1, ठीक है? और वह है जो एक z1 सबस्क्रिप्ट 1 पिछली स्लाइड पर थी, लेकिन यहाँ मेरे पास है दो डिमेन्शनल डेटा, तो मेरे पास है z1 और z2 दो कम्पोनेंट्स डेटा के. अब, मुझे सिर्फ़ सुनिश्चित करने दें कि ये चित्र समझ आए हैं. तो तो मैं दोबारा दिखाता हूँ यही तीन चित्र फिर से लेकिन 3D प्लॉट्स से. तो जो प्रक्रिया हमने की वह थी जो दिखायी है इस ओप्टिमल डेटा सेट में, मध्य का डेटा सेट प्रोजेक्ट करता हैं 2D में, और दाई तरफ़ है 2D डेटा सेट जिसमें z1 और z2 ऐक्सिस हैं. चलो देखते हैं उन्हें थोड़ा और. यह है मेरा प्रारम्भिक डेटा सेट, दिखाया है बाईं तरफ़, और इसलिए मैंने शुरू किया था एक 3D पोईँट क्लाउड से इस तरह, जहाँ ऐक्सिस को लेबल किया है x1, x2, x3 से और इसलिए यहाँ है एक 3D प्लॉट लेकिन अधिकतर डेटा, शायद लगभग निहित है किसी पर, आप जानते हैं, ज़्यादा दूर नहीं किसी 2D प्लेन से. तो, हम क्या कर सकते हैं कि लें इस डेटा को और यहाँ है मेरा मध्य का चित्र. मैं प्रोजेक्ट करूँगा इसे 2D पर. तो, मैंने प्रोजेक्ट किया है इस डेटा को ताकि सारे ये निहित है अब इस 2D सरफ़ेस पर. और जैसे कि आप देख सकते हैं सारा डेटा है एक प्लेन में, क्योंकि हमने प्रोजेक्ट किया है सबकुछ एक प्लेन पर, और इसलिए इसका क्या मतलब है कि अब मुझे चाहिए सिर्फ़ दो नम्बर, z1 और z2, दर्शाने के लिए स्थान पोईँट का प्लेन में. और इसलिए वह है प्रक्रिया जो हम कर सकते हैं रिड्यूस / कम करने के लिए हमारा डेटा तीन डिमेन्शन से दो डिमेन्शन में. तो वह है डिमेन्शनैलिटी रिडक्शन और कैसे इस्तेमाल कर सकते हैं इसका कम्प्रेस करने के लिए हमारा डेटा. और जैसे कि हम देखेंगे बाद में, यह हमें करने देगा कुछ हमारे अल्गोरिद्मद को अधिक गति से भी, लेकिन हम पहुँचेंगे उस पर एक बाद के वीडियो में.