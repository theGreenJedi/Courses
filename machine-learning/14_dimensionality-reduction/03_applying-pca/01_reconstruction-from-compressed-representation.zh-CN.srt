1
00:00:00,120 --> 00:00:01,020
在前面的视频中

2
00:00:01,690 --> 00:00:03,300
我们介绍了 PCA (主成分分析)

3
00:00:03,410 --> 00:00:05,270
作为压缩数据的算法

4
00:00:05,330 --> 00:00:06,760
你会发现 它能将高达一千维度

5
00:00:07,270 --> 00:00:08,760
的数据压缩到

6
00:00:09,100 --> 00:00:10,850
只有一百个维度

7
00:00:11,010 --> 00:00:12,360
或者将三维数据

8
00:00:12,810 --> 00:00:14,980
压缩到两个维度的情况

9
00:00:16,360 --> 00:00:17,430
如果有一个这样的

10
00:00:17,620 --> 00:00:19,040
压缩算法

11
00:00:19,360 --> 00:00:20,440
那么也应该有一种方法

12
00:00:20,660 --> 00:00:22,930
可以从压缩过的数据

13
00:00:23,030 --> 00:00:25,560
近似地回到原始高维度的数据

14
00:00:26,340 --> 00:00:28,070
假设有一个已经被压缩过的 z(i)

15
00:00:28,780 --> 00:00:30,250
它有100个维度

16
00:00:30,320 --> 00:00:31,710
怎样使它回到其最初的表示 x(i)

17
00:00:32,050 --> 00:00:34,720
也就是压缩前的1000维的数据呢？

18
00:00:35,760 --> 00:00:36,820
在这段视频中

19
00:00:36,930 --> 00:00:40,350
我将会告诉你如何做到

20
00:00:40,500 --> 00:00:43,620
在 PCA 算法中 我们有下面这些样本

21
00:00:43,940 --> 00:00:45,670
现有样本 x(1)

22
00:00:45,910 --> 00:00:47,810
样本 x(2)

23
00:00:48,110 --> 00:00:49,340
那我们要做什么呢？

24
00:00:49,570 --> 00:00:51,010
我们使用这些样本

25
00:00:51,120 --> 00:00:54,160
让这些样本投影在一维平面上

26
00:00:55,150 --> 00:00:56,280
我们现在只需要

27
00:00:56,450 --> 00:00:57,750
使用一个实数

28
00:00:58,350 --> 00:01:00,500
就能在它们全部被

29
00:01:00,600 --> 00:01:01,950
投影到这个一维平面z1上

30
00:01:02,300 --> 00:01:04,640
并且明确地指定其位置

31
00:01:04,890 --> 00:01:06,930
另外 任意给一个点

32
00:01:07,730 --> 00:01:08,730
比如这个点z(1)

33
00:01:08,980 --> 00:01:10,840
如何重新得到

34
00:01:11,000 --> 00:01:12,580
原来的二维数据点呢？

35
00:01:13,290 --> 00:01:15,380
具体来说就是

36
00:01:15,510 --> 00:01:16,510
给出一个一维实数点z

37
00:01:16,660 --> 00:01:17,840
我们能否

38
00:01:18,160 --> 00:01:19,660
让z重新变成原来的

39
00:01:20,440 --> 00:01:22,060
二维实数点x？

40
00:01:22,370 --> 00:01:24,970
我们知道

41
00:01:26,520 --> 00:01:28,090
z的值

42
00:01:28,400 --> 00:01:29,570
等于Ureduce的转置乘以x

43
00:01:29,680 --> 00:01:30,640
如果想得到相反的情形

44
00:01:30,930 --> 00:01:33,620
方程应这样变化

45
00:01:33,780 --> 00:01:35,150
x_approx

46
00:01:35,290 --> 00:01:38,220
应该等于

47
00:01:40,470 --> 00:01:43,570
Ureduce乘以z

48
00:01:44,020 --> 00:01:44,880
为了检查维度

49
00:01:45,950 --> 00:01:47,760
在这里

50
00:01:47,970 --> 00:01:48,990
Ureduce

51
00:01:49,680 --> 00:01:51,260
是一个n×k矩阵

52
00:01:51,370 --> 00:01:53,270
z就是一个k×1维向量

53
00:01:54,030 --> 00:01:56,280
将它们相乘得到的就是n×1维

54
00:01:56,720 --> 00:01:58,270
所以说

55
00:01:58,450 --> 00:01:59,990
x_approx 是一个n维向量

56
00:02:00,310 --> 00:02:01,320
同时 根据 PCA 的意图

57
00:02:01,390 --> 00:02:03,320
投影的平方误差不能很大

58
00:02:03,620 --> 00:02:04,510
也就是说

59
00:02:04,730 --> 00:02:06,050
x_approx

60
00:02:06,500 --> 00:02:08,640
将会与最开始

61
00:02:08,960 --> 00:02:10,090
用来导出z的

62
00:02:10,270 --> 00:02:13,140
原始x 很接近

63
00:02:14,080 --> 00:02:16,630
用图表示出来就是这样

64
00:02:16,870 --> 00:02:17,820
在这一过程后

65
00:02:17,970 --> 00:02:19,640
我们可以看到

66
00:02:19,920 --> 00:02:22,860
这些点都到绿线上去了

67
00:02:23,500 --> 00:02:24,580
因此我们再看开始时的样本

68
00:02:24,920 --> 00:02:26,400
如果我们从这个

69
00:02:26,610 --> 00:02:28,570
x(1)点开始

70
00:02:28,850 --> 00:02:29,690
经过压缩我们得到这个z(1)点

71
00:02:30,310 --> 00:02:32,760
再通过这个公式

72
00:02:33,440 --> 00:02:35,510
我们得到x_approx(1)

73
00:02:35,730 --> 00:02:37,040
对应于图上

74
00:02:37,590 --> 00:02:40,110
x_approx(1)就是这个点

75
00:02:40,260 --> 00:02:41,990
是一个二维实数

76
00:02:42,780 --> 00:02:44,060
你可以使用同样的步骤

77
00:02:44,180 --> 00:02:45,640
计算出

78
00:02:45,760 --> 00:02:47,840
x_approx(2)

79
00:02:49,640 --> 00:02:50,630
这已经是

80
00:02:50,780 --> 00:02:53,160
与原始数据非常近似了

81
00:02:53,670 --> 00:02:54,870
好了 这就是

82
00:02:55,060 --> 00:02:56,190
用低维度的特征数据 z

83
00:02:56,630 --> 00:02:58,350
回到

84
00:02:58,700 --> 00:03:00,720
未被压缩的特征数据

85
00:03:00,760 --> 00:03:01,990
我们找到一个

86
00:03:02,240 --> 00:03:03,480
与原始数据x近似的x_apporx

87
00:03:03,690 --> 00:03:05,400
我们也

88
00:03:05,500 --> 00:03:07,210
称这一过程

89
00:03:08,220 --> 00:03:08,900
为原始数据的重构 ( reconstruction )

90
00:03:09,530 --> 00:03:10,950
我们可以在需要从压缩过的数据

91
00:03:11,310 --> 00:03:13,630
重构出原始数据x时 使用这种方法

92
00:03:16,770 --> 00:03:18,370
因此 给出一个无标签的数据集

93
00:03:18,610 --> 00:03:19,850
你现在知道了怎样

94
00:03:19,990 --> 00:03:21,710
应用 PCA 方法

95
00:03:21,970 --> 00:03:23,800
来选取高维特征x

96
00:03:24,130 --> 00:03:25,440
并将其映射到

97
00:03:25,560 --> 00:03:27,200
低维度特征z

98
00:03:27,400 --> 00:03:28,630
希望你从本课视频中

99
00:03:28,910 --> 00:03:29,670
知道如何

100
00:03:30,260 --> 00:03:31,690
选取低维度的特征 z

101
00:03:31,860 --> 00:03:32,810
并将它映射为

102
00:03:33,700 --> 00:03:35,780
与原始数据近似的高维数据

103
00:03:37,300 --> 00:03:38,180
现在你知道如何

104
00:03:38,460 --> 00:03:40,280
应用 PCA 的实现方法

105
00:03:40,470 --> 00:03:41,290
接下来我们要做的就是

106
00:03:41,390 --> 00:03:42,250
谈谈一些能让 PCA 

107
00:03:42,290 --> 00:03:43,460
使用得更有效的方法

108
00:03:43,990 --> 00:03:45,240
具体来说

109
00:03:45,530 --> 00:03:46,670
在下一段视频中

110
00:03:46,890 --> 00:03:47,610
我想谈谈

111
00:03:48,090 --> 00:03:49,730
如何选择K

112
00:03:49,910 --> 00:03:51,140
也就是说 如何选择

113
00:03:51,560 --> 00:03:53,570
特征向量z被减去的维度 【果壳教育无边界字幕组】翻译:所罗门捷列夫 校对:星星之火 审核:Naplessss