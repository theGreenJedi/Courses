前の幾つかのビデオで、 圧縮アルゴリズムとしてのPCAについて 言及した、そこでは 例えば1000次元のデータがあって、 それを100次元のフィーチャーベクトルに 圧縮する、とか、 あるいは3次元のデータがあって、 それを二次元の表現に圧縮する、とかだった。 では、これが圧縮の アルゴリズムだというのなら、 この圧縮した表現から、 元の高次元のデータを近似した値に 戻す方法があるべきだろう。 つまり、あるz(i)が与えられたとして、 これは100次元だったとして、 そこからどうやって元の表現x(i)、これは1000次元とかだが、 そのx(i)に戻したらいいだろうか？ このビデオでは、 そのやり方を説明する。 PCAアルゴリズムでは、こんな感じの手本を持っている。 これが手本x1で、 これが手本x2。 そして我らがやるのは、 これらの手本に対して、 これを一次元平面の上に射影する。 すると、1次元平面に 射影した後なら、 これらの点を示すのに 一つの実数、これをz1と呼ぼう、 このz1だけで示す事が出来る。 このような点が与えられた時、 z1の点が与えられた時、 オリジナルの二次元空間に、 どうやったら戻せるだろうか？ 具体的に書くと、 ある点zが与えられた時に、このzはRだが、 これからなんであれ オリジナルの値の、 何からの近似的なR2の表現xを 取り戻す事が出来るだろうか？ さて、zはイコールの、 U reduceの転置 xだが、 これの逆方向に行きたければ、 その方程式は、 x approx イコールの、 U reduce 掛ける zと なる。 ここで次元をチェックしておこう。 ここでU reduceは n掛けるk 次元の ベクトルで、 zは k掛ける1 次元のベクトル。 だからこれらを掛けあわせれば、その結果は n掛ける1 となるだろう。 つまり x approxは n次元ベクトルとなる。 そして、PCAが意図する事は、 二乗射影誤差が 大きくなり過ぎない、という事だから、 このx approxは なんであれオリジナルのxの値に このxがzを最初に導出するのに使った物だが、 そのxに近い値となる。 これがどんな感じなのかを絵で示そう。こんな感じだ。 この手続きで取り戻せるのは、 この緑の直線の上に乗ってる 点だ。 前の例を用いると、 この値x1から 始めたとして、 このz1を得る。 このz1をこの公式に代入して、 x1 approxを得る。 それはこの、ここの点。 これがx1 approx。 これはR2だ。 同様に、 同じ手続きを繰り返すと、 これがx2 approxとなる。 そしてこれは、元のデータの かなりまともな近似なのが分かるだろう。 以上が、 低い次元の表現zから 圧縮されてない表現のデータを 取り戻す方法だ。 我らはオリジナルのデータxを 近似した物を取り戻す。 このプロセスの事をまた、 オリジナルデータの再構築とも 呼ぶ。 圧縮した表現から元の値xを 再構築しようとしている、と考える時にはこう呼ぶ。 ラベルづけされてないデータセットがあった時に、 PCAをどうやって適用し、 高次元のフィーチャーxを より低い次元の表現zに マップするか、 分かっただろう。 そしてこのビデオから、 これらの低次元の表現zから オリジナルの高次元のデータを近似した物を 取り戻す方法も 分かっただろう。 いまやあなたは、PCAを どうやって実装し適用したらいいかを知った訳だ。 そこで我らが次にやろうと思うのは、 PCAを実践で 上手に使っていく方法の メカニクスについてちょっと話をしたい。 具体的には、次のビデオでは kをどうやって 選ぶかについて話していきたい。 それはつまり、この圧縮された表現のベクトルzの次元を どうやって選ぶか、という事だ。