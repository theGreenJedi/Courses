1
00:00:00,250 --> 00:00:01,530
前回のビデオでは

2
00:00:01,850 --> 00:00:02,870
コスト関数の微分を計算する為に

3
00:00:03,980 --> 00:00:05,810
バックプロパゲーションをどう使うかを議論した。

4
00:00:06,780 --> 00:00:07,770
このビデオでは、

5
00:00:08,030 --> 00:00:10,260
行列からベクトルへの

6
00:00:11,220 --> 00:00:13,110
パラメータのアンロールという、

7
00:00:13,670 --> 00:00:15,500
細かい実装の話を簡単に行う、

8
00:00:15,610 --> 00:00:17,870
アドバンスドな最適化ルーチンを使うのに必要となるから。

9
00:00:20,230 --> 00:00:21,470
具体的にいこう、

10
00:00:21,640 --> 00:00:23,120
パラメータシータを受け取って

11
00:00:23,660 --> 00:00:24,870
コスト関数とその微分を返す

12
00:00:25,420 --> 00:00:28,690
関数を実装したとしよう。

13
00:00:30,050 --> 00:00:31,260
すると、これをfminuncのような

14
00:00:31,510 --> 00:00:33,820
アドバンスドな最適化アルゴリズムに渡す事が出来る、

15
00:00:34,080 --> 00:00:34,790
ところで、このfminuncは

16
00:00:34,890 --> 00:00:35,900
唯一の選択肢という訳では無い。

17
00:00:36,060 --> 00:00:38,660
別のアドバンスドな最適化アルゴリズムも存在する。

18
00:00:39,710 --> 00:00:40,910
でもそれらは全て

19
00:00:41,030 --> 00:00:41,970
コスト関数のポインタと

20
00:00:42,730 --> 00:00:43,560
シータの初期値を

21
00:00:44,490 --> 00:00:45,730
受け取る。

22
00:00:47,010 --> 00:00:48,490
そしてこれらのルーチンは

23
00:00:48,730 --> 00:00:51,600
シータとシータの初期値を

24
00:00:51,740 --> 00:00:53,360
どちらも

25
00:00:53,580 --> 00:00:55,410
パラメータベクトルと想定する、

26
00:00:55,640 --> 00:00:57,040
RのnとかRのn+1とか。

27
00:00:57,870 --> 00:01:00,440
これらはベクトルだが、

28
00:01:00,530 --> 00:01:01,880
コスト関数の実装が

29
00:01:02,150 --> 00:01:03,770
二番目の返値として

30
00:01:03,960 --> 00:01:05,640
返す微分項も

31
00:01:05,830 --> 00:01:07,410
RのnなりRのn+1なりを

32
00:01:07,640 --> 00:01:09,860
仮定する。つまりこれもベクトルだ。

33
00:01:10,840 --> 00:01:11,890
ロジスティック回帰で使ってる時は

34
00:01:12,040 --> 00:01:14,030
これで問題無かったのだが、

35
00:01:14,220 --> 00:01:15,120
今やニューラルネットワークなので、

36
00:01:15,280 --> 00:01:17,160
パラメータはもう

37
00:01:17,220 --> 00:01:18,370
ベクトルでは無くなってしまった。

38
00:01:18,980 --> 00:01:21,110
今やパラメータはこれらの行列で

39
00:01:21,310 --> 00:01:22,670
四段のニューラルネットワークだとすると

40
00:01:22,830 --> 00:01:26,050
パラメータ行列 シータ1、シータ2，シータ3を持ち

41
00:01:26,700 --> 00:01:28,080
Octaveではこれらは

42
00:01:28,680 --> 00:01:30,660
行列Theta1、Theta2、Theta3と表されるだろう。

43
00:01:31,450 --> 00:01:33,160
同様にこれらのgradientの項として

44
00:01:33,760 --> 00:01:35,030
返されると期待しているのは、

45
00:01:35,720 --> 00:01:36,890
前回のビデオで

46
00:01:36,980 --> 00:01:38,430
これらのgradient項をどう計算するかを

47
00:01:38,840 --> 00:01:40,520
扱ったが、

48
00:01:40,980 --> 00:01:42,290
それらは大文字のD1、D2、

49
00:01:42,560 --> 00:01:43,950
D3で、それはOctaveでは

50
00:01:44,080 --> 00:01:46,130
行列D1、D2、D3として表される。

51
00:01:48,080 --> 00:01:49,150
このビデオでは、

52
00:01:49,480 --> 00:01:50,420
これらの行列をとって

53
00:01:50,510 --> 00:01:51,480
どうベクトルに

54
00:01:51,980 --> 00:01:54,060
アンロールするかをお話する。

55
00:01:54,590 --> 00:01:55,750
ここのシータとして

56
00:01:55,910 --> 00:01:57,790
渡すのに適切なフォーマットにしたり

57
00:01:57,930 --> 00:02:00,090
ここのgradientから

58
00:02:00,460 --> 00:02:01,850
取り出す為に。

59
00:02:03,220 --> 00:02:04,540
具体的に、入力レイヤとして

60
00:02:04,670 --> 00:02:06,740
10個のユニットがあり、

61
00:02:06,950 --> 00:02:08,250
隠れレイヤとして

62
00:02:09,010 --> 00:02:10,000
10ユニット、

63
00:02:10,540 --> 00:02:11,870
そして出力レイヤとして

64
00:02:12,020 --> 00:02:13,090
ユニット一つとしよう。

65
00:02:13,270 --> 00:02:14,030
そしてs1はレイヤ1のユニット数、

66
00:02:14,440 --> 00:02:15,710
s2はレイヤ2 の

67
00:02:15,860 --> 00:02:18,220
ユニット数、そしてs3は

68
00:02:18,520 --> 00:02:20,700
レイヤ3のユニット数とする。

69
00:02:21,560 --> 00:02:23,200
この場合、行列シータの次元と

70
00:02:23,460 --> 00:02:25,240
Dの次元は

71
00:02:25,350 --> 00:02:26,380
これらの式で

72
00:02:26,570 --> 00:02:28,110
与えられる。

73
00:02:28,520 --> 00:02:30,300
例えば、シータ1は

74
00:02:30,630 --> 00:02:33,220
10x11行列、などとなる。

75
00:02:34,420 --> 00:02:35,740
だからこれらの行列をベクトルと

76
00:02:35,950 --> 00:02:37,960
変換したければ、

77
00:02:38,580 --> 00:02:38,580
変換したければ、

78
00:02:39,330 --> 00:02:40,590
可能な手としては

79
00:02:40,830 --> 00:02:42,130
Theta1、Theta2、Theta3に対して

80
00:02:42,350 --> 00:02:44,220
こんなコードを

81
00:02:44,410 --> 00:02:45,470
書くと、

82
00:02:45,610 --> 00:02:46,820
3つのシータ行列から

83
00:02:46,900 --> 00:02:48,540
全ての要素を取り出して、つまり

84
00:02:48,770 --> 00:02:49,400
シータ1の全要素、

85
00:02:49,860 --> 00:02:51,150
シータ2の

86
00:02:51,260 --> 00:02:52,290
全要素、

87
00:02:52,400 --> 00:02:53,840
シータ3の全要素を取り出して、

88
00:02:54,130 --> 00:02:55,510
それらをアンロール(展開)して、

89
00:02:55,770 --> 00:02:57,420
それら全要素を一つの長いベクトルに突っ込む。

90
00:02:58,540 --> 00:02:59,880
それがthetaVecとなる。

91
00:03:00,960 --> 00:03:02,510
同様に二番目のコマンドは

92
00:03:02,830 --> 00:03:04,350
Dの行列全てを

93
00:03:04,490 --> 00:03:05,600
大きな長いベクトル、

94
00:03:05,930 --> 00:03:07,340
DVecにアンロールする。

95
00:03:07,510 --> 00:03:08,810
そして最後に

96
00:03:09,370 --> 00:03:10,330
もしベクトルの表現から行列の表現に

97
00:03:10,520 --> 00:03:13,380
戻したくなったら、

98
00:03:14,620 --> 00:03:15,630
例えばシータ1を取り戻したいと

99
00:03:15,840 --> 00:03:17,720
思ったとすると、

100
00:03:17,940 --> 00:03:19,250
やるべき事はまずthetaVecから

101
00:03:19,530 --> 00:03:20,980
最初の110個の要素を取り出す。

102
00:03:21,470 --> 00:03:22,930
つまりシータ1は110個の要素があるという事、

103
00:03:23,390 --> 00:03:24,650
何故ならそれは

104
00:03:24,720 --> 00:03:26,420
10x11の行列だから。

105
00:03:26,810 --> 00:03:28,200
だから最初の110個の要素を取り出し

106
00:03:28,540 --> 00:03:30,200
そしてそこで、単に

107
00:03:30,370 --> 00:03:32,960
変形してtheta1に戻す事が出来る。

108
00:03:33,010 --> 00:03:34,730
同様にシータ2を

109
00:03:34,900 --> 00:03:35,850
取り戻すには、次の110要素を取り出し

110
00:03:36,280 --> 00:03:39,010
reshapeすれば良い。

111
00:03:39,670 --> 00:03:41,410
そしてシータ3は、最後の

112
00:03:41,450 --> 00:03:43,320
11要素を取り出し、reshapeを実行して

113
00:03:43,500 --> 00:03:45,210
シータ3が取り戻せる。

114
00:03:48,840 --> 00:03:50,700
これはOctaveによる簡単なデモだ。

115
00:03:51,270 --> 00:03:52,370
この例の為に

116
00:03:53,010 --> 00:03:54,530
シータ1を、

117
00:03:55,340 --> 00:03:57,440
onesの10x11にセットしよう、

118
00:03:57,670 --> 00:03:59,580
つまり全ての要素が1の行列になる。

119
00:04:00,360 --> 00:04:01,400
見やすいように、

120
00:04:01,750 --> 00:04:03,060
シータ2は

121
00:04:03,280 --> 00:04:05,150
2掛けるonesの10x11と、

122
00:04:05,310 --> 00:04:07,390
さらにシータ3は

123
00:04:07,600 --> 00:04:09,570
3掛けるonesの1x11と

124
00:04:10,290 --> 00:04:12,110
しよう。

125
00:04:12,390 --> 00:04:13,680
つまり以上で3つの

126
00:04:13,980 --> 00:04:17,030
異なる行列シータ1、シータ2、シータ3が出来た。

127
00:04:17,770 --> 00:04:19,010
これら全てをベクトルに突っ込みたい。

128
00:04:19,670 --> 00:04:22,740
thetaVecは、イコール

129
00:04:23,380 --> 00:04:26,660
theta1; theta2;

130
00:04:28,540 --> 00:04:28,990
theta3だ。

131
00:04:29,260 --> 00:04:32,060
真ん中にあるのは

132
00:04:32,540 --> 00:04:34,220
コロンだ。

133
00:04:35,350 --> 00:04:37,420
これでthetaVecは

134
00:04:37,590 --> 00:04:40,090
とても長いベクトルとなる。

135
00:04:41,050 --> 00:04:41,910
231要素のベクトルだ。

136
00:04:42,970 --> 00:04:46,000
これを表示すると、

137
00:04:46,290 --> 00:04:47,640
このとても長いベクトルは

138
00:04:47,780 --> 00:04:48,610
最初の行列の要素全てと、

139
00:04:48,880 --> 00:04:49,630
二番目の行列の要素全てと

140
00:04:50,090 --> 00:04:52,360
三番目の行列の要素全てだ。

141
00:04:53,480 --> 00:04:54,450
そして最初の行列を

142
00:04:54,930 --> 00:04:56,420
取り出したいとしたら、

143
00:04:56,500 --> 00:05:00,040
thetaVecをreshapeすれば良い。

144
00:05:01,400 --> 00:05:02,580
最初の110の要素を取り出し

145
00:05:03,100 --> 00:05:05,640
それを10x11行列にreshapeしよう。

146
00:05:06,810 --> 00:05:08,240
これでtheta1が得られる。

147
00:05:08,690 --> 00:05:09,770
そして次に

148
00:05:10,280 --> 00:05:12,220
続く110要素を取り出す。

149
00:05:12,720 --> 00:05:14,690
つまりインデックスで111から220まで。

150
00:05:14,850 --> 00:05:16,470
これで2を全て取り出し、

151
00:05:18,030 --> 00:05:19,330
そして残りの

152
00:05:20,850 --> 00:05:22,110
221から最後までの

153
00:05:22,280 --> 00:05:24,240
要素で、

154
00:05:24,440 --> 00:05:25,970
それは231番目の要素となるが、それを1x11に

155
00:05:26,070 --> 00:05:28,130
reshapeする。これでtheta3に戻せる。

156
00:05:30,810 --> 00:05:32,110
このプロセスをもっともっと具体的にすべく

157
00:05:32,950 --> 00:05:34,750
学習アルゴリズムを実装する時に

158
00:05:35,320 --> 00:05:36,990
アンロールのアイデアをどう使うかをここに示す。

159
00:05:38,200 --> 00:05:39,180
シータ1、シータ2、シータ3の

160
00:05:39,490 --> 00:05:40,600
何らかの初期値が

161
00:05:41,170 --> 00:05:42,410
あるとする。

162
00:05:42,950 --> 00:05:43,740
我らがやりたいのは

163
00:05:44,020 --> 00:05:45,880
これら全部を取り出して

164
00:05:46,290 --> 00:05:47,610
一つの長いベクトルにアンロールしたい。

165
00:05:47,960 --> 00:05:50,380
これをinitialThetaと呼ぼう。

166
00:05:50,600 --> 00:05:52,170
これをパラメータ、シータの

167
00:05:52,360 --> 00:05:54,900
初期値としてfminuncに渡す。

168
00:05:56,160 --> 00:05:58,310
他にやらなきゃいけない事としては、コスト関数を実装する、という事。

169
00:05:59,310 --> 00:06:01,510
これが私のコスト関数の実装だ。

170
00:06:02,900 --> 00:06:04,070
コスト関数は

171
00:06:04,160 --> 00:06:05,500
thetaVecという入力を受け取る、

172
00:06:05,980 --> 00:06:07,090
これはパラメータの

173
00:06:07,350 --> 00:06:08,770
ベクトルで、それは

174
00:06:08,870 --> 00:06:10,680
ベクトルにアンロールされた形式で入っている。

175
00:06:11,960 --> 00:06:12,800
だから最初に

176
00:06:13,000 --> 00:06:13,890
やるべき事は

177
00:06:14,100 --> 00:06:16,580
thetaVecを使って、reshape関数を使い、

178
00:06:17,040 --> 00:06:18,120
thetaVecから要素を取り出し

179
00:06:18,320 --> 00:06:19,440
reshapeを使って

180
00:06:19,750 --> 00:06:20,950
元のパラメータ行列、

181
00:06:21,320 --> 00:06:23,560
シータ1、シータ2、シータ3を復元する。

182
00:06:24,120 --> 00:06:26,530
これらが得られるであろう行列だ。

183
00:06:26,620 --> 00:06:28,000
こうすることで、

184
00:06:28,060 --> 00:06:29,920
微分やコスト関数、Jのシータを

185
00:06:30,130 --> 00:06:31,580
計算する為に

186
00:06:31,750 --> 00:06:33,590
フォワードプロパゲーションや

187
00:06:33,880 --> 00:06:35,400
バックプロパゲーションを実行する為に

188
00:06:35,570 --> 00:06:38,140
これらの行列を使う事が出来る。

189
00:06:39,710 --> 00:06:40,900
最後に、微分をとって、

190
00:06:41,120 --> 00:06:42,620
シータをアンロールした時と

191
00:06:43,030 --> 00:06:44,530
要素が同じ順番になるように

192
00:06:45,140 --> 00:06:47,440
アンロール出来る。

193
00:06:48,390 --> 00:06:49,780
だが、今度はD1、D2、D3を

194
00:06:50,030 --> 00:06:51,330
アンロールする、

195
00:06:52,190 --> 00:06:55,180
コスト関数が返す事ができるgradientVecを得る為に。

196
00:06:55,490 --> 00:06:57,420
これでこれらの微分のベクトルを返す事が出来る。

197
00:06:59,150 --> 00:07:00,310
以上で、ガウス分布が

198
00:07:00,490 --> 00:07:01,650
行列表現にしたり

199
00:07:01,890 --> 00:07:03,200
ベクトル表現にしたり、の変換を

200
00:07:03,360 --> 00:07:04,970
どうやったらいいのか

201
00:07:05,090 --> 00:07:08,220
だいぶはっきり分かったんじゃないかな。

202
00:07:09,360 --> 00:07:10,290
行列表現の利点は

203
00:07:10,760 --> 00:07:12,330
パラメータを

204
00:07:12,470 --> 00:07:13,530
行列に保存しておけば

205
00:07:13,670 --> 00:07:15,670
フォワードプロパゲーションや

206
00:07:15,830 --> 00:07:17,430
バックワードプロパゲーションを行う時に

207
00:07:17,530 --> 00:07:19,110
より便利で、しかも

208
00:07:19,850 --> 00:07:21,160
実装をいわゆるベクトル化する時にも

209
00:07:21,360 --> 00:07:22,770
行列の方がやりやすい、という

210
00:07:23,400 --> 00:07:24,780
利点がある。

211
00:07:26,230 --> 00:07:27,900
一方対照的に、ベクトル表現の

212
00:07:28,090 --> 00:07:30,250
利点は、つまり

213
00:07:30,320 --> 00:07:31,820
thetaVecとかDVecにしておく利点は

214
00:07:32,500 --> 00:07:34,540
アドバンスドな最適化アルゴリズムを使う時だ。

215
00:07:34,770 --> 00:07:36,640
それらのアルゴリズムは

216
00:07:36,760 --> 00:07:37,730
パラメータを一つの大きなベクトルに

217
00:07:38,090 --> 00:07:40,730
アンロールしてある事を仮定している事が多い。

218
00:07:41,720 --> 00:07:42,930
さて、以上見てきた事で、

219
00:07:43,140 --> 00:07:44,650
2つの間を手早く

220
00:07:45,410 --> 00:07:47,020
変換出来るようになった事でしょう。