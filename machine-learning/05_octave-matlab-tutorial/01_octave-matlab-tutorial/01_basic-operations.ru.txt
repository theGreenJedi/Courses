Вы уже кое-что узнали о машинном обучении. В этом видео я расскажу вам о языке программирования Octave. С ним вы сможете быстро реализовывать алгоритмы обучения, которые мы уже изучили и которые изучим в дальнейшем. Раньше я пытался преподавать с использованием многих языков программирования, таких как C++, Java, Python, NumPy и Octave. Я пришел к выводу, что студенты обучаются более быстро и продуктивно при использовании высокоуровневых языков вроде Octave. Фактически, что я часто вижу в Кремниевой долине это то, что даже если вам нужно создать. Если вам нужно создать крупную систему с применением машинного обучения, то люди часто используют Octave для прототипирования. Это один из лучших языков для прототипирования. И поэтому вы можете довольно быстро довести ваши обучающиеся алгоритмы до рабочего состояния. И после, если вам нужно применять их в крупных системах Только тогда вы можете потратить время чтоб переделать алгоритм на C++, Java, или что вы там любите. Поскольку мы уже выяснили, что время, которое вы отводите на разработку, программирование - Это – ваше время. Время в машинном обучении невероятно ценно. И если вы можете ускорить работу своих обучающих алгоритмов в Octave. Тогда вы сэкономите много времени, если сначала разработаете алгоритм на Octave, а потом ту же рабочую идею воплотите на C++ или Java. Самые распространенные языки прототипирования, которыми люди пользуются для машинного обучения: Octave, MATLAB, Python, NumPy и Р. Octave - хороший язык, так как у него открытый код. MATLAB тоже отлично работает, но он слишком дорогой для многих. Но если у вас есть доступ к MATLAB, то в этом курсе вы можете использовать и его. То же касается языков Python, NumPy, R. Я знаю, что некоторые люди используют их. Но я замечал, что на этих языках люди программируют медленнее. Потому что у Python и NumPy синтаксис немного сложнее, чем у Octave. Поэтому и потому, что мы публикуем код на языке Ocatve, Я категорически не советую вам выполнять упражнения этого курса на NumPy или R. Я рекомендую использовать Octave. В этом видео я быстро пройдусь по списку команд, чтобы продемонстрировать их многообразие и различные возможности Octave. На сайте курса есть документ с записью моих действий, и после просмотра видео вы можете обратиться к этой записи, если хотите найти какую-нибудь команду. Я рекомендую вам сначала просмотреть видеолекции. После этого установить Octave на ваш компьютер. Наконец, зайти на страницу этого курса, скачать файлы с описаниями, и самостоятельно запустить заинтересовавшие вас команды в Octave. Итак, давайте начнем. Вот мой компьютер с ОС Windows, и я собираюсь запустить Octave. Итак, я зашел в Octave. Вы видите приглашение на ввод команды в Octave. Сначала я покажу простейшие операции, которые вы можете выполнять в Octave. Печатаете 5 + 6. В результате получаете 11. 3 - 2. 5 * 8. 1 / 2. 2 ^ 6, это 64. Это элементарные математические операции. Вы также можете выполнять логические операции. Пусть один равняется двум. Результат операции: "ложь". Знак процента вот здесь означает начало комментария. Итак, единица равна двойке, результат ложный. Он представлен нулем. "Один не равно двум". Это истина. Истина представляется единицей. Обратите внимание: знак "не равно" пишется как тильда и равно. А не восклицательный знак и равно. Такой вариант встречается в некоторых языках программирования. Проведем операцию "логическое И" с единицей и нулем, используя двойной амперсанд. Полученное выражение будет ложным. Один или нуль; это операция "логическое ИЛИ". Здесь мы получаем истину. Еще я могу сложить единицу и нуль по модулю два, и результатом будет единица. Эта строчка слева, octave-3.2.4.exe:11, это стандартное приглашение Octave. Здесь показана версия Octave и всё такое. Если вы не хотите видеть это приглашение, то есть такая неочевидная команда: PS('>> '): Думаю, эта строка в кавычках, знак больше, больше, пробел. Это то, каким я хочу видеть приглашение Octave. Если я нажму Enter. Ой, простите. Немного не так. Правильно будет PS1('>> ') Теперь приглашение Octave выглядит как два знака "больше". Как видите, смотрится гораздо лучше. Теперь поговорим о переменных в Octave. Я возьму переменную a и присвою ей значение 3. Нажму Enter. Теперь a равно 3. Пусть вы присваиваете переменной значение, но не хотите, чтобы оно выводилось на экран. Если вы завершите строку точкой с запятой, вы запретите вывод результата операции присвоения. Я так и делаю, жму Enter, и ничего не печатается. Если я наберу "a=3" то Octave выведет результат, а если наберу "a=3;", то не выведет ничего. Я также могу присваивать строковые значения. b="hi". Если я сейчас напишу b, то выведется значение переменной b. b мы присвоили строку "hi". c=(3>=1); c присвоено значение "истина". Чтобы вывести на экран значение переменной, можете делать так. Пусть a равно пи. Если я хочу узнать значение a, я просто печатаю a, и выводится её значение. Для более сложного вывода используется команда disp, от слова display. disp(a) просто выводит a, вот так. Можно выводить и строки, вот так. И эта команда отобразит строку: *вывод числа с двумя знаками после запятой* Похоже на старомодный синтаксис языка С. Если вы на С, то узнали синтаксис команды, выводящей строку на экран. sprintf создает эту строку: "2 decimals: 3.14". Символ %0.2f означает "подставить сюда а, оставив два знака после запятой". И команде disp передается строка, сгенерированная командой sprintf. Sprintf. Sprintf создает строку. А disp отображает эту строку. Для примера приведу команду, которая выведет число пи с шестью знаками после запятой. Как я уже говорил, а отображается вот так. Существуют полезные комбинации. Я набираю format long. После этого по умолчанию все значения будут отображаться с большим числом знаков после запятой. После команды format short по умолчанию будет отображаться меньшее количество знаков. Вот так выглядит работа с переменными. Давайте перейдем к векторам и матрицам. Скажем, я хочу присвоить А матрицу чисел. Например: 1, 2, точка с запятой, 3, 4, точка с запятой, 5, 6. Этим я создаю матрицу А размерностью три на четыре. В первой строке стоят числа 1 и 2. Во второй - 3 и 4.В третьей - 5 и 6. Точка с запятой означает переход к следующей строке матрицы. Эти значения можно ввести по-другому. Набираем А, 1, 2, точка с запятой. 3, 4, точка с запятой. 5, 6. Это альтернативный способ создать матрицу А размерностью три на два с такими значениями. Таким же образом можно создавать векторы. Итак, V = [1 2 3] Получился вектор-строка. Или вектор размера 3 х 1. Простите, я хотел сказать, матрица размера 1 на 3. А не 3 на 1. Если я хочу создать вектор-столбец, я напишу v = [1; 2; 3] Я получу столбец из трех чисел. Это вектор размера 1 на 3. Итак, я получил вектор-столбец. Вот еще одно полезное выражение. v = 1:0.1:2 Здесь v присваивается ряд значений. Первое из них равно единице. Каждое следующее значение больше предыдущего на 0.1. Последнее значение будет равно 2. Если я выполню эту команду, v будет вот таким вектором-строкой. По сути, это матрица размера 1 х 11. В ней элементы 1, 1.1, 1.2, 1.3, и так до самой двойки. Я также могу написать v = 1:6, и v будут присвоены эти числа. От одного до шести. Итак. Есть и другие способы создания матриц. Команда ones(2,3) создаст матрицу размера два на три, состоящую из единиц. Если я задам c=2*ones(2,3), я получу матрицу размера два на три, состоящую из двоек. Это более быстрый способ по сравнению с c=[2 2 2; 2 2 2]. Результат будет одинаковым. Зададим w=ones(1,3), и получим вектор-строку, строку из трех единиц. Аналогично можно задать w=zeros(1,3) и получить следующую матрицу. Матрицу размера 1 на 3, состоящую из нулей. И вот еще пара способов создавать матрицы. Если я введу w=rand(1,3), то получу матрицу случайных чисел размера 1х3. Если я введу rand(3,3), то получу матрицу размера 3х3, состоящую из чисел, случайным оборазом выбранных из равномерного распределения на интервале от 0 до 1. То есть я каждый раз буду получать разный набор случайных чисел, равномерно распределенных между 0 и 1. Если вы знакомы с понятием Гауссова, или нормального, распределения, то попробуйте ввести w=randn(1,3). Вы получите три числа из Гауссова распределения с нулевым средним значением и среднеквадратическим отклонением, равным 1. Вы можете присваивать и более сложные значения. (вводит формулу) Я завершу строку точкой с запятой, так как хочу избежать вывода результата. Что же я получу? Получится вектор, состоящий из ста тысяч, то есть десяти тысяч элементов. Хотя, знаете что? Давайте всё-таки выведем это. Сгенерируется такая вот матрица. Верно? С 10 000 элементов. Это будет значением w. Я могу построить гистограмму значений w командой hist. Как вы заметили, команда hist выполнялась несколько секунд, и построила гистограмму случайных чисел в w. (проговаривает формулу) Я могу построить ту же гистограмму с большим числом прямоугольников. Пусть их будет 50. Гистограмма имеет вид Гауссовой функции с центром в точке -6. Потому что в формуле стоит -6 плюс квадратный корень из 10 умножить на это значение. Итак, дисперсия этой случайной Гауссовой величины равна 10, среднестатистическое отклонение равно корню из 10, это сколько? Примерно 3.1? Наконец, особая команда для создания матриц: eye. Может, это название связано с какой-то игрой слов. Я пишу eye(4). Получаю единичную матрицу размера 4х4. Пусть I равняется eye(4). Снова единичная матрица размера 4х4. I равно eye(5), нет, eye(6). Получается единичная матрица 6 на 6. I=eye(3) дает единичную матрицу 3 на 3. Наконец, в завершение этого видео есть еще одна полезная команда. Команда отображения справки, help. По команде help eye будет показана справка по использованию команды eye. Нажмите Q  для выхода. Можно написать help rand. Выдает документацию для команды rand, функции генерации случайного числа. Или даже help help, чтобы увидеть справку по использованию справки. Итак, это были основные операции в среде Octave. Зная их, вы сможете создавать матрицы, умножать и складывать переменные. Использовать основные возможности Octave. В следующем видео я начну говорить о более сложных вещах, об использовании и обработке данных в Octave.