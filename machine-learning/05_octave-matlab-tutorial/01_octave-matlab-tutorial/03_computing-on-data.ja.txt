help magic と入力してみましょう Octave でどのようにデータを読み込んだり 保存したり、データを行列に代入したり などを理解できたところで、 このビデオでは、 データに対してどのように演算 これが私の Octave ウィンドウです。 後に、このような演算処理を使って 学習アルゴリズムを実装していくことになります。 では、始めましょう。 これが私の Octave ウィンドウです。 では、さっそく、いくつか 例題に使う変数を 初期化します。A を 3 x 2 の行列に、 そして B を 3 x 2 の行列に設定し、 さらに C を 2 x 2 の行列に設定します。 さて、二つの行列の乗算をしたいとします。 例えば、A 掛ける C を計算するとします。 これは単に A * Cと入力するだけです。 これは、3 x 2 行列掛ける 2 x 2 行列です。 すると、この 3 x 2 の行列が得られます。 また、要素単位での 演算も可能で、A .* B とすると、これが実行するのは、 A の各要素を 対応する B の各要素に 掛け合わせます。 ですから、これが A、これが B、そしてこれが A.*B だから、例えば、最初の要素は 1 x 11 なので、11 二番目の要素は 2 x 12 で 24、という具合になります。 このように要素単位での 二つの行列の 乗算です。一般的に、 ピリオドは、 通常、要素単位での 操作を示す記号として Octave で使われます。 ですから、ここにある 行列 A に対し、A .^2 とすると、 これは、 要素単位での A の 二乗になるので、1の二乗は 1、2 の二乗は 4、という風になります。 では、V をベクトルに設定します。 V を 1、2、3 の列ベクトルにします。 また、1./V とすると、 V の要素単位の逆行列を求めると、 これが戻すのは、 1/1、1/2、そして 1/3 です。 これは行列でも使えますので、 1 ./ A とすると、 これは 要素単位の A の逆行列 となります。もう一度 繰り返すと、ピリオドは、 要素単位の処理であることを示すヒントとなります。 また、こうしたこともできます log V これは、要素単位での V の対数で、 exp(V) は、 e を底にとった これらの要素の冪乗で、 これが e、これが e squared EQ、これは V です。 また、abs(V) とすることもでき、 これは要素単位での V の 絶対値です。ですから、 ここでは、V は全て正の値でしたが、 abs、マイナス 1 からマイナス 3、 要素単位の絶対値は、 として戻されるのは、 これらの負でない数値となります。 -V は、負の V を返します。 これは、-1*V と同じ ことですが、通常は、 -V とだけ表記し、-1*V とはしません。他に何があるでしょう。 ここに、別のいいコツがあります。 さて、見てみましょう。 V に対して、その要素をそれぞれ 1 増やしたいとします。 一つのやり方は 3 x 1 ベクトルを 作成して これは全て 1 です、そしてこれを V に足します。 これを実行すると 1 2 3 だった V が 2 3 4 にインクリメントされます。 このやり方は V の長さが 3 ですから ones、length(V)、 1、これはones (3, 1) です。 だから、ones(3, 1) 確かに、そして次にしたのは V + ones (3, 1)、つまりこの全て 1 のベクトルを V に 足したわけです。これで、 V が 1 インクリメントされます。 もう一つ、より簡単な方法は、 V + 1 と入力することですね。 ですから、これが V で V + 1 が意味するのは、 1 を要素単位で V の各要素に加えなさいということです。 では、さらに演算についてお話します。 ここに 行列 A があります。この A の転置行列を求めたい場合、 そのやり方は、A' と入力することです。 これはアポストロフィー記号です。 左の引用符です。 ですから、お手持ちのキーボードには 左の引用符と 右の引用符があると思います。 ですから、これは、 行順的な引用符です 単に A' と入力すると これは、ご存知のように 行列 A の転置行列が 得られます。もちろん、 転置の再転置を 行えば、 元の 行列 A に戻ります。さらに便利な関数をいくつか。 例えば、小文字の a は 1、15、2、0.5 とします。 つまり、これは 1 x 4 行列です。 そこで、 val = max(a) とすると これが戻すのは A の最大値です。これは、 この場合は 15 です。そして val、ind、max(A) とすることも出来、これが返すのは val と ind、それは A の最大値、 つまり 15 と、さらにそのインデックスです。 A の 二番目の要素が 15 でしたので、 ind はそれに対応するインデックスです。 すこしご注意したいことがあります。 もし A が行列の場合、 max(A) は それが返すのは実は 列単位での最大値です。 これについてはこの後で触れます。 さて、この小文字の変数 a の例 を引き続き使います。もし、a < 3 とすると、 これは、要素単位での演算、 要素単位での比較となります。 ですから、a の最初の要素 は 3 以下ですので 1 となり、 a の二番目の要素は 3 以下ではないので、 その値は 0、なぜなら偽だからです。 a の三番目と四番目の要素は レッスン、いえ、 3 以下なので、三番目と四番目の要素は3 以下なので これは 1、1、ですから これは要素単位で 四つの全ての要素を 比較します。小文字の変数 a < 3 は、要素が 3 以下か どうかに応じて、真あるいは偽を返します。 さて、もし find (a < 3) とすると、これが 返すのは、a の どの要素が、 変数 A が、3 以下かです。 よってこの場合は、一番目、三番目 そして四番目の要素が 3 以下です。 次の例として、 A を = magic(3) に設定します。 magic 関数が戻すのは、 magic 関数が戻すのは、 魔方陣とよばれる行列です。 こうした行列は、 特有の数学的な特性があり、 その全ての行と列と対角線上の 数字の合計が同じ数になります。 ですから、 機械学習においては、実際には 私の知る限り用途は限定されていますが、 わたしは、単に 3 x 3 の 行列を作成する のに便利なので、 使います。この画面上の魔方陣 の特徴は、 それぞれの行、それぞれの列、そして