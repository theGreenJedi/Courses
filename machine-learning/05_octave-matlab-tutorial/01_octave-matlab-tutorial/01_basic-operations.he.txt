טוב, אז עכשיו אתם יודעים די הרבה על למידה חישובית. בסרטון הזה, אני רוצה ללמד אתכם שפת תכנות בשם אוקטבה, שבה תהיו מסוגלים ליישם את אלגוריתמי הלמידה שראינו וגם את אלגוריתמי הלמידה שנראה בהמשך הקורס במהירות רבה בעבר, ניסיתי ללמד למידה חישובית תוך שימוש במגוון גדול של שפות תכנות שונות, כולל ++C, ג'אווה, פייתון, NumPy, וגם אוקטבה, ומה שמצאתי הוא שתלמידים מצליחים ללמוד בצורה הפרודוקטיבית ביותר, במהירות ותוך בניית אבטיפוסים של אלגוריתמים אם הם משתמשים בשפה גבוהה יחסית כמו אוקטבה. למעשה, מה שאני רואה לעתים קרובות בעמק הסיליקון הוא שאם צריך לבנות, אם רוצים לבנות תכנה של למידה חישובית לשימוש בקנה מידה גדול, מה שאנשים עושים לעתים קרובות הוא לבנות אבטיפוס והשפה הכי מתאימה היא אוקטבה. שהיא שפה מעולה לבנות אבטיפוסים. בעזרתה אפשר לגרום לאלגוריתמי הלמידה לעבוד תוך זמן קצר. ואז אם צריך לגרום לה לעבוד בקנה מידה גדול מאוד רק אז משקיעים את הזמן ביישום של האלגוריתם מחדש בשפה כגון ++C או Java או מין שפה כזאת. כי הלקחים שהפקנו הם שזמן המפתחים, הזמן שלך, שעה של מומחה בלמידה חישובית היא מאוד יקרה. ואם אתה יכול לגרום לאלגוריתמי הלמידה שלך לעבוד בזמן קצר יותר על ידי שימוש באוקטבה. אז בחשבון הכולל אתה מרוויח המון זמן על ידי פיתוח האלגוריתם קודם כל באוקטבה, ולאחר מכן אולי יישום מחדש ב-++C או Java, רק אחרי שהצלחנו להפעיל את הרעיונות. השפות הנפוצות ביותר לבניית אבטיפוס שבהן משתמשים לפי דעתי למטרות למידה חישובית הן: אוקטבה, MATLAB, פייתון, NumPy, ו-R אוקטבה היא נחמדה, כי היא קוד פתוח. וגם MATLAB היא טובה, אבל יקרה מדי עבור אנשים רבים. אבל אם יש לך גישה לעותק של MATLAB אתה יכול להשתמש גם ב-MATLAB בקורס הזה. אם אתה יודע פייתון, NumPy, או אם אתה יודע R, אני רואה שאנשים משתמשים בהן. אבל מה שאני רואה הוא שאנשים בדרך כלל בסופו של דבר מפתחים קצת יותר לאט בשפות האלה. כי התחביר של פייתון ו-NumPy הוא קצת יותר מסורבל מהתחביר של אוקטבה. ובגלל זה, ומאחר שאנחנו מפרסמים ערכת פיתוח למתחילים באוקטבה. אני ממליץ בחום לא לנסות לעשות את התרגילים הבאים בקורס ב-NumPy ו-R אלא אני ממליץ לכם לעשות את תרגילי התכנות בקורס הזה במקום זאת באוקטבה. מה שאני עומד לעשות בסרטון הזה הוא לעבור במהירות רבה על רשימה של פקודות במטרה להראות לכם במהירות את מגוון הפקודות ומגוון הדברים שניתן לעשות באוקטבה. באתר הקורס יהיה תמליל של כל מה שנעשה כאן, ולכן לאחר שתצפו בסרטון הזה אתם יכולים להתייחס לתמליל שפורסם באתר הקורס כאשר אתם רוצים למצוא פקודה מסוימת. מעשית, מה שאני ממליץ לעשות זה קודם כל לצפות בסרטוני ההדרכה. ואחרי שראיתם אותם עד הסוף, להתקין אוקטבה על המחשב שלכם. ובסוף, להיכנס לאתר הקורס, להוריד את התמלילים של מה שדיברנו כאן בסרטון, ואז להקליד פקודות שנראות לכם מעניינות לתוך אוקטבה, כך שירוצו על המחשב שלכם, כדי שתוכלו לראות אותן בפעולה. ועם זה, הבה נתחיל. הנה שולחן העבודה שלי ב-Windows, ואני מאתחל את אוקטבה. ועכשיו אני בתוך אוקטבה. וזו שורת הפקודה באוקטבה. בואו נראה קודם כל את הפקודות הבסיסיות שאפשר להריץ באוקטבה. אז נקליד 5 + 6. ונקבל את התשובה 11. 2 - 3. 5x8, 1/2, 2^6 הם 64. אלה הם הפעולות המתמטיות הבסיסיות. אפשר לעשות גם פעולות לוגיות. אחת = שתיים. מקבלים שקר, false. סימן האחוז כאן פירושו הערה. אז, התוצאה של אחת = שתיים היא שקר. ושקר מיוצג כאפס. אחת לא שווה לשתיים. זו אמת. אז זה מחזיר אחת. שימו לב שאנחנו כותבים לא שווה על ידי הסימן טילדה שווה, =~. ולא על ידי סימן קריאה שווה. כמו שכותבים במספר שפות תכנות אחרות. הבה נראה פעולות לוגיות, אחד וגם אפס, השתמשו בסימן אמפרסנד כפול לציין וגם לוגי. וזה יוצא שקר. אחת או אפס היא פעולת או לוגי. וזה יוצא אמת. ואפשר לעשור XOR בין אחת ואפס, וזה יוצא אחת. הדבר הזה בצד שמאל, אוקטבה 3.2.4 11, זו שורת הפקודה של אוקטבה כבררת מחדל. היא מציגה את הגירסה של אוקטבה וכו'. אם אתה רוצה לשנות את הפרומפט, יש פקודה קצת לא מובנת, PS, גרש, גדול מ, גדול מ, רווח, ועוד גרש, בה אפשר להשתמש כדי לשנות את הפרומפט. וכאן בפנים אתה מכניס את המחרוזת אותה אתה רוצה. גרש, גדול מ, גדול מ, רווח. כך אני אוהב ששורת הפקודה שלי נראית באוקטבה. אז אם אני מקיש Enter. אופס, סליחה. ככה. לא PS אלא PS1, כך. עכשיו שורת הפקודה באוקטבה השתנתה לגדול מ, גדול מ, שכפי שאתם רואים נראה ממש יותר טוב. עכשו בואו נדבר על משתנים באוקטבה. אני יכול לקחת משתנה A ולשים בו ערך 3. ומקיש Enter. ועכשיו A שווה 3. אם אתה רוצה לשים ערך במשתנה, אבל אתה לא רוצה שהתוצאה תודפס. שים נקודה פסיק, נקודה פסיק מבטלת את הדפסת הפלט. אז נעשה את זה, נקיש Enter, זה לא מדפיס שום דבר. אבל הפקודה A = 3 סתם השמה מדפיסה את הערך אבל A שווה 3 נקודה פסיק לא מדפיסה שום דבר. אני יכול להציב מחרוזת. B שווה 'היי'. עכשיו, אם אני מקיש סתם B אז אוקטבה מדפיסה את המשתנה B, אז B הוא המחרוזת היי. C שווה 3 גדול או שווה 1. אז עכשיו הערך של C הוא אמת. אם אתם רוצים להדפיס או להציג משתנה, הנה השיטה. הרשו לי להגדיר A שווה Pi. כדי להדפיס את A אני יכול פשוט להקליד A כך, והיא תדפיס אותו. כדי להדפיס דברים יותר מסובכים יש פקודת DISP שהיא קיצור של המילה הַצֵּג. הַצֵּג A פשוט מדפיס אותו. ניתן גם להציג מחרוזות כך: DISP, sprintf, שתי נקודות עשרוניות, %0.2, F, פסיק, A, כך. וזה ידפיס את המחרוזת. שתי ספרות עשרוניות, נקודתיים, 3.14. זהו מעין תחביר של שפת C הישנה. לאלו מכם שתכנתו ב-C בעבר, זה בעיקרון התחביר בו משתמשים כדי להדפיס מחרוזות. אז sprintf יוצרת מחרוזת עם 2 נקודות עשרוניות, המחרוזת 3.14. %0.2f פירושו הכנס הנה את הערך של A עם שתי ספרות אחרי הנקודה העשרונית. והפקודה DISP לוקחת את המחרוזת שנוצרה על ידי הפקודה sprintf. sprintf. פקודת sprintf. ו-DISP מציגה למעשה את המחרוזת. בואו נראה עוד דוגמה, sprintf שש נקודות עשרוניות %0.6f פסיק A זה צריך להדפיס את פיי בדיוק של שש ספרות אחרי הנקודה העשרונית. עוד דבר אחד, כשמדפיסים את A סתם, הוא נראה ככה. ישנם קיצורי דרך שימושיים, לדוגמה הפקודה format long. גורמת למספרים כברירת מחדל להיות מוצגים עם הרבה ספרות אחרי הנקודה העשרונית. ו-format short היא פקודה המחזירה את ברירת המחדל של הדפסת מספר קטן של ספרות. אוקיי, אז ככה עובדים עם משתנים. עכשיו בואו נסתכל על וקטורים ומטריצות. נניח שאני רוצה להגדיר מטריצה A עם ערכים. לדוגמא: 1, 2, נקודה פסיק, 3, 4, נקודה פסיק, 5, 6. זה יוצר מטריצה שלש על שתיים בה השורה הראשונה היא 1, 2. השורה השנייה 3, 4. והשורה שלישית היא 5, 6. מה שהנקודה-פסיק עושה זה בעצם אומר, עבור לשורה הבאה של המטריצה. ישנן דרכים אחרות להקליד את זה. לדוגמה עם שורות A מקבלת 1, 2 נקודה פסיק שורה חדשה 3, 4, נקודה פסיק שורה חדשה 5, 6, כך. וזו פשוט עוד דרך של בניית אותה מטריצה A שלוש על שתיים. באופן דומה ניתן לבנות וקטורים. V שווה 1, 2, 3. זהו למעשה וקטור שורה. או וקטור 3  על 1. זה וקטור שטוח ורחב, סליחה, לא, התכוונתי שזו מטריצה 1 על 3, כן. לא 3 על 1. לו רציתי לבנות אותו כוקטור עמודה, הייתי עושה במקום זה  V = 1; 2; 3. וזה היה יוצא 3 על 1. אבל זה וקטור 1 על 3. ההוא היה יוצא וקטור עמודה. הנה עוד כמה סימונים שימושיים. V = 1: 0.1: 2. מה שזה עושה הוא מאתחל V לסדרה של אברים שמתחילה מ-1. ומתקדמת בצעדים של 0.1 עד שהיא מגיעה ל-2. אז אם נעשה את זה, V יהיה כמובן וקטור שורה. זו למעשה מטריצה אחת על אחת עשרה. עם הערכים 1, 1.1, 1.2, 1.3 וכן הלאה עד שתיים. ואני יכול גם להגדיר V שווה לאחד נקודתיים שש, שמציבה ב-V את המספרים האלה. מ-1 עד 6, כן. עכשיו הנה עוד כמה דרכים לייצר מטריצות. (ones(2,3 היא פקודה שיוצרת מטריצה שהיא מטריצה שתיים על שלוש שכל איבריה המספר אחת. אז אם אני מגדיר את C להיות שתיים כפול (ones(2,3 אני אקבל מטריצה ​​שתיים על שלוש שכולה שתיים. אתה יכול לחשוב על זה כעל דרך קצרה לכתוב C שווה 2,2,2 נקודה פסיק 2,2,2, שייתן גם הוא את אותה תוצאה. הבה ננסה W שווה (ones(1,3, אז זה הוא וקטור שורה או שורה של שלוש אחדות, ובדומה אפשר גם לכתוב w שווה (zeros(1,3 וזה מייצר מטריצה, מטריצה אחת על שלוש שכולה אפסים. נזכיר רק עוד שתי דרכים ליצור מטריצות. אם אני עושה W שווה (rand(1,3, זה נותן לי מטריצה אחת על שלוש ​​של מספרים אקראיים. אם אני עושה rand 3,3 זה נותן לי מטריצה ​ שלוש על שלוש של מספרים אקראיים בהתפלגות אחידה בין אפס ואחת. כל פעם שאני מריץ את זה, אני מקבל קבוצה שונה של מספרים אקראיים שמוגרלים באופן אחיד בין אפס ואחת. לאלו מכם שיודעים מהם משתנים אקראיים גאוסיאניים או לאלו מכם שיודעים מה זה משתנה אקראי בהתפלגות נורמלית, אפשר גם להגדיר W מקבל randn אחת פסיק שלוש. ואז נקבל שלושה ערכים בהתפלגות נורמלית או גאוסיאנית עם ממוצע אפס ושונות או סטיית תקן שווה לאחת. ואפשר להגדיר דברים מורכבים יותר כמו W שווה 6- ועוד השורש הריבועי של עשר כפול נניח randn אחת על עשרת אלפים. ואני שם כאן בסוף נקודה-פסיק, כי אני לא רוצה שזה יוצג על המסך. אז מה יתקבל? זה יהיה וקטור של עשרת אלפים אלמנטים. בעצם, אתם יודעים מה? בואו כן נדפיס את זה. אז יוצאת מטריצה כזו. נכון? עם 10,000 אלמנטים. אז זה מה שיצא W. ואם אני עכשיו משרטט היסטוגרמה של W עם הפקודה היסט (hist), אני יכול לעשות את זה. והפקודה הדפס היסטוגרמה (print hist) של אוקטבה, לוקח לה כמה שניות להעלות את זה, אבל זו ההיסטוגרמה של המשתנה האקראי שלי W. שהיא 6- פלוס שורש עשר כפול המשתנה האקראי הנורמלי הזה. ואפשר לשרטט היסטוגרמה עם יותר דליים, עם יותר חלקים, נניח 50 דליים. וזו ההיסטוגרמה שלי של גאוסיאן עם ממוצע 6-. כי בנינו אותה עם 6-, ועוד השורש הריבועי של 10 כפול זה. אז השונות של המשתנה האקראי הגאוסיאני הזה היא 10 וסטיית התקן היא השורש הריבועי של 10, שזה בערך כמה? שלוש נקודה אחת. אחת הפקודות האחרונות בהרצאה היא הפקודה ליצירת מטריצת היחידה, שנקראת פקודת eye. זה מין משחק מלים על ה-I של המילה זהות. זוהי הפקודה (eye(4. מקבלים את מטריצת היחידה 4 על 4. I מקבל (eye(4. זה נותן לי את מטריצת היחידה 4 על 4. ו-I מקבל (eye(5 או (eye(6. זה נותן לנו את מטריצת הזהות ​​6 על 6, (eye(3 היא מטריצת היחידה 3 על 3. ופקודה אחרונה ממש לסיכום הסרטון הזה, יש עוד פקודה שימושית. וזו הפקודה help. אז תוכל להקליד help eye וזה מעלה את העזרה עבור פונקציית מטריצת היחידה. הקש Q לצאת מהעזרה. ואתה גם יכול להקליד help rand. וזה יראה את התיעוד של ראנד או פונקצית יצירת מספר אקראי. אתה יכול אפילו להקיש help help, שיראה לך, כמובן, עזרה על שימוש בפונקצית העזרה. טוב, אז אלה הם הפעולות הבסיסיות באוקטבה. ועם זה אתה אמור להיות מסוגל ליצור קצת מטריצות, להכפיל, לחבר אברים. ולהשתמש בפעולות הבסיסיות באוקטבה. בסרטון הבא, הייתי רוצה להתחיל לדבר על פקודות מתוחכמות יותר וכיצד להעביר נתונים ממקום למקום ולהתחיל בעיבוד נתונים באוקטבה.