इस विडीओ में, मैं चाहूँगा आपको बताना कि कैसे लिखते हैं कंट्रोल स्टेट्मेंट्स आपके ओकटेव प्रोग्राम के लिए, तो चीज़ें जैसे "for", "while" और "if" स्टेट्मेंट्स. और कैसे करना परिभाषित और इस्तेमाल फ़ंक्शन्स का भी. यह है मेरी ओकटेव विंडो. चलो मैं पहले आपको दिखाता हूँ कैसे करना है इस्तेमाल "for" लूप का. मैं करूँगा शुरुआत सेट करते हुए v को एक 10 बाई 1 वेक्टर 0 का. अब, यहाँ मैं लिखता हूँ एक "for" लूप फ़ोर आइ ईक्वल्ज़ 1 टु 10. वह है आइ ईक्वल्ज़ 1 कोलन 10. और चलिए देखते हैं, मैं करूँगा सेट v ऑफ़ आइ बराबर टू टु द पावर ऑफ़ आइ, और अंत में एंड. वाइट स्पेस से कोई अंतर नहीं पड़ता, अत: मैं डाल रहा हूँ स्पेसेज़ सिर्फ़ करने के लिए अच्छे से इंडेंटेड, लेकिन आप जानते हैं स्पेसेज़ से अंतर नहीं पड़ता. लेकिन यदि मैं यह करता हूँ, तब परिणाम हैं कि v हो जाता है सेट, आप जानते हैं, टू टु द पावर वन, टू टु द पावर टू, और इसी प्रकार आगे. तो यह है सिंटैक्स फ़ोर आइ ईक्वल्ज़ वन कोलन 10 जो करता है आइ को लूप वैल्यूज़ से एक से 10 तक. और, वैसे तो, आप कर सकते हैं यह सेट करके आपके इंडिसीज़ ईक्वल्ज़ एक से 10, और इसलिए इंडिसीज़ एर्रे मैं हैं एक से 10. आप लिख सकते हैं फ़ोर आइ ईक्वल्ज़ इंडिसीज़ भी. और यह है वास्तव में समान आइ ईक्वल एक से 10. आप कर सकते हैं, आप जानते हैं, डिस्प्ले आइ को और यह करेगा वही काम. तो, वह है एक "for" लूप, यदि आप परिचित हैं "break" से और "continue" से, यहाँ हैं  "break" और "continue" स्टेट्मेंट्स, आप कर सकते हैं उनका इस्तेमाल भी लूप्स के अंदर ओकटेव में, लेकिन पहले मैं आपको दिखाता हूँ कैसे एक वाइल लूप काम करता हैं. तो, यहाँ है मेरा वेक्टर v. चलो लिखते हैं वाइल लूप. आइ ईक्वल 1, वाइल आइ है कम या बराबर 5, चलो सेट करते हैं v i बराबर एक सौ के और बढ़ाते हैं आइ को एक से, एंड. तो यह क्या कहता है? आइ शुरू होता बराबर एक से और फिर मैं सेट करता हूँ v i बराबर एक सौ और बढ़ाता हूँ आइ को एक से जब तक आइ, आप जानते हैं बड़ा हो जाता हैं पाँच से. और उसके परिणाम स्वरूप, यद्यपि पहले v था यह पावर्ज़ ऑफ़ टू का वेक्टर. मैंने लिया है पहले पाँच एलेमेंट्स मेरे वेक्टर के और उनके ऊपर ओवरराईट / लिख दिया है यह वैल्यू एक सौ की. तो वह हैं सिंटैक्स वाइल लूप का. चलो करते हैं एक और उदाहरण. वाय बराबर एक वाइल ट्रू और यहाँ मैं आपको दिखाना चाहता हूँ कैसे इस्तेमाल करना है एक ब्रेक स्टेट्मेंट का. मान लो v i बराबर है 999 और i बराबर है i+1 इफ़ i ईक्वल्स 6 ब्रेक और एंड. और यह है हमारा पहला प्रयोग एक if स्टेट्मेंट का भी, अत: मैं आशा करता हूँ कि इसका लॉजिक समझ आया होगा. क्योंकि i बराबर है एक और, आप जानते हैं, अंदर लूप में. वाइल करता है बार-बार v 1 ईक्वल्ज़ 1 और बढ़ाता है आइ को 1 से, और तब जब आइ हो जाता है 6, करता है एक ब्रेक जो ब्रेक करता है यहाँ बाहर वाइल लूप से और इसलिए, प्रभाव उसका होना चाहिए कि लें पहले पाँच एलेमेंट्स इस वेक्टर v के और सेट करता है उन्हें 999. और हाँ, वास्तव में हम ले रहे हैं v और पहले पाँच एलेमेंट्स की वैल्यू के ऊपर लिख रहे है 999. तो, यह है सिंटैक्स "if" स्टेट्मेंट का, और "while" स्टेट्मेंट का और ध्यान दें end / एंड पर. हमारे पास हैं दो एंड्ज़ यहाँ. यह एंड यहाँ समाप्त करता है इफ़ स्टेट्मेंट को और दूसरा एंड यहाँ समाप्त करता है वाइल स्टेट्मेंट को. अब मैं आपको दिखाता हूँ अधिक सामान्य सिंटैक्स कैसे इस्तेमाल करना है एक इफ़-एल्स स्टेट्मेंट को. तो, चलो देखते हैं, v 1 है बराबर 999, चलो टाइप करते हैं व 1 ईक्वल्ज़ 2 इस उदाहरण के लिए. तो, मैं टाइप करता हूँ इफ़ v 1 ईक्वल्ज़ 1 डिस्प्ले वैल्यू इस वन. यहाँ है कि आप कैसे लिखते हैं एक एल्स स्टेट्मेंट, या बल्कि यहाँ है एक एल्स इफ़ v 1 ईक्वल 2. यह है, यदि अगर वह सही है हमारे उदाहरण में, डिस्प्ले वैल्यू एज़ 2, एल्स डिस्प्ले, वैल्यू इस नॉट वन और टू. अच्छा, तो वह है एक इफ़-एल्स इफ़-एल्स स्टेट्मेंट समाप्त होती है. और निश्चय ही, यहाँ हमने सिर्फ़ सेट किया है v 1 ईक्वल्ज़ 2, अत: आशा है, हाँ, यह दिखाता है कि वैल्यू इज़ 2. और अंत में, मैं नहीं सोचता मैंने बात की है इस बारे में पहले, लेकिन यदि आपको कभी आवश्यकता हो एग्ज़िट करने की ओकटेव को, आप टाइप कर सकते हैं एग्ज़िट कमांड और आप दबाएँ एंटर जो करेगा ओकटेव को क्विट या  क्यू - क्विट्स कमांड भी काम करती है. अंत, चलो बात करते हैं फ़ंक्शन्स और कैसे परिभाषित करना है उन्हें और कैसे उन्हे इस्तेमाल करना है. यहाँ मेरा डेस्क्टॉप, और मैंने पहले से बनाई है एक फ़ाइल या पहले से सेव किया है मेरे डेस्क्टॉप पर एक फ़ाइल जिसका नाम है "squarethisnumber.m". ऐसे आप करते हैं परिभाषित करते हैं फ़ंक्शन्स ओकटेव में. आप बनाते है एक फ़ाइल, आप जानते है, आपके फ़ंक्शन के नाम से और ख़त्म करते हैं .m से, और जब ओकटेव को मिलती है यह फ़ाइल, यह जानता है कि यह है जहाँ इसे देखना चाहिए परिभाषा फ़ंक्शन की "squarethisnumber.m". चलो खोलते हैं इस फ़ाइल को. ध्यान दें मैं इस्तेमाल कर रहा हूँ माइक्रसॉफ़्ट प्रोग्राम वर्डपैड खोलने के लिए इस फ़ाइल को. मैं सिर्फ़ आपको प्रोत्साहित करना चाहता हूँ, यदि आप इस्तेमाल कर रहे हैं माइक्रसॉफ़्ट विंडोज़, इस्तेमाल करे वर्डपैड बजाय करने के नोट पैड खोलने के लिए इन्हें फ़ाइल्ज़, यदि आपके पास है एक भिन्न टेक्स्ट एडिटर वह सही है लेकिन नोट पैड कभी-कभी ख़राब कर देता है स्पेसिंग. यदि आपके पास है सिर्फ़ नोटपैड, वह भी होना सही, वह भी काम कर सकता है लेकिन यदि आपके है वर्ड पैड भी, मैं बल्कि इस्तेमाल करूँगा वह या कुछ और टेक्स्ट एडिटर, यदि आपके पास है एक भिन्न टेक्स्ट एडिटर एडिट करने के लिए आपके फ़ंक्शन्स. तो, यहाँ है कि कैसे आप परिभाषित करते हैं फ़ंक्शन ओकटेव में. मैं सिर्फ़ ज़ूम करता हूँ थोड़ा सा. और इस फ़ाइल में हैं सिर्फ़ तीन लाइंज़ इसमें. पहली लाइन कहती है फ़ंक्शन Y ईक्वल्ज़ स्क्वेर रूट नम्बर X का, यह बताता है ओकटेव को कि मैं रिटर्न करता हूँ वैल्यू Y, मैं करूँगा रिटर्न एक वैल्यू और कि वैल्यू होगी सेव वेरीयबल Y में और इसके अलावा, यह बताता है ओकटेव को कि इस फ़ंक्शन में है एक आर्ग्युमेंट, जो है आर्ग्युमेंट X, और जिस ढंग से फ़ंक्शन बॉडी परिभाषित की जाती है, Y ईक्वल्ज़ X स्क्वेर्ड. चलो प्रयास करते हैं कॉल करने का फ़ंक्शन "square" को, यह संख्या 5, और यह वास्तव में नहीं करेगा, और ओकटेव कहता है स्क्वेर इस संख्या का परिभाषित नहीं है. वह इसलिए क्योंकि ओकटेव को पता नहीं है कैसे ढूँढना है इस फ़ाइल को. तो हमेशा की तरह, चलो करते हैं pwd, या मेरी डिरेक्टरी में नहीं, तो चलो देखते हैं यह c:\users\ang\desktop. तो वह है जहाँ मेरा डेस्क्टाप है. ओह, थोड़ी टाइपिंग में ग़लती है यह. users ANG desktop और यदि मैं अब टाइप करता हूँ square ThisNumber 5, यह देता है उत्तर 25. एक तरह से एक एडवांस्ड फ़ीचर की तरह, यह है केवल आप में से उनके लिए जो जानते हैं क्या मतलब है टर्म सर्च पाथ का. लेकिन इसलिए यदि आप चाहते हैं बदलना ओकटेव का सर्च पाथ और आप कर सकते हैं, आप सिर्फ़ सोचें इस अगले अंश को एडवांस्ड या ऐच्छिक मटीरीयल जैसे. केवल उनके लिए जो हैं या परिचित सिद्धांतों से सर्च पाथ के और प्रोग्रैमिंग लैंग्विजेज़ से, लेकिन आप कर सकते हैं इस्तेमाल टर्म ऐडपाथ का, सेफ़्टी कोलन, स्लैश यूज़र्ज़/एएनजी/डेस्क्टॉप जोड़ने के लिए उस डिरेक्टरी को ओकटेव के सर्च पाथ में ताकि यदि आप जानते हैं, जाएँ किसी और डिरेक्टरी में भी, मैं फिर भी, ओकटेव फिर भी जानता है कि देखना है यूज़र्ज़ एएनजी डेस्क्टॉप डिरेक्टरी में फ़ंक्शन्स के लिए ताकि यद्यपि मैं हूँ एक भिन्न डिरेक्टरी में अब, यह फिर भी जानता हैं कहाँ ढूँढना है स्क्वेर दिस नम्बर फ़ंक्शन. सही है? लेकिन यदि आप परिचित नहीं हैं सर्च पाथ के सिद्धांत से, चिंता न करें इसके बारे में. सिर्फ़ सुनिश्चित कर ले जब आप इस्तेमाल करे सीडी कमांड जाने के लिए डिरेक्टरी में आपके फ़ंक्शन की इससे पहले कि आप रन करें इसे, और वह काम भी वास्तव में करता है सही. एक सिद्धांत जो ओकटेव में है जो बहुत सी दूसरी प्रोग्रामिंग लैंग्विजेज़ में नहीं है कि यह आपको परिभाषित भी करने देता है फ़ंक्शंज़ जो रिटर्न करते हैं मल्टीपल वैल्यूज़ भी या मल्टीपल अरगुमेंट्स. तो यहाँ है एक उदाहरण उसका. परिभाषित करते हैं फ़ंक्शन जिसका नाम है स्क्वेर एंड क्यूब इस नम्बर X को और यह क्या कहता है कि यह फ़ंक्शन रिटर्न करता है 2 वैल्यूज़, y1 और y2. जब मैं सेट करता हूँ उन्हें, यह मिलता है, y1 है स्क्वेर्ड, y2 है क्यूब्ड. और यह क्या करता है कि यह सचमुच में रिटर्न करता है 2 संख्याएँ. तो, आप में से कुछ निर्भर करते हुए कि क्या प्रोग्रामिंग लैंग्विजेज़ आप इस्तेमाल करते हैं, यदि आप परिचित हैं, आप जानते हैं C C++ अक्सर, हम सोचते हैं फ़ंक्शन को रिटर्न करते हुए केवल एक वैल्यू. लेकिन ऐसा सिंटैक्स है ओकटेव में कि यह रिटर्न कर सकता हैं मल्टीपल वैल्यूज़. अब वापिस चलते हैं ओकटेव विंडो में. यदि मैं टाइप करता हूँ, आप जानते हैं, a, b, ईक्वल्ज़ स्क्वेर और क्यूब इस संख्या 5 का तब a है अब बराबर 25 और b है बराबर 5 के क्यूब के बराबर 125. तो, यह है अक्सर सुविधाजनक यदि आपको आवश्यकता है परिभाषित करने की एक फ़ंक्शन जो रिटर्न करता है मल्टीपल वैल्यूज़. अंत में, मैं दिखाऊँगा आपको केवल एक और अधिक परिष्कृत उदाहरण एक फ़ंक्शन का. मान लो मेरे पास है एक डेटा सेट जो दिखता हैं ऐसा, डेटा पॉंट्स है 1,1, 2,2, 3,3 पर. और मैं क्या करना चाहता हूँ कि परिभाषित करूँ एक ओकटेव फ़ंक्शन कम्प्यूट करने के लिए कॉस्ट फ़ंक्शन जे ऑफ़ थीटा, थीटा की विभिन्न वैल्यूज़ के लिए. पहले चलो डालते हैं डेटा ओकटेव में. तो मैं सेट करता हूँ मेरी डिज़ाइन मेट्रिक्स 1,1,1,2,1,3 पर. तो, वह है मेरी डिज़ाइन मेट्रिक्स x, x0 के साथ पहला कॉलम है कही गई टर्म और दूसरा कॉलम है आप जानते हैं, मेरी x-वैल्यूज़ मेरे तीन ट्रेनिंग इग्ज़ाम्पल्ज़ की. और मैं सेट करता हूँ y को 1-2-3 इस प्रकार, जो मेरी y ऐक्सिस की वैल्यूज़ हैं. तो मान लो थीटा है बराबर 0 सेमीकोलन 1. यहाँ मेरे डेस्क्टॉप पर, मैंने पहले से ही परिभाषित किया है यह कॉस्ट फ़ंक्शन जे और यदि मैं खोलता हूँ परिभाषा उस फ़ंक्शन की वह दिखती है निम्न प्रकार से. तो फ़ंक्शन जे बराबर है कॉस्ट फ़ंक्शन j ईक्वल्ज़  x y थीटा, कुछ कामेंट्स, जो स्पष्ट  करते हैं इन्पुट्स और फिर बहुत कम स्टेप्स सेट करते हैं m को संख्या मेरे ट्रेनिंग इग्ज़ाम्पल्ज़ की. इसलिए संख्या रोज़ की x में. कम्प्यूट करें प्रिडिक्शंज़, प्रिडिक्शंज़ ईक्वल्ज़ x टाइम्ज़ थीटा और इसलिए यह है एक कॉमेंट जो रैप अराउंड किया है, तो यह शायद कॉमेंट है पिछली लाइन का. कम्प्यूट करें एरर स्क्वेर्ड लेकर, आप जानते हैं, लेते हुए अंतर आपकी प्रिडिक्शंज़ में और y वैल्यूज़ में और लेते हुए एलेमेंट्स y के स्क्वेर करें और फिर अंत में कम्प्यूट करे कॉस्ट फ़ंक्शन जे. और ओकटेव जानता है जे है एक वैल्यू मैं चाहता हूँ रिटर्न करना क्योंकि जे आया यहाँ फ़ंक्शन की परिभाषा में. वैसे निसंकोच पॉज़ करें / रोकें विडीओ को यदि आप चाहते हैं देखना इस फ़ंक्शन की परिभाषा को अच्छे से और एक प्रकार से सुनिश्चित करना कि आपने समझ लिए हैं विभिन्न स्टेप्स. लेकिन जब मैं रन करता हूँ इसे ओकटेव में, मैं रन करता हूँ जे ईक्वल्ज़ कॉस्ट फ़ंक्शन j x y थीटा. यह कम्प्यूट करता है. ओह, मैंने टाइपिंग में ग़लती की वहाँ. यह होना चाहिए था कैपिटल X. यह कम्प्यूट करता है जे ईक्वल्ज़ 0 क्योंकि मेरा डेटा सेट था, आप जानते हैं, 123, 123 तब सेट करना थीटा 0 ईक्वल्ज़ 0, थीटा 1 ईक्वल 1, यह देता है मुझे बिल्कुल 45-डिग्री की रेखा जो फ़िट करती है मेरे डेटा को पूर्णत:. जबकि इसके विपरीत यदि मैं सेट करता हूँ थीटा मान लो 0, 0, तब यह हायपॉथिसस प्रिडिक्ट कर रही है ज़ीरोज़ सब पर समान, थीटा 0 है 0, थीटा 1 है 0 और मैं कंपयूट करता हूँ कोस्ट फंक्शन तब यह है 2.333 और वह वास्तव में बराबर है 1 स्क्वेर्ड, जो है मेरी स्क्वेर्ड एरर पहले इग्ज़ाम्पल, प्लस 2 स्क्वेर्ड, प्लस 3 स्क्वेर्ड और फिर विभाजित किया है 2 एम से, जो है 2 टाइम्ज़ संख्या ट्रेनिंग इग्ज़ाम्पल्ज़ की, जो है वास्तव में 2.33 और इसलिए, वह सैनिटी चेक कि फ़ंक्शन यहाँ है, आप जानते हैं, कम्प्यूट करता है सही कॉस्ट फ़ंक्शन और ये है कुछ उदाहरण जो हमने कोशिश किए है हमारे साधारण ट्रेनिंग सेट पर. और इसलिए वह सैनिटी चेक कि कॉस्ट फ़ंक्शन जे, जैसे परिभाषित किया है यहाँ, कि यह है वास्तव में, आप जानते हैं, प्रतीत होता है कम्प्यूट करता हुआ सही कॉस्ट फ़ंक्शन, कम से कम हमारे सरल ट्रेनिंग सेट पर जो हमारे पास था X और Y के साथ यह सरल ट्रेनिंग सेट जो हमने हल किया. तो, अब आप जानते हैं कैसे इस्तेमाल करनी हैं कंट्रोल स्टेट्मेंट्स जैसे फ़ॉर लूप्स, वाइल लूप्स और इफ़ स्टेट्मेंट्स ओकटेव में तथा कैसे परिभाषित और इस्तेमाल करने हैं फ़ंक्शंज़. अगले विडीओ में, मैं करूँगा सिर्फ़ शीघ्रता से स्टेप थ्रू लजिस्टिक से काम करने के और सब्मिट करने के प्रॉब्लम सेट्स इस क्लास के लिए और कैसे इस्तेमाल करना है हमारा सब्मिशन सिस्टम. और अंत में, उसके बाद, अंतिम ओकटेव टूटोरीयल विडीओ में, मैं बताना चाहता हूँ आपको वेक्टराइज़ेशन के बारे में, जो एक सुझाव है कि कैसे बनाना है आपके ओकटेव प्रोग्राम को और तीव्र.