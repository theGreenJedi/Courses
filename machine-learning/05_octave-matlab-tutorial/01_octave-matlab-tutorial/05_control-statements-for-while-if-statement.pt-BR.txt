Neste vídeo, eu gostaria de falar pra vocês como escrever estruturas de controle em Octave, expressões como "for", "while" e "if" e também como definir e usar funções. Aqui está minha janela do Octave. Vou mostrar primeiro como usar um loop "for" Eu vou começar definindo v como um vetor 10 x 1 de zeros. Eu escrevo um loop "for" onde "i" vai de 1 até 10. Isso para "i" igual a 1 até 10. E vamos ver, Eu vou definir v(i) igual a dois na potência de "i", e finalmente "end". O espaço em branco não importa, eu uso eles apenas para ficar bem identado, mas o espaçamento não importa. Ao fazer isso, o resultado é que "v" será  2^1, 2^2 e assim por diante. Então, usando a sintaxe i = 1:10 isso faz com que "i" itere pelos valores de 1 até 10. E por falar nisso,
poderia também fazer indices = 1:10 e então os índices no array vão de 1 até 10. Você também pode escrever
"for i = indices". E isso será o mesmo que i = 1:10. Você pode exibir "i" e isso faria a mesma coisa. Então, isso é um loop "for". Se você estiver familiar com "break" e "continue", aqui estão elas, pode-se usá-las dentro dos loops no Octave. Mas primeiro deixe-me mostrar como um loop "while" funciona. Então, aqui está meu vetor "v". Vamos fazer um laço "while" com "i" igual a 1, enquanto "i" for menor ou igual a 5, vou atribuir a "v(i)" o valor 100 e incrementar "i" por 1, e "end". Então o que isso diz? "i" inicia igual a 1 e então atribuo 100 a "v(i)" e incremento "i" por 1, até que ele seja maior que 5. E como resultado disso, onde previamente "v" era esse
vetor das potência de dois, eu agora peguei os primeiros cinco elementos do meu vetor e sobrescrevi eles com esse valor de 100. Então esta é a sintaxe para um loop "while". Vamos fazer outro exemplo. "i" é igual 1. "while(true)" e aqui quero mostrar pra vocês como usar
a declaração "break". Vamos dizer que "v(i)" igual a 999 e i = i + 1 se "i" é igual a 6,
"break" "end". E essa é a primeira vez que usamos a declaração "if", então eu espero que a lógica faça sentido. Já que "i" é igual a 1,
e dentro do loop, o loop "while" repetidamente define "v(i)" igual a 999 e incrementa "i" por 1, e então quando o "i" chega a 6, o "break" interrompe o loop "while",
e assim o efeito disso deve ser pegar os primeiros cinco elementos desse vetor "v" e defini-los como 999. E de fato, nós pegamos "v" e sobrescrevendo os primeiros
cinco elementos com 999. Essa é a sintaxe da declaração "if", "for" e "while", e observe o "end". Nós temos dois "end" aqui. Este "end" aqui,
finaliza a declaração do "if" e o segundo "end",
finaliza a declaração do "while". Agora eu quero mostrar a sintaxe geral de como usar uma declaração "if" e "else". Então, vejamos, v(1) é igual a 999, vamos escrever v(1) igual a 2 para este exemplo. Então,
escrevemos "if" v(1)  = igual a 1,
exibir "The value is one". Aqui está como escrever uma declaração do "else",
ou melhor, "elseif" v(1) é igual a 2. Isto é, se no nosso exemplo isso for verdade, exibir "The value is two",
senão exibir "The value is not one or two". Isso é uma declaração "if-else" que termina com um "end". E claro,
nós apenas definimos v(1) igual a 2,
então, esperamos que seja exibido "The value is two". E finalmente, eu acho que não falei disso antes, mas se você precisar sair do Octave, você pode digitar o
comando de saída "exit" e pressionar a tecla Enter,
isso vai fazer com que o Octave encerre.
Ou use o comando "quit" que também funciona. Vamos falar sobre funções e como defini-las e como usá-las. Aqui está a minha área de trabalho, e eu predefini um arquivo ou pre-salvei no meu desktop um
arquivo chamado "squareThisNumber.m" É dessa forma que você define funções no Octave. Você cria um arquivo com o nome da sua função com a extensão ".m", e quando o Octave encontra este arquivo, ele sabe que este é o lugar onde ele deve procurar
pela definição da função "squareThisNumber.m". Vamos abrir o arquivo. Veja que eu estou usando o programa Microsoft Wordpad para abrir o arquivo. Eu quero apenas encorajá-lo, se você usar o Microsoft Windows, a usar o Wordpad ao invés do Bloco de Notas para abrir estes arquivos, se você tem um editor de texto diferente,
não tem problema, mas o Bloco de Notas pode estragar o espaçamento. Se você tem apenas o Bloco de Notas ele também pode servir, mas se você tem Wordpad também, eu preferiria usar ele ou outro editor de texto,
se você tiver um editor de texto diferente para editar as funções. Então, aqui está como você define uma função no Octave. Deixe-me aproximar a imagem um pouco. Esse arquivo possui apenas três linhas. A primeira linha diz: função "y" é igual a raíz quadrada do número de "x", isso informa o Octave que eu vou retornar o valor "y", Eu vou retornar um valor e este valor será salvo na variável "y". Além disso, ele informa o Octave que esta função possui um argumento, que é o argumento "x", e a definição do corpo da função, como y = x ^ 2 Então, vamos tentar chamar essa função "squareThisNumber(5)", e isso não vai funcionar, o Octave diz: "a função 'squareThisNumber' não foi definida". Isso acontece porque o Octave não sabe
onde encontrar o arquivo. Então, como de costume, vamos usar PWD. Não estou no meu diretório, então vamos ver,
cd 'c:\users\ang\desktop' Aqui é onde o meu desktop fica. Opa, um pequeno erro ali. Users/ang/Desktop e se eu digitar agora "squareThisNumber(5)", ele retorna como como resposta o número 25. Como um recurso avançado, isso é apenas para aqueles que sabem o que o termo "caminho de busca" 
significa, se você quiser modificar o diretório de busca do Octave, você pode. Pense nesta próxima parte como um material avançado ou opcional. Apenas para aqueles que estão familiarizados com os conceitos de caminho de busca e linguagens de programação, mas você pode usar o termo "addpath('C:\Users\ang\Desktop')" para adicionar o diretório ao caminho de busca do Octave, de forma que mesmo que você vá para outro diretório o Octave ainda irá pesquisar por funções no diretório "C:/Users/ang/Desktop". Mesmo que eu esteja em um diretório diferente agora, o programa sabe onde encontrar a
função "squareThisNumber" OK? Mas se você não estiver familiarizado com o conceito do diretório de pesquisa, não se preocupe. Apenas certifique-se de usar o comando "cd" para ir para o diretório onde está sua função antes de executá-la,
que tudo irá funcionar. Um conceito que o Octave possui e que muitas outras linguagens de programação não possuem, é que ele também permite que você defina funções que retornam múltiplos valores,
ou múltiplos argumentos. Então aqui está um exemplo disso. Defina a função chamada "squareAndCubeThisNumber(x)" e o que isso diz é que esta função retorna 2 valores,
"y1" e "y2". Conforme segue, "y1" é "x" ao quadrado,
"y2" é "x" ao cubo. E o que ele faz é retornar 2 números. Então, alguns de vocês, dependendo da linguagem de programação que vocês usam, C/C++ ou Java. geralmente assumimos que uma função retorna apenas um valor. Mas a sintaxe do Octave permite retornar múltiplos valores. Agora, de volta a janela do Octave. Se eu escrever, "a", "b" igual "squareAndCube(5)" "squareAndCube(5)" então "a" agora é igual 25 e "b" é igual ao cubo de 5, igual a 125. Então, isso é conveniente se
você precisar definir uma função que retorna múltiplos valores. Finalmente, eu irei mostrar mais um exemplo sofisticado de uma função. Vamos dizer que eu tenho um conjunto de dados contendo (1, 1), (2, 2), (3, 3). E o que eu gosto de fazer é definir uma função do Octave para calcular a função de custo J(Teta) para os
diferentes valores de Teta. Primeiro, vamos colocar os dados no Octave. Então eu defino minha matriz X como [1 1; 1 2; 1 3]. Então, esta é a matriz que eu queria, x com x0, a primeira coluna sendo x0 e o segundo termo sendo os valores de "x" dos meus
três exemplos de treinamento. A deixe-me definir "y" como [1; 2; 3], que foram os valores do eixo "y". Então vamos dizer que Teta é igual a "[0; 1]". Aqui no meu desktop, eu predefini a função de custo "J", e se eu abrir a definição desta função,
ela será como mostrado aqui. Então a função "J" é igual a "costFunctionJ" x, y, Teta alguns comentários,
descrevendo as entradas e então aqui estão alguns passos,
define-se "m" como sendo o número de exemplos de treinamento, o número de linhas em "X". Calcule as predições, "predictions" igual a "X" vezes Teta, e assim, isso é um comentário da linha anterior, Aqui calculamos os erros do
quadrado em "sqrErrors", pegando a diferença entre as "predictions" e os valores de "y" elevando cada elemento ao quadrado e finalmente calculando a função de custo "J". O Octave sabe que J é um valor que eu quero retornar, porque J apareceu 
aqui na definição da função. Fique a vontade para pausar este vídeo se você quiser para analisar esta função por mais tempo e ter certeza de que você entende
todos os passos. Mas quando eu executo isso no Octave, eu executo "J = costFunctionJ( X, y, Teta)". Ele calcula.
Opa, digitei errado ali. Deve ser um "X" maiúsculo. Ele calcula "J" igual 0, porque se o meu conjunto de dados era [1; 2; 3], [1; 2; 3] então, definindo Teta 0 igual a 0, Teta 1 igual a 1. Isso me dá exatamente uma linha de 45 graus que cabe no meu
conjunto de dados perfeitamente. Por outro lado,  se eu defino Teta igual a, digamos, [0; 0], então esta hipótese está predizendo sempre zeros, Teta 0 igual 0, Teta 1 igual 0 e eu calculo a função "costFunctionJ", que resulta 2.3333, e isso é igual a 1^2, que é o meu erro quadrado no primeiro exemplo,
mais 2^2, mais 3^2 e então dividido por 2*m,
que é 2 vezes o número de exemplos de treinamento, que é de fato 2.33 e assim, podemos verificar que esta função aqui está calculando corretamente a função de custo. Esses são alguns exemplos que nós testamos no nosso simples exemplo de treino. Isso nos permite verificar que a "costFunctionJ", como definido aqui, está, de fato, calculando corretamente a função de custo, pelo menos no nosso simples exemplo de treino que nós possuímos aqui com X e Y, esse simples exemplo de treino que nós resolvemos. Então agora você sabe como escrever declarações de controle como loops "for", expressões como "for", "while" e "if" no Octave, assim como definir e usar funções. No próximo vídeo, eu vou mostrar rapidamente a logística de como trabalhar e submeter os conjuntos de problemas para esse curso e como usar o nosso
sistema para submetê-los. E finalmente, depois disso, no vídeo tutorial final do Octave, Eu quero falar com vocês a respeito de vetorização, que é uma idéia de como fazer com que os programas do
Octave sejam mais rápidos.
Tradução: Tiago Roberto Lammers | Revisão: Eduardo Bonet