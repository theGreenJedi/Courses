1
00:00:00,180 --> 00:00:01,178
En este video, me gustaría

2
00:00:01,178 --> 00:00:02,587
enseñarte cómo escribir

3
00:00:02,600 --> 00:00:03,842
instrucciones de control para tus

4
00:00:03,842 --> 00:00:05,672
programas hechos en Octave;

5
00:00:05,700 --> 00:00:07,280
como las instrucciones "for", "while", "if"

6
00:00:07,350 --> 00:00:12,176
y también cómo definir y usar funciones.

7
00:00:12,480 --> 00:00:13,980
Esta es mi ventana de Octave. Déjame

8
00:00:13,980 --> 00:00:16,502
mostrarte primero cómo usar un ciclo for "for".

9
00:00:16,502 --> 00:00:17,888
Voy empezar a establecer que "v"

10
00:00:17,888 --> 00:00:18,852
es un vector de 10x1

11
00:00:18,870 --> 00:00:20,808
cero.

12
00:00:20,830 --> 00:00:22,209
Ahora, aquí voy a escribir

13
00:00:22,240 --> 00:00:25,071
un ciclo for "for" para "i" que empieza en 1 hasta 10.

14
00:00:25,090 --> 00:00:27,608
Entonces queda "for" "i" igual a 1 dos puntos 10.

15
00:00:27,608 --> 00:00:29,905
Ahora, veamos. voy

16
00:00:29,905 --> 00:00:31,466
a definir v(i)

17
00:00:31,466 --> 00:00:33,214
igual a dos

18
00:00:33,220 --> 00:00:36,848
elevado a la "i", y finalmente

19
00:00:36,848 --> 00:00:37,671
end,

20
00:00:37,671 --> 00:00:39,082
El espacio en blanco no importa,

21
00:00:39,090 --> 00:00:40,538
entonces estoy dejando espacios

22
00:00:40,538 --> 00:00:41,960
simplemente para que se vea bien organizado,

23
00:00:41,990 --> 00:00:44,385
pero ten en cuenta que los espacios no son necesarios.

24
00:00:44,420 --> 00:00:46,163
Si hago esto, entonces el

25
00:00:46,163 --> 00:00:48,626
resultado es que el vector "v"

26
00:00:48,626 --> 00:00:49,420
se inicializa con dos a la uno,

27
00:00:49,500 --> 00:00:51,478
dos a la dos, etc.

28
00:00:51,490 --> 00:00:52,665
Entonces esta es la sintaxis "for" "i"

29
00:00:52,665 --> 00:00:55,410
igual a 1 dos puntos 10

30
00:00:55,410 --> 00:00:57,429
la cual hace que el ciclo I se repita desde

31
00:00:57,440 --> 00:00:59,662
los valores uno hasta 10.

32
00:00:59,662 --> 00:01:00,830
A propósito, también puedes hacer esto

33
00:01:00,830 --> 00:01:02,481
definiendo tus

34
00:01:02,481 --> 00:01:04,795
índices igual desde 1 hasta

35
00:01:04,800 --> 00:01:07,260
10, entonces los

36
00:01:07,270 --> 00:01:09,305
índices del vector se asignan desde uno hasta 10.

37
00:01:09,305 --> 00:01:13,249
También puedes escribir for i=indices.

38
00:01:15,040 --> 00:01:17,805
Y esto es realmente lo mismo que escribir i= 1 hasta 10.

39
00:01:17,820 --> 00:01:19,459
Tú puedes mostrar los valores de

40
00:01:19,480 --> 00:01:23,498
"i" y esto hará lo mismo.

41
00:01:23,498 --> 00:01:24,698
Entonces, esto es un ciclo "for".

42
00:01:24,698 --> 00:01:27,201
Si estás familiarizado con "break"

43
00:01:27,230 --> 00:01:29,375
y "continue", existen instrucciones "break" y

44
00:01:29,375 --> 00:01:30,809
"continue" que también

45
00:01:30,809 --> 00:01:32,061
puedes usar dentro de los ciclos for

46
00:01:32,061 --> 00:01:33,902
en Octave. Pero primero,

47
00:01:33,902 --> 00:01:36,550
déjame mostrarte cómo funciona un ciclo for "while".

48
00:01:36,570 --> 00:01:39,088
Aquí está mi vector

49
00:01:39,120 --> 00:01:40,912
v. Escribamos el ciclo for "while".

50
00:01:40,920 --> 00:01:44,037
i=1, mientras que "i"

51
00:01:44,037 --> 00:01:45,259
sea menor o igual que 5,

52
00:01:45,259 --> 00:01:47,662
definamos el vector

53
00:01:47,662 --> 00:01:51,082
v(i) igual a 100

54
00:01:51,530 --> 00:01:54,449
y luego incrementas "i" en

55
00:01:54,449 --> 00:01:56,644
uno y luego "end".

56
00:01:56,700 --> 00:01:58,090
Entonces ¿qué nos dice esto?

57
00:01:58,090 --> 00:01:59,932
bien, "i" empieza en

58
00:01:59,970 --> 00:02:01,359
uno y luego voy a

59
00:02:01,380 --> 00:02:02,629
definir el vector v(i) igual a 100

60
00:02:02,629 --> 00:02:04,249
y luego incrementas "i" en

61
00:02:04,260 --> 00:02:07,666
uno hasta que "i" sea mayor que cinco.

62
00:02:07,690 --> 00:02:09,377
Y como resultado de esto,

63
00:02:09,377 --> 00:02:13,022
mientras que anteriormente "v" era un vector con potencias de 2.

64
00:02:13,022 --> 00:02:14,573
Ahora he tomado los primeros

65
00:02:14,580 --> 00:02:17,225
cinco elementos de mi vector

66
00:02:17,260 --> 00:02:19,618
y los he sobrescrito con el valor 100.

67
00:02:19,618 --> 00:02:22,797
Bien, esa es la sintaxis del ciclo for "while".

68
00:02:23,140 --> 00:02:24,503
Hagamos otro ejemplo.

69
00:02:24,503 --> 00:02:26,600
"i" igual a uno mientras que sea

70
00:02:26,600 --> 00:02:28,491
verdadero, y aquí

71
00:02:28,500 --> 00:02:31,892
quiero mostrarte cómo usar la instrucción "break".

72
00:02:31,892 --> 00:02:34,040
Digamos que v(i) es igual a 999

73
00:02:34,070 --> 00:02:37,331
y que "i" es igual a i+1

74
00:02:38,110 --> 00:02:45,900
Si "i" es igual a 6 entonces use break  y luego

75
00:02:47,910 --> 00:02:47,910
end,

76
00:02:48,410 --> 00:02:49,425
Y esta también es la primera vez

77
00:02:49,425 --> 00:02:51,945
que usamos la instrucción "if".

78
00:02:51,945 --> 00:02:53,308
Espero que hayas entendido la lógica de esto.

79
00:02:53,308 --> 00:02:57,297
Puesto que "i"  es igual a uno y, luego, entra al ciclo for.

80
00:02:57,340 --> 00:02:59,900
Repetidamente asigna 1 a v(i)

81
00:02:59,900 --> 00:03:01,527
e incrementa "i"  en 1,

82
00:03:01,527 --> 00:03:02,901
y cuando "i"

83
00:03:02,920 --> 00:03:04,451
llegue a 6, haga una

84
00:03:04,451 --> 00:03:05,757
interrupción, la cual se hace aquí y sale

85
00:03:05,757 --> 00:03:07,284
del ciclo for "while". Entonces

86
00:03:07,284 --> 00:03:08,596
el efecto de esto es tomar

87
00:03:08,596 --> 00:03:09,929
los primeros cinco elementos de este

88
00:03:09,929 --> 00:03:11,748
vector "v" y reemplazarlos con el valor 999.

89
00:03:11,748 --> 00:03:14,832
Y sí, en realidad, estamos tomando el vector

90
00:03:14,832 --> 00:03:18,345
"v" y reemplazando los primeros cinco elementos con  999.

91
00:03:18,345 --> 00:03:20,172
Aquí tenemos las

92
00:03:20,172 --> 00:03:21,974
sintaxis de las instrucciones "if" y

93
00:03:21,974 --> 00:03:25,058
"while". Ten en cuenta que

94
00:03:25,070 --> 00:03:27,159
tenemos dos instrucciones "end" aquí.

95
00:03:27,170 --> 00:03:29,719
Este "end" de aquí termina la instrucción "if".

96
00:03:29,730 --> 00:03:33,228
y el segundo "end" de aquí, termina la instrucción "while".

97
00:03:33,250 --> 00:03:35,265
Ahora déjame mostrarte una sintaxis más general

98
00:03:35,265 --> 00:03:37,763
de la instrucción "if-else".

99
00:03:37,763 --> 00:03:40,274
Entonces, veamos. v(1)

100
00:03:40,274 --> 00:03:42,776
es igual a 999.

101
00:03:42,860 --> 00:03:46,996
Asignemos 2 a v(1), para este ejemplo.

102
00:03:47,020 --> 00:03:48,758
Entonces, escribamos

103
00:03:48,758 --> 00:03:55,050
"if" v(1) es igual a 1, muestre el valor es uno.

104
00:03:56,855 --> 00:03:58,588
Aquí tenemos la forma de escribir una

105
00:03:58,588 --> 00:04:00,040
instrucción else. O mejor:

106
00:04:00,040 --> 00:04:03,853
elseif: v(1) igual a

107
00:04:03,853 --> 00:04:07,815
2. En caso de que sea verdadero en nuestro ejemplo, muestre

108
00:04:07,815 --> 00:04:12,268
"el valor es 2". De lo contrario,

109
00:04:13,650 --> 00:04:17,960
muestre "el valor es diferente a uno y a dos".

110
00:04:17,990 --> 00:04:21,699
Bien. Esta es la instrucción "if-else"

111
00:04:21,700 --> 00:04:23,889
y termina con "end".

112
00:04:23,889 --> 00:04:25,271
Y por supuesto, aquí simplemente hemos asignado

113
00:04:25,271 --> 00:04:27,589
el valor de 2 a v(1)  y esperemos, sí,

114
00:04:27,610 --> 00:04:30,729
ha mostrado que el valor es 2.

115
00:04:30,780 --> 00:04:32,844
Finalmente,

116
00:04:32,880 --> 00:04:34,143
no creo que haya hablado de esto anteriormente, pero

117
00:04:34,143 --> 00:04:35,622
si alguna vez necesitas salir de Octave,

118
00:04:35,622 --> 00:04:36,947
puedes escribir el comando "exit" y

119
00:04:36,947 --> 00:04:38,373
presionar la tecla Enter, lo cual hará que Octave

120
00:04:38,400 --> 00:04:39,981
se cierre. O también puedes usar el comando "quit"

121
00:04:39,981 --> 00:04:42,428
que también sirve.

122
00:04:42,450 --> 00:04:43,857
Finalmente, hablemos de

123
00:04:43,857 --> 00:04:45,292
funciones, cómo definirlas y

124
00:04:45,310 --> 00:04:48,592
cómo usarlas.

125
00:04:48,620 --> 00:04:49,680
Aquí, en mi escritorio,

126
00:04:49,720 --> 00:04:52,078
tengo un archivo

127
00:04:52,078 --> 00:04:56,818
que he guardado anteriormente y su nombre es  squarethisnumber.m.

128
00:04:56,830 --> 00:04:59,471
Esa la forma cómo puedes definir funciones en Octave.

129
00:04:59,480 --> 00:05:01,681
Creas un archivo llamado, bien,

130
00:05:01,681 --> 00:05:03,958
con el nombre de la función y con la extensión .m

131
00:05:03,960 --> 00:05:05,694
Cuando Octave encuentre

132
00:05:05,730 --> 00:05:07,643
este archivo, sabrá que ahí

133
00:05:07,680 --> 00:05:12,322
es donde debería buscar la definición de la función squarethisnumber.m.

134
00:05:12,340 --> 00:05:14,076
Abre este archivo.

135
00:05:14,076 --> 00:05:15,717
Ten en cuenta que estoy usando

136
00:05:15,717 --> 00:05:19,352
El programa de Microsoft llamado Wordpad para abrir ese archivo.

137
00:05:19,352 --> 00:05:20,250
Te aconsejo, si

138
00:05:20,250 --> 00:05:23,379
usas Microsoft Windows, que

139
00:05:23,379 --> 00:05:25,075
uses Wordpad en lugar de

140
00:05:25,110 --> 00:05:27,477
Notepad para abrir estos

141
00:05:27,490 --> 00:05:28,557
archivos. Si tienes un

142
00:05:28,557 --> 00:05:29,938
editor de texto diferente, también sirve.

143
00:05:29,938 --> 00:05:33,325
Pero Notepad, algunas veces desorganiza los espacios.

144
00:05:33,350 --> 00:05:34,775
Si solamente tienes Notepad, también

145
00:05:34,800 --> 00:05:36,312
debería funcionar.

146
00:05:36,312 --> 00:05:37,779
pero si también

147
00:05:37,779 --> 00:05:39,354
tienes Wordpad,

148
00:05:39,354 --> 00:05:40,609
yo lo usaría u otro

149
00:05:40,610 --> 00:05:45,053
editor de texto para editar tus funciones.

150
00:05:45,060 --> 00:05:47,155
Entonces, aquí tenemos la forma de definir funciones en Octave.

151
00:05:47,155 --> 00:05:49,816
Déjame agrandar un poquito.

152
00:05:49,816 --> 00:05:52,516
Este archivo simplemente tiene tres líneas en él.

153
00:05:52,516 --> 00:05:54,440
La primera línea es function Y = squareThisNumber (x)

154
00:05:54,440 --> 00:05:56,448
Esto le dice a

155
00:05:56,448 --> 00:05:57,705
Octave que voy a devolver el

156
00:05:57,705 --> 00:06:00,025
valor de "y". Voy a  devolver  un valor y

157
00:06:00,025 --> 00:06:01,315
este valor

158
00:06:01,315 --> 00:06:02,375
se guardará

159
00:06:02,375 --> 00:06:04,443
en la variable "y".

160
00:06:04,443 --> 00:06:06,003
Además, le dice a Octave

161
00:06:06,003 --> 00:06:08,068
que esta función tiene un argumento,

162
00:06:08,070 --> 00:06:10,408
el cual es X,

163
00:06:10,420 --> 00:06:11,846
y la forma en que el cuerpo de la función

164
00:06:11,846 --> 00:06:15,156
está definido es. Si "y" es igual a "x" al cuadrado.

165
00:06:15,180 --> 00:06:16,553
Ahora tratemos de llamar

166
00:06:16,553 --> 00:06:19,071
esta función escribiendo squareThisNumber(5)

167
00:06:19,071 --> 00:06:21,854
esto realmente

168
00:06:21,854 --> 00:06:23,115
no va a funcionar y

169
00:06:23,115 --> 00:06:25,693
Octave dice que squareThisNumber no se ha definido.

170
00:06:25,693 --> 00:06:28,902
Esto pasa porque Octave no sabe dónde buscar este archivo.

171
00:06:28,902 --> 00:06:30,682
Como de costumbre, usemos PWD,

172
00:06:30,690 --> 00:06:32,592
o no en mi directorio,

173
00:06:32,592 --> 00:06:36,151
entonces usemos el comando cd c:\users\ang\desktop.

174
00:06:36,151 --> 00:06:39,888
Aquí es donde se encuentra mi escritorio.

175
00:06:39,888 --> 00:06:41,276
¡ups! hay un error de escritura aquí.

176
00:06:41,276 --> 00:06:42,848
cd c:\users\ang\desktop.

177
00:06:42,848 --> 00:06:44,157
Ahora, si escribo squareThisNumber(5)

178
00:06:44,157 --> 00:06:46,728
devolverá la

179
00:06:46,728 --> 00:06:48,505
respuesta 25.

180
00:06:48,505 --> 00:06:50,347
Ahora voy a hablar de una variable avanzada,

181
00:06:50,347 --> 00:06:51,972
pero esto es sólo para aquellos

182
00:06:51,972 --> 00:06:54,596
que sepan el significado de rutas de búsqueda.

183
00:06:54,596 --> 00:06:55,945
Entonces, si

184
00:06:55,945 --> 00:06:57,497
deseas modificar la ruta de búsqueda de Octave

185
00:06:57,497 --> 00:06:58,863
simplemente

186
00:06:58,863 --> 00:06:59,866
podrías considerar

187
00:06:59,866 --> 00:07:01,827
esta parte como avanzada

188
00:07:01,827 --> 00:07:03,292
u opcional.

189
00:07:03,292 --> 00:07:04,214
Solamente para aquellos

190
00:07:04,214 --> 00:07:05,484
que estén familiarizados con los conceptos de

191
00:07:05,484 --> 00:07:07,642
rutas de búsqueda y lenguajes de permisos,

192
00:07:07,650 --> 00:07:08,962
entonces, puedes usar

193
00:07:08,962 --> 00:07:11,875
addpath ('c:

194
00:07:11,880 --> 00:07:16,241
\users\ang\desktop')

195
00:07:16,241 --> 00:07:17,972
para agregar ese directorio

196
00:07:17,972 --> 00:07:19,744
a la ruta de búsqueda de Octave, de tal forma que

197
00:07:19,744 --> 00:07:21,065
incluso si vas a ir

198
00:07:21,065 --> 00:07:22,611
a otro directorio, lo puedes hacer

199
00:07:22,611 --> 00:07:24,510
y Octave sabe que debe buscar en

200
00:07:24,510 --> 00:07:26,005
c:\users\ang\desktop para la función

201
00:07:26,005 --> 00:07:29,214
squareThisNumber(5)

202
00:07:29,214 --> 00:07:30,521
incluso si estoy en un

203
00:07:30,521 --> 00:07:31,868
directorio diferente, el programa

204
00:07:31,868 --> 00:07:35,297
sabe dónde encontrar la función squareThisNumber(5)

205
00:07:35,297 --> 00:07:35,935
¿Bien?

206
00:07:35,935 --> 00:07:37,407
pero si no estás familiarizado

207
00:07:37,407 --> 00:07:39,184
con el concepto de rutas de búsqueda,

208
00:07:39,184 --> 00:07:40,068
no te preocupes.

209
00:07:40,068 --> 00:07:40,889
simplemente, asegúrate de usar

210
00:07:40,889 --> 00:07:42,053
el comando cd para ir al

211
00:07:42,053 --> 00:07:43,926
directorio donde esté la función

212
00:07:43,940 --> 00:07:47,441
antes de ejecutarla para que funcione bien.

213
00:07:47,441 --> 00:07:49,587
Un concepto que Octave tiene que

214
00:07:49,600 --> 00:07:51,058
muchos otros lenguajes de programación

215
00:07:51,058 --> 00:07:52,969
no tienen es que Octave

216
00:07:52,969 --> 00:07:54,909
te permite definir

217
00:07:54,909 --> 00:07:58,873
funciones que devuelven varios valores o varios argumentos.

218
00:07:58,873 --> 00:08:00,889
Aquí tenemos un ejemplo de eso.

219
00:08:00,889 --> 00:08:02,931
Define la función llamada

220
00:08:02,931 --> 00:08:04,964
function [y1, y2] = squareAndCubeThisNumber(x)

221
00:08:04,964 --> 00:08:06,644
esto significa que

222
00:08:06,660 --> 00:08:08,547
la función devuelve dos valores: y1 y y2.

223
00:08:08,547 --> 00:08:09,955
Cuando asigno los

224
00:08:09,960 --> 00:08:13,603
 valores y1 = x^2; y2 = x^3;

225
00:08:13,603 --> 00:08:16,972
Lo que esta función hace es devolver 2 números.

226
00:08:16,980 --> 00:08:18,855
Entonces, sí tú, dependiendo del

227
00:08:18,855 --> 00:08:20,195
lenguaje de programación que uses,

228
00:08:20,195 --> 00:08:22,931
estás familiarizado, por decir, con C C++

229
00:08:22,940 --> 00:08:26,051
a menudo piensas en que la función devolverá solamente un valor.

230
00:08:26,051 --> 00:08:27,847
Pero la sintaxis de Octave

231
00:08:27,847 --> 00:08:31,679
permite devolver varios valores.

232
00:08:32,430 --> 00:08:34,087
Ahora, volvamos a la ventana de Octave. Si

233
00:08:34,087 --> 00:08:37,914
escribo, como sabes, [a,b] =

234
00:08:37,914 --> 00:08:41,263
squareAndCubeThisNumber(5)

235
00:08:41,263 --> 00:08:44,599
entonces

236
00:08:44,610 --> 00:08:46,338
el valor de "a" es 25

237
00:08:46,338 --> 00:08:47,778
y el valor de "b" es

238
00:08:47,778 --> 00:08:49,729
el cubo de 5 que es igual a 125.

239
00:08:49,729 --> 00:08:51,645
Entonces, esto es a menudo

240
00:08:51,670 --> 00:08:53,010
conveniente si necesitas definir

241
00:08:53,010 --> 00:08:56,447
una función que devuelva varios valores.

242
00:08:56,447 --> 00:08:57,480
Finalmente, te voy a mostrar

243
00:08:57,480 --> 00:09:01,123
un ejemplo más complejo de una función.

244
00:09:01,130 --> 00:09:02,361
Supongamos que tenemos un conjunto de datos

245
00:09:02,370 --> 00:09:04,400
como este, con puntos de datos en 1, 1, 2, 2, 3, 3.

246
00:09:04,430 --> 00:09:07,636
y lo que me gustaría hacer

247
00:09:07,636 --> 00:09:09,113
es definir una

248
00:09:09,113 --> 00:09:10,798
función en Octave para calcular la función de costos

249
00:09:10,830 --> 00:09:14,341
J(«theta») para los diferentes valores de «theta».

250
00:09:14,360 --> 00:09:16,157
Primero pongamos los datos en Octave.

251
00:09:16,160 --> 00:09:17,694
Entonces la matriz de diseño la voy a definir como

252
00:09:17,700 --> 00:09:20,998
X = [1 1; 1 2; 1 3];

253
00:09:21,010 --> 00:09:24,043
Entonces, esta es mi matriz de diseño X, con

254
00:09:24,050 --> 00:09:26,073
x0, la

255
00:09:26,073 --> 00:09:27,428
primera columna corresponde al primer valor

256
00:09:27,428 --> 00:09:28,746
y la segunda columna al segundo valor.

257
00:09:28,770 --> 00:09:32,375
Como sabrás, estoy usando los valores de X de mis 3 ejemplos de práctica.

258
00:09:32,375 --> 00:09:33,594
Ahora, voy a definir

259
00:09:33,594 --> 00:09:35,488
Y = [1; 2; 3];

260
00:09:35,488 --> 00:09:38,793
para los valores del eje y.

261
00:09:38,810 --> 00:09:40,431
Ahora asignemos los valores de «theta»

262
00:09:40,431 --> 00:09:43,714
«theta» = [0; 1];

263
00:09:43,730 --> 00:09:45,652
Aquí en mi escritorio,

264
00:09:45,660 --> 00:09:47,483
tengo la función de costos predefinida J

265
00:09:47,490 --> 00:09:49,008
y si

266
00:09:49,010 --> 00:09:52,019
miramos la definición de esta función, encontramos lo siguiente:

267
00:09:52,019 --> 00:09:53,579
function J=costFunctionJ

268
00:09:53,580 --> 00:09:55,192
(x,y,«theta»)

269
00:09:55,192 --> 00:09:57,151
algunos comentarios especificando

270
00:09:57,151 --> 00:09:59,546
las entradas y luego

271
00:09:59,560 --> 00:10:01,383
algunos pasos, para definir m

272
00:10:01,383 --> 00:10:02,995
como el número de ejemplos de práctica.

273
00:10:03,020 --> 00:10:05,495
Entonces X corresponde al número de filas.

274
00:10:05,510 --> 00:10:07,596
Se calculan las predicciones. Predicciones igual a

275
00:10:07,596 --> 00:10:10,137
X multiplicado por «theta»

276
00:10:10,170 --> 00:10:11,670
Este comentario se ha cortado.

277
00:10:11,710 --> 00:10:14,693
Probablemente pertenezca al comentario de la línea anterior.

278
00:10:14,720 --> 00:10:16,823
Se calculan los errores del programa, al

279
00:10:16,823 --> 00:10:18,637
hacer la diferencia entre sus predicciones y los

280
00:10:18,640 --> 00:10:20,265
valores de "Y"  y tomando el elemento

281
00:10:20,265 --> 00:10:22,126
del cuadrado de “y”, luego

282
00:10:22,140 --> 00:10:24,376
finalmente calculando la

283
00:10:24,376 --> 00:10:26,128
función de costos "J". Y Octave sabe

284
00:10:26,128 --> 00:10:27,439
que "J" es el valor que

285
00:10:27,439 --> 00:10:31,383
quiero devolver porque "J" aparece aquí en la definición de la función.

286
00:10:31,420 --> 00:10:34,127
Si quieres, puedes hacer una pausa

287
00:10:34,170 --> 00:10:35,292
en este vídeo si deseas

288
00:10:35,292 --> 00:10:36,712
analizar bien la definición de esta

289
00:10:36,712 --> 00:10:38,820
función para

290
00:10:38,820 --> 00:10:44,031
que estés seguro de entender bien los diferentes pasos.

291
00:10:44,031 --> 00:10:45,184
Cuando la ejecuto en

292
00:10:45,184 --> 00:10:46,630
Octave, "J" es igual a

293
00:10:46,630 --> 00:10:51,197
costFunctionJ(x,y,«theta»)

294
00:10:51,197 --> 00:10:55,142
hace los cálculos. ¡Ups! hay un error de escritura aquí.

295
00:10:55,142 --> 00:10:57,018
la letra X debe estar en mayúscula

296
00:10:57,018 --> 00:11:00,472
Calcula J = 0

297
00:11:00,510 --> 00:11:03,367
Si mi conjunto de datos fue de

298
00:11:03,367 --> 00:11:06,963
123, 123, entonces al asignar 0 a «theta»

299
00:11:06,980 --> 00:11:08,741
igual 0, «theta» 1 igual a 1

300
00:11:08,770 --> 00:11:11,259
esto me da exactamente

301
00:11:11,259 --> 00:11:15,559
la línea de 45 grados que coincide perfectamente con mi conjunto de datos.

302
00:11:15,600 --> 00:11:16,887
Pero si asigno 0, 0

303
00:11:16,887 --> 00:11:19,828
a «theta»,

304
00:11:19,830 --> 00:11:22,524
entonces esta hipótesis está prediciendo

305
00:11:22,540 --> 00:11:24,050
ceros en todo.

306
00:11:24,050 --> 00:11:25,803
Lo mismo, «theta» 0 igual a 0,

307
00:11:25,810 --> 00:11:27,139
«theta» 1 igual a 0 y

308
00:11:27,139 --> 00:11:29,345
calculo la función de costos J=costFunctionJ(x,y,«theta»)

309
00:11:29,370 --> 00:11:31,830
se obtiene 2.333

310
00:11:31,830 --> 00:11:35,495
y eso es realmente 1 al cuadrado

311
00:11:35,520 --> 00:11:36,745
el cual es el error de cuadrado en

312
00:11:36,745 --> 00:11:39,789
mi primer ejemplo, más el cuadrado de 2,

313
00:11:39,800 --> 00:11:42,377
más el cuadrado de 3,

314
00:11:42,440 --> 00:11:45,288
y todo dividido entre 2*m, lo cual

315
00:11:45,288 --> 00:11:47,091
es 2 veces el número de ejemplos de práctica

316
00:11:47,091 --> 00:11:50,643
lo cual es en realidad 2.33 y

317
00:11:50,643 --> 00:11:53,289
así "sanity" comprueba que

318
00:11:53,330 --> 00:11:54,909
esta función

319
00:11:54,909 --> 00:11:56,302
calcula la función de costos correcta

320
00:11:56,302 --> 00:11:58,212
y estos son los ejemplos

321
00:11:58,250 --> 00:12:00,222
que analizamos

322
00:12:00,222 --> 00:12:03,433
en nuestro ejemplo de práctica simple.

323
00:12:03,490 --> 00:12:04,914
Y así "sanity" hace seguimiento a

324
00:12:04,960 --> 00:12:08,689
la función de costos "J",

325
00:12:08,720 --> 00:12:10,202
como se define aquí,  que

326
00:12:10,230 --> 00:12:12,992
en realidad va a calcular

327
00:12:12,992 --> 00:12:14,908
la función de costos correcta J, al menos

328
00:12:14,920 --> 00:12:17,424
en nuestro conjunto de práctica simple

329
00:12:17,430 --> 00:12:18,835
que tenemos aquí con "X"

330
00:12:18,835 --> 00:12:20,823
y "Y" en este

331
00:12:20,823 --> 00:12:25,189
ejemplo de práctica simple que hemos resuelto.

332
00:12:25,230 --> 00:12:26,285
Bien, ahora sabes cómo escribir

333
00:12:26,285 --> 00:12:28,171
las instrucciones de control correctas para ciclo fors,

334
00:12:28,171 --> 00:12:29,838
como ciclo fors "while" e instrucciones "if"

335
00:12:29,838 --> 00:12:33,197
en Octave, así como también como definir y usar funciones.

336
00:12:33,197 --> 00:12:34,530
En el siguiente vídeo,

337
00:12:34,530 --> 00:12:36,123
de manera rápida,

338
00:12:36,123 --> 00:12:38,144
voy a tratar la logística

339
00:12:38,144 --> 00:12:39,873
para trabajar y

340
00:12:39,873 --> 00:12:41,664
enviar conjuntos de problemas para

341
00:12:41,664 --> 00:12:45,212
esta clase y cómo usar nuestro sistema de envío.

342
00:12:45,230 --> 00:12:46,794
y finalmente, después de eso, en

343
00:12:46,794 --> 00:12:48,856
el vídeo tutorial final de Octave,

344
00:12:48,856 --> 00:12:51,400
te voy a enseñar lo relacionado con la vectorización,

345
00:12:51,400 --> 00:12:52,938
la cual es una idea que se usa

346
00:12:52,938 --> 00:12:56,126
para que tus programas escritos en Octave se ejecuten mucho más rápido.