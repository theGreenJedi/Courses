1
00:00:00,111 --> 00:00:02,628
В этом видео, посвященном Octave,

2
00:00:02,630 --> 00:00:03,904
я расскажу, как в нем

3
00:00:03,930 --> 00:00:07,322
манипулировать данными.

4
00:00:07,340 --> 00:00:08,783
Итак, если у вас есть данные для решения задачи машинного обучения, как вы будете загружать эти

5
00:00:08,783 --> 00:00:12,125
данные в Octave?

6
00:00:12,125 --> 00:00:13,693
Как вы поместите их в матрицу?

7
00:00:13,693 --> 00:00:15,284
Как оперировать этими матрицами?

8
00:00:15,290 --> 00:00:16,982
Как сохранить результат операций?

9
00:00:17,000 --> 00:00:22,185
Как перемещать и обрабатывать данные?

10
00:00:22,900 --> 00:00:25,044
Вот окно Octave, оно открыто на

11
00:00:25,044 --> 00:00:29,256
том месте, где мы остановились в прошлый раз.

12
00:00:29,290 --> 00:00:31,132
Если я напечатаю a, матрицу,

13
00:00:31,140 --> 00:00:32,258
которую мы создали

14
00:00:32,258 --> 00:00:35,197
следующей командой, то

15
00:00:35,197 --> 00:00:38,152
мы увидим

16
00:00:38,190 --> 00:00:40,696
матрицу размера 3х2.

17
00:00:40,710 --> 00:00:42,415
С помощью команды size вы

18
00:00:42,430 --> 00:00:46,361
можете узнать размер матрицы.

19
00:00:46,361 --> 00:00:48,207
size(A) возвращает 3 и 2.

20
00:00:48,207 --> 00:00:50,160
Сама команда size

21
00:00:50,180 --> 00:00:52,155
возвращает матрицу

22
00:00:52,155 --> 00:00:54,591
размера 1х2.

23
00:00:54,591 --> 00:00:56,598
Поэтому можно присвоить

24
00:00:56,598 --> 00:00:58,370
SZ=size(A), и SZ будет

25
00:00:58,380 --> 00:00:59,597
матрицей с первым

26
00:00:59,597 --> 00:01:01,627
элементом 3 и

27
00:01:01,640 --> 00:01:04,689
вторым элементом 2.

28
00:01:04,700 --> 00:01:07,494
Если набрать size(SZ).

29
00:01:07,494 --> 00:01:08,898
Оказывается,

30
00:01:08,898 --> 00:01:10,862
SZ -

31
00:01:10,862 --> 00:01:13,721
матрица 1х2, элементы

32
00:01:13,721 --> 00:01:15,279
которой

33
00:01:15,279 --> 00:01:17,787
отражают

34
00:01:17,787 --> 00:01:19,505
размерность

35
00:01:19,510 --> 00:01:21,542
матрицы А.

36
00:01:21,542 --> 00:01:22,662
Набрав size(A,1),

37
00:01:22,680 --> 00:01:24,108
вы

38
00:01:24,110 --> 00:01:26,307
узнаете

39
00:01:26,320 --> 00:01:28,361
одно

40
00:01:28,361 --> 00:01:29,598
из измерений А, число

41
00:01:29,598 --> 00:01:31,942
строк. size(A,2) вернет 2,
число

42
00:01:31,950 --> 00:01:34,034
столбцов в А. Пусть у нас есть

43
00:01:34,034 --> 00:01:36,016
вектор V=[1 2 3 4], и

44
00:01:36,030 --> 00:01:38,089
мы набираем length(V). Команда

45
00:01:38,089 --> 00:01:40,830
вернет значение

46
00:01:40,830 --> 00:01:42,097
наибольшего

47
00:01:42,097 --> 00:01:44,123
измерения.

48
00:01:44,170 --> 00:01:45,609
Можно также набрать

49
00:01:45,609 --> 00:01:48,487
length(A), и так как А имеет

50
00:01:48,500 --> 00:01:49,856
размер 2х3, наибольшее

51
00:01:49,860 --> 00:01:52,305
измерение имеет

52
00:01:52,330 --> 00:01:53,825
размер 3, поэтому

53
00:01:53,825 --> 00:01:56,145
выводится 3.

54
00:01:56,145 --> 00:01:58,805
Но обычно length применяется только к векторам.

55
00:01:58,810 --> 00:02:00,194
Вот так *пишет формулу*. Length

56
00:02:00,200 --> 00:02:02,222
не применяется к

57
00:02:02,230 --> 00:02:04,010
матрицам во избежание

58
00:02:04,010 --> 00:02:07,205
путаницы.

59
00:02:07,620 --> 00:02:10,122
Сейчас давайте посмотрим на то,

60
00:02:10,122 --> 00:02:11,843
как загружаются данные и происходит поиск в файловой

61
00:02:11,860 --> 00:02:13,732
системе.

62
00:02:13,732 --> 00:02:15,254
Когда мы

63
00:02:15,254 --> 00:02:16,882
запускаем в Octave, мы обычно находимся в

64
00:02:16,920 --> 00:02:19,098
той же директории, что и

65
00:02:19,098 --> 00:02:21,738
Octave.

66
00:02:21,750 --> 00:02:24,042
Так, комманда

67
00:02:24,060 --> 00:02:25,619
PWD показывает текущую

68
00:02:25,640 --> 00:02:28,738
директорию, или папку, где находится Octave.

69
00:02:28,738 --> 00:02:31,932
Сейчас мы находимся не там, где нужно.

70
00:02:31,932 --> 00:02:33,999
Команда CD используется

71
00:02:34,000 --> 00:02:35,322
для перемещения по

72
00:02:35,330 --> 00:02:40,681
директориям.

73
00:02:40,681 --> 00:02:43,657
Я могу перейти в

74
00:02:43,657 --> 00:02:45,925
C:/Users/Ang/Desktop, это мой

75
00:02:45,925 --> 00:02:49,447
Рабочий Стол, и набрать LS. Это команда из Unix или Linux.

76
00:02:49,447 --> 00:02:50,648
LS перечислит все папки и

77
00:02:50,648 --> 00:02:52,435
файлы на

78
00:02:52,435 --> 00:02:54,137
моем

79
00:02:54,140 --> 00:02:58,184
Рабочем Столе.

80
00:03:15,850 --> 00:03:17,838
На моем рабочем столе сейчас

81
00:03:17,838 --> 00:03:19,920
два файла: featuresX и priceY.

82
00:03:19,920 --> 00:03:21,689
Возможно, они связаны с задачей

83
00:03:21,689 --> 00:03:23,596
машинного обучения, которую я хочу решить.

84
00:03:23,620 --> 00:03:25,830
Итак, вот мой рабочий стол.

85
00:03:25,830 --> 00:03:29,144
Вот featuresX, это вот это

86
00:03:29,144 --> 00:03:31,598
окошко, то есть вот этот файл с двумя

87
00:03:31,630 --> 00:03:34,492
столбцами данных.

88
00:03:34,492 --> 00:03:36,702
На самом деле это данные о стоимости жиья.

89
00:03:36,750 --> 00:03:38,374
Кажется, в этом файле данных

90
00:03:38,374 --> 00:03:40,652
сорок семь строк.

91
00:03:40,652 --> 00:03:42,344
Первый дом имеет размер

92
00:03:42,350 --> 00:03:43,966
204 квадратных футов, у него 3 спальни.

93
00:03:43,970 --> 00:03:46,172
У второго

94
00:03:46,190 --> 00:03:47,367
дома 100 квадратных футов,

95
00:03:47,367 --> 00:03:49,862
3 спальни и так далее.

96
00:03:49,880 --> 00:03:52,302
В вот этом файле priceY

97
00:03:52,302 --> 00:03:55,020
хранятся цены для данных в

98
00:03:55,040 --> 00:03:57,575
моем примере.

99
00:03:57,575 --> 00:03:59,735
Итак, featuresX и priceY -

100
00:03:59,735 --> 00:04:03,061
просто текстовые файлы с моими данными.

101
00:04:03,061 --> 00:04:04,770
Как мне загрузить эти данные в Octave?

102
00:04:04,770 --> 00:04:06,050
Я просто набираю команды

103
00:04:06,090 --> 00:04:08,163
load featuresX.dat, load priceY.dat и

104
00:04:08,163 --> 00:04:10,069
этим загружаю

105
00:04:10,069 --> 00:04:11,991
файлы описаний и

106
00:04:11,991 --> 00:04:15,772
цен.

107
00:04:15,772 --> 00:04:17,323
Кстати, существует множество способов сделать это.

108
00:04:17,323 --> 00:04:19,245
Вот такая команда:

109
00:04:19,245 --> 00:04:20,916
загрузим featuresX.dat,

110
00:04:20,916 --> 00:04:22,533
преобразовав его в строку.

111
00:04:22,550 --> 00:04:25,477
Ой, тут опечатка.

112
00:04:25,490 --> 00:04:27,317
Это равноценная команда.

113
00:04:27,317 --> 00:04:29,334
Тем самым я прреобразую

114
00:04:29,360 --> 00:04:31,985
имя файла в строку.

115
00:04:32,000 --> 00:04:34,148
В Octave одиночные кавычки,

116
00:04:34,148 --> 00:04:35,716
вот такие,

117
00:04:35,716 --> 00:04:38,902
обозначают работу со

118
00:04:38,930 --> 00:04:41,876
строками.

119
00:04:41,910 --> 00:04:42,837
Итак, это строка, и мы

120
00:04:42,860 --> 00:04:45,517
можем загрузить файл, название

121
00:04:45,517 --> 00:04:48,324
которого указано в строке.

122
00:04:48,324 --> 00:04:50,919
Команда who показывает,

123
00:04:50,960 --> 00:04:52,538
какие переменные я использую в

124
00:04:52,538 --> 00:04:54,605
среде Octave.

125
00:04:54,605 --> 00:04:56,310
who показывает, какие переменные сейчас есть в

126
00:04:56,330 --> 00:04:59,952
памяти Octave.

127
00:04:59,952 --> 00:05:01,367
Среди них есть featuresX и

128
00:05:01,370 --> 00:05:02,991
priceY, а также переменные,

129
00:05:02,991 --> 00:05:04,120
которые создали до

130
00:05:04,170 --> 00:05:06,311
этого.

131
00:05:06,311 --> 00:05:09,198
Я могу набрать featuresX

132
00:05:09,198 --> 00:05:11,062
чтобы вывести файл featuresX. И вот они,

133
00:05:11,062 --> 00:05:14,164
мои данные.

134
00:05:14,200 --> 00:05:16,419
Набираю size(featuresX) и узнаю,

135
00:05:16,419 --> 00:05:18,022
что это

136
00:05:18,022 --> 00:05:20,519
матрица 47х2.

137
00:05:20,519 --> 00:05:22,307
Аналогично size(priceY), в

138
00:05:22,320 --> 00:05:23,729
результате -

139
00:05:23,729 --> 00:05:26,753
вектор 47х1.

140
00:05:26,753 --> 00:05:30,125
Это вектор диной в 47 позиций.

141
00:05:30,125 --> 00:05:32,080
Это вектор-столбец, содержащий цены

142
00:05:32,080 --> 00:05:35,231
для моего примера.

143
00:05:35,240 --> 00:05:37,584
Функция who показывает

144
00:05:37,600 --> 00:05:40,086
текущие переменные в среде Octave.

145
00:05:40,086 --> 00:05:42,195
Есть также функция whos,

146
00:05:42,195 --> 00:05:45,369
которая выводит больше подробностей.

147
00:05:45,369 --> 00:05:47,252
who с s на конце также

148
00:05:47,270 --> 00:05:48,574
перечисляет переменные,

149
00:05:48,574 --> 00:05:49,979
только теперь

150
00:05:49,979 --> 00:05:51,782
она показывает еще и их размеры.

151
00:05:51,790 --> 00:05:52,759
Так, А - матрица 3х2,

152
00:05:52,759 --> 00:05:54,764
featuresX -

153
00:05:54,764 --> 00:05:56,545
матрица 47х2.

154
00:05:56,545 --> 00:05:59,327
priceY - матрица 47х1.

155
00:05:59,327 --> 00:06:01,098
То есть это просто вектор.

156
00:06:01,130 --> 00:06:03,438
Еще тут показано, сколько байтов памяти занимает переменная.

157
00:06:03,438 --> 00:06:06,020
И к какому типу она относится.

158
00:06:06,020 --> 00:06:07,765
Double означает число с плавающей запятой.

159
00:06:07,765 --> 00:06:08,915
То есть эти переменные - вещественные, с

160
00:06:08,915 --> 00:06:13,148
плавающей запятой.

161
00:06:13,148 --> 00:06:14,190
Если вы хотите удалить

162
00:06:14,190 --> 00:06:17,316
переменную, используйте команду clear.

163
00:06:17,340 --> 00:06:21,124
Сделаем clear featuresX, и снова наберем whos.

164
00:06:21,130 --> 00:06:23,448
Обратите внимание, что

165
00:06:23,448 --> 00:06:26,465
переменная featuresX пропала.

166
00:06:27,270 --> 00:06:28,567
Как нам сохранять данные?

167
00:06:28,567 --> 00:06:29,221
Давайте посмотрим.

168
00:06:29,221 --> 00:06:30,411
Давайте переменной v

169
00:06:30,411 --> 00:06:33,075
присвоим значение priceY(1:10).

170
00:06:33,075 --> 00:06:34,826
Этим мы записываем в v

171
00:06:34,826 --> 00:06:38,574
первые 10 элементов вектора Y. Напишем

172
00:06:38,860 --> 00:06:43,215
who или whos.

173
00:06:43,220 --> 00:06:46,612
Y был вектором размера 47х1.

174
00:06:46,612 --> 00:06:48,474
v теперь имеет размер 10х1.

175
00:06:48,474 --> 00:06:50,809
Потому что мы присвоили

176
00:06:50,809 --> 00:06:52,451
v только первые

177
00:06:52,451 --> 00:06:53,520
десять

178
00:06:53,520 --> 00:06:55,705
значений из Y.

179
00:06:55,705 --> 00:06:57,398
Допустим, я хочу сохранить

180
00:06:57,398 --> 00:07:00,129
эти данные на

181
00:07:00,129 --> 00:07:02,302
диск командой "save hello.mat v".

182
00:07:02,310 --> 00:07:04,357
Этим я запишу

183
00:07:04,370 --> 00:07:05,690
данные из v в файл hello.mat.

184
00:07:05,720 --> 00:07:08,490
Давайте попробуем.

185
00:07:08,640 --> 00:07:10,965
И вот файл hello.mat

186
00:07:11,030 --> 00:07:13,181
появился на моем рабочем

187
00:07:13,181 --> 00:07:15,066
столе.

188
00:07:15,066 --> 00:07:16,509
На моем компьютере

189
00:07:16,530 --> 00:07:17,962
установлен MATLAB, и иконка выглядит

190
00:07:17,962 --> 00:07:19,711
именно так, потому что

191
00:07:19,711 --> 00:07:21,621
Windows решил, что это файл

192
00:07:21,621 --> 00:07:23,559
MATLAB. Так что

193
00:07:23,559 --> 00:07:24,882
не волнуйтесь, если на вашем

194
00:07:24,890 --> 00:07:26,051
компьютере у этого файла

195
00:07:26,051 --> 00:07:28,778
другая иконка.

196
00:07:28,778 --> 00:07:31,017
Давайте я удалю все свои переменные.

197
00:07:31,020 --> 00:07:32,602
Если написать просто clear,

198
00:07:32,602 --> 00:07:36,061
то команда очистит все переменные рабочей среды.

199
00:07:36,080 --> 00:07:39,078
Видно, что рабочее пространство опустело.

200
00:07:39,078 --> 00:07:41,856
Если я загружу hello.mat, то я

201
00:07:41,856 --> 00:07:44,388
снова смогу использовать

202
00:07:44,388 --> 00:07:46,054
переменную v, которую я

203
00:07:46,054 --> 00:07:47,830
предварительно сохранил

204
00:07:47,830 --> 00:07:51,035
в файле hello.mat.

205
00:07:51,035 --> 00:07:54,636
Итак, hello.mat. Наша команда, save hello.mat v,

206
00:07:54,636 --> 00:07:55,877
сохранила данные

207
00:07:55,877 --> 00:07:57,811
в двоичном

208
00:07:57,850 --> 00:07:59,702
формате, в сжатом виде.

209
00:07:59,702 --> 00:08:01,077
Если в v хранится много

210
00:08:01,077 --> 00:08:03,899
данных, они будут частично сжаты.

211
00:08:03,899 --> 00:08:05,645
Будет занимать меньше места.

212
00:08:05,650 --> 00:08:06,784
Если данные нужно сохранить в

213
00:08:06,784 --> 00:08:08,959
виде,

214
00:08:08,959 --> 00:08:11,870
понятном для человека,

215
00:08:11,870 --> 00:08:14,055
наберите "save hello.txt v -ascii".

216
00:08:14,110 --> 00:08:16,083
Данные сохранятся

217
00:08:16,083 --> 00:08:18,787
как текст в формате

218
00:08:18,840 --> 00:08:21,352
ASCII.

219
00:08:21,352 --> 00:08:22,802
После этого у меня появится

220
00:08:22,802 --> 00:08:24,973
этот файл.

221
00:08:24,973 --> 00:08:26,115
На рабочем столе появился

222
00:08:26,130 --> 00:08:28,463
файл hello.txt. Вы видите

223
00:08:28,463 --> 00:08:29,951
сохраненные данные

224
00:08:29,951 --> 00:08:31,016
в текстовом

225
00:08:31,016 --> 00:08:33,958
виде.

226
00:08:33,958 --> 00:08:36,698
Вот так можно загружать и сохранять данные.

227
00:08:36,698 --> 00:08:38,832
Давайте поговорим об обработке данных.

228
00:08:38,832 --> 00:08:40,526
Давайте снова зададим А,

229
00:08:40,526 --> 00:08:44,910
матрицу 3х2.

230
00:08:45,710 --> 00:08:46,778
Займемся индексированием.

231
00:08:46,778 --> 00:08:48,493
Набираем A(3,2).

232
00:08:48,493 --> 00:08:51,219
Это указатель

233
00:08:51,219 --> 00:08:52,917
на 3,2-й

234
00:08:52,917 --> 00:08:54,308
элемент матрицы А.

235
00:08:54,370 --> 00:08:56,320
Обычно это

236
00:08:56,400 --> 00:08:57,488
обозначается

237
00:08:57,510 --> 00:09:00,421
как A_3,2, что

238
00:09:00,430 --> 00:09:02,280
означает элемент третьей

239
00:09:03,570 --> 00:09:05,320
строки и

240
00:09:05,380 --> 00:09:07,028
второго столбца в А,

241
00:09:07,028 --> 00:09:08,664
который

242
00:09:08,664 --> 00:09:11,539
равен 6.

243
00:09:11,590 --> 00:09:13,820
Можно набрать А(2,:), чтобы

244
00:09:14,550 --> 00:09:16,770
получить все элементы

245
00:09:16,770 --> 00:09:18,851
второй строки.

246
00:09:18,851 --> 00:09:22,806
Двоеточие означает все элементы

247
00:09:22,810 --> 00:09:27,381
в этой строке или столбце.

248
00:09:27,420 --> 00:09:29,274
Итак, А(2,:) вернет вторую

249
00:09:29,274 --> 00:09:32,425
строку матрицы А.Правильно?

250
00:09:32,470 --> 00:09:35,662
Аналогично, А(:,2) означает

251
00:09:35,680 --> 00:09:38,262
все элементы второго

252
00:09:38,262 --> 00:09:41,328
столбца в А. Я получаю числа 2 4 6.

253
00:09:41,328 --> 00:09:42,921
Дословно это значит: "В А, всё

254
00:09:42,930 --> 00:09:45,467
из второго столбца".

255
00:09:45,500 --> 00:09:46,967
И я получаю второй

256
00:09:46,970 --> 00:09:49,636
столбец А, с элементами 2, 4, 6.

257
00:09:49,650 --> 00:09:51,267
Есть и более сложные

258
00:09:51,280 --> 00:09:54,148
операции индексирования.

259
00:09:54,148 --> 00:09:56,575
Я просто по-быстрому приведу пример.

260
00:09:56,575 --> 00:09:58,537
Это используется не так часто, но

261
00:09:58,550 --> 00:10:02,231
все равно. A([1 3], :)

262
00:10:02,231 --> 00:10:03,471
Это значит: выбрать все элементы А, у которых первый

263
00:10:03,500 --> 00:10:07,444
индекс равен 1 или 3.

264
00:10:07,450 --> 00:10:08,765
Сюда подпадают все элементы

265
00:10:08,765 --> 00:10:10,588
из первой

266
00:10:10,603 --> 00:10:12,780
и третьей строки

267
00:10:13,240 --> 00:10:13,240
в А.

268
00:10:14,163 --> 00:10:16,430
Итак, я указываю матрицу

269
00:10:16,800 --> 00:10:18,260
А, прошу вернуть

270
00:10:18,440 --> 00:10:21,872
мне элементы из

271
00:10:21,900 --> 00:10:23,222
первой и третьей

272
00:10:23,250 --> 00:10:25,023
строки. Двоеточие

273
00:10:25,023 --> 00:10:27,172
означает,

274
00:10:27,172 --> 00:10:28,313
что мне нужны элементы

275
00:10:28,313 --> 00:10:29,585
из всех столбцов.

276
00:10:29,585 --> 00:10:31,045
Я

277
00:10:31,045 --> 00:10:32,842
получаю 1, 2, 5, 6.

278
00:10:32,842 --> 00:10:34,353
Хотя такие операции

279
00:10:34,353 --> 00:10:37,182
требуются

280
00:10:37,182 --> 00:10:39,819
нечасто.

281
00:10:40,210 --> 00:10:41,453
Посмотрим, что еще можно сделать.

282
00:10:41,453 --> 00:10:43,617
Есть матрица А, и эта команда возвращает её

283
00:10:43,617 --> 00:10:47,276
второй столбец.

284
00:10:47,276 --> 00:10:49,773
Это может использоваться в операции присваивания.

285
00:10:49,773 --> 00:10:51,178
Я могу взять второй

286
00:10:51,190 --> 00:10:52,949
столбец в А и присвоить ему

287
00:10:52,950 --> 00:10:55,605
значения 10, 11, 12. Я просто беру

288
00:10:55,670 --> 00:10:58,084
А и записываю во

289
00:10:58,120 --> 00:10:59,220
второй столбец

290
00:10:59,290 --> 00:11:02,768
значения 10, 11, 12.

291
00:11:02,768 --> 00:11:05,440
Теперь А - матрица с элементами 1, 3, 5.

292
00:11:05,480 --> 00:11:08,760
А в второй столбец был заменен на 10, 11, 12.

293
00:11:08,760 --> 00:11:14,513
Вот еще одна операция.

294
00:11:14,680 --> 00:11:15,917
Это выражение

295
00:11:15,917 --> 00:11:17,738
добавит с

296
00:11:17,750 --> 00:11:21,605
правой стороны

297
00:11:21,605 --> 00:11:24,109
еще

298
00:11:24,120 --> 00:11:28,025
один

299
00:11:28,047 --> 00:11:29,855
столбец.

300
00:11:29,890 --> 00:11:33,230
Итак, ой.

301
00:11:33,260 --> 00:11:36,798
Кажется, тут ошибка.

302
00:11:36,800 --> 00:11:41,065
Там должны быть точки с

303
00:11:41,700 --> 00:11:43,910
запятой. Теперь А выглядит так.

304
00:11:43,910 --> 00:11:44,564
Понятно?

305
00:11:44,564 --> 00:11:45,479
Надеюсь, что да.

306
00:11:45,479 --> 00:11:46,480
Это элементы 100, 101, 102.

307
00:11:46,480 --> 00:11:48,804
Это вектор-столбец. По

308
00:11:48,820 --> 00:11:51,668
сути, мы присвоили А

309
00:11:51,668 --> 00:11:53,386
предыдущее

310
00:11:53,386 --> 00:11:56,156
значение А.

311
00:11:56,156 --> 00:11:57,368
А потом добавили справа

312
00:11:57,380 --> 00:11:59,192
вектор-столбец. Мы

313
00:11:59,192 --> 00:12:00,217
составили новую матрицу

314
00:12:00,217 --> 00:12:04,288
из А, вот этих

315
00:12:04,288 --> 00:12:05,405
шести элементов слева.

316
00:12:05,405 --> 00:12:06,785
Мы взяли А и

317
00:12:06,810 --> 00:12:08,564
присоединили справа еще один

318
00:12:08,564 --> 00:12:09,793
столбец. Вот

319
00:12:09,793 --> 00:12:11,814
почему А стала вот

320
00:12:11,814 --> 00:12:16,083
такой матрицей 3х3.

321
00:12:16,200 --> 00:12:18,005
Наконец, еще один удобный

322
00:12:18,010 --> 00:12:19,802
прием, который я иногда

323
00:12:19,810 --> 00:12:22,022
использую.

324
00:12:22,022 --> 00:12:25,585
Это синтаксис для особых случаев.

325
00:12:25,590 --> 00:12:28,695
Эта команда выстраивает все элементы А в

326
00:12:28,695 --> 00:12:30,751
один столбец, и я получаю

327
00:12:30,850 --> 00:12:34,513
вектор 9х1.

328
00:12:34,513 --> 00:12:38,584
Все элементы А просто слились в один столбец.

329
00:12:39,700 --> 00:12:45,258
Ну и еще пара примеров.Например.

330
00:12:45,300 --> 00:12:52,073
Давайте я снова присвою А эти значения.

331
00:12:52,181 --> 00:12:54,035
И также присвою

332
00:12:54,060 --> 00:12:55,674
В

333
00:12:55,680 --> 00:12:58,984
следующие значения.

334
00:12:58,984 --> 00:13:00,346
Я могу создать новую

335
00:13:00,346 --> 00:13:03,161
матрицу С командо C=[A B].

336
00:13:03,200 --> 00:13:05,010
Вот моя

337
00:13:05,080 --> 00:13:06,666
матрица А. Вот матрица В.

338
00:13:06,666 --> 00:13:08,426
Теперь я создаю

339
00:13:08,426 --> 00:13:11,053
С из А и В.

340
00:13:11,070 --> 00:13:12,225
Я просто беру эти две матрицы

341
00:13:12,225 --> 00:13:15,438
и соединяю их.

342
00:13:15,438 --> 00:13:18,408
Слева стоит матрица А.

343
00:13:18,420 --> 00:13:20,786
А справа стоит матрица В.

344
00:13:20,800 --> 00:13:23,738
Я объединил их и получил

345
00:13:23,830 --> 00:13:27,145
матрицу С.

346
00:13:27,145 --> 00:13:28,927
Можно сделать и так: C=[A; B].

347
00:13:28,927 --> 00:13:31,975
Точка с запятой

348
00:13:32,000 --> 00:13:35,552
означает, что вторая матрица

349
00:13:35,552 --> 00:13:38,881
добавляется снизу.

350
00:13:38,881 --> 00:13:39,880
Выражение C=[A; B]

351
00:13:39,910 --> 00:13:41,169
также соединяет

352
00:13:41,170 --> 00:13:42,408
матрицы А и В, только теперь

353
00:13:42,460 --> 00:13:44,048
они расположены

354
00:13:44,048 --> 00:13:46,408
друг над другом.

355
00:13:46,408 --> 00:13:49,675
Матрица А сверху, В снизу, а

356
00:13:49,675 --> 00:13:52,038
матрица С имеет размер 6х2.

357
00:13:52,038 --> 00:13:54,263
То есть обычно точка с запятой означает переход на следующую

358
00:13:54,270 --> 00:13:56,705
строку.

359
00:13:56,705 --> 00:13:58,463
С образуется так: берем А,

360
00:13:58,463 --> 00:13:59,598
переходим на

361
00:13:59,598 --> 00:14:00,610
строку вниз, добавляем В. Кстати,

362
00:14:00,690 --> 00:14:02,320
выражение [A B] равносильно [A, B]. Есть

363
00:14:02,390 --> 00:14:04,225
запятая или нет, результат

364
00:14:04,225 --> 00:14:05,734
будет

365
00:14:05,750 --> 00:14:09,106
одинаков.

366
00:14:10,310 --> 00:14:11,916
Думаю, теперь вы

367
00:14:11,916 --> 00:14:14,256
представляете себе работу с

368
00:14:14,260 --> 00:14:17,207
матрицами. Вы

369
00:14:17,207 --> 00:14:18,223
видели команды

370
00:14:18,223 --> 00:14:19,822
для объединения матриц, для

371
00:14:19,850 --> 00:14:21,913
создания матриц большего

372
00:14:21,940 --> 00:14:23,390
размера. Вам нужно

373
00:14:23,390 --> 00:14:24,984
всего пара строк кода.

374
00:14:25,000 --> 00:14:27,009
В Octave можно очень

375
00:14:27,009 --> 00:14:28,962
быстро и удобно

376
00:14:28,962 --> 00:14:30,770
обрабатывать

377
00:14:30,770 --> 00:14:32,683
данные и

378
00:14:32,683 --> 00:14:36,033
сложные матрицы.

379
00:14:36,050 --> 00:14:38,027
Вот так можно обрабатывать данные.

380
00:14:38,027 --> 00:14:39,347
В следующем видео мы поговорим

381
00:14:39,347 --> 00:14:40,783
о том, как выполняются более

382
00:14:40,860 --> 00:14:46,232
сложные операции с данными.

383
00:14:46,830 --> 00:14:48,256
Надеюсь, теперь вы

384
00:14:48,256 --> 00:14:49,961
понимаете, как с помощью

385
00:14:49,961 --> 00:14:51,049
простых команд

386
00:14:51,049 --> 00:14:54,573
можно обрабатывать данные в Octave.

387
00:14:54,590 --> 00:14:56,164
Загружать и сохранять векторы

388
00:14:56,180 --> 00:14:58,059
и матрицы,

389
00:14:58,090 --> 00:15:00,201
загружать и сохранять данные,

390
00:15:00,201 --> 00:15:02,990
объединять матрицы, индексировать их и

391
00:15:02,990 --> 00:15:05,021
выбирать отдельные элементы.Знаю, я рассмотрел много команд.

392
00:15:05,021 --> 00:15:06,015
Было бы неплохо,

393
00:15:06,015 --> 00:15:06,944
если бы вы после этого

394
00:15:06,980 --> 00:15:08,244
изучили файл с записями команд,

395
00:15:08,244 --> 00:15:09,741
которые я

396
00:15:09,741 --> 00:15:12,248
писал.

397
00:15:12,248 --> 00:15:13,286
Изучите его.

398
00:15:13,286 --> 00:15:14,661
Зайдите на сайт курса и скачайте

399
00:15:14,661 --> 00:15:15,927
логи этого видео.

400
00:15:15,950 --> 00:15:17,479
Просмотрите его, самостоятельно

401
00:15:17,479 --> 00:15:18,820
наберите в Octave некоторые

402
00:15:18,820 --> 00:15:21,942
команды, поиграйте

403
00:15:21,942 --> 00:15:24,752
ими, чтобы понять, как они работают.

404
00:15:24,752 --> 00:15:28,113
Понятно, что не обязательно пытаться запомнить все эти команды.

405
00:15:28,113 --> 00:15:30,030
Но из этого видео вы должны

406
00:15:30,030 --> 00:15:31,852
были осознать, какие

407
00:15:31,852 --> 00:15:32,910
возможности

408
00:15:32,910 --> 00:15:35,065
вам даются.

409
00:15:35,100 --> 00:15:36,519
Когда вы позже

410
00:15:36,520 --> 00:15:37,902
будете

411
00:15:37,902 --> 00:15:39,630
писать собственные

412
00:15:39,630 --> 00:15:40,921
обучающиеся алгоритмы и захотите

413
00:15:40,930 --> 00:15:42,455
найти какую-нибудь команду,

414
00:15:42,455 --> 00:15:43,878
которую вроде бы видели в этом

415
00:15:43,878 --> 00:15:45,325
видео, откройте

416
00:15:45,325 --> 00:15:47,300
файл с записью

417
00:15:47,300 --> 00:15:48,545
лекции и поищите

418
00:15:48,560 --> 00:15:51,693
команду там.

419
00:15:51,693 --> 00:15:53,069
машинном обучении это не

420
00:15:53,069 --> 00:15:54,841
загрузкой данных.

421
00:15:54,841 --> 00:15:56,060
В следующем

422
00:15:56,120 --> 00:15:57,699
видео я расскажу о

423
00:15:57,740 --> 00:15:59,257
более продвинутой обработке

424
00:15:59,257 --> 00:16:01,404
данных, о

425
00:16:01,410 --> 00:16:03,548
вычислениях, наконец, о

426
00:16:03,550 --> 00:16:04,866
реализации

427
00:16:04,866 --> 00:16:06,560
обучающихся алгоритмов.