1
00:00:00,320 --> 00:00:03,682
En este video, me gustaría hablarte sobre la idea de vectorización.

2
00:00:03,682 --> 00:00:08,380
Entonces, ya sea que estés usando Octave

3
00:00:08,380 --> 00:00:12,540
o un lenguaje similar como MATLAB,

4
00:00:12,540 --> 00:00:17,470
o si estás usando Python

5
00:00:17,470 --> 00:00:21,840
y NumPy o Java, C, C++.

6
00:00:21,840 --> 00:00:24,400
Todos estos lenguajes tienen integrado

7
00:00:24,400 --> 00:00:29,250
o tienen a la mano

8
00:00:29,250 --> 00:00:32,070
diferentes

9
00:00:32,070 --> 00:00:35,590
librerías numéricas de álgebra lineal.

10
00:00:35,590 --> 00:00:39,880
Generalmente están muy bien escritas,

11
00:00:39,880 --> 00:00:44,510
altamente optimizadas y, a menudo, han sido desarrolladas por

12
00:00:44,510 --> 00:00:48,470
personas que, ya sabes, tienen doctorados en computación numérica o

13
00:00:48,470 --> 00:00:51,970
que realmente se han especializado en computación numérica.

14
00:00:51,970 --> 00:00:53,170
Y cuando estás implementando algoritmos

15
00:00:53,170 --> 00:00:58,120
de aprendizaje automático, si puedes

16
00:00:58,120 --> 00:01:03,080
aprovechar estas

17
00:01:03,080 --> 00:01:07,330
librerías de álgebra lineal o de estas

18
00:01:07,330 --> 00:01:08,540
librerías numéricas de álgebra lineal y

19
00:01:08,540 --> 00:01:13,450
combinar las llamadas de rutina para ellas

20
00:01:13,450 --> 00:01:18,170
en lugar de llamarlas tú

21
00:01:18,170 --> 00:01:22,220
mismo para hacer cosas que esas librerías podrían estar haciendo.

22
00:01:22,220 --> 00:01:26,090
Si haces eso, entonces,

23
00:01:26,090 --> 00:01:30,310
con frecuencia, llegas a la conclusión de que, primero, es más eficiente.

24
00:01:30,310 --> 00:01:31,470
O sea, sencillamente se ejecuta más rápido y

25
00:01:33,090 --> 00:01:36,110
aprovecha mejor

26
00:01:36,110 --> 00:01:40,010
cualquier hardware paralelo que tu

27
00:01:40,010 --> 00:01:46,660
computadora pueda tener, y así.

28
00:01:46,660 --> 00:01:51,920
Y, segundo, también significa

29
00:01:51,920 --> 00:01:56,330
que terminarás con menos código del que necesitas escribir.

30
00:01:56,330 --> 00:02:03,220
Y también tiene una implementación más simple,

31
00:02:03,220 --> 00:02:07,221
es decir, que probablemente tenga menos errores.

32
00:02:07,221 --> 00:02:11,632
Y como ejemplo concreto,

33
00:02:11,632 --> 00:02:17,590
en lugar de escribir el código

34
00:02:17,590 --> 00:02:18,820
tú mismo para multiplicar matrices, si

35
00:02:18,820 --> 00:02:23,623
dejas que Octave lo haga ingresando

36
00:02:23,623 --> 00:02:25,360
a por b,

37
00:02:25,360 --> 00:02:30,160
usará una rutina muy eficiente

38
00:02:30,160 --> 00:02:36,057
para multiplicar las 2 matrices.

39
00:02:36,057 --> 00:02:42,320
Y hay un montón de ejemplos como

40
00:02:42,320 --> 00:02:44,740
cuando usas las implementaciones vectorizadas apropiadas.

41
00:02:44,740 --> 00:02:45,736
Obtienes un código mucho más simple y mucho más eficiente.

42
00:02:45,736 --> 00:02:51,100
Veamos algunos ejemplos.

43
00:02:51,100 --> 00:02:53,270
Aquí hay una hipótesis usual de

44
00:02:53,270 --> 00:02:58,543
regresión lineal, y si

45
00:02:58,543 --> 00:03:03,557
quisieras calcular H de

46
00:03:03,557 --> 00:03:08,570
X, nota que hay una suma a la derecha,.

47
00:03:08,570 --> 00:03:13,411
Y una cosa que podrías

48
00:03:13,411 --> 00:03:18,620
hacer es calcular

49
00:03:18,620 --> 00:03:25,480
tu mismo la suma de J igual a 0 a J igual a N.

50
00:03:25,480 --> 00:03:30,286
Otra form de ver esto

51
00:03:30,286 --> 00:03:33,940
es ver H

52
00:03:33,940 --> 00:03:39,251
de X como «theta» transpuesta de X,

53
00:03:39,251 --> 00:03:43,290
y lo que puedes hacer es

54
00:03:43,290 --> 00:03:46,620
pensar en esto como, ya sabes, calcular esto

55
00:03:46,620 --> 00:03:48,150
en un producto entre 2 vectores

56
00:03:48,150 --> 00:03:52,077
en donde «theta» es, ya sabes, tu

57
00:03:52,077 --> 00:03:54,620
vector, digamos, «theta» 0, «theta» 1,

58
00:03:54,620 --> 00:03:57,764
«theta» 2, si tienes 2 variables.

59
00:03:57,764 --> 00:04:02,604
Si N igual a 2 y si

60
00:04:02,604 --> 00:04:07,823
piensas en X como este

61
00:04:07,823 --> 00:04:13,250
vector X0, X1, X2

62
00:04:15,850 --> 00:04:17,590
y estas 2 visualizaciones pueden

63
00:04:17,590 --> 00:04:22,080
darte 2 diferentes implementaciones.

64
00:04:22,080 --> 00:04:24,740
Esto es lo que quiero decir.

65
00:04:24,740 --> 00:04:27,820
Aquí hay una implementación no vectorizada para

66
00:04:27,820 --> 00:04:31,468
cómo calcular H de

67
00:04:31,468 --> 00:04:35,650
X sin una vectorización, quiero decir, sin vectores.

68
00:04:35,650 --> 00:04:40,598
Primero podemos inicializar, ya sabes, que la predicción sea 0.0.

69
00:04:40,598 --> 00:04:42,620
Esto, eventualmente, va a ser

70
00:04:42,620 --> 00:04:47,720
voy a hacer un ciclo for para

71
00:04:47,720 --> 00:04:50,950
H de X, y luego

72
00:04:54,410 --> 00:04:59,000
voy a hacer un ciclo for para

73
00:04:59,000 --> 00:05:02,500
J igual a 1 hasta n+1.

74
00:05:02,500 --> 00:05:06,540
La predicción se incrementa en

75
00:05:06,540 --> 00:05:11,230
«theta» J veces XJ.

76
00:05:11,230 --> 00:05:17,540
Entonces, es como esta expresión aquí.,

77
00:05:17,540 --> 00:05:22,270
Por cierto, debo mencionar que en

78
00:05:22,270 --> 00:05:26,380
estos vectores de aquí,

79
00:05:26,380 --> 00:05:30,390
estos vectores comenzaron con el índice 0.

80
00:05:30,390 --> 00:05:32,880
Entonces, si tengo «theta» 0 «theta» 1,

81
00:05:32,880 --> 00:05:35,800
«theta» 2, dado que MATLAB

82
00:05:35,800 --> 00:05:39,290
es un índice, «theta» 0

83
00:05:40,660 --> 00:05:43,590
en MATLAB, podríamos

84
00:05:43,590 --> 00:05:45,840
terminar representando como «theta»

85
00:05:45,840 --> 00:05:48,260
1 y este segundo elemento

86
00:05:48,260 --> 00:05:55,070
termina siendo «theta»

87
00:05:55,070 --> 00:05:59,575
2 y este tercer elemento

88
00:05:59,575 --> 00:06:03,410
puede terminar siendo «theta»

89
00:06:03,410 --> 00:06:08,377
3 sólo porque los vectores

90
00:06:08,377 --> 00:06:13,230
en MATLAB están indexados comenzando

91
00:06:14,850 --> 00:06:19,580
desde 1, aunque nuestro

92
00:06:20,754 --> 00:06:24,120
«theta» y X reales comiencen a ser

93
00:06:24,120 --> 00:06:28,110
indexados desde 0, y es

94
00:06:28,110 --> 00:06:35,500
por eso que tengo un ciclo for

95
00:06:35,500 --> 00:06:39,570
J que va desde 1 hasta n+1

96
00:06:39,570 --> 00:06:43,830
en lugar de J hasta

97
00:06:43,830 --> 00:06:48,540
0 hasta n, ¿cierto? Pero

98
00:06:48,540 --> 00:06:50,070
entonces, esta es

99
00:06:50,070 --> 00:06:54,220
una implementación no vectorizada en la que

100
00:06:54,220 --> 00:06:55,500
tenemos un ciclo for para la sumatoria

101
00:06:55,500 --> 00:06:58,538
de los n elementos de la suma.

102
00:06:58,538 --> 00:07:03,458
En contraste, así es como se

103
00:07:03,458 --> 00:07:08,090
escribe una implementación vectorizada, que es

104
00:07:08,090 --> 00:07:12,723
en la que podrías pensar

105
00:07:12,723 --> 00:07:18,511
en X de «theta»

106
00:07:18,511 --> 00:07:21,740
como vectores, y sólo se

107
00:07:21,740 --> 00:07:28,100
establece que la predicción es igual a «theta» transpuesta

108
00:07:28,100 --> 00:07:29,840
por X. Sólo estás calculando así.

109
00:07:31,310 --> 00:07:34,920
En lugar de escribir todas estas

110
00:07:34,920 --> 00:07:38,170
líneas de código para el ciclo for,

111
00:07:38,170 --> 00:07:43,610
sólo tienes una línea

112
00:07:43,610 --> 00:07:50,080
de código, y lo que esta

113
00:07:50,080 --> 00:07:54,920
línea de código en la derecha,

114
00:07:54,920 --> 00:07:58,380
hará, será usar

115
00:07:58,380 --> 00:08:04,270
las altamente optimizadas

116
00:08:04,270 --> 00:08:06,580
rutinas algebraicas de Octave para calcular

117
00:08:06,580 --> 00:08:10,959
su producto interior entre los

118
00:08:10,959 --> 00:08:17,040
dos vectores, «theta» y X.
Y la implementación

119
00:08:17,040 --> 00:08:22,066
vectorizada no es sólo más

120
00:08:22,066 --> 00:08:27,570
simple, sino que también se ejecutará más eficientemente.

121
00:08:27,570 --> 00:08:32,203
Entonces, eso fue Octave, pero

122
00:08:32,203 --> 00:08:37,288
el problema de la vectorización aplica a

123
00:08:37,288 --> 00:08:42,730
otros lenguajes de programación también.

124
00:08:42,730 --> 00:08:48,621
Veamos un ejemplo en C++.

125
00:08:48,621 --> 00:08:53,964
Así es como se podría ver una implementación no vectorizada.

126
00:08:53,964 --> 00:08:58,360
Nuevamente, inicializamos la predicción, ya sabes, para

127
00:08:58,360 --> 00:09:01,352
0.0 y ahora tenemos un

128
00:09:01,352 --> 00:09:04,010
ciclo for completo para J0 hasta

129
00:09:04,010 --> 00:09:09,930
N.  Predicción + es igual

130
00:09:09,930 --> 00:09:15,782
a «theta» K veces XJ, en donde,

131
00:09:15,782 --> 00:09:19,772
nuevamente, tienes este x+ para el ciclo for que escribiste tú mismo.

132
00:09:19,772 --> 00:09:24,427
En contraste, usando una buena

133
00:09:24,427 --> 00:09:29,481
librería numérica de álgebra lineal en

134
00:09:29,481 --> 00:09:34,136
C++, te podría servir

135
00:09:34,136 --> 00:09:38,150
escribir la función o, en cambio,

136
00:09:38,150 --> 00:09:44,142
En contraste, usando una buena

137
00:09:44,142 --> 00:09:49,504
librería numérica de álgebra lineal en

138
00:09:49,504 --> 00:09:54,707
C++, puedes

139
00:09:54,707 --> 00:10:00,700
escribir código que puede verse así.

140
00:10:00,700 --> 00:10:06,080
Entonces, dependiendo de los detalles

141
00:10:06,080 --> 00:10:10,041
de tu librería numérica de álgebra

142
00:10:10,041 --> 00:10:15,100
lineal, puedes ser capaz de

143
00:10:15,100 --> 00:10:19,990
tener un objeto que sea

144
00:10:19,990 --> 00:10:23,760
un objeto de C++, que es

145
00:10:23,760 --> 00:10:30,680
vector «theta» y un objeto C++

146
00:10:30,680 --> 00:10:34,760
que es un vector X,

147
00:10:34,760 --> 00:10:36,470
y sólo tomas el «theta»q punto transpuesto

148
00:10:36,470 --> 00:10:40,530
por X en donde

149
00:10:40,530 --> 00:10:42,940
esta multiplicación se vuelve C++ para

150
00:10:42,940 --> 00:10:49,740
sobrecargar al operador, de forma

151
00:10:49,740 --> 00:10:54,370
que puedes sólo multiplicar estos vectores en C++.

152
00:10:54,370 --> 00:10:59,213
Y, dependiendo de, ya sabes, los detalles

153
00:10:59,213 --> 00:11:04,244
de tu librería numérica de álgebra lineal,

154
00:11:04,244 --> 00:11:09,739
puedes terminar usando

155
00:11:09,739 --> 00:11:14,580
una sintaxis ligeramente diferente,

156
00:11:14,580 --> 00:11:20,670
pero dependiendo de

157
00:11:22,240 --> 00:11:27,592
una librería para hacer esto en un producto.

158
00:11:27,592 --> 00:11:32,800
Puedes obtener una pieza mucho más

159
00:11:32,800 --> 00:11:35,920
simple de código y mucho más eficiente.

160
00:11:35,920 --> 00:11:41,050
Ahora veamos un ejemplo más sofisticado.

161
00:11:41,050 --> 00:11:44,610
Sólo como recordatorio, aquí está nuestra

162
00:11:44,610 --> 00:11:46,670
regla e actualización para el gradiente de descenso

163
00:11:47,980 --> 00:11:51,940
para una regresión lineal y, así,

164
00:11:51,940 --> 00:11:57,010
actualizamos «theta» J usando esta

165
00:11:57,010 --> 00:12:02,590
regla para todos los valores de j Igual a 0, 1, 2 y así sucesivamente.

166
00:12:02,590 --> 00:12:08,435
Y si sólo escribo

167
00:12:08,435 --> 00:12:12,870
estas ecuaciones para

168
00:12:12,870 --> 00:12:18,430
«theta» 0, «theta» 1, «theta» 2.

169
00:12:18,430 --> 00:12:21,960
Asumiendo que tengo dos variables.

170
00:12:21,960 --> 00:12:26,560
Entonces N es igual a 2.

171
00:12:26,560 --> 00:12:31,420
Entonces estas son las actualizaciones que

172
00:12:31,420 --> 00:12:36,000
realizamos a «theta» 0, «theta» 1, «theta» 2,

173
00:12:37,010 --> 00:12:41,630
y puedes recordar lo que

174
00:12:41,630 --> 00:12:44,030
dije en un video anterior,

175
00:12:44,030 --> 00:12:47,230
sobre que estas deberían ser actualizaciones simultáneas.

176
00:12:47,230 --> 00:12:50,620
Entonces, veamos si

177
00:12:50,620 --> 00:12:53,839
podemos desarrollar una implementación

178
00:12:53,839 --> 00:12:58,610
vectorizada de esto.

179
00:12:58,610 --> 00:13:03,142
Aquí están mis mismas 3 ecuaciones escritas

180
00:13:03,142 --> 00:13:08,710
en una fuente ligeramente más pequeña y

181
00:13:08,710 --> 00:13:13,210
puedes imaginar que 1 espera

182
00:13:13,210 --> 00:13:17,915
para implementar estas tres líneas

183
00:13:17,915 --> 00:13:19,650
de código, es para tener un

184
00:13:19,650 --> 00:13:23,140
ciclo for que diga, ya sabes,

185
00:13:23,140 --> 00:13:27,465
J igual a 0,

186
00:13:27,465 --> 00:13:31,500
1 hasta 2, la actualización

187
00:13:31,500 --> 00:13:34,220
«theta» J o algo parecido.

188
00:13:34,220 --> 00:13:37,860
Pero, en cambio, vamos a desarrollar

189
00:13:37,860 --> 00:13:41,820
una implementación vectorizada y veamos si encontramos una forma más simple.

190
00:13:41,820 --> 00:13:45,110
Entonces, básicamente hay que comprimir estas

191
00:13:45,110 --> 00:13:47,700
tres líneas de código, o un