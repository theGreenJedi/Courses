1
00:00:00,090 --> 00:00:02,346
Вы уже кое-что узнали о машинном обучении.

2
00:00:02,390 --> 00:00:03,635
В этом видео я расскажу

3
00:00:03,635 --> 00:00:05,448
вам о языке программирования Octave.

4
00:00:05,470 --> 00:00:06,718
С ним вы сможете быстро

5
00:00:06,760 --> 00:00:08,878
реализовывать алгоритмы обучения,

6
00:00:08,890 --> 00:00:10,259
которые мы уже изучили и которые

7
00:00:10,259 --> 00:00:11,770
изучим в

8
00:00:11,770 --> 00:00:14,872
дальнейшем.

9
00:00:14,900 --> 00:00:16,381
Раньше я пытался

10
00:00:16,381 --> 00:00:19,497
преподавать с

11
00:00:19,500 --> 00:00:22,046
использованием многих

12
00:00:22,825 --> 00:00:25,379
языков программирования,

13
00:00:25,379 --> 00:00:27,128
таких как C++, Java, Python, NumPy и Octave.

14
00:00:27,160 --> 00:00:28,783
Я пришел к выводу,

15
00:00:28,790 --> 00:00:30,535
что студенты обучаются более

16
00:00:30,570 --> 00:00:32,497
быстро и продуктивно при

17
00:00:32,497 --> 00:00:33,780
использовании

18
00:00:33,780 --> 00:00:35,569
высокоуровневых языков

19
00:00:35,569 --> 00:00:38,262
вроде Octave.

20
00:00:38,290 --> 00:00:39,798
Фактически, что я часто вижу в

21
00:00:39,798 --> 00:00:41,516
Кремниевой долине это то, что даже

22
00:00:41,520 --> 00:00:43,655
если вам нужно создать.

23
00:00:43,655 --> 00:00:44,714
Если вам нужно создать крупную систему с

24
00:00:44,740 --> 00:00:46,548
применением машинного обучения, то

25
00:00:46,610 --> 00:00:48,242
люди часто используют Octave для

26
00:00:48,242 --> 00:00:50,637
прототипирования.

27
00:00:50,660 --> 00:00:52,200
Это один из лучших языков для прототипирования.

28
00:00:52,210 --> 00:00:55,264
И поэтому вы можете довольно быстро довести ваши обучающиеся алгоритмы до рабочего состояния.

29
00:00:55,270 --> 00:00:56,629
И после, если вам нужно применять их в

30
00:00:56,629 --> 00:00:58,459
крупных системах

31
00:00:58,480 --> 00:01:00,362
Только тогда вы можете потратить время чтоб

32
00:01:00,362 --> 00:01:03,059
переделать алгоритм на C++, Java, или что вы там

33
00:01:03,059 --> 00:01:05,150
любите.

34
00:01:05,160 --> 00:01:06,273
Поскольку мы уже выяснили, что время, которое вы

35
00:01:06,300 --> 00:01:08,679
отводите на разработку, программирование -

36
00:01:08,710 --> 00:01:09,848
Это – ваше время.

37
00:01:09,870 --> 00:01:13,309
Время в машинном обучении невероятно ценно.

38
00:01:13,320 --> 00:01:15,101
И если вы можете ускорить работу

39
00:01:15,101 --> 00:01:17,898
своих обучающих алгоритмов в Octave.

40
00:01:17,898 --> 00:01:18,932
Тогда вы сэкономите много

41
00:01:18,932 --> 00:01:20,697
времени, если сначала

42
00:01:20,720 --> 00:01:22,143
разработаете алгоритм на Octave, а потом

43
00:01:22,150 --> 00:01:23,971
ту же рабочую идею

44
00:01:23,971 --> 00:01:28,145
воплотите на C++ или Java.

45
00:01:28,160 --> 00:01:30,238
Самые распространенные языки прототипирования,

46
00:01:30,238 --> 00:01:31,538
которыми люди пользуются для

47
00:01:31,560 --> 00:01:34,058
машинного обучения: Octave, MATLAB, Python,

48
00:01:34,070 --> 00:01:37,230
NumPy и Р. Octave - хороший язык, так

49
00:01:38,150 --> 00:01:40,032
как у него открытый код.

50
00:01:40,032 --> 00:01:42,660
MATLAB тоже отлично

51
00:01:42,670 --> 00:01:44,656
работает, но он слишком

52
00:01:44,656 --> 00:01:45,956
дорогой для многих.

53
00:01:45,960 --> 00:01:47,972
Но если у вас есть доступ к MATLAB,

54
00:01:47,988 --> 00:01:50,095
то в этом курсе вы можете использовать и его.

55
00:01:50,110 --> 00:01:52,037
То же касается языков Python, NumPy, R. Я знаю,

56
00:01:52,037 --> 00:01:54,853
что некоторые люди используют их.

57
00:01:54,870 --> 00:01:56,353
Но я замечал, что

58
00:01:56,360 --> 00:01:57,739
на этих языках

59
00:01:57,760 --> 00:02:00,041
люди программируют

60
00:02:00,050 --> 00:02:02,121
медленнее.

61
00:02:02,121 --> 00:02:04,048
Потому что у Python и NumPy синтаксис немного

62
00:02:04,048 --> 00:02:08,391
сложнее, чем у Octave.

63
00:02:08,410 --> 00:02:09,704
Поэтому и потому, что мы

64
00:02:09,704 --> 00:02:11,372
публикуем код на языке

65
00:02:11,380 --> 00:02:13,039
Ocatve,

66
00:02:13,039 --> 00:02:14,363
Я категорически не советую вам

67
00:02:14,363 --> 00:02:18,321
выполнять упражнения этого

68
00:02:18,330 --> 00:02:19,805
курса на NumPy или R. Я

69
00:02:19,805 --> 00:02:21,498
рекомендую

70
00:02:21,520 --> 00:02:24,292
использовать Octave.

71
00:02:24,330 --> 00:02:25,428
В этом видео я быстро

72
00:02:25,428 --> 00:02:26,708
пройдусь по списку

73
00:02:26,708 --> 00:02:28,667
команд, чтобы продемонстрировать

74
00:02:28,667 --> 00:02:29,879
их многообразие и

75
00:02:29,879 --> 00:02:31,073
различные возможности

76
00:02:31,080 --> 00:02:34,807
Octave.

77
00:02:34,807 --> 00:02:36,493
На сайте

78
00:02:36,520 --> 00:02:38,965
курса есть документ с

79
00:02:38,965 --> 00:02:42,095
записью моих действий, и

80
00:02:42,095 --> 00:02:43,185
после просмотра видео вы

81
00:02:43,185 --> 00:02:44,905
можете обратиться к этой записи, если

82
00:02:44,905 --> 00:02:46,635
хотите найти какую-нибудь

83
00:02:46,635 --> 00:02:48,247
команду.

84
00:02:48,247 --> 00:02:50,226
Я рекомендую вам сначала

85
00:02:50,226 --> 00:02:53,225
просмотреть видеолекции.

86
00:02:53,230 --> 00:02:55,118
После этого установить

87
00:02:55,120 --> 00:02:58,728
Octave на ваш компьютер.

88
00:02:58,728 --> 00:02:59,738
Наконец,

89
00:02:59,738 --> 00:03:01,769
зайти на

90
00:03:01,770 --> 00:03:02,983
страницу этого курса,

91
00:03:02,983 --> 00:03:04,915
скачать файлы с

92
00:03:04,930 --> 00:03:07,162
описаниями, и

93
00:03:07,200 --> 00:03:09,132
самостоятельно запустить

94
00:03:09,132 --> 00:03:10,602
заинтересовавшие вас команды в

95
00:03:10,602 --> 00:03:12,962
Octave.

96
00:03:12,970 --> 00:03:15,535
Итак, давайте начнем.

97
00:03:15,920 --> 00:03:19,363
Вот мой компьютер с ОС Windows, и я собираюсь запустить Octave.

98
00:03:19,370 --> 00:03:20,977
Итак, я зашел в Octave.

99
00:03:20,977 --> 00:03:22,522
Вы видите приглашение на ввод команды в Octave.

100
00:03:22,522 --> 00:03:24,475
Сначала я покажу простейшие операции, которые вы

101
00:03:24,475 --> 00:03:27,291
можете выполнять в Octave.

102
00:03:27,330 --> 00:03:28,505
Печатаете 5 + 6.

103
00:03:28,505 --> 00:03:30,493
В результате получаете 11.

104
00:03:30,493 --> 00:03:31,516
3 - 2.

105
00:03:31,540 --> 00:03:33,710
5 * 8. 1 / 2. 2 ^ 6,

106
00:03:35,733 --> 00:03:37,747
это 64.

107
00:03:37,810 --> 00:03:42,361
Это элементарные математические операции.

108
00:03:42,390 --> 00:03:44,495
Вы также можете выполнять логические операции.

109
00:03:44,550 --> 00:03:45,929
Пусть один равняется двум.

110
00:03:45,929 --> 00:03:47,722
Результат операции: "ложь".

111
00:03:47,722 --> 00:03:51,658
Знак процента вот здесь означает начало комментария.

112
00:03:51,658 --> 00:03:53,861
Итак, единица равна двойке, результат ложный.

113
00:03:53,861 --> 00:03:55,622
Он представлен нулем.

114
00:03:55,650 --> 00:03:58,028
"Один не равно двум".

115
00:03:58,028 --> 00:03:59,312
Это истина.

116
00:03:59,312 --> 00:04:00,718
Истина представляется единицей.

117
00:04:00,718 --> 00:04:02,146
Обратите внимание: знак "не равно"

118
00:04:02,146 --> 00:04:05,478
пишется как тильда и равно.

119
00:04:05,550 --> 00:04:07,336
А не восклицательный знак и равно.

120
00:04:07,336 --> 00:04:09,267
Такой вариант встречается в некоторых языках

121
00:04:09,267 --> 00:04:10,878
программирования.

122
00:04:10,910 --> 00:04:13,616
Проведем операцию "логическое И" с

123
00:04:13,616 --> 00:04:15,545
единицей и нулем,

124
00:04:15,545 --> 00:04:17,340
используя двойной амперсанд.

125
00:04:18,120 --> 00:04:20,188
Полученное выражение будет ложным.

126
00:04:20,188 --> 00:04:23,886
Один или нуль; это операция "логическое ИЛИ".

127
00:04:23,900 --> 00:04:25,736
Здесь мы получаем истину.

128
00:04:25,736 --> 00:04:27,131
Еще я могу сложить единицу и нуль по модулю

129
00:04:27,131 --> 00:04:30,333
два, и результатом будет единица.

130
00:04:30,333 --> 00:04:32,928
Эта строчка слева, octave-3.2.4.exe:11, это стандартное

131
00:04:32,928 --> 00:04:35,683
приглашение Octave.

132
00:04:35,700 --> 00:04:37,513
Здесь показана версия

133
00:04:37,520 --> 00:04:39,150
Octave и всё такое.

134
00:04:39,150 --> 00:04:40,423
Если вы не хотите видеть это

135
00:04:40,450 --> 00:04:43,025
приглашение, то есть

136
00:04:43,025 --> 00:04:44,670
такая

137
00:04:44,670 --> 00:04:46,602
неочевидная

138
00:04:46,602 --> 00:04:48,800
команда: PS('>> '):

139
00:04:48,810 --> 00:04:51,272
Думаю, эта строка в кавычках,

140
00:04:51,272 --> 00:04:53,362
знак больше, больше, пробел.

141
00:04:53,400 --> 00:04:55,592
Это то, каким я хочу видеть приглашение Octave.

142
00:04:55,592 --> 00:04:57,722
Если я нажму Enter.

143
00:04:57,920 --> 00:04:59,763
Ой, простите.

144
00:04:59,763 --> 00:05:00,786
Немного не так.

145
00:05:00,786 --> 00:05:02,622
Правильно будет PS1('>> ')

146
00:05:02,622 --> 00:05:05,420
Теперь приглашение Octave выглядит как два знака "больше". Как видите, смотрится гораздо

147
00:05:05,500 --> 00:05:09,263
лучше.

148
00:05:09,710 --> 00:05:12,384
Теперь поговорим о переменных в Octave.

149
00:05:12,384 --> 00:05:13,865
Я возьму переменную a и присвою

150
00:05:13,865 --> 00:05:16,165
ей значение 3.

151
00:05:16,165 --> 00:05:18,421
Нажму Enter.

152
00:05:18,440 --> 00:05:20,043
Теперь a равно 3.

153
00:05:20,070 --> 00:05:22,861
Пусть вы присваиваете переменной значение, но не хотите, чтобы оно выводилось на экран.

154
00:05:22,861 --> 00:05:26,758
Если вы завершите строку точкой с запятой, вы

155
00:05:26,920 --> 00:05:30,824
запретите вывод результата операции присвоения.

156
00:05:30,824 --> 00:05:33,160
Я так и делаю, жму Enter, и ничего не печатается.

157
00:05:33,160 --> 00:05:35,399
Если я наберу "a=3"

158
00:05:35,420 --> 00:05:36,719
то Octave выведет результат, а

159
00:05:36,719 --> 00:05:39,845
если наберу "a=3;", то не выведет ничего.

160
00:05:39,850 --> 00:05:41,845
Я также могу присваивать строковые значения.

161
00:05:41,845 --> 00:05:43,473
b="hi". Если я

162
00:05:43,520 --> 00:05:45,047
сейчас напишу b, то

163
00:05:45,047 --> 00:05:46,072
выведется значение

164
00:05:46,072 --> 00:05:48,338
переменной b. b мы

165
00:05:48,370 --> 00:05:51,118
присвоили строку "hi". c=(3>=1);

166
00:05:51,130 --> 00:05:54,538
c присвоено значение "истина".

167
00:05:55,710 --> 00:05:57,999
Чтобы вывести на экран значение

168
00:05:58,030 --> 00:06:00,832
переменной, можете делать так.

169
00:06:00,832 --> 00:06:03,725
Пусть a равно пи.

170
00:06:03,760 --> 00:06:04,985
Если я хочу узнать значение a, я просто

171
00:06:04,985 --> 00:06:08,545
печатаю a, и выводится её значение.

172
00:06:08,545 --> 00:06:10,344
Для более сложного вывода используется

173
00:06:10,344 --> 00:06:13,674
команда disp, от слова display.

174
00:06:13,710 --> 00:06:15,858
disp(a) просто выводит a, вот так.

175
00:06:15,890 --> 00:06:18,337
Можно

176
00:06:18,350 --> 00:06:21,392
выводить и

177
00:06:21,460 --> 00:06:24,990
строки, вот

178
00:06:25,260 --> 00:06:28,273
так.

179
00:06:28,273 --> 00:06:29,863
И эта команда отобразит строку:

180
00:06:29,863 --> 00:06:31,722
*вывод числа с двумя знаками после запятой*

181
00:06:31,722 --> 00:06:33,651
Похоже на старомодный

182
00:06:33,670 --> 00:06:35,993
синтаксис языка С.

183
00:06:35,993 --> 00:06:37,404
Если вы

184
00:06:37,420 --> 00:06:39,073
на С, то узнали синтаксис команды, выводящей

185
00:06:39,073 --> 00:06:41,378
строку на экран.

186
00:06:41,380 --> 00:06:44,498
sprintf создает

187
00:06:44,510 --> 00:06:46,021
эту

188
00:06:46,021 --> 00:06:48,274
строку: "2 decimals: 3.14".

189
00:06:48,290 --> 00:06:50,644
Символ %0.2f означает "подставить

190
00:06:50,644 --> 00:06:52,475
сюда а, оставив два знака

191
00:06:52,475 --> 00:06:55,926
после запятой".

192
00:06:55,926 --> 00:06:58,104
И команде disp передается строка,

193
00:06:58,130 --> 00:07:00,691
сгенерированная командой sprintf.

194
00:07:00,691 --> 00:07:01,683
Sprintf.

195
00:07:01,683 --> 00:07:03,091
Sprintf создает строку.

196
00:07:03,091 --> 00:07:05,835
А disp отображает эту строку.

197
00:07:05,870 --> 00:07:07,020
Для примера приведу

198
00:07:07,020 --> 00:07:11,360
команду, которая

199
00:07:11,361 --> 00:07:14,551
выведет число пи с

200
00:07:14,930 --> 00:07:17,075
шестью знаками после

201
00:07:17,090 --> 00:07:21,100
запятой.

202
00:07:22,060 --> 00:07:25,728
Как я уже говорил, а отображается вот так.

203
00:07:25,740 --> 00:07:28,633
Существуют полезные комбинации. Я набираю format long.

204
00:07:28,633 --> 00:07:31,759
После этого по умолчанию все значения

205
00:07:31,760 --> 00:07:33,748
будут отображаться с большим числом знаков после запятой.

206
00:07:33,748 --> 00:07:35,593
После команды format short по

207
00:07:35,593 --> 00:07:37,095
умолчанию будет отображаться

208
00:07:37,120 --> 00:07:40,113
меньшее количество знаков.

209
00:07:40,600 --> 00:07:43,934
Вот так выглядит работа с переменными.

210
00:07:43,934 --> 00:07:47,047
Давайте перейдем к векторам и матрицам.

211
00:07:47,070 --> 00:07:49,274
Скажем, я хочу присвоить А матрицу чисел.

212
00:07:49,280 --> 00:07:50,974
Например: 1, 2, точка с запятой, 3, 4,

213
00:07:50,980 --> 00:07:54,593
точка с запятой, 5, 6.

214
00:07:54,600 --> 00:07:56,235
Этим я создаю матрицу А

215
00:07:56,240 --> 00:07:58,572
размерностью три на четыре. В первой

216
00:07:58,580 --> 00:07:59,818
строке стоят числа 1 и 2.

217
00:07:59,820 --> 00:08:02,030
Во второй - 3 и 4.В третьей - 5 и 6.

218
00:08:02,030 --> 00:08:04,385
Точка с запятой означает

219
00:08:04,390 --> 00:08:05,818
переход к следующей строке

220
00:08:05,820 --> 00:08:07,915
матрицы.

221
00:08:07,915 --> 00:08:09,016
Эти значения можно ввести по-другому.

222
00:08:09,016 --> 00:08:11,536
Набираем А, 1, 2, точка с

223
00:08:11,536 --> 00:08:15,046
запятой. 3, 4, точка с запятой. 5, 6.

224
00:08:15,046 --> 00:08:17,038
Это альтернативный способ создать

225
00:08:17,038 --> 00:08:18,576
матрицу А размерностью три на

226
00:08:18,576 --> 00:08:22,183
два с такими значениями.

227
00:08:22,200 --> 00:08:23,568
Таким же образом можно создавать векторы.

228
00:08:23,568 --> 00:08:25,532
Итак, V = [1 2 3]

229
00:08:25,560 --> 00:08:27,359
Получился вектор-строка.

230
00:08:27,359 --> 00:08:29,915
Или вектор размера 3 х 1.

231
00:08:29,940 --> 00:08:32,016
Простите, я хотел

232
00:08:32,030 --> 00:08:34,375
сказать, матрица

233
00:08:34,380 --> 00:08:37,998
размера 1 на 3.

234
00:08:37,998 --> 00:08:39,256
А не 3 на 1.

235
00:08:39,256 --> 00:08:41,015
Если я хочу создать

236
00:08:41,015 --> 00:08:43,975
вектор-столбец, я

237
00:08:43,975 --> 00:08:48,778
напишу v = [1; 2; 3]

238
00:08:48,830 --> 00:08:50,030
Я получу столбец из трех чисел.

239
00:08:50,100 --> 00:08:51,797
Это вектор размера 1 на 3.

240
00:08:51,797 --> 00:08:55,892
Итак, я получил вектор-столбец.

241
00:08:56,250 --> 00:08:57,968
Вот еще одно полезное выражение.

242
00:08:57,968 --> 00:09:02,343
v = 1:0.1:2

243
00:09:02,343 --> 00:09:03,598
Здесь v присваивается

244
00:09:03,620 --> 00:09:05,716
ряд значений. Первое из

245
00:09:05,716 --> 00:09:08,714
них равно единице.

246
00:09:08,714 --> 00:09:10,392
Каждое следующее значение больше предыдущего

247
00:09:10,410 --> 00:09:13,657
на 0.1. Последнее значение будет равно 2.

248
00:09:13,660 --> 00:09:19,168
Если я выполню эту команду, v будет вот таким вектором-строкой.

249
00:09:19,168 --> 00:09:23,022
По сути, это матрица размера 1 х 11.

250
00:09:23,022 --> 00:09:23,739
В ней элементы 1, 1.1, 1.2, 1.3,

251
00:09:23,739 --> 00:09:26,921
и так до самой

252
00:09:27,630 --> 00:09:30,141
двойки.

253
00:09:31,440 --> 00:09:33,269
Я также могу

254
00:09:33,269 --> 00:09:35,049
написать v = 1:6, и v будут присвоены

255
00:09:35,060 --> 00:09:38,270
эти числа.

256
00:09:38,270 --> 00:09:41,291
От одного до шести. Итак.

257
00:09:41,620 --> 00:09:44,254
Есть и другие способы создания матриц.

258
00:09:44,254 --> 00:09:47,426
Команда ones(2,3) создаст

259
00:09:47,426 --> 00:09:49,134
матрицу размера два на

260
00:09:49,140 --> 00:09:50,790
три, состоящую из

261
00:09:50,790 --> 00:09:52,712
единиц.

262
00:09:52,712 --> 00:09:53,991
Если я задам c=2*ones(2,3),

263
00:09:54,000 --> 00:09:56,845
я получу матрицу размера два на

264
00:09:56,845 --> 00:09:59,798
три, состоящую из

265
00:09:59,798 --> 00:10:03,061
двоек.

266
00:10:03,080 --> 00:10:04,258
Это более быстрый

267
00:10:04,258 --> 00:10:05,513
способ по сравнению с

268
00:10:05,550 --> 00:10:06,943
c=[2 2 2; 2 2 2]. Результат будет

269
00:10:06,943 --> 00:10:10,951
одинаковым.

270
00:10:11,450 --> 00:10:13,910
Зададим w=ones(1,3), и

271
00:10:13,920 --> 00:10:15,485
получим вектор-строку,

272
00:10:15,485 --> 00:10:17,937
строку из трех

273
00:10:17,940 --> 00:10:20,998
единиц. Аналогично

274
00:10:20,998 --> 00:10:23,853
можно задать w=zeros(1,3) и

275
00:10:23,853 --> 00:10:25,463
получить

276
00:10:25,463 --> 00:10:27,469
следующую

277
00:10:27,469 --> 00:10:30,209
матрицу.

278
00:10:30,220 --> 00:10:34,732
Матрицу размера 1 на 3, состоящую из нулей.

279
00:10:34,732 --> 00:10:36,910
И вот еще пара способов создавать матрицы.

280
00:10:36,930 --> 00:10:39,175
Если я введу w=rand(1,3), то

281
00:10:39,175 --> 00:10:41,512
получу матрицу

282
00:10:41,520 --> 00:10:43,050
случайных чисел

283
00:10:43,050 --> 00:10:45,370
размера 1х3.

284
00:10:45,372 --> 00:10:47,118
Если я введу

285
00:10:47,215 --> 00:10:49,008
rand(3,3),

286
00:10:49,050 --> 00:10:50,417
то получу матрицу

287
00:10:50,417 --> 00:10:51,918
размера 3х3,

288
00:10:51,930 --> 00:10:54,009
состоящую из чисел,

289
00:10:54,009 --> 00:10:55,830
случайным оборазом выбранных из равномерного распределения на интервале от 0 до 1.

290
00:10:55,830 --> 00:10:56,937
То есть я каждый раз буду

291
00:10:56,937 --> 00:10:58,608
получать разный набор случайных

292
00:10:58,608 --> 00:11:00,510
чисел, равномерно

293
00:11:00,540 --> 00:11:02,573
распределенных между 0 и 1.

294
00:11:02,573 --> 00:11:03,718
Если вы

295
00:11:03,718 --> 00:11:05,375
знакомы с

296
00:11:05,410 --> 00:11:06,275
понятием Гауссова, или

297
00:11:06,275 --> 00:11:07,659
нормального, распределения, то

298
00:11:07,660 --> 00:11:09,112
попробуйте

299
00:11:09,112 --> 00:11:11,956
ввести w=randn(1,3).

300
00:11:11,990 --> 00:11:13,565
Вы получите три числа

301
00:11:13,570 --> 00:11:15,435
из Гауссова распределения с

302
00:11:15,435 --> 00:11:17,798
нулевым средним

303
00:11:17,798 --> 00:11:19,266
значением и среднеквадратическим

304
00:11:19,266 --> 00:11:21,642
отклонением, равным 1.

305
00:11:21,642 --> 00:11:23,148
Вы можете

306
00:11:23,150 --> 00:11:24,698
присваивать и

307
00:11:24,698 --> 00:11:26,194
более сложные

308
00:11:26,210 --> 00:11:28,656
значения. (вводит

309
00:11:28,660 --> 00:11:31,978
формулу)

310
00:11:31,978 --> 00:11:33,106
Я завершу строку точкой с запятой, так

311
00:11:33,106 --> 00:11:35,623
как хочу избежать вывода результата.

312
00:11:35,623 --> 00:11:37,599
Что же я получу?

313
00:11:37,599 --> 00:11:38,905
Получится вектор,

314
00:11:38,910 --> 00:11:40,582
состоящий из ста тысяч, то есть

315
00:11:40,610 --> 00:11:44,481
десяти тысяч элементов.

316
00:11:44,490 --> 00:11:47,596
Хотя, знаете что?

317
00:11:47,596 --> 00:11:48,373
Давайте всё-таки выведем это.

318
00:11:48,373 --> 00:11:51,570
Сгенерируется такая вот матрица.

319
00:11:51,570 --> 00:11:52,408
Верно?

320
00:11:52,408 --> 00:11:53,978
С 10 000 элементов.

321
00:11:53,978 --> 00:11:55,835
Это будет значением w.

322
00:11:55,835 --> 00:11:57,392
Я могу построить

323
00:11:57,392 --> 00:11:59,442
гистограмму

324
00:11:59,442 --> 00:12:01,818
значений w

325
00:12:01,820 --> 00:12:04,752
командой hist.

326
00:12:04,752 --> 00:12:06,130
Как вы заметили,

327
00:12:06,130 --> 00:12:07,297
команда hist выполнялась

328
00:12:07,297 --> 00:12:08,965
несколько секунд, и построила

329
00:12:08,970 --> 00:12:10,646
гистограмму случайных

330
00:12:10,650 --> 00:12:12,732
чисел в w. (проговаривает

331
00:12:12,732 --> 00:12:15,537
формулу)

332
00:12:15,537 --> 00:12:17,537
Я могу построить ту же гистограмму с

333
00:12:17,560 --> 00:12:21,032
большим числом прямоугольников. Пусть их будет 50.

334
00:12:21,032 --> 00:12:22,578
Гистограмма имеет вид Гауссовой

335
00:12:22,578 --> 00:12:25,735
функции с центром в точке -6.

336
00:12:25,735 --> 00:12:27,285
Потому что в формуле стоит -6 плюс

337
00:12:27,285 --> 00:12:29,208
квадратный корень из 10 умножить на это значение.

338
00:12:29,230 --> 00:12:32,952
Итак, дисперсия этой

339
00:12:32,952 --> 00:12:34,961
случайной Гауссовой

340
00:12:34,961 --> 00:12:36,696
величины равна 10, среднестатистическое

341
00:12:36,700 --> 00:12:38,935
отклонение равно корню из 10, это сколько?

342
00:12:38,950 --> 00:12:41,063
Примерно 3.1?

343
00:12:41,780 --> 00:12:43,857
Наконец, особая команда для

344
00:12:43,857 --> 00:12:46,208
создания матриц: eye.

345
00:12:46,208 --> 00:12:48,394
Может, это название

346
00:12:48,394 --> 00:12:51,028
связано с какой-то игрой слов.

347
00:12:51,050 --> 00:12:52,650
Я пишу eye(4).

348
00:12:52,720 --> 00:12:56,004
Получаю единичную матрицу размера 4х4.

349
00:12:56,004 --> 00:12:57,681
Пусть I равняется eye(4).

350
00:12:57,681 --> 00:13:00,458
Снова единичная матрица размера 4х4.

351
00:13:00,458 --> 00:13:04,475
I равно eye(5), нет, eye(6).

352
00:13:04,475 --> 00:13:05,611
Получается единичная

353
00:13:05,611 --> 00:13:08,089
матрица 6 на 6. I=eye(3) дает

354
00:13:08,120 --> 00:13:09,134
единичную матрицу 3 на 3.

355
00:13:09,134 --> 00:13:12,064
Наконец, в завершение этого

356
00:13:12,064 --> 00:13:14,263
видео есть еще одна полезная команда.

357
00:13:14,280 --> 00:13:15,479
Команда отображения справки, help.

358
00:13:15,479 --> 00:13:17,454
По команде help eye будет

359
00:13:17,454 --> 00:13:21,181
показана справка по использованию команды eye.

360
00:13:21,190 --> 00:13:22,803
Нажмите Q  для выхода.

361
00:13:22,803 --> 00:13:25,375
Можно написать help rand.

362
00:13:25,380 --> 00:13:27,793
Выдает документацию для команды rand,

363
00:13:27,793 --> 00:13:29,734
функции генерации случайного числа.

364
00:13:29,734 --> 00:13:31,898
Или даже help help, чтобы увидеть

365
00:13:31,900 --> 00:13:35,615
справку по использованию справки.

366
00:13:36,455 --> 00:13:39,022
Итак, это были основные

367
00:13:39,022 --> 00:13:41,612
операции в среде Octave.

368
00:13:41,612 --> 00:13:42,699
Зная их, вы сможете создавать матрицы,

369
00:13:42,699 --> 00:13:47,131
умножать и складывать переменные.

370
00:13:47,131 --> 00:13:50,553
Использовать основные возможности Octave.

371
00:13:50,560 --> 00:13:51,893
В следующем видео я начну

372
00:13:51,920 --> 00:13:53,818
говорить о более сложных

373
00:13:53,818 --> 00:13:55,700
вещах, об использовании и

374
00:13:55,750 --> 00:13:59,180
обработке данных в Octave.