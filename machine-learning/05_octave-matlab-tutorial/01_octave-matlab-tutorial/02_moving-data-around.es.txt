En este segundo video tutorial sobre Octave, me gustaría comenzar a decirte cómo mover los datos en Octave. Si tienes datos para un problema de aprendizaje automático, ¿Cómo cargas esos datos en Octave? ¿Cómo puedes ponerlos en la matriz? ¿Cómo puedes manipular estas matrices? ¿Cómo puedes guardar los resultados? ¿Cómo puedes mover los datos y operar con los datos? Aquí está mi ventana de Octave, como antes, con los datos desde donde nos quedamos en el último video. Si escribimos A, que es la matriz que generamos, ¿correcto?, con este comando igual a 1, 2, 3, 4, 5, 6, y esta es una matriz de 3x2. El comando size en Octave, te dice cuál es el tamaño de una matriz. Así que size(A) te devuelve 3, 2. Resulta que los algoritmos de agrupamiento este comando size por sí solo te devuelve una matriz de 1x2. Así que en realidad puedes establecer a sz igual a size(A) y sz ahora es una matriz de 1x2 en la que el primer elemento de esta es 3, y el segundo elemento de esta es 2. Por lo tanto, si acabas de teclear size(sz), hace sz una matriz de uno por dos cuyos dos elementos contienen las dimensiones de la matriz A. También puedes teclear size(A,1), para que te dé como resultado la primera dimensión de A, el tamaño de la primera dimensión de A. Así que ese es el número de filas y size(A,2) que te devuelva 2, que es el número de columnas en la matriz A. 
Si tienes un vector V, digamos que V es igual a 1, 2, 3, 4, y tecleas length(v). Lo que hace esto, es que te da el tamaño de la dimensión más larga. Así también puedes teclear length(A) y porque A es una matriz de tres por dos, la dimensión más larga es del tamaño de tres, por lo que este debe imprimir 3. Pero por lo general aplicamos length sólo a los vectores. Así que ya sabes length([1;2; 3;4;5]) en lugar de aplicar length a las matrices, porque eso es un poco más confuso. Ahora, veamos la forma de cargar los datos y encontrar los datos en los archivos del sistema. Cuando iniciamos Octave estamos por lo general en una ruta que es, como sabes, la ruta de la ubicación donde está Octave. Así que el de comando pwd muestra el directorio actual, o la ruta actual donde se encuentra Octave. Así que, ahora nos encontramos en una especie de escala del directorio. El comando cd se pone para cambiar el directorio, por lo que se puede ir a C:/Users/Ang/Desktop, ahora ya estoy, como sabes, en mi Escritorio, y si tecleo ls, ls es un comando de Unix o Linux. Pero, ls enumerará los directorios de mi escritorio, y estos son los archivos que hay en mi escritorio en este momento. De hecho, en mi escritorio hay dos archivos: featuresX y priceY que tal vez vienen de un problema de aprendizaje automático que quiero resolver. Así pues, aquí está mi escritorio. Aquí esta featuresX, y featuresX es esta ventana, perdón, es este archivo con dos columnas de datos. Estos son en realidad mis datos de precios de casas. Así que pienso que, como sabes, creo que tengo cuarenta y siete filas en este conjunto de datos. La primera casa tiene el tamaño de dos mil ciento cuatro pies cuadrados y cuenta con tres dormitorios; la segunda casa tiene mil seiscientos pies cuadrados, tiene tres dormitorios; y así sucesivamente. Y priceY, es este archivo, tiene los precios de los datos de mi conjunto de entrenamiento. Así que featuresX y priceY son solo archivos de texto con mis datos. ¿Cómo puedo cargar estos datos en Octave? Bueno, sólo tecleo el comando load featuresX.dat y si hago eso, puedo cargar featuresX y también puedo cargar, load priceY.dat Y por cierto, hay varias maneras de hacer esto. En este comando pones load('featuresX.dat') en forma de cadena y cargarlo. Esto es un error ahí. Este es un comando equivalente. Así que puedes, de esta manera, sólo estoy poniendo el nombre del archivo de la cadena en el principio de la cadena y en Octave estoy utilizado unas comillas simples para representar las cadenas, de esta manera. Así que eso es una cadena, y podemos cargar el archivo cuyo nombre viene dado por esa cadena. Ahora el comando who muestra qué variables tengo en mi espacio de trabajo de Octave. Entonces, who me muestra las variables que Octave tiene en la memoria actualmente. featuresX y priceY están entre ellas, así como las variables que, como sabes, hemos creado anteriormente en esta sesión. Así que puedo escribir featuresX para mostrar featuresX. Y ahí están mis datos. Puedo escribir size(featuresX) y esa es mi matriz de 47x2. Y algunas de estas dimensiones, priceY, me regresa mi vector de 47x1. Este es un vector de 47 dimensiones. Esto es un vector común que tiene todos los datos de priceY en mi conjunto de entrenamiento. Ahora, la función who te muestra una de las variables que están actualmente en el espacio de trabajo. También está la variable whos que te da una vista detallada. Esta variable, con una S al final también enumera mis variables, con la diferencia de que también enlista sus tamaños. Así que A es una matriz de 3x2 y featuresX es una matriz de 47x2. priceY es una matriz de 47x1, diciéndonos que es sólo un vector. Esto muestra, como sabes, cuántos bytes de memoria está ocupando. Así como que tipo de datos son. Doble significa una posición doble punto flotante que significa justamente que estos son los valores reales, los números de punto flotante. Ahora, si quieres borrar una variable, puedes utilizar el comando clear. Escribe clear featuresX y whos nuevamente, puedes notar que la variable featuresX ha desaparecido. ¿Cómo guardamos los datos? Veamos, Vamos a tomar la variable v y escribir priceY(1:10). Esto establece a V como los primeros 10 elementos del vector Y, y escribir who o whos considerando que Y era un vector de 47x1. v es ahora de 10x1. Porque v = priceY(1:10), lo que lo establece en los primeros 10 elementos de Y. Digamos que quiero guardar esto actualizado en el disco, utilizaremos el comando save hello.mat v. Esto guardara la variable v en un archivo llamado hello.mat. Así que vamos a hacerlo. Ahora un archivo ha aparecido en mi escritorio llamado hello.mat. Tengo MATLAB instalado en este Windows, esa es la razón, como sabes, por la cual este icono se ve así, ya que Windows lo reconoce como un archivo de MATLAB, pero no te preocupes si este archivo te parece así o con un icono diferente en tu computadora, y digamos que borre todas mis variables, si escribes clear sin algo más, este borra todas las variables en el espacio de trabajo. Así que ahora no hay nada a la izquierda en el espacio de trabajo. Si cargo hello.mat, ahora puedo cargar mi variable v, que son los datos que previamente he guardado en el archivo hello.mat. Así que, hello.mat, ¿Que hicimos al guardar el archivo hello.mat?, esto guarda los datos en un formato binario, una especia de formato binario más comprimido. Ya que v es una gran cantidad de datos, este lo guardara un poco más comprimido y ocupara menos espacio. Si quieres guardar los datos en un formato legible para humanos escribe save hello.txt la variable v y luego -ascii, esto lo guardará como texto o como formato de texto ASCII. Ahora, una vez que lo he hecho, tengo este archivo hello.text que acaba de aparecer en mi escritorio, y si lo abro, vemos que se trata de un texto que contiene mis datos guardados. Esta es la forma en que se cargan y guardan los datos. Ahora vamos a hablar un poco sobre la forma de manipular los datos. Vamos a igualar a la matriz nuevamente, aquí tenemos una matriz 3x2. Así como la indexación. Así que si escribo A(3,2), esto nos lleva a los elementos 3,2 de la matriz A. Entonces, esto es lo que, como sabes, normalmente, escribimos como "A" subíndice 3, 2, o "A" subíndice, como sabes, 3,2 y este es el elemento, la tercera fila y la segunda columna de A de la cuales el elemento igual a 6. También puedo escribir A(2,:) para sacar todo de la segunda fila. Así que, los dos puntos significan todo elemento en esa fila o columna. Así que A con un (2,:) es la segunda fila de A. ¿Correcto? De manera similar, si pongo A(:,2), esto significa obtener todo en la segunda columna de A. Por lo tanto, esto da 2 4 6. Esto significa A, todo, segunda columna. Por lo tanto, esta es mi segunda columna de A, que es 2 4 6. Ahora, también puedes usar algunas operaciones un poco más sofisticadas del índice. Así que, hagamos un ejemplo. Harás esto cada vez con menos frecuencia, pondré A([1 3], :). Esto significa obtener todos los elementos de A los cuales indexan 1 o 3, lo que significa obtener todo de la primera y tercera fila de A y de todas las columnas. Por lo tanto, esta era la matriz A y así A([1 3],:) significa obtener todo de la primera fila y de la segunda fila y de la tercera fila y los dos puntos significan, como sabes, ambos de la primera y segunda columna, lo que regresa 1, 2, 5, 6. A pesar de que ahora utilices la fuente de operaciones de índice con subíndice, esto se volverá algo raro. Para mostrarte que podamos hacer. Esta es la matriz A(:,2) que me da la segunda columna. También puedes usar esto para hacer tareas. Así que puedo tomar la segunda columna de A y asignarla a 10; 11; 12, y al hacer eso, como sabes, tomo la segunda columna y le asigno al vector columna 10, 11 , 12. Por lo tanto, ahora es una matriz que tiene 1, 3, 5 y la segunda columna ha sido reemplazado por 10, 11, 12. Aquí hay otra operación. Vamos a establecer que A = [A, [100, 101, 102]], lo que esto va a hacer depende del vector columna a la derecha. Así que, ahora, ¡ups! Creo que he cometido un pequeño error. Debería de haber puesto puntos y comas allí y ahora A es igual a esto. ¿Bien? Espero que eso tenga sentido. Así que 100, 101, 102. Este es un vector columna y lo que hicimos fue establecer A, tomamos A y establecimos a la definición original y después pusimos el vector columna a la derecha, así que terminamos teniendo la matriz A la cual tenía estos seis elementos en la izquierda. Así que tomamos la matriz A y adjuntamos otro vector columna a la derecha. Por lo que ahora A es una matriz de 3x3 y así se ve. Y, por último, un buen truco que a veces uso, si sólo pones A(:) como tal. Esta es una sintaxis de un caso un tanto especial. Lo que significa esto es que pone todos los elementos de A en un único vector columna y esto me da un vector de 9 por 1. Solo ajusta los otros que están combinados entre sí. Solo un par de ejemplos. Vamos a ver. Vamos a decir que puse A = [1 2; 3 4; 5 6]; ¿de acuerdo?, y vamos a decir que puse un B = [111 12; 13 14; 15 16] Puedo crear una nueva matriz C como A B. Esto sólo significa que mi matriz A. Aquí está mi matriz B y he establecido que C sea igual a AB. Lo que estoy haciendo es que estoy tomando estas dos matrices y simplemente concatenándolas la una con la otra. Así que tengo la matriz A a la izquierda y la matriz B a la derecha, así es como formé esta matriz C, al unirlas. También puedo hacer a C = [A:B], la notación punto y coma significa que puse la siguiente cosa en la parte inferior. Por lo tanto, voy a hacer que el punto y coma sea igual a B. También une las matrices A y B, excepto que ahora las pone en la parte superior la una de la otra, así que ahora tengo A en la parte superior y B en la parte inferior y C, aquí está ahora la matriz 6x2. Entonces, simplemente digamos que el punto y como generalmente significa, ve a la siguiente línea. Así, C está compuesto por A y luego va a la parte inferior de eso y pone a B en la parte inferior, por cierto, este AB es igual que A, B y por lo que, cualquiera de éstos te da el mismo resultado. Con todo esto, espero que ahora ya sepas cómo construir matrices y con suerte comenzar a mostrarte algunos de los comandos que se utilizan para poner rápidamente en conjunto a las matrices, tomar las matrices y, como sabes, unirlas para formar matrices más grandes, con sólo unas pocas líneas de código; Octave es muy conveniente en términos de la rapidez con que podemos montar matrices complejas y mover los datos. Así que esto es mover los datos. En el siguiente vídeo empezaremos a hablar acerca de cómo cálculos complejos en esto y en nuestros datos. Ojalá esto te de un una idea de cómo, con sólo unos pocos comandos, puedes rápidamente mover los datos en torno a Octave. Sabes, cargar y guardar los vectores y matrices, cargar y guardar datos, unir matrices para crear matrices más grandes dentro de un índice o seleccionar elementos específicos de las matrices. Sé que pasé por un montón de comandos, así que creo que lo mejor que puedes hacer es después de todo, revisar la transcripción de las cosas que estaba escribiendo. Ya sabes, echarles un vistazo. Entra al sitio de los cursos y descarga la transcripción de la sesión de allí, revisa la transcripción y escribe tú mismo algunos de esos comandos en Octave, comienza a jugar con estos comandos y consigue que funcionen. Y, obviamente, ya sabes, no tiene sentido en absoluto el tratar de memorizar todos estos comandos. Es justo, pero lo que debes hacer es, con suerte has aprendido en este vídeo, un poco de la clase de cosas que puedes hacer. Así que más adelante, cuando estés tratando de programar un algoritmos de aprendizaje tu solo, si estás tratando de encontrar un comando específico que tal vez piensas que Octave puede ejecutar o porque piensas que puede ser que lo hayas visto aquí, debes consultar la transcripción de la sesión y revisarla con el fin de encontrar los comandos que quieras usar. automático según mover datos, en el siguiente video lo que me gustaría hacer es empezar a decir cómo hacer en realidad cálculos complejos sobre nuestros datos, la forma de calcular los datos y realmente empezar a aplicar los algoritmos de aprendizaje.