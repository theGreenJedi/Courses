Ahora sabes mucho sobre el aprendizaje automático. En este video, me gustaría enseñarte el lenguaje de programación, Octave, en el cual serás capaz de implementar rápidamente los algoritmos de aprendizaje que hemos visto previamente, y los algoritmos de aprendizaje que veremos más adelante en este curso. En el pasado, he intentado enseñar aprendizaje automático utilizando una gran variedad de lenguajes de programación incluyendo C++, Java, Python, NumPy, R, y también Octave y lo que he encontrado es que los estudiantes son capaces aprenden más productivamente,  más rápidamente, y realizan prototipos de sus algoritmos más rápidamente utilizando un lenguaje de alto nivel como Octave. De hecho, lo que a menudo veo en Sillicon Valley es que incluso si necesitas construir, si quieres construir un algoritmo de aprendizaje a gran escala, lo que la gente hace a menudo es el prototipo y el lenguaje es Octave. Que es un gran lenguaje para hacer prototipos. Así que puedes echar a andar rápidamente tus algoritmos de aprendizaje. Y entonces sólo si usted necesita un despliegue a gran escala de él, sólo entonces debe invertir el tiempo en volver a implementar el algoritmo en  C++,  Java o en algún lenguaje similar. Porque todas las lecciones que hemos aprendido son que el tiempo del programador, o el tiempo del desarrollador, esto es, tu tiempo. El tiempo de aprendizaje automático es increíblemente valioso. Y si puedes hacer trabajar tus algoritmos de aprendizaje más rápidamente en Octave. Entonces, en general, tendrás un ahorro de tiempo enorme al primero desarrollar los algoritmos en Octave, y luego, implementándolos en, Quizás C++, Java, sólo después de que tenemos las ideas trabajando. Los lenguajes más comunes para realizar prototipos que veo a la gente utilizar para aprendizaje automático son: Octave, MATLAB, Python, NumPy, R, y también Octave es bueno porque es código abierto. Y MATLAB funciona bien también, sin embargo es caro para muchas personas Pero si tienes acceso a una copia de MATLAB. También puedes utilizar MATLAB con esta clase. Si sabes Python, NumPy, o si sabes R. Veo que algunas personas lo usan. Pero, lo que veo es que la gente generalmente termina desarrollando un poco más lentamente, ya sabes, estos lenguajes. Porque la sintaxis de Python y NumPy es un poco más complicada que la sintaxis de Octave. Así que, por ese motivo, y porque estamos liberando código inicial en Octave, recomiendo encarecidamente que no intentes hacer los siguientes ejercicios de esta clase en NumPy y R. Pero sí recomiendo que hagas los ejercicios de programación de esta clase en Octave. Lo que haré en este video será trabajar sobre una lista de comandos muy, muy rápidamente, y el objetivo es mostrarte rápidamente la variedad de comandos y la variedad de cosas que puedes hacer en Octave. En el sitio web del curso habrá una transcripción de todo lo que hago, entonces, después de ver este video, podrás consultar la transcripción publicada en el sitio web del curso cuando quieras encontrar un comando. Específicamente, lo que te recomiendo hacer primero es ver los tutoriales en video. Y, después de verlos hasta el final, entonces instala Octave en tu computadora. Y, finalmente, dirígete al sitio web del curso, descarga las transcripciones de las cosas que veas en la sesión, y escribe todos los comandos que te parezcan interesantes en Octave, que estará ejecutándose en tu propia computadora, y podrás verlo ejecutarse por ti mismo. Y, con esto, vamos a empezar. Este es mi escritorio de Windows, y voy a abrir Octave. Ahora estoy en Octave. Y esta es mi línea de comando de Octave. Primero voy a mostrarte las operaciones básicas que puedes hacer en Octave. Entonces, escribe 5 + 6. Te dará la respuesta 11. 3 - 2. 5 x 8, 1/2, 2^6 es 64. Entonces, estas son las operaciones matemáticas elementales. También puedes hacer operaciones lógicas. Entonces, uno es igual a dos. Esto se evalúa como falso. El comando por ciento aquí significa un comentario. Entonces, uno es igual a dos, se evalúa como falso. Lo cual es representado por cero. Uno no es igual a dos. Esto es cierto. Entonces devuelve uno. Toma en cuenta que un signo de no igual es este símbolo de tilde. Y no es igual. Que es lo que algunos otros lenguajes de programación utilizan. Vamos cómo las operaciones lógicas uno y cero usan un signo ampersand doble para el AND lógico. Y eso se evalúa como falso. Uno o cero es la operación OR. Y eso se evalúa como verdadero. Y puedo XOR uno y cero, y eso se evalúa como uno. Lo que está arriba a la izquierda, este 324.x de Octave es igual a 11, este es el comando de sistema predeterminado de Octave. Muestra la versión de Octave y cosas así. Si no quieres ese símbolo de sistema, hay un comando PF comillas un tanto críptico, mayor que, mayor que y así sucesivamente, que puedes usar para cambiar el símbolo de sistema. Y creo que esta comilla es una cadena en el medio. Comilla, mayor qué, mayor qué, espacio. Así es como prefiero que se vea mi símbolo de sistema de Octave. Entonces, si presiono Enter. Lo siento. De esta manera. PS1 de esta forma. Ahora mi símbolo de sistema de Octave cambió al signo mayor que, mayor que. Que, ya sabes, se ve bastante mejor. Ahora vamos a hablar sobre las variables en Octave. Puedo tomar la variable A y asignarle el valor de 3. Y oprimo Enter. Y ahora A es igual a 3. Quieres asignar un valor a una variable, pero no quieres imprimir el resultado. Si pones un punto y coma, el punto y coma suprime la salida impresa. Para hacer esto, presiona Enter, y no se imprime nada. Mientras que A es igual a 3. Mézclalo, imprímelo, mientras que A es igual 3, el punto y coma no imprim nada. Puedo hacer asignaciones en cadena. B es igual a hi Ahora, si sólo ingreso B, se imprime la variable B. B es la cadena hi C es igual a 3, mayor que dos puntos 1. Entonces, ahora C se evalúa como verdadero. Si quieres imprimir o mostrar una variable, así es como debes hacerlo. Voy a establecer que A es igual a Pi. Y si quiero imprimir A, puedo sólo escribir A de esta forma, y se imprimirá. Para impresiones más complejas, existe el comando DISP, que significa Display (mostrar). Display A sólo muestra A de esta forma. También puedes mostrar cadenas como: DISP, sprintf, dos decimales, por ciento 0.2, F, coma, A. Así. Y esto imprimirá la cadena. Dos decimales, dos puntos, 3.14. Es un tanto parecido a la vieja sintaxis de C. Para aquellos que ya han programado en C antes, esta es esencialmente la sintaxis que se utiliza para imprimir la pantalla. Entonces, el Sprintf genera una cadena con menos de 2 decimales, 3.1 más la cadena. Este porcentaje 0.2 F significa sustituir A aquí, mostrando los dos dígitos después de los puntos decimales. Y DISP toma la cadena. DISP la genera con el comando Sprintf. Sprintf. El comando Sprintf. Y DISP, de hecho, muestra la cadena. Y para mostrate otro ejemplo, Sprintf seis decimales por ciento 0.6 F coma A. Y, esto debería imprimir Pi con seis decimales. Finalmente, como decía, entonces, se ve así. Existen atajos útiles que escriben formatos largos de escritura. Causa que las cadenas por defecto se muestren con muchos más decimales. Y el formato corto es un comando que restablece la configuración predeterminada de sólo imprimir un número pequeño de dígitos. Bien, así es como se trabaja con variables. Ahora echemos un vistazo a los vectores y a las matrices. Digamos que quiero asignarle MAT A a la matriz. Déjame mostrarte un ejemplo: 1, 2, punto y coma, 3, 4, punto y coma, 5, 6. Esto genera una matriz A de tres por tres cuya primera fila es 1,2. Segunda fila 3, 4. La tercera fila es 5, 6. Lo que el punto y coma hace es, esencialmente, ir a la siguiente fila de la matriz. Hay otras formas de escribir esto. Escribe a 1, 2 punto y coma 3, 4, punto y coma, 5, 6, y así. Y esa es otra forma equivalente de asignar A para que tome los valores de esta matriz de tres por dos. Del mismo modo se pueden asignar vectores. Entonces, V es igual a 1, 2, 3. Esto es, en realidad, un vector de fila. O es un vector de 3 por 1. En donde éste es un vector Y gordo, lo siento, no, es una matriz de 1 por 3, claro. No 3 por 1. Si quiero asignar esto a un vector de columna, lo que haría en cambio, es hacer v 1;2;3. Y esto me daría un 3 por 1. Hay un vector de 1 por 3. Entonces, este será un vector de columna. Esta es una notación más útil. V igual a 1: 0.1: 2. Y lo que esto hace es establecer V al conjunto de elementos que comienzan desde 1. En incrementos y pasos de 0.1 hasta llegar a 2. Entonces, si hago esto, V va a ser este, ya sabes, vector de fila. Esto es realmente la matriz de uno por once. Esto es, 1, 1.1, 1.2, 1.3 y así sucesivamente hasta que llegamos a dos. Ahora, también puedo establecer V igual a uno dos puntos seis, y esto establece que V sea estos números. 1 hasta 6, bien. Ahora, estas son otras formas de generar matrices. Uno es 2.3, que es un comando que genera una matriz que será una matriz de dos por tres que es la matriz sólo de unos. Entonces, si establezco ese c2 veces unos dos por tres, ésto genera una matriz de dos por tres que sólo tiene doces. Puedes considerar esto como una forma más corta de escribir esto y c2,2,2 y puedes llamarlos 2,2,2, que también te dará el mismo resultado. Digamos que W es igual al uno por tres de uno, entonces, este va a ser un vector de fila o una fila de tres unos y, del mismo modo, puedes decir que w es igual a ceros, uno por tres y esto genera una matriz. Una matriz de uno por tres con únicamente ceros. Sólo un par más de formas para generar matrices. Si hago W igual a Rand uno por tres, esto me da una matriz de uno por tres con números aleatorios. Si hago Rand tres por tres, esto me dará una matriz de tres por tres con sólo números al azar desde la distribución uniforme entre cero y uno. Entonces, cada vez que hago esto, obtengo un conjunto diferente de números al azar extraídos uniformemente de entre cero y uno. Para aquellos que ya saben lo que es una variable aleatoria Gaussiana, o para aquellos que ya saben lo que es una variable aleatoria normal, también se puede establecer que W es igual a Rand N, uno por tres. Y entonces, estos van a ser tres valores extraídos de una distribución Gaussiana, con media de cero y una varianza o desviación estándar igual a uno. Y es posible establecer cosas más complejas, como que W es igual a menos seis, más la raíz cuadrada de diez, multiplicado por, digamos, Rand N, uno por 10 mil. Y voy a poner un punto y coma al final porque realmente no quiero que esto se imprima. ¿Y esto qué va a ser? Bien, va a ser ser un vector de, con cien mil, perdón, diez mil elementos. Entonces, bien, de hecho, ¿sabes qué? Vamos a imprimirlo. Entonces, esto generará una matriz como esta. ¿Verdad? Con 10,000 elementos. Entonces, eso es W. Y si ahora trazo un histograma de W con un comando hist, ahora puedo. Y la impresión de Octave del comando hist, ya sabes, toma algunos segundos hacerlo, pero es un histograma de mi variable aleatoria para W. Hubo un menos 6 más cero diez veces esta variable Gaussiana aleatoria. Y puedo trazar un histograma con más cubos, con más compartimientos, con, digamos, 50 cubos. Y este es mi histograma de una Gaussiana con media de menos 6. Porque tengo un menos 6 ahí más la raíz cuadrada de 10 veces esto. Entonces, la varianza de esta variable Gaussiana aleatoria es de 10 y la desviación estándar es la raíz cuadrada de 10, que es aproximadamente ¿qué? Tres punto uno. Por último, un comando especial para generar matrices, que es el comando I. Entonces, I se refiere a quizás un juego con la identidad de la palabra. Es el conjunto de servidor I4. Esta es la matriz de identidad de 4 por 4. Entonces, I es igual a I4. Esto me da una matriz de identidad de 4 por 4. E I es igual a I5, I6. Ésto me da una matriz de identidad de 6 por 6, I3 es la matriz de identidad de 3 por 3. Por último, para terminar este video, hay un comando más útil. Que es el comando help. Puedes escribir help I y esto abre la función de ayuda para la matriz de identidad. Oprime Q para salir. Y también puedes escribir help rand. Eso abrirá documentación para la función rand o la función de generación de números aleatorios. O incluso help help, lo que te mostrará, ya sabes, ayuda sobre la función help. Entonces, esas son las operaciones básicas en Octave. Y con esto deberías poder ser capaz de generar algunas matrices, multiplicar y sumar cosas. Y usar las funciones básicas en Octave. En el siguiente video, me gustaría empezar a hablar sobre comandos más sofisticados y sobre cómo utilizar datos y empezar a procesar datos en Octave.