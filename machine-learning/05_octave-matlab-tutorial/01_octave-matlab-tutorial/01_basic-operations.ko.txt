이제 여러분은 기계 학습에 대해 많은 것을 알고있습니다. 저는 이 비디오에서 여러분에게 프로그래밍 언어 Octave를 가르치려고 합니다. 여러분은 Octave로 이미 본 학습 알고리즘과 앞으로 이 수업에서 볼 학습 알고리즘을 매우 빠르게 구현할 수 있습니다. 이전에, 다른 많은 많은 프로그래밍 언어들을 사용해 기계 학습을 가르치려고 노력했었습니다 C++ 자바를 포함해 파이썬, Numpy Octave 또한 있었습니다. 학생들이 Octave 같이 상대적으로 고수준의 언어를 사용해 가장 생산적으로 배우고 가장 빠르게 배우고 알고리즘의 프로토타입을 가장 빠르게 만들 수 있다는 것을 발견했습니다. 사실, 제가 자주 실리콘 벨리에서 봤던 것은 알고리즘을 구축해야 하는 경우에도 만약 큰 규모의 학습 알고리즘을 구축하려고 한다면 사람들은 흔히 프로토 타입을 만듭니다 그리고 언어는 Octave를 사용합니다. Octave는 프로토타입 하기에 훌륭한 언어입니다. 그래서 학습 알고리즘을 빠르게 구현할 수 있습니다. 매우 큰 규모의 학습 알고리즘이 필요한 경우에만 C++, 자바 또는 이와 같은 언어로 알고리즘을 재구현 하는데 시간을 쓰세요. 왜냐하면 지금까지 배운 교훈은 프로그래밍 시간 또는 개발 시간 즉 당신의 시간은 기계 학습에서 시간은 매우 소중합니다 만약에 Octave로 학습 알고리즘을 더 빠르게 작동시킬 수 있다면. 알고리즘의 첫 개발을 Octave에서 함으로 전체적으로 많은 시간을 아끼게 됩니다 그리고 그 알고리즘 아이디어가 작동한 다음에 C++ 자바 로 구현합니다. 제가 본 기계학습에서 쓰이는 가장 일반적인 프로토타입 언어는 Octave, MATLAB, 파이썬, NumPy, R 입니다. Octave는 오픈소스기 때문에 좋습니다. MATLAB도 잘 되긴 하지만 많은 사람들에게 비쌉니다. MATLAB를 사용할 수 있으시다면 강의에서 MATLAB도 사용할 수 있습니다. 파이썬이나 NumPy 또는 R을 알고있다면 몇몇 사람들이 그걸 쓰는걸 봤습니다만 이 사람들은 결국엔 보통 더 느리게 개발합니다 왜냐하면 이 언어들, 파이썬, NumPy 문법이 Octave 문법 보다 투박하기 때문입니다. 그리고 이것 때문에 처음에 코드를 쓰는데 Octave를 사용합니다. 이 수업에 따르는 연습을 Numpy와 R에서 하려고 노력하지 않기를 강력히 추천합니다. 하지만 대신에 이 수업에 있는 프로그래밍 연습을 Octave에서 하기를 추천합니다. 이번 비디오에서 명령어들을 매우 빠르게 훑어 보려고 합니다 명령어의 범위와 Octave에서 할 수 있는 것들을 빠르게 보여주는 것이 목표입니다. 강의 사이트에는 제가 하는 모든 것의 스크립트가 있습니다. 그리고 비디오를 다 본 뒤에 명령어를 찾고 싶으면 스크립트를 참고할 수 있습니다 스크립트를 참고할 수 있습니다 구체적으로, 처음에 비디오를 보는 것을 추천합니다. 끝까지 보고 나서 Octave를 컴퓨터에 설치하세요. 끝으로, 강의 사이트에 들어가서 세션에서 본 스크립트를 다운받고 흥미로워보이는 명령어들을 어떤 것이든 컴퓨터에서 실행되도록 쳐보세요 그러면 실행되는 것을 볼 수 있습니다. 그럼 시작해보겠습니다. 여기 제 윈도우 데스크탑이 있고 Octave를 실행하겠습니다. Octave 창에 있습니다. 이것이 저의 Octave 프롬포트 창입니다. 처음에 기초적인 것들을 보여드리겠습니다. Octave에서 기초 연산을 할 수 있습니다 5 + 6 을 타이핑하면 답인 11을 보여줍니다. 3-2. 5 × 8, 1/2, 2 ^ 6 는 64 입니다. 이것은 기초적인 수학 연산입니다. 논리 연산도 할 수 있습니다. 1은 2와 같다. 이것은 거짓입니다. 퍼센트 명령어는 여기서 주석을 의미합니다. 1은 2와 같다 는 거짓이고 0으로 나타냅니다. 1은 2와 같지 않다. 이것은 참입니다. 그래서 1을 반환합니다. 여기서 같지 않다는 부호는 물결 등호로 표시합니다 다른 프로그래밍 언어에서 같지 않다로 사용하는 느낌표 등호는 같지 않다가 아닙니다 1과 0이 있는 논리 연산을 살펴보겠습니다 논리연산 AND에 두 개의 &기호를 사용합니다. 거짓으로 평가합니다. 1 또는 0은 OR 연산입니다. 참으로 평가합니다. 0과 1을 XOR 연산 할 수 있습니다. 1로 평가합니다 왼쪽에 있는 Octave 324 exe 는 11과 같습니다 이것은 Octave 기본 프롬포트입니다. Octave 버전과 기타 정보를 보여줍니다. 이 프롬포트가 마음에 들지 않으면 PS, 따옴표, 부등호, 부등호, 따옴표로 된 숨겨진 명령어가 있습니다. 이것으로 프롬포트를 바꿀 수 있습니다. 제가 알기론 이 명령어는 중간에 있는 문자열을 가져옵니다. 따옴표, 부등호, 부등호, 공백 저는 이런 Octave 프롬포트를 더 좋아합니다. 자 엔터를 누르면 죄송합니다. 이렇게. PS1 으로 이제 제 Octave 프롬포트가 부등호 부등호 기호로 바뀌었습니다. 조금 더 나아 보입니다. 다음으로, Octave 변수에 대해 이야기 해 봅시다. 변수 A를 가져와서 3을 할당하고 엔터를 누릅니다. 이제 A는 3과 같습니다. 변수를 할당하고 싶지만 결과를 출력하고 싶지는 않습니다. 세미콜론을 넣으면 세미콜론은 결과를 출력하는 것을 막습니다. 그래서 이렇게 하고 엔터를 누르면 아무것도 출력하지 않습니다. A = 3을 하면 출력합니다. A = 3; 은 아무것도 출력하지 않습니다. 문자열도 할당할 수 있습니다. B 는 hi와 같고 이제 제가 그냥 엔터를 누르면 변수 B를 출력합니다 B는 문자열 hi 입니다 C는 3>=1 입니다 이제 C를 참으로 평가합니다. 변수를 출력하거나 보이고 싶다면 이렇게 하면 됩니다 A를 Pi로 하고 A를 출력하고 싶다면 이렇게 그냥 A를 치면 출력합니다. 더 복잡한 출력을 하기 위해서 출력 표준 명령어인 DISP 또한 존재합니다. disp A 는 이렇게 A를 그냥 출력합니다 문자열로 출력할 수 있습니다. 자, disp, sprintf 2 decimals, percent 0.2 F , A 이것은 문자열을 출력합니다. 2 decimals, 콜론, 3.14 이건 오래된 C 언어 스타일의 문법입니다 이전에 C 프로그래밍을 해본 적이 있다면 이것은 출력을 하기 위해 필수적인 문법입니다. Sprintf는 소숫점 두 번째 자리까지 나타낸 3.14 문자열을 생성합니다 %0.2f는 A로 이 부분을 대체하고 소숫점 뒤 두 자리까지 나타냄을 뜻합니다. 그리고 DISP는 Sprintf 명령어에 의해 생성된 문자열을 받습니다. Sprintf Sprintf 명령어와 DISP는 실제로 문자열을 출력합니다. 다른 예제를 보여드리겠습니다 Sprintf six decimals percent 0.6 F , A. 이것은 Pi를 소숫점 아래 6번째 자리까지 출력합니다. 마지막으로, A를 이렇게 출력했었습니다. format long을 입력하는 유용한 방법이 있습니다. 이것은 문자열을 기본으로 합니다. 더 많은 자릿수가 표시됩니다. 그리고 format short는 작은 수를 출력하는 기본으로 돌아가는 명령어입니다. 좋습니다, 이것이 변수를 다루는 방법입니다. 이제 백터와 행렬을 보겠습니다. MAT A 에 행렬을 할당하려고 합니다. 예제를 보겠습니다 1 2; 3 4; 5 6; 이것은 3 x 2 행렬 A를 생성합니다 첫 번째 행은 1, 2 두 번째 행은 3 4 세 번째 행은 5 6 세미콜론이 하는 것은 필수적인데 행렬의 다음 행으로 가라는 뜻입니다 이것을 입력하는 다른 방법도 있습니다. A 1, 2 세미콜론 3, 4 세미콜론 5, 6 계속해서 입력합니다. 이 3 x 2 행렬을 A에 할당하는 다른 방법입니다 마찬가지로 벡터를 할당 할 수 있습니다. V는 1, 2, 3이 됩니다. 이것은 실제로 행 벡터입니다 또는 3 x 1 벡터입니다. 이건 y 축으로 긴 벡터입니다 죄송합니다. a는 1 x 3 행렬입니다 3 x 1 아니라 이것을 열 벡터로 만들고 싶다면 대신 v = 1; 2; 3; 를 하면 됩니다. 그러면 3 x 1 행렬을 반환합니다 1 x 3 행렬이 있습니다 이것은 열 벡터입니다. 좀 더 유용한 표기법이 있습니다. v = 1: 0.1: 2 이것은 v 를 1부터 시작해 2 까지 0.1씩 증가하는 요소들로 설정합니다 그래서 그렇게 하고 나면, V는 이처럼 행 벡터가 됩니다. 이것은 1 x 11 행렬입니다. 1, 1.1, 1.2, 1.3 이고 2가 될 때 까지 계속됩니다. 이제, v를 1;6 로 설정할 수 있습니다. 그러면 v를 1 부터 6 까지 숫자로 설정합니다, 좋습니다. 이제 행렬을 만드는 다른 방법이 있습니다. ones 2.3은 모든 요소가 1인 2 x 3 행렬을 생성하는 명령어입니다. c 를 ones 2.3 곱하기 2로 설정하면 모든 요소가 2인 2 x 3 행렬을 생성합니다. 이것을 c = 2, 2, 2; 2, 2, 2를 선언하는 간략한 방법이라고 생각할 수 있습니다. 이것은 같은 결과를 반환합니다. w를 ones 1. 3로 하면 행 백터 또는 세개의 1로 이루어진 한 개의 행입니다 또한 마찬가지로 w를 zeroes 1. 3로 하면 행렬을 만듭니다. 모든 요소가 0인 1 x 3 행렬입니다. 행렬을 생성하는 몇 가지 방법이 더 있습니다. w를 rand 0.3로 할당하면 모든 요소가 무작위 숫자인 0 x 3 행렬을 반환합니다. rand 3.3를 하면 모든 요소들이 0과 1 사이의 균등분포에서 가져온 무작위 숫자로 구성된 3 x 3 행렬을 반환합니다. 그래서 이 것을 할 때 마다 0과 1 사이의 균등분포에서 가져온 다른 무작위 숫자를 가지게 됩니다. 이전에 C 프로그래밍을 해본 적이 있다면 여러분 중 가우스 확률 변수 또는 정규 확률 변수를 아는 사람은 w를 randn 1.3로 설정할 수 있습니다. 그러면 이것은 평균이 0이고 분산 또는 표준 편차가 1인 가우스 분포로부터 가져온 세가지 값이 됩니다. 더 복잡한 것들을 설정할 수 있습니다 w = -6 + sqrt(10) * randn(1. 10000) 마지막에 세미콜론을 추가하겠습니다. 왜냐 하면 출력하고 싶지 않기 때문입니다. 어떻게 될까요? 이것은 백터가 되는데 십만개로 이루어진, 죄송합니다, 만개의 요소를 가집니다 그래서 출력해 봅시다. 이와 같은 행렬을 생성합니다. 그렇지 않습니까? 10,000개의 요소를 가진. 이게 w 입니다. 지금 hist 명령어로 w의 막대그래프를 그리면 Octave가 hist 명령어를 출력합니다 이것를 불러오려면 몇 초 정도 걸립니다. 이것이 w 확률 변수의 막대그래프 입니다. -6 + sqrt(10) 곱하기 가우스 확률 변수가 있고 막대그래프를 더 많은 막대로 50개로 그릴 수 있습니다. 그리고 이것이 평균이 -6인 가우스 변수의 막대그래프입니다. 왜냐 하면 -6을 했고 루트 10을 곱했기 때문입니다. 그래서 가우스 확률 변수의 분산은 10이고 표준 편차는 루트 10입니다. 루트 10은 무슨 값일까요? 3.1 입니다. 마지막으로 행렬을 생성하기 위한 특별한 명령어 하나는 eye 입니다. 이것이 단어 정체성에 대한 말장난이라고 생각합니다 eye에 4를 넘겨주면 4 x 4 단위 행렬이 됩니다. i 를 eye 4로 하면 4 x 4 단위 행렬을 반환합니다. 그리고 i 를 eye 5, eye 6으로 하면 6 x 6 행렬을 반환합니다. eye 3 는 3 x 3 단위행렬입니다. 마지막으로 비디오를 마무리하며, 유용한 명령어가 하나 더 있습니다. help 명령어입니다. help eye를 입력하면 단위 행렬에 대한 도움말 기능을 제공합니다. 종료하기 위해 q 를 누르세요 또한 help rand라고 입력할 수 있습니다. rand에 대한 문서나 무작위 숫자 생성 기능에 대해 불러옵니다. 또는 심지어 help help도 도움말 기능의 help 를 보여줍니다 이것들은 Octave에 있는 기본 연산입니다. 이것들을 가지고 행렬을 만들고 곱하고 더할 수 있습니다. Octave에서 기본 연산들을 사용해 보세요. 다음 비디오에서는 더 복잡한 명령어와 어떻게 데이터를 사용하는지 이야기하고 Octave에서 데이터를 처리를 시작해 보고자 합니다.