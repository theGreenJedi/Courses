学習アルゴリズムを開発する時に、 非常に多くの場合、いくつかのプロットを 出力することにより アルゴリズムがどのように 動作しているかを把握し、要所確認できます。 全てが問題なく進行しているか アルゴリズムが意図したことを実行しているかなどです。 例えば、以前の ビデオで、目的関数 J(theta) をプロット することで最急降下法が 収束していることを確認できるとお話しました。 多くの場合、データのプロット あるいは学習アルゴリズムの全出力のプロットから 学習アルゴリズムをどのように改善すべきか アイディアを得ることができます。 幸い、 Octave では非常に 簡単なツールで多くの 異なるプロットを作成することが出来ますので、 私が学習アルゴリズムを使う時は データをプロットし、 学習アルゴリズムなどをプロットすることが しばしば重要な プロセスの一過程として アルゴリズムの改善案を得るのに 役立っています。このビデオでは こうした Octave のプロット作成 およびデータの可視化のツールをお見せしたいと思います。 これが私の Octave ウィンドウです。 では、さっそく、プロットに使うデータを いくつか作成します。 そこで、t に この数字の配列を代入します。 これが t 0 から .98 に続く数字の集まりです。 さらに y1 = sin (2<i>pi<i>4<i>t) として</i></i></i> この正弦関数をプロットするのは非常に簡単です。 plot(t, y1) と入力し Enter を押すだけです。 するとこのプロットが表示され 横軸が t 変数で、縦軸が y1 となり、 それがさきほど計算した正弦の波形関数です。 では y2 を = cos (2<i>pi<i>4<i>t)</i></i></i> そしてこれをプロットすると plot(t,y2)、Octave が 実行するのは、 この正弦波形のプロットを この余弦関数と 置き換え、余弦なので開始が 1 からになっています。 では、もし 両方のプロット 正弦と余弦を重ねたい場合はどうすればいいでしょう。 その場合にするのは、 まず plot(t, y1) と入力し、 そしてこれがその正弦関数です。そして次に 関数 hold on を使います。 hold on が行うのは、 Octave が新しいグラフを 前のグラフの上に 重ねてプロットします。 ここで plot(t, y2) とすると 余弦関数は違う色でプロットしたいと思います。 なので、これをここに r を引用符で囲んで入れます。 すると、現在のグラフを置き換える 代わりに、余弦関数がその上に プロットされ、さらに、 r が示すのは、赤が色として指定されていることです。 ここで追加のコマンドを - xlabel ('times') を使って X軸、横軸のラベルを指定します。 そして ylabel('values') として 縦軸のラベルを 'value' とします。 そしてさらに 二つの線に凡例をつけることができます。 これがそのコマンドです: legend('sin','cos') すると、この 凡例が右上に 表示され、二つの 線が何かを示します。さらに title('my plot') とするとグラフの上に題名が表示されます。 最後に、このグラフを保存するには print -dpng 'myplot.png' と入力します。 PNG は画像 ファイル形式で、これを 実行すると、この形式でファイルに保存されます。 実行すると ディレクトリを変更させてください そうですね、こんな風に そして、それをプリント出力します。 これには少し 時間がかかります。 Octave の構成がどう設定されているかによって 数秒かかることがあります。ディレクトリを デスクトップに変更し、Octave が これを保存するのに数秒かかっています。 デスクトップに行って、ウィンドウを隠すと ここに myplot.png があります。 これが Octave が保存したファイルです。 このPNGファイルに先ほどのグラフが保存されています。 Octave はファイルを他の形式で保存することもできます。 そこで help plot と入力すると PNG 以外でグラフを 保存できる他のファイル形式 が何かを見ることが できます。 そして最後に、もし プロットを閉じたい場合は、 close コマンドで グラフが閉じます。 そこで close と入力するとグラフが デスクトップから消えました。 Octave ではグラフに番号を指定することもできます。 figure(1); plot(t, y1); とすると 最初のグラフが開き そして、(t, y1) がプロットされます。 次に二つ目のグラフを出力するには、異なる番号を指定します。 ですから、 figure(2); plot(t, y2); とすると、 これでデスクトップ上に二つのグラフが表示されます。 figure 1 および figure 2 一つが正弦 関数、もう一つが余弦関数です。 ここに、もう一つ便利なコマンドがあります。 私が良く使うこのコマンドは、subplot です。 では subplot(1, 2, 1) としましょう。 これが実行するのは、 プロットを1 x 2 のグリッドに 二分割し、それが 最初の二つの引数の意味です、 そしてその最初の グリッドにアクセスします。それが 最後の引数 1 の意味です。 ですから、グラフを 1 x 2 のグリッドに分割し、 その最初のグリッドにアクセスする という意味です。 そして、それを入力すると、 この出力、このグラフは、左側に表示されます。 そして、plot(t, y1) とすると、 これはその 最初のグリッドに表示されます。 さらに、subplot(1, 2, 2) とすると、 二番目のグリッドに アクセスを開始し、そして plot(t, y2) とすると、 y2 が 右側、つまり二番目のグリッドに表示されます。 そして最後のコマンドで、 軸の目盛りも変更します。 軸を axis([0.5 1 -1 1]) として変更すると、 X軸の範囲と Y軸の範囲が 右側のグラフに対して指定されます。 具体的には、これは右側の グラフの主要な目盛りを 指定し、念のため 0.5 から 1 になっていますね、そして 縦軸の値の範囲が -1 から 1 となります。 ちなみに、こうしたコマンドを全て暗記する必要はありません。 軸を変更する必要が 生じた場合、 知っていなければならないのは、軸を変更する コマンドがあるということだけで、 そしてその詳細は お馴染みの Octave の help コマンドから得ることができます。 最後に、いくつか最後のコマンドを。 clf はグラフをクリアし そして、もう一つ便利なコツがあります。 例えば、A = 5 x 5 の 魔方陣 とします。すると、A は これで 5 x 5 の行列です。ここで 私が行列を可視化するために 時々使う便利なコツがあります。 それは imagesc(A) を使うと これが実行するのは 5 x 5 の行列を プロットして、5 x 5 の色のグリッドを表示します。 異なる色は、A の行列の中の 異なる値に対応しています。 また、具体的には、colorbar とすることもできます。 いや、もっと 高度なコマンドを使います imagesc(A) colorbar, colormap gray 。 これは実際には三つのコマンドを続けて実行しています。 まず imagesc を実行し、次に colorbar、そしてcolormap gray を実行しています。 これが実行するのは、 カラーマップを指定しますので、 ここでは白黒階調のカラーマップになり、 その右に、さらにカラーバーが表示されます。 このカラーバーが どの色の階調が何に対応するかを示します。 具体的には、行列 A の 左上の要素は 17、ですからそれに対応する のは、このへんの階調の灰色です。 これに比べて、A の 二番目の要素、ですから A(1, 2) は 24 です。 この通り、A(1, 2) は 24 です。 これが対応するのは ここにあるこの四角で、 それはほぼ白に近い灰色です。 そして小さな値、 A、どれかな？ A(4, 5) の値は ここにある 3 で、それに対応する のは、カラーバーで見て分かるように それが対応するのは、 この画像のかなり暗目の階調です。 ここにもう一つの例があります。 もっと大きなプロット、 このように magic(15) とすると 15 x 15 の 魔方陣が得られます。 それをプロットすると、 この 15 x 15 の魔方陣の値が可視化できます。 そして最後のビデオの まとめとして、皆さんが ここでご覧になったのは、 関数呼び出しのカンマ連鎖の使い方です。 このようにして実際に利用します。 もし、a = 1, b = 2, c = 3、そして Enter を押すと、 これは実際には 三つのコマンドを同時に実行することになります。 というか、実際には三つのコマンドを 連続して実行します。 そして三つの全ての結果を出力します。 これは、このようにするのと似ています a = 1; b = 2; c = 3、違いは ここではカンマの代わりに セミコロンを使っているので何も出力されません。 ということで、 これがいわゆるコマンドの カンマ連鎖、関数呼び出しのカンマ連鎖です。 そして、これは Octave が提供する 複数のコマンド、例えば imagesc、colorbar、colormap のように、複数のコマンドを 同一ライン上で実行できる便利な機能の一つです。 これで以上です。 ここまでで、どのように Octave で異なるグラフをプロットするかお分かり頂けたと思います。 次のビデオでは、 私がお話したい次の主要なポイントは、 Octave における if、while、for などの制御文の 書き方と、 関数の定義の仕方と使い方です。