1
00:00:00,111 --> 00:00:02,628
在第二段关于 Octave的

2
00:00:02,630 --> 00:00:03,904
辅导课视频中 我将开始介绍

3
00:00:03,930 --> 00:00:07,322
如何在 Octave 中移动数据

4
00:00:07,340 --> 00:00:08,783
具体来说

5
00:00:08,783 --> 00:00:12,125
如果你有一个机器学习问题 你怎样把数据加载到 Octave 中？

6
00:00:12,125 --> 00:00:13,693
怎样把数据存入一个矩阵？

7
00:00:13,693 --> 00:00:15,284
如何对矩阵进行相乘？

8
00:00:15,290 --> 00:00:16,982
如何保存计算结果？

9
00:00:17,000 --> 00:00:22,185
如何移动这些数据 并用数据进行操作？

10
00:00:22,900 --> 00:00:25,044
和之前一样 这是我的 Octave 窗口

11
00:00:25,044 --> 00:00:29,256
我们继续沿用上次的窗口

12
00:00:29,290 --> 00:00:31,132
我键入 A

13
00:00:31,140 --> 00:00:32,258
得到我们之前构建的矩阵 A

14
00:00:32,258 --> 00:00:35,197
也就是用这个命令生成的

15
00:00:35,197 --> 00:00:38,152
A = [1 2; 3 4; 5 6]

16
00:00:38,190 --> 00:00:40,696
这是一个三行二列的矩阵

17
00:00:40,710 --> 00:00:42,415
Octave 中的 size() 命令

18
00:00:42,430 --> 00:00:46,361
返回矩阵的尺寸

19
00:00:46,361 --> 00:00:48,207
所以 size(A) 命令返回3 2

20
00:00:48,207 --> 00:00:50,160
实际上

21
00:00:50,180 --> 00:00:52,155
size() 命令返回的

22
00:00:52,155 --> 00:00:54,591
是一个 1×2 的矩阵

23
00:00:54,591 --> 00:00:56,598
我们可以用 sz 来存放

24
00:00:56,598 --> 00:00:58,370
设置 sz = size(A)

25
00:00:58,380 --> 00:00:59,597
因此 sz 就是一个1×2的矩阵

26
00:00:59,597 --> 00:01:01,627
第一个元素是3

27
00:01:01,640 --> 00:01:04,689
第二个元素是2

28
00:01:04,700 --> 00:01:07,494
所以如果键入 size(sz) 看看 sz 的尺寸

29
00:01:07,494 --> 00:01:08,898
返回的是1 2

30
00:01:08,898 --> 00:01:10,862
表示是一个1×2的矩阵

31
00:01:10,862 --> 00:01:13,721
1 和 2 分别表示

32
00:01:13,721 --> 00:01:15,279
矩阵 A 的维度 (此处口误 应为 sz 的维度 译者注)

33
00:01:15,279 --> 00:01:17,787
你也可以键入 size(A, 1)

34
00:01:17,787 --> 00:01:19,505
这个命令会返回

35
00:01:19,510 --> 00:01:21,542
A 矩阵的第一个元素

36
00:01:21,542 --> 00:01:22,662
A 矩阵的第一个维度的尺寸

37
00:01:22,680 --> 00:01:24,108
也就是 A 矩阵的行数

38
00:01:24,110 --> 00:01:26,307
同样 命令 size(A, 2)

39
00:01:26,320 --> 00:01:28,361
将返回2

40
00:01:28,361 --> 00:01:29,598
也就是 A 矩阵的列数

41
00:01:29,598 --> 00:01:31,942
也就是 A 矩阵的列数

42
00:01:31,950 --> 00:01:34,034
如果你有一个向量 v

43
00:01:34,034 --> 00:01:36,016
假如 v = [1 2 3 4]

44
00:01:36,030 --> 00:01:38,089
假如 v = [1 2 3 4]

45
00:01:38,089 --> 00:01:40,830
然后键入 length(v)

46
00:01:40,830 --> 00:01:42,097
这个命令将返回

47
00:01:42,097 --> 00:01:44,123
最大维度的大小

48
00:01:44,170 --> 00:01:45,609
你也可以键入 length(A)

49
00:01:45,609 --> 00:01:48,487
由于矩阵 A

50
00:01:48,500 --> 00:01:49,856
是一个3×2的矩阵

51
00:01:49,860 --> 00:01:52,305
因此最大的维度

52
00:01:52,330 --> 00:01:53,825
应该是3

53
00:01:53,825 --> 00:01:56,145
因此该命令会返回3

54
00:01:56,145 --> 00:01:58,805
但通常我们还是对向量使用 length 命令

55
00:01:58,810 --> 00:02:00,194
比如 length([1;2;3;4;5])

56
00:02:00,200 --> 00:02:02,222
比如 length([1;2;3;4;5])

57
00:02:02,230 --> 00:02:04,010
而不是对矩阵使用 length 命令

58
00:02:04,010 --> 00:02:07,205
因为毕竟有点容易让人弄混

59
00:02:07,620 --> 00:02:10,122
下面让我们来看看

60
00:02:10,122 --> 00:02:11,843
如何在系统中

61
00:02:11,860 --> 00:02:13,732
加载数据和寻找数据

62
00:02:13,732 --> 00:02:15,254
当我们打开 Octave 时

63
00:02:15,254 --> 00:02:16,882
我们通常已经在一个

64
00:02:16,920 --> 00:02:19,098
默认路径中

65
00:02:19,098 --> 00:02:21,738
这个路径是 Octave 的安装位置

66
00:02:21,750 --> 00:02:24,042
pwd 命令可以显示出

67
00:02:24,060 --> 00:02:25,619
Octave 当前所处路径

68
00:02:25,640 --> 00:02:28,738
Octave 当前所处路径

69
00:02:28,738 --> 00:02:31,932
所以现在我们就在这个目录下

70
00:02:31,932 --> 00:02:33,999
cd 命令

71
00:02:34,000 --> 00:02:35,322
意思是改变路径

72
00:02:35,330 --> 00:02:40,681
我可以把路径改为C:\Users\ang\Desktop

73
00:02:40,681 --> 00:02:43,657
这样当前目录就变为了桌面

74
00:02:43,657 --> 00:02:45,925
如果键入 ls

75
00:02:45,925 --> 00:02:49,447
ls 来自于一个 Unix 或者 Linux 命令

76
00:02:49,447 --> 00:02:50,648
ls 命令将列出

77
00:02:50,648 --> 00:02:52,435
我桌面上的所有路径

78
00:02:52,435 --> 00:02:54,137
因此这些就是

79
00:02:54,140 --> 00:02:58,184
我桌面上的所有文件了

80
00:03:15,850 --> 00:03:17,838
事实上 我的桌面上

81
00:03:17,838 --> 00:03:19,920
有两个文件

82
00:03:19,920 --> 00:03:21,689
featuresX.dat 和 priceY.dat

83
00:03:21,689 --> 00:03:23,596
是两个我想解决的机器学习问题

84
00:03:23,620 --> 00:03:25,830
这是我的桌面

85
00:03:25,830 --> 00:03:29,144
这是 featuresX 文件

86
00:03:29,144 --> 00:03:31,598
featuresX 文件如这个窗口所示

87
00:03:31,630 --> 00:03:34,492
是一个含有两列数据的文件

88
00:03:34,492 --> 00:03:36,702
这其实就是我的房屋价格数据

89
00:03:36,750 --> 00:03:38,374
我想应该是

90
00:03:38,374 --> 00:03:40,652
数据集中有47行

91
00:03:40,652 --> 00:03:42,344
第一个房子样本

92
00:03:42,350 --> 00:03:43,966
面积是2104平方英尺

93
00:03:43,970 --> 00:03:46,172
有3个卧室

94
00:03:46,190 --> 00:03:47,367
第二套房子面积为1600

95
00:03:47,367 --> 00:03:49,862
有3个卧室 等等

96
00:03:49,880 --> 00:03:52,302
priceY 是这个文件

97
00:03:52,302 --> 00:03:55,020
也就是

98
00:03:55,040 --> 00:03:57,575
训练集中的价格数据

99
00:03:57,575 --> 00:03:59,735
所以 featuresX 和

100
00:03:59,735 --> 00:04:03,061
priceY 就是两个存放数据的文档

101
00:04:03,061 --> 00:04:04,770
那么应该怎样把数据读入 Octave 呢？

102
00:04:04,770 --> 00:04:06,050
好的 我们只需要键

103
00:04:06,090 --> 00:04:08,163
键入 featuresX.dat

104
00:04:08,163 --> 00:04:10,069
这样

105
00:04:10,069 --> 00:04:11,991
我将加载了 featuresX 文件

106
00:04:11,991 --> 00:04:15,772
同样地我可以加载 priceY.dat

107
00:04:15,772 --> 00:04:17,323
其实有好多种办法可以完成

108
00:04:17,323 --> 00:04:19,245
如果你把命令写成

109
00:04:19,245 --> 00:04:20,916
字符串的形式 load('featureX.dat')

110
00:04:20,916 --> 00:04:22,533
也是可以的

111
00:04:22,550 --> 00:04:25,477
这里打错了

112
00:04:25,490 --> 00:04:27,317
这跟刚才的命令效果是相同的

113
00:04:27,317 --> 00:04:29,334
只不过是把文件名

114
00:04:29,360 --> 00:04:31,985
写成了一个字符串的形式

115
00:04:32,000 --> 00:04:34,148
现在文件名被存在一个

116
00:04:34,148 --> 00:04:35,716
字符串中

117
00:04:35,716 --> 00:04:38,902
Octave 中使用引号

118
00:04:38,930 --> 00:04:41,876
来表示字符串 就像这样

119
00:04:41,910 --> 00:04:42,837
这就是一个字符串

120
00:04:42,860 --> 00:04:45,517
因此我们读取的文件

121
00:04:45,517 --> 00:04:48,324
文件名由这个字符串给出

122
00:04:48,324 --> 00:04:50,919
另外 who 命令

123
00:04:50,960 --> 00:04:52,538
能显示出 在我的 Octave

124
00:04:52,538 --> 00:04:54,605
工作空间中的所有变量

125
00:04:54,605 --> 00:04:56,310
因此 who 命令显示出

126
00:04:56,330 --> 00:04:59,952
当前 Octave 储存的变量

127
00:04:59,952 --> 00:05:01,367
包括 featureX 和 priceY

128
00:05:01,370 --> 00:05:02,991
同样还包括

129
00:05:02,991 --> 00:05:04,120
在此之前你创建的

130
00:05:04,170 --> 00:05:06,311
那些变量

131
00:05:06,311 --> 00:05:09,198
所以我可以键入

132
00:05:09,198 --> 00:05:11,062
featuresX 回车 来显示 featuresX

133
00:05:11,062 --> 00:05:14,164
这些就是存在里面的数据

134
00:05:14,200 --> 00:05:16,419
还可以键入 size(featuresX)

135
00:05:16,419 --> 00:05:18,022
得出的结果是 47 2

136
00:05:18,022 --> 00:05:20,519
代表这是一个47×2的矩阵

137
00:05:20,519 --> 00:05:22,307
类似地

138
00:05:22,320 --> 00:05:23,729
输入 size(priceY)

139
00:05:23,729 --> 00:05:26,753
结果是 47 1

140
00:05:26,753 --> 00:05:30,125
表示这是一个47维的向量

141
00:05:30,125 --> 00:05:32,080
是一个列矩阵

142
00:05:32,080 --> 00:05:35,231
存放的是训练集中的所有价格 Y 的值

143
00:05:35,240 --> 00:05:37,584
who 函数能让你看到

144
00:05:37,600 --> 00:05:40,086
当前工作空间中的所有变量

145
00:05:40,086 --> 00:05:42,195
同样还有另一个 whos 命令

146
00:05:42,195 --> 00:05:45,369
能更详细地进行查看

147
00:05:45,369 --> 00:05:47,252
因此

148
00:05:47,270 --> 00:05:48,574
在 who 后面加一个 s

149
00:05:48,574 --> 00:05:49,979
同样也列出我所有的变量

150
00:05:49,979 --> 00:05:51,782
不仅如此 还列出了变量的维度

151
00:05:51,790 --> 00:05:52,759
我们看到 A 是一个

152
00:05:52,759 --> 00:05:54,764
3×2的矩阵

153
00:05:54,764 --> 00:05:56,545
X 是一个47×2的矩阵

154
00:05:56,545 --> 00:05:59,327
priceY 是一个47×1的矩阵

155
00:05:59,327 --> 00:06:01,098
也就是一个向量

156
00:06:01,130 --> 00:06:03,438
同时还显示出 需要占用多少内存空间

157
00:06:03,438 --> 00:06:06,020
以及数据类型是什么

158
00:06:06,020 --> 00:06:07,765
double 意思是双精度浮点型

159
00:06:07,765 --> 00:06:08,915
这也就是说

160
00:06:08,915 --> 00:06:13,148
这些数都是实数 是浮点数

161
00:06:13,148 --> 00:06:14,190
如果你想删除某个变量

162
00:06:14,190 --> 00:06:17,316
你可以使用 clear 命令

163
00:06:17,340 --> 00:06:21,124
因此 我们键入 clear featuresX

164
00:06:21,130 --> 00:06:23,448
然后再输入 whos 命令

165
00:06:23,448 --> 00:06:26,465
你会发现 featuresX 消失了

166
00:06:27,270 --> 00:06:28,567
另外 我们怎么储存数据呢？

167
00:06:28,567 --> 00:06:29,221
我们来看

168
00:06:29,221 --> 00:06:30,411
我们设变量 v

169
00:06:30,411 --> 00:06:33,075
为 priceY(1:10)

170
00:06:33,075 --> 00:06:34,826
这表示的是将向量 Y 的

171
00:06:34,826 --> 00:06:38,574
前10个元素存入 v 中

172
00:06:38,860 --> 00:06:43,215
我们输入 who 或者 whos

173
00:06:43,220 --> 00:06:46,612
Y 是一个47×1的向量

174
00:06:46,612 --> 00:06:48,474
因此现在 v 就是10×1的向量

175
00:06:48,474 --> 00:06:50,809
因为刚才设置了

176
00:06:50,809 --> 00:06:52,451
v = priceY(1:10)

177
00:06:52,451 --> 00:06:53,520
这便将 v 的值

178
00:06:53,520 --> 00:06:55,705
设为了 Y 的前十个元素

179
00:06:55,705 --> 00:06:57,398
假如我们想把它存入硬盘

180
00:06:57,398 --> 00:07:00,129
那么用 save hello.mat v 命令

181
00:07:00,129 --> 00:07:02,302
这个命令

182
00:07:02,310 --> 00:07:04,357
会将变量 v

183
00:07:04,370 --> 00:07:05,690
存成一个叫 hello.mat 的文件

184
00:07:05,720 --> 00:07:08,490
让我们回车

185
00:07:08,640 --> 00:07:10,965
现在我的桌面上

186
00:07:11,030 --> 00:07:13,181
就出现了一个新文件

187
00:07:13,181 --> 00:07:15,066
名为 hello.mat

188
00:07:15,066 --> 00:07:16,509
由于我的电脑里

189
00:07:16,530 --> 00:07:17,962
也同时安装了 MATLAB

190
00:07:17,962 --> 00:07:19,711
所以这个图标

191
00:07:19,711 --> 00:07:21,621
上面有 MATLAB 的标识

192
00:07:21,621 --> 00:07:23,559
因为操作系统把文件识别为 MATLAB 文件

193
00:07:23,559 --> 00:07:24,882
所以如果在你的电脑上

194
00:07:24,890 --> 00:07:26,051
图标显示的不一样的话

195
00:07:26,051 --> 00:07:28,778
也没有关系

196
00:07:28,778 --> 00:07:31,017
现在我们清除所有变量

197
00:07:31,020 --> 00:07:32,602
直接键入 clear

198
00:07:32,602 --> 00:07:36,061
这样将删除工作空间中的所有变量

199
00:07:36,080 --> 00:07:39,078
所以现在工作空间中啥都没了

200
00:07:39,078 --> 00:07:41,856
但如果我载入 hello.mat 文件

201
00:07:41,856 --> 00:07:44,388
我又重新读取了变量 v

202
00:07:44,388 --> 00:07:46,054
因为我之前

203
00:07:46,054 --> 00:07:47,830
把变量 v存入了

204
00:07:47,830 --> 00:07:51,035
hello.mat 文件中

205
00:07:51,035 --> 00:07:54,636
所以我们刚才用 save 命令做了什么

206
00:07:54,636 --> 00:07:55,877
这个命令把数据

207
00:07:55,877 --> 00:07:57,811
按照二进制形式储存

208
00:07:57,850 --> 00:07:59,702
或者说是更压缩的二进制形式

209
00:07:59,702 --> 00:08:01,077
因此 如果 v 是很大的数据

210
00:08:01,077 --> 00:08:03,899
那么压缩幅度也更大

211
00:08:03,899 --> 00:08:05,645
占用空间也更小

212
00:08:05,650 --> 00:08:06,784
如果你想把数据

213
00:08:06,784 --> 00:08:08,959
存成一个人能看懂的形式

214
00:08:08,959 --> 00:08:11,870
那么可以键入

215
00:08:11,870 --> 00:08:14,055
save hello.txt v -ascii

216
00:08:14,110 --> 00:08:16,083
这样就会把数据

217
00:08:16,083 --> 00:08:18,787
存成一个文本文档

218
00:08:18,840 --> 00:08:21,352
或者将数据的 ascii 码存成文本文档

219
00:08:21,352 --> 00:08:22,802
现在 我键入了这个命令以后

220
00:08:22,802 --> 00:08:24,973
我的桌面上

221
00:08:24,973 --> 00:08:26,115
就有了 hello.txt 文件

222
00:08:26,130 --> 00:08:28,463
就有了 hello.txt 文件

223
00:08:28,463 --> 00:08:29,951
如果打开它

224
00:08:29,951 --> 00:08:31,016
我们可以发现

225
00:08:31,016 --> 00:08:33,958
这个文本文档存放着我们的数据

226
00:08:33,958 --> 00:08:36,698
这就是读取和储存数据的方法

227
00:08:36,698 --> 00:08:38,832
接下来我们再来讲讲操作数据的方法

228
00:08:38,832 --> 00:08:40,526
假如 A 还是那个矩阵

229
00:08:40,526 --> 00:08:44,910
跟刚才一样还是那个 3×2 的矩阵

230
00:08:45,710 --> 00:08:46,778
现在我们加上索引值

231
00:08:46,778 --> 00:08:48,493
比如键入 A(3,2)

232
00:08:48,493 --> 00:08:51,219
这将索引到

233
00:08:51,219 --> 00:08:52,917
A 矩阵的 (3,2) 元素

234
00:08:52,917 --> 00:08:54,308
A 矩阵的 (3,2) 元素

235
00:08:54,370 --> 00:08:56,320
这就是我们通常

236
00:08:56,400 --> 00:08:57,488
书写矩阵的形式

237
00:08:57,510 --> 00:09:00,421
写成 A 下标32

238
00:09:00,430 --> 00:09:02,280
下标32

239
00:09:03,570 --> 00:09:05,320
3和2分别表示

240
00:09:05,380 --> 00:09:07,028
矩阵的第三行

241
00:09:07,028 --> 00:09:08,664
和第二列对应的元素

242
00:09:08,664 --> 00:09:11,539
因此也就对应 6

243
00:09:11,590 --> 00:09:13,820
我也可以键入

244
00:09:14,550 --> 00:09:16,770
A(2,:) 来返回

245
00:09:16,770 --> 00:09:18,851
第二列的所有元素

246
00:09:18,851 --> 00:09:22,806
因此 冒号表示

247
00:09:22,810 --> 00:09:27,381
该行或该列的所有元素

248
00:09:27,420 --> 00:09:29,274
因此 A(2,:)

249
00:09:29,274 --> 00:09:32,425
表示 A 矩阵的第二行的所有元素

250
00:09:32,470 --> 00:09:35,662
类似地 如果我键入 A(:,2)

251
00:09:35,680 --> 00:09:38,262
这将返回 A 矩阵第二列的所有元素

252
00:09:38,262 --> 00:09:41,328
这将得到 2 4 6

253
00:09:41,328 --> 00:09:42,921
这表示返回

254
00:09:42,930 --> 00:09:45,467
A 矩阵的第二列的所有元素

255
00:09:45,500 --> 00:09:46,967
因此这就是

256
00:09:46,970 --> 00:09:49,636
矩阵 A 的第二列 就是 2 4 6

257
00:09:49,650 --> 00:09:51,267
你也可以在运算中

258
00:09:51,280 --> 00:09:54,148
使用这些较为复杂的索引

259
00:09:54,148 --> 00:09:56,575
我再给你展示几个例子

260
00:09:56,575 --> 00:09:58,537
可能你也不会经常使用

261
00:09:58,550 --> 00:10:02,231
但我还是输入给你看 A([1 3],:)

262
00:10:02,231 --> 00:10:03,471
这个命令意思是

263
00:10:03,500 --> 00:10:07,444
取 A 矩阵第一个索引值为1或3的元素

264
00:10:07,450 --> 00:10:08,765
也就是说我取的是

265
00:10:08,765 --> 00:10:10,588
A 矩阵的第一行和

266
00:10:10,603 --> 00:10:12,780
第三行的每一列

267
00:10:13,240 --> 00:10:13,240
第三行的每一列

268
00:10:14,163 --> 00:10:16,430
这是 A 矩阵

269
00:10:16,800 --> 00:10:18,260
因此

270
00:10:18,440 --> 00:10:21,872
输入 A([1 3], :)

271
00:10:21,900 --> 00:10:23,222
返回第一行

272
00:10:23,250 --> 00:10:25,023
返回第三行

273
00:10:25,023 --> 00:10:27,172
冒号表示的是

274
00:10:27,172 --> 00:10:28,313
取这两行的每一列元素

275
00:10:28,313 --> 00:10:29,585
也就是第一行

276
00:10:29,585 --> 00:10:31,045
和第二行的所有元素(此处口误 应为第三行 译者注)

277
00:10:31,045 --> 00:10:32,842
因此返回结果为 1 2 5 6

278
00:10:32,842 --> 00:10:34,353
可能这些比较复杂一点的

279
00:10:34,353 --> 00:10:37,182
索引操作

280
00:10:37,182 --> 00:10:39,819
你不会经常用到

281
00:10:40,210 --> 00:10:41,453
我们还能做什么呢

282
00:10:41,453 --> 00:10:43,617
这依然是 A 矩阵

283
00:10:43,617 --> 00:10:47,276
A(:,2) 命令返回第二列

284
00:10:47,276 --> 00:10:49,773
你也可以为它赋值

285
00:10:49,773 --> 00:10:51,178
所以我可以取 A 矩阵的第二列

286
00:10:51,190 --> 00:10:52,949
然后将它赋值为

287
00:10:52,950 --> 00:10:55,605
10 11 12

288
00:10:55,670 --> 00:10:58,084
如果我这样做的话

289
00:10:58,120 --> 00:10:59,220
我实际上是取出了 A 的第二列

290
00:10:59,290 --> 00:11:02,768
然后把一个列向量[10;11;12]赋给了它

291
00:11:02,768 --> 00:11:05,440
因此现在 A 矩阵的第一列还是 1 3 5

292
00:11:05,480 --> 00:11:08,760
第二列就被替换为 10 11 12

293
00:11:08,760 --> 00:11:14,513
接下来一个操作

294
00:11:14,680 --> 00:11:15,917
让我们把 A 设为

295
00:11:15,917 --> 00:11:17,738
A = [A, [100, 101, 102]]

296
00:11:17,750 --> 00:11:21,605
这样做的结果是

297
00:11:21,605 --> 00:11:24,109
在原矩阵的右边

298
00:11:24,120 --> 00:11:28,025
附加了一个新的列矩阵

299
00:11:28,047 --> 00:11:29,855
附加了一个新的列矩阵

300
00:11:29,890 --> 00:11:33,230
现在 见证奇迹的时刻...

301
00:11:33,260 --> 00:11:36,798
噢 我又犯错了

302
00:11:36,800 --> 00:11:41,065
应该放分号的

303
00:11:41,700 --> 00:11:43,910
现在 A 矩阵就是这样了

304
00:11:43,910 --> 00:11:44,564
明白?

305
00:11:44,564 --> 00:11:45,479
我希望你听懂了

306
00:11:45,479 --> 00:11:46,480
所以 [100;101;102]

307
00:11:46,480 --> 00:11:48,804
这是个列矩阵

308
00:11:48,820 --> 00:11:51,668
而我们所做的

309
00:11:51,668 --> 00:11:53,386
就是把 A 矩阵设置为

310
00:11:53,386 --> 00:11:56,156
原来的 A 矩阵

311
00:11:56,156 --> 00:11:57,368
再在右边附上一个

312
00:11:57,380 --> 00:11:59,192
新添加的列矩阵

313
00:11:59,192 --> 00:12:00,217
我们的原矩阵 A

314
00:12:00,217 --> 00:12:04,288
就是右边这个6个元素

315
00:12:04,288 --> 00:12:05,405
就是右边这个6个元素

316
00:12:05,405 --> 00:12:06,785
所以我们就是把 A 矩阵

317
00:12:06,810 --> 00:12:08,564
右边加上了一个

318
00:12:08,564 --> 00:12:09,793
新的列向量

319
00:12:09,793 --> 00:12:11,814
所以现在 A 矩阵

320
00:12:11,814 --> 00:12:16,083
变成这样一个 3×3 的矩阵

321
00:12:16,200 --> 00:12:18,005
最后 还有一个小技巧

322
00:12:18,010 --> 00:12:19,802
我也经常使用

323
00:12:19,810 --> 00:12:22,022
如果你就输入 A(:)

324
00:12:22,022 --> 00:12:25,585
这是一个很特别的语法结构

325
00:12:25,590 --> 00:12:28,695
意思是把 A 中的所有元素

326
00:12:28,695 --> 00:12:30,751
放入一个单独的列向量

327
00:12:30,850 --> 00:12:34,513
这样我们就得到了一个 9×1 的向量

328
00:12:34,513 --> 00:12:38,584
这些元素都是 A 中的元素排列起来的

329
00:12:39,700 --> 00:12:45,258
再来几个例子好了

330
00:12:45,300 --> 00:12:52,073
我还是把 A 重新设为 [1 2; 3 4; 5 6]

331
00:12:52,181 --> 00:12:54,035
假如说

332
00:12:54,060 --> 00:12:55,674
我再设一个 B

333
00:12:55,680 --> 00:12:58,984
为[11 12; 13 14; 15 16]

334
00:12:58,984 --> 00:13:00,346
我可以新建一个矩阵 C

335
00:13:00,346 --> 00:13:03,161
C = [A B]

336
00:13:03,200 --> 00:13:05,010
这个意思就是

337
00:13:05,080 --> 00:13:06,666
这是我的矩阵 A

338
00:13:06,666 --> 00:13:08,426
这是我的矩阵 B

339
00:13:08,426 --> 00:13:11,053
我设 C = [A B]

340
00:13:11,070 --> 00:13:12,225
这样做的结果就是

341
00:13:12,225 --> 00:13:15,438
把这两个矩阵直接连在一起

342
00:13:15,438 --> 00:13:18,408
矩阵 A 在左边

343
00:13:18,420 --> 00:13:20,786
矩阵 B 在右边

344
00:13:20,800 --> 00:13:23,738
这样组成了 C 矩阵

345
00:13:23,830 --> 00:13:27,145
就是直接把 A 和 B 合起来

346
00:13:27,145 --> 00:13:28,927
我还可以设

347
00:13:28,927 --> 00:13:31,975
C = [A; B]

348
00:13:32,000 --> 00:13:35,552
这里的分号表示

349
00:13:35,552 --> 00:13:38,881
把分号后面的东西放到下面

350
00:13:38,881 --> 00:13:39,880
所以

351
00:13:39,910 --> 00:13:41,169
[A; B]的作用

352
00:13:41,170 --> 00:13:42,408
依然还是把两个矩阵

353
00:13:42,460 --> 00:13:44,048
放在一起

354
00:13:44,048 --> 00:13:46,408
只不过现在是上下排列

355
00:13:46,408 --> 00:13:49,675
所以现在 A 在上面 B 在下面

356
00:13:49,675 --> 00:13:52,038
C 就是一个 6×2 矩阵

357
00:13:52,038 --> 00:13:54,263
简单地说

358
00:13:54,270 --> 00:13:56,705
分号的意思就是换到下一行

359
00:13:56,705 --> 00:13:58,463
所以 C 就包括上面的 A

360
00:13:58,463 --> 00:13:59,598
然后换行到下面

361
00:13:59,598 --> 00:14:00,610
然后在下面放上一个 B

362
00:14:00,690 --> 00:14:02,320
另外顺便说一下

363
00:14:02,390 --> 00:14:04,225
这个[A B]命令

364
00:14:04,225 --> 00:14:05,734
跟 [A, B] 是一样的

365
00:14:05,750 --> 00:14:09,106
这两种写法的结果是相同的

366
00:14:10,310 --> 00:14:11,916
好了 通过以上这些操作

367
00:14:11,916 --> 00:14:14,256
希望你现在掌握了

368
00:14:14,260 --> 00:14:17,207
怎样构建矩阵

369
00:14:17,207 --> 00:14:18,223
也希望我展示的这些命令

370
00:14:18,223 --> 00:14:19,822
能让你很快地学会

371
00:14:19,850 --> 00:14:21,913
怎样把矩阵放到一起

372
00:14:21,940 --> 00:14:23,390
怎样取出矩阵

373
00:14:23,390 --> 00:14:24,984
并且把它们放到一起

374
00:14:25,000 --> 00:14:27,009
组成更大的矩阵

375
00:14:27,009 --> 00:14:28,962
通过几句简单的代码

376
00:14:28,962 --> 00:14:30,770
Octave 能够很方便地

377
00:14:30,770 --> 00:14:32,683
很快速地帮助我们

378
00:14:32,683 --> 00:14:36,033
组合复杂的矩阵以及对数据进行移动

379
00:14:36,050 --> 00:14:38,027
这就是移动数据这一节课

380
00:14:38,027 --> 00:14:39,347
在下一段视频中

381
00:14:39,347 --> 00:14:40,783
我们将一起来谈谈

382
00:14:40,860 --> 00:14:46,232
怎样利用数据进行更为复杂的计算

383
00:14:46,830 --> 00:14:48,256
希望这节课的内容

384
00:14:48,256 --> 00:14:49,961
能让你明白

385
00:14:49,961 --> 00:14:51,049
在 Octave 中 怎样用几句简单的命令

386
00:14:51,049 --> 00:14:54,573
很快地对数据进行移动

387
00:14:54,590 --> 00:14:56,164
包括加载和储存一个向量

388
00:14:56,180 --> 00:14:58,059
或矩阵 加载和存储数据

389
00:14:58,090 --> 00:15:00,201
把矩阵放在一起

390
00:15:00,201 --> 00:15:02,990
构建更大的矩阵

391
00:15:02,990 --> 00:15:05,021
用索引对矩阵某个特定元素进行操作等等

392
00:15:05,021 --> 00:15:06,015
我知道可能我一下子

393
00:15:06,015 --> 00:15:06,944
讲了很多命令

394
00:15:06,980 --> 00:15:08,244
所以我认为对你来讲

395
00:15:08,244 --> 00:15:09,741
最好的学习方法是

396
00:15:09,741 --> 00:15:12,248
下课后复习一下我键入的这些代码

397
00:15:12,248 --> 00:15:13,286
好好地看一看

398
00:15:13,286 --> 00:15:14,661
从课程的网上

399
00:15:14,661 --> 00:15:15,927
把代码的副本下载下来

400
00:15:15,950 --> 00:15:17,479
重新好好看看这些副本

401
00:15:17,479 --> 00:15:18,820
然后自己在 Octave 中

402
00:15:18,820 --> 00:15:21,942
把这些命令重新输一遍

403
00:15:21,942 --> 00:15:24,752
慢慢开始学会使用这些命令

404
00:15:24,752 --> 00:15:28,113
当然 没有必要把这些命令都记住

405
00:15:28,113 --> 00:15:30,030
你也不可能记得住

406
00:15:30,030 --> 00:15:31,852
你要做的就是

407
00:15:31,852 --> 00:15:32,910
从这段视频里

408
00:15:32,910 --> 00:15:35,065
了解一下你可以用哪些命令 做哪些事

409
00:15:35,100 --> 00:15:36,519
这样在你今后需要

410
00:15:36,520 --> 00:15:37,902
编写学习算法时

411
00:15:37,902 --> 00:15:39,630
如果你要找到某个

412
00:15:39,630 --> 00:15:40,921
Octave 中的命令

413
00:15:40,930 --> 00:15:42,455
你可能回想起

414
00:15:42,455 --> 00:15:43,878
你之前在这里学到过

415
00:15:43,878 --> 00:15:45,325
然后你就可以查找

416
00:15:45,325 --> 00:15:47,300
课程中提供的程序副本

417
00:15:47,300 --> 00:15:48,545
这样就能很轻松地找到

418
00:15:48,560 --> 00:15:51,693
你想使用的命令了

419
00:15:51,693 --> 00:15:53,069
基本用不上

420
00:15:53,069 --> 00:15:54,841
移动数据这节课的全部内容

421
00:15:54,841 --> 00:15:56,060
在下一段视频中

422
00:15:56,120 --> 00:15:57,699
我将开始向你介绍

423
00:15:57,740 --> 00:15:59,257
怎样进行一些

424
00:15:59,257 --> 00:16:01,404
更复杂的计算

425
00:16:01,410 --> 00:16:03,548
怎样对数据进行计算

426
00:16:03,550 --> 00:16:04,866
怎样对数据进行计算

427
00:16:04,866 --> 00:16:06,560
同时开始实现学习算法 【教育无边界字幕组】翻译：所罗门捷列夫 校对、审核：Naplessss