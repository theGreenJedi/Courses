1
00:00:00,180 --> 00:00:02,402
При разработке алгоритмов обучения зачастую

2
00:00:02,402 --> 00:00:04,066
несколько простых

3
00:00:04,066 --> 00:00:05,279
графиков

4
00:00:05,279 --> 00:00:06,593
дадут вам лучшее понимание того, как работает

5
00:00:06,593 --> 00:00:08,423
алгоритм, и

6
00:00:08,423 --> 00:00:09,503
позволят убедиться,

7
00:00:09,510 --> 00:00:12,405
что всё идет как надо и алгоритм делает то, что предполагается.

8
00:00:12,410 --> 00:00:13,924
Например, ранее в курсе я говорил

9
00:00:13,924 --> 00:00:15,244
о том, как

10
00:00:15,244 --> 00:00:16,826
график функции

11
00:00:16,826 --> 00:00:18,433
затрат J(theta) может помочь

12
00:00:18,433 --> 00:00:21,383
вам убедиться, что уменьшение градиента стремится к нулю.

13
00:00:21,383 --> 00:00:23,084
Часто графическое

14
00:00:23,084 --> 00:00:24,795
представление данных или

15
00:00:24,810 --> 00:00:26,422
всего вывода алгоритма обучения также

16
00:00:26,422 --> 00:00:29,391
подсказывает идеи по улучшению алгоритма.

17
00:00:29,391 --> 00:00:31,312
К счастью, в Octave

18
00:00:31,330 --> 00:00:33,045
есть простые инструменты для создания

19
00:00:33,070 --> 00:00:34,534
графиков. Когда я работаю с

20
00:00:34,534 --> 00:00:36,518
обучающимися алгоритмами, я

21
00:00:36,518 --> 00:00:38,082
замечаю, что визуализация

22
00:00:38,082 --> 00:00:40,175
результатов зачастую подсказывает

23
00:00:40,175 --> 00:00:42,057
способы улучшения алгоритмов. В этом видео

24
00:00:42,060 --> 00:00:43,165
я продемонстрирую

25
00:00:43,165 --> 00:00:45,937
некоторые возможности

26
00:00:45,980 --> 00:00:47,199
Octave в

27
00:00:47,199 --> 00:00:48,482
области визуализации

28
00:00:48,482 --> 00:00:52,773
данных.

29
00:00:53,700 --> 00:00:55,301
Вот окно Octave.

30
00:00:55,301 --> 00:00:57,471
Давайте по-быстрому сгенерируем какие-нибудь данные для

31
00:00:57,471 --> 00:00:58,646
отображения.

32
00:00:58,646 --> 00:00:59,724
Я собираюсь присвоить T вот такой массив

33
00:00:59,740 --> 00:01:02,181
чисел.

34
00:01:02,210 --> 00:01:03,828
Сейчас T - множество чисел

35
00:01:03,828 --> 00:01:06,685
от 0 и до 0.98.

36
00:01:06,700 --> 00:01:09,048
Присвоим y1=sin(2*pi*4*t).

37
00:01:09,060 --> 00:01:11,340
Будет несложно построить эту

38
00:01:12,540 --> 00:01:16,102
синусоиду.

39
00:01:16,102 --> 00:01:17,918
Я просто пишу plot(t, y1) и

40
00:01:17,918 --> 00:01:20,304
нажимаю Enter.

41
00:01:20,320 --> 00:01:22,233
И мы видим этот график, где

42
00:01:22,233 --> 00:01:24,270
по горизонтальной оси

43
00:01:24,270 --> 00:01:25,515
отложены значения t, по

44
00:01:25,515 --> 00:01:26,946
вертикальной - значения y1, и построена

45
00:01:26,960 --> 00:01:30,577
синусоида, которую мы только что рассчитали.

46
00:01:30,990 --> 00:01:32,281
Пусть

47
00:01:32,281 --> 00:01:34,401
y2=cos(2*pi*4*t), вот

48
00:01:34,410 --> 00:01:38,735
так.

49
00:01:38,750 --> 00:01:41,403
Если я выполню

50
00:01:41,403 --> 00:01:43,835
plot(t,y2), то

51
00:01:43,835 --> 00:01:45,045
Octave заменит функцию

52
00:01:45,060 --> 00:01:46,988
синуса на

53
00:01:46,988 --> 00:01:48,681
функцию

54
00:01:48,690 --> 00:01:51,322
косинуса, cos(x).

55
00:01:51,330 --> 00:01:53,006
А что, если я захочу

56
00:01:53,010 --> 00:01:54,581
увидеть графики синуса и косинуса один

57
00:01:54,610 --> 00:01:56,981
поверх другого?

58
00:01:56,990 --> 00:01:59,702
Всё, что мне нужно -

59
00:01:59,702 --> 00:02:01,164
написать plot(t, y1).

60
00:02:01,164 --> 00:02:03,332
И вот мой синус. А затем я воспользуюсь

61
00:02:03,332 --> 00:02:06,958
функцией hold on.

62
00:02:06,958 --> 00:02:08,908
Эта функция заставляет

63
00:02:08,920 --> 00:02:10,247
Octave строить новый

64
00:02:10,270 --> 00:02:11,490
график поверх предыдущего.

65
00:02:11,490 --> 00:02:13,772
Теперь я

66
00:02:13,772 --> 00:02:15,249
пишу plot(t,y2).

67
00:02:15,249 --> 00:02:19,812
Я собираюсь нарисовать косинус другим цветом.

68
00:02:19,850 --> 00:02:22,166
Так что я поставлю r в

69
00:02:22,180 --> 00:02:24,093
кавычках вот тут. Вместо

70
00:02:24,093 --> 00:02:25,339
создания нового графика, я построил

71
00:02:25,339 --> 00:02:26,615
косинусоиду на старом,

72
00:02:26,620 --> 00:02:28,499
и благодаря 'r' она нарисована

73
00:02:28,499 --> 00:02:32,915
красным цветом.

74
00:02:32,915 --> 00:02:35,166
Дополнительная команда xlabel('time') служит для

75
00:02:35,166 --> 00:02:39,157
подписывания оси Х, горизонтальной оси.

76
00:02:39,160 --> 00:02:41,451
ylabel('value') подписывает вертикальную

77
00:02:41,451 --> 00:02:44,688
ось. Я могу

78
00:02:44,688 --> 00:02:47,032
также подписать оба

79
00:02:54,532 --> 00:02:57,616
своих графика командой

80
00:02:57,620 --> 00:03:01,514
legend('sin','cos').

81
00:03:01,514 --> 00:03:02,860
Сверху справа появилась

82
00:03:02,890 --> 00:03:04,125
легенда с обозначением

83
00:03:04,125 --> 00:03:05,122
обеих линий.

84
00:03:05,122 --> 00:03:08,285
Наконец,

85
00:03:08,290 --> 00:03:12,753
title('my plot') задаст заголовок над графиком.

86
00:03:12,753 --> 00:03:13,835
Наконец,

87
00:03:13,835 --> 00:03:18,197
рисунок можно

88
00:03:18,197 --> 00:03:20,128
сохранить командой

89
00:03:20,128 --> 00:03:21,505
print -dpng 'myPlot.png'.

90
00:03:21,505 --> 00:03:23,292
Здесь PNG - формат

91
00:03:23,292 --> 00:03:25,170
графического файла. Тем самым вы

92
00:03:25,170 --> 00:03:27,612
сохраните свой график.

93
00:03:27,612 --> 00:03:28,902
Перед этим

94
00:03:28,920 --> 00:03:31,287
давайте я сменю текущую папку,

95
00:03:31,320 --> 00:03:35,114
вот на эту, и после этого

96
00:03:35,130 --> 00:03:39,180
сохраню файл.

97
00:03:39,230 --> 00:03:41,692
Это займет некоторое

98
00:03:41,700 --> 00:03:43,869
время в зависимости

99
00:03:43,890 --> 00:03:46,193
от ваших настроек Octave. Я

100
00:03:46,230 --> 00:03:48,891
уже сделал свой

101
00:03:48,900 --> 00:03:50,730
рабочий стол текущей

102
00:03:50,730 --> 00:03:53,943
папкой, и теперь Octave нужно несколько секунд для сохранения файла.

103
00:03:54,750 --> 00:03:57,635
Если я проверю свой рабочий стол... Давайте свернем эти окна.

104
00:03:57,670 --> 00:03:59,358
Вот файл myPlot.png,

105
00:03:59,370 --> 00:04:00,720
сохраненный Octave, мой график в

106
00:04:00,740 --> 00:04:03,481
формате PNG.

107
00:04:03,481 --> 00:04:05,530
Octave может сохранять изображения в тысяче разных форматов.

108
00:04:05,530 --> 00:04:07,468
Можете набрать help plot, чтобы

109
00:04:07,468 --> 00:04:09,497
узнать о прочих

110
00:04:09,510 --> 00:04:11,512
форматах помимо PNG, в которых Octave

111
00:04:11,530 --> 00:04:13,377
может сохранять

112
00:04:13,377 --> 00:04:15,149
графику.

113
00:04:15,149 --> 00:04:16,471
Наконец, еесли нужно закрыть

114
00:04:16,471 --> 00:04:18,507
окно с графиком, это можно сделать

115
00:04:18,540 --> 00:04:23,867
командой close.

116
00:04:23,867 --> 00:04:24,963
После того, как я набрал close,

117
00:04:24,963 --> 00:04:26,628
окно с графиками

118
00:04:26,628 --> 00:04:30,153
исчезло.

119
00:04:30,640 --> 00:04:33,372
Octave также позволяет указывать номера графических окон.

120
00:04:33,372 --> 00:04:36,935
figure(1): plot(t,y1)

121
00:04:36,935 --> 00:04:39,582
Появляется первое окно, с

122
00:04:39,670 --> 00:04:41,959
графиком y1 от t.

123
00:04:41,970 --> 00:04:45,075
Если вам нужно новое окно, вам следует использовать другой номер.

124
00:04:45,075 --> 00:04:47,765
figure(2): plot(t,y2).

125
00:04:47,780 --> 00:04:49,924
Теперь на моем рабочем столе два

126
00:04:49,924 --> 00:04:53,084
графических окна.

127
00:04:53,084 --> 00:04:54,625
Окно 1 и окно 2, в первом

128
00:04:54,625 --> 00:04:55,874
построен график синуса, во

129
00:04:55,874 --> 00:04:59,169
втором - график косинуса.

130
00:04:59,170 --> 00:05:00,498
Вот еще одна удобная команда, которой я часто

131
00:05:00,498 --> 00:05:02,825
пользуюсь: subplot.

132
00:05:02,825 --> 00:05:05,401
Мы воспользуемся командой subplot(1,2,1).

133
00:05:05,401 --> 00:05:07,958
Этим мы разделим окно по

134
00:05:07,958 --> 00:05:11,200
вертикали на две секции,

135
00:05:11,780 --> 00:05:13,760
согласно первым двум

136
00:05:13,820 --> 00:05:16,010
аргументам, и

137
00:05:16,010 --> 00:05:17,607
перейдем в первую из этих

138
00:05:17,620 --> 00:05:19,335
секций.

139
00:05:19,340 --> 00:05:21,714
Согласно последнему параметру 1, вот здесь.

140
00:05:21,714 --> 00:05:23,568
Я превратил свое окно в

141
00:05:23,568 --> 00:05:24,913
сетку размера один на

142
00:05:24,913 --> 00:05:26,585
два, и теперь я

143
00:05:26,585 --> 00:05:27,948
буду работать в ее первой ячейке.

144
00:05:27,970 --> 00:05:30,435
Если я напишу команду, ее

145
00:05:30,435 --> 00:05:32,722
результат будет построен в первом окне.

146
00:05:32,760 --> 00:05:35,291
Я пишу plot(t,y1), и

147
00:05:35,350 --> 00:05:37,682
размещается в первой

148
00:05:37,682 --> 00:05:40,462
ячейке.

149
00:05:40,462 --> 00:05:42,565
Теперь выполним subplot(1,2,2).

150
00:05:42,565 --> 00:05:44,456
Уже во второй ячейке построим

151
00:05:44,456 --> 00:05:48,724
график plot(t,y2).

152
00:05:49,270 --> 00:05:51,323
График y2 от t окажется справа,

153
00:05:51,323 --> 00:05:54,875
во втором сегменте.

154
00:05:54,910 --> 00:05:56,114
Наконец, можно

155
00:05:56,114 --> 00:05:58,165
изменять масштабирование

156
00:05:58,165 --> 00:06:00,308
по отдельным

157
00:06:00,330 --> 00:06:02,892
осям. axis([0.5 1 -1 1])

158
00:06:02,892 --> 00:06:05,071
определит диапазон

159
00:06:05,071 --> 00:06:07,448
значений по обеим

160
00:06:07,448 --> 00:06:09,874
осям для правого

161
00:06:09,890 --> 00:06:12,381
графика: значения

162
00:06:12,381 --> 00:06:13,668
по горизонтальной

163
00:06:13,670 --> 00:06:14,856
оси будут

164
00:06:14,856 --> 00:06:16,334
лежать в пределах

165
00:06:16,340 --> 00:06:19,572
от 0.5 до 1, а по вертикальной оси - от -1 до 1.

166
00:06:19,572 --> 00:06:21,736
К слову, вам не надо запоминать все эти команды в подробностях.

167
00:06:21,736 --> 00:06:23,178
Если вам нужно

168
00:06:23,178 --> 00:06:24,773
изменить масштабирование,

169
00:06:24,780 --> 00:06:25,703
просто вспомните о существовании

170
00:06:25,703 --> 00:06:26,628
команды axis, а

171
00:06:26,628 --> 00:06:28,364
детали можно узнать из

172
00:06:28,364 --> 00:06:31,590
справки Octave.

173
00:06:31,600 --> 00:06:32,861
Еще несколько команд. clf

174
00:06:32,861 --> 00:06:35,449
очищает окно. И вот еще

175
00:06:35,450 --> 00:06:38,362
любопытная возможность.

176
00:06:38,362 --> 00:06:39,772
Создадим магический

177
00:06:39,772 --> 00:06:42,076
квадрат 5 на 5 с

178
00:06:42,076 --> 00:06:43,375
названием А.

179
00:06:43,380 --> 00:06:45,290
Создана матрица А размера

180
00:06:45,310 --> 00:06:47,581
5х5. Есть эффектный

181
00:06:47,581 --> 00:06:49,341
прием, с

182
00:06:49,350 --> 00:06:51,582
помощью которого я

183
00:06:51,582 --> 00:06:54,792
иногда визуализирую матрицы.

184
00:06:54,800 --> 00:06:56,362
Команда imagesc(A) построит

185
00:06:56,370 --> 00:06:58,056
цветовую сетку

186
00:06:58,056 --> 00:07:03,925
размера 5 на5.

187
00:07:03,925 --> 00:07:05,739
Здесь разные цвета соответствуют

188
00:07:05,739 --> 00:07:09,011
значениям элементов в матрице А.

189
00:07:09,060 --> 00:07:13,262
Для большей точности можно использовать colorbar.

190
00:07:13,630 --> 00:07:14,903
Или более

191
00:07:14,903 --> 00:07:16,715
функциональный

192
00:07:16,715 --> 00:07:19,608
вариант этой команды, вот

193
00:07:19,608 --> 00:07:22,454
такой.

194
00:07:22,454 --> 00:07:24,757
Это одновременный запуск трех команд.

195
00:07:24,760 --> 00:07:26,286
Я вызываю imagesc, затем

196
00:07:26,286 --> 00:07:28,943
colorbar, затем colormap gray.

197
00:07:28,943 --> 00:07:30,142
Этим я создаю цветовую

198
00:07:30,160 --> 00:07:31,355
палитру, точнее,

199
00:07:31,355 --> 00:07:32,749
палитру оттенков серого,

200
00:07:32,749 --> 00:07:35,333
и размещаю цветовую полосу справа.

201
00:07:35,360 --> 00:07:37,525
Эта цветовая полоса показывает, каким числовым

202
00:07:37,550 --> 00:07:40,701
значениям соответствуют цвета.

203
00:07:40,720 --> 00:07:42,704
В частности, верхний левый

204
00:07:42,704 --> 00:07:44,494
элемент А равен 17, и

205
00:07:44,494 --> 00:07:46,358
это число соответствует светлому

206
00:07:46,358 --> 00:07:49,297
оттенку серого.

207
00:07:49,297 --> 00:07:52,012
В то время как второй

208
00:07:52,012 --> 00:07:53,210
элемент А, вернее, 1,2-й э

209
00:07:53,280 --> 00:07:55,640
лемент А, равен 24.

210
00:07:55,640 --> 00:07:57,716
Как видите, элемент А(1,2) равен 24.

211
00:07:57,716 --> 00:07:59,683
Он отвечает за этот

212
00:07:59,690 --> 00:08:01,343
прямоугольник, который почти белого

213
00:08:01,360 --> 00:08:03,677
цвета.

214
00:08:03,677 --> 00:08:05,640
А вот маленькое число,

215
00:08:05,690 --> 00:08:08,657
скажем, элемент... какой это номер?

216
00:08:08,657 --> 00:08:12,260
А(4,5) равен 2, что

217
00:08:12,300 --> 00:08:14,346
соответствует гораздо

218
00:08:14,360 --> 00:08:15,548
более темному оттенку

219
00:08:15,548 --> 00:08:16,618
на моей цветовой

220
00:08:16,618 --> 00:08:19,499
шкале.

221
00:08:19,499 --> 00:08:21,141
В качестве другого примера я

222
00:08:21,141 --> 00:08:23,228
построю

223
00:08:23,230 --> 00:08:24,768
палитру большего

224
00:08:24,770 --> 00:08:26,029
размера. magic(15)

225
00:08:26,029 --> 00:08:27,675
вернет манический

226
00:08:27,680 --> 00:08:29,504
квадрат размера 15х15, и

227
00:08:29,504 --> 00:08:33,675
вот как выглядит черно-белая палитра значений этого квадрата.

228
00:08:33,700 --> 00:08:35,225
В завершение

229
00:08:35,225 --> 00:08:37,075
видео я хочу продемонстрировать

230
00:08:37,075 --> 00:08:38,318
объединение функций с

231
00:08:38,318 --> 00:08:41,917
помощью запятой.

232
00:08:41,940 --> 00:08:43,195
Вот как это делается.

233
00:08:43,210 --> 00:08:44,638
Если я наберу "a=1, b=2, c=3" и

234
00:08:44,690 --> 00:08:46,613
нажму Enter, то

235
00:08:46,613 --> 00:08:48,620
Octave

236
00:08:48,620 --> 00:08:50,628
одновременно выполнит три

237
00:08:50,628 --> 00:08:52,039
операции.

238
00:08:52,040 --> 00:08:53,490
Вернее, последовательно

239
00:08:53,490 --> 00:08:55,849
выполнит указанные три операции, и

240
00:08:55,849 --> 00:08:57,521
выведет на экран три результата.

241
00:08:57,521 --> 00:08:58,417
Это почти то же самое,

242
00:08:58,417 --> 00:09:00,489
что и "a=1; b=2; c=3", только

243
00:09:00,489 --> 00:09:01,755
если вместо запятых использовать

244
00:09:01,755 --> 00:09:03,532
точки с запятой, на

245
00:09:03,540 --> 00:09:05,854
экран не будет выведено ничего.

246
00:09:05,854 --> 00:09:07,195
Это называется объединением команд,

247
00:09:07,210 --> 00:09:08,865
или функций, с использованием

248
00:09:08,870 --> 00:09:12,185
запятой.

249
00:09:12,240 --> 00:09:13,755
Так в Octave реализована

250
00:09:13,755 --> 00:09:15,520
удобная возможность

251
00:09:15,520 --> 00:09:17,778
использования разных команд вроде

252
00:09:17,778 --> 00:09:19,358
imagesc, colorbar, colormap в

253
00:09:19,360 --> 00:09:22,919
одной строке.

254
00:09:22,930 --> 00:09:24,104
На этом все.

255
00:09:24,104 --> 00:09:25,281
Теперь вы знаете, как

256
00:09:25,281 --> 00:09:27,504
строить графики в Octave.

257
00:09:27,504 --> 00:09:29,270
В следующем видео я буду

258
00:09:29,280 --> 00:09:30,430
говорить в основном об операторах

259
00:09:30,460 --> 00:09:31,985
if, while, for, а также о

260
00:09:31,985 --> 00:09:33,622
том,

261
00:09:33,630 --> 00:09:35,294
как определять и

262
00:09:35,294 --> 00:09:39,426
использовать функции.