在这段视频中 告诉你怎样 为你的 Octave 程序写控制语句 诸如 "for" "while" "if" 这些语句 并且如何定义和使用方程 这是我们的 Octave 窗口 我先告诉你如何使用 “for” 循环 首先 我要将 v 值设为 一个10行1列 的零向量 现在 我要写一个 “for" 循环 让 i 等于 1 到 10 写出来就是 i = 1:10 让我们来看看 我要设 v(i) 的值 等于 2 的 i 次方 循环最后 结束 (end) 这里的空格没关系 所以我就加一些空格 让缩进后的代码看起来结构更清晰 但是你要知道这里的空格没有意义 如果按我这样做 那么 向量 v 的值就是 这样一个集合 2的一次方 2的二次方 依此类推 于是这就是我的 i 等于 1 到 10 的语句结构 让 i 遍历 1 到 10 的值 另外 你还可以通过 设置你的 indices (索引) 等于 1 一直到10 来做到这一点 这时 indices 就是一个从1到10的序列 你也可以写 i = indices 这实际上和我直接把 i 写到 1 到 10 是一样 你可以写 disp(i) 也能得到一样的结果 所以 这就是一个 “for” 循环 如果你对 “break” 和 “continue” 语句比较熟悉 Octave里也有 “break” 和 “continue” 语句 你也可以在 Octave环境里 使用那些循环语句 但是首先让我告诉你 一个 while 循环是如何工作的 这是我的 v 向量 让我们写个 while 循环 i = 1 ; while i <= 5 ; 让我们设置 v(i) 等于 100 然后 i 加 1 结束 (end) 所以这是什么意思呢 我让 i 取值从 1 开始 然后我要 让 v(i) 等于 100 再让 i 递增 1 直到 i 大于 5停止 现在来看一下结果 原来的向量 v 是2的这些次方 我现在已经取出了 向量的前五个元素 把他们用100覆盖掉 这就是一个while循环的句法结构 现在我们来分析另外一个例子 i = 1; while true, 这里我将向你展示 如何使用break语句 比方说 v(i) = 999 然后让 i = i+1 当 i 等于6的时候 break (停止循环) 结束 (end) 当然这也是我们第一次 使用一个 if 语句 所以 我希望你们可以理解这个逻辑 让 i 等于1 然后开始下面的增量循环 while语句重复设置 v(i) 等于1 (此处口误 应为999 译者注) 不断让i增加 然后当 i 达到6 做一个 中止循环的命令 尽管有while循环 语句也就此中止 所以最后的效果是 取出向量 v 的前5个元素 并且把它们设置为999 然后运行 的确如此 我们用999覆盖了 v 的前五个元素 所以 这就是 if 语句和 while 语句的句法结构 并且要注意 要有end 这里是有两个 end 的 这里的 end 结束的是 if 语句 第二个 end 结束的是 while 语句 现在让我告诉你使用 if-else 语句时 更一般的句法结构 举个例子 v(1) 等于999 假设我们 令 v(1) 等于2 所以 让我输入 if v(1) == 1, disp('The value is one'); 这里出现了一个else语句 或者更确切地说 这里是一个 elseif语句 elseif v(1) == 2, 这就是说 如果这种情况下命题为真 执行 disp('The value is two'); 否则(else) 执行 disp('The value is not one or two'); 好了 这就是一个if-else语句 if-else语句 记得最后有end 当然了 我们刚刚设置过 v(1)等于2 所以显然 显示的是 "The value is two" 最后 我觉得现在 提醒一件事 如果你需要退出 Octave 你可以键入 exit 命令然后 回车就会退出 Octave 或者命令 ‘quit’ 也可以 最后 让我们来说说 函数 (functions) 如何定义和调用函数 这是我的桌面 我在桌面上存了一个 预先定义的文件 名为 “squarethisnumber.m” 这就是在 Octave 环境下定义的函数 你需要创建一个文件 用你的函数名来命名 然后以 .m 的后缀结尾 当 Octave 发现这文件 它知道应该在什么位置 寻找 squareThisNumber.m 这个函数的定义 让我们打开这个文件 请注意 我使用的是 微软的写字板程序来打开这个文件 我只是想建议你 如果你也使用微软的 Windows 系统 那么可以使用写字板程序 而不是记事本 来打开这些文件 如果你有别的什么 文本编辑器 那也可以 但记事本有时会把代码的间距弄得很乱 如果你只有记事本程序 那也能用 但最好是 如果你有写字板的话 我建议你用写字板 或者其他可以编辑函数的文本编辑器 现在我们来说如何在 Octave 里定义函数 我们先来放大一点 这个文件只有三行 第一行写着 function y = squareThisNumber(x) 这就告诉 Octave 我想返回一个 y 值 我想返回一个值 并且返回的这个值 将被存放于 变量 y 里 另外 它告诉了 Octave 这个函数有一个参数 就是参数 x 还有定义的函数体 也就是 y 等于 x 的平方 现在让我们尝试调用这个函数 SquareThisNumber(5) 这实际上 是行不通的 Octave 说这个方程未被定义 这是因为 Octave 不知道在哪里找这个文件 所以像之前一样 我们​​使用 pwd 现在不在我的目录下 因此我们把路径设为 "C:\User\ang\desktop" 这就是我的桌面的路径 噢 打错了 应该是 "Users" 现在如果我 键入SquareThisNumber(5) 返回值是25 还有一种更高级的功能 这只是对那些知道 “search path (搜索路径)” 这个术语的人使用的 所以如果你 想要修改 Octave 的搜索路径 你可以把下面这部分 作为一个进阶知识 或者选学材料 仅适用于那些 熟悉编程语言中 搜索路径概念的同学 你可以使用 addpath 命令添加路径 添加路径 “C:\Users\ang\desktop” 将该目录添加到 Octave 的搜索路径 这样即使你跑到 其他路径底下 Octave依然知道 会在 Users\ang\desktop 目录下寻找函数 这样 即使我现在 在不同的目录下 它仍然 知道在哪里可以找到 “SquareThisNumber” 这个函数 明白? 但是 如果你不熟悉 搜索路径的概念 不用担心 只要确保 在执行函数之前 先用 cd 命令 设置到你函数所在的目录下 实际上也是一样的效果 Octave 还有一个 其他许多编程语言都没有的概念 那就是它可以 允许你定义一个函数 使得返回值是多个值或多个参数 这是一个例子 定义一个函数叫 “SquareAndCubeThisNumber(x)” (x的平方以及x的立方) 这说的就是 函数返回值是两个 y1 和 y2 接下来就是 y1是被平方后的数 y2是被立方后的结果 这就是说 函数会真的返回2个值 所以 有些同学可能会根据 你使用的编程语言 比如你们可能熟悉的C或C++ 通常情况下 认为作为函数返回值只能是一个值 但 Octave 的语法结构就不一样 可以返回多个值 现在回到 Octave 窗口 如果我键入 [a,b] = SquareAndCubeThisNumber(5) 然后 a 就等于25 b 就等于 5的立方 125 所以说如果你需要定义一个函数 并且返回多个值 这一点常常会带来很多方便 最后 我来给大家演示一下 一个更复杂一点的函数的例子 比方说 我有一个数据集 像这样 数据点为[1,1], [2,2], [3,3] 我想做的事是 定义一个 Octave 函数来计算代价函数 J(θ) 就是计算 不同 θ 值所对应的代价函数值 J 首先让我们把数据放到 Octave 里 我把我的矩阵设置为 X = [1 1; 1 2; 1 3]; 这就是我的设计矩阵 X 第一列表示x0项 矩阵的第一列 第二列表示 我的三个训练样本的 x 值 现在我再来 设置 y 值为 [1; 2; 3] 就像这样 是y轴对应值 现在我们设定 theta 为 [0;1] 现在我的桌面上 已经有我预定义的代价函数 J 如果我打开函数 函数的定义应该是下面这样的 所以 函数J 就写成 J = costFunctionJ(X, y, theta) 这里有一些注释 主要用于解释输入变量 接下来几步 设定 m 为训练样本的数量 也就是 X 的行数 计算预测值 predictions 预测值等于 X 乘以 theta 这里是注释行 是上一个注释行拐过来的部分 下面就是计算平方误差 公式就是 预测值减去 y 值 然后取出来每一项进行平方 最后就可以 计算代价函数 J 并且 Octave 知道 J 是一个我想返回的值 因为 J 出现在了我函数的定义里 另外 你可以随时 暂停一下视频 如果你想 仔细看一下这个函数的定义 确保你明白了定义中的每一步 现在当我 在 Octave 里运行时 我键入 j = costFunctionJ(x, y, theta) 然后他就开始计算 噢 又打错了 这里应该是大写 X 它就计算出 j 等于0 这是因为 如果我的数据集 x 为 [1;2;3] y 也为 [1;2;3] 然后设置 θ0 等于0 θ1 等于1 这给了我恰好45度的斜线 这条线是可以完美拟合我的数据集的 而相反地 如果我设置 theta 等于[0; 0] 那么这个假设就是 0是所有的预测值 和刚才一样 设置θ0 = 0 θ1 也等于0 然后我计算的代价函数 结果是2.333 实际上 他就等于1的平方 也就是第一个样本的平方误差 加上2的平方 加上3的平方 然后除以2m 也就是训练样本数的两倍 这就是2.33 因此这也反过来验证了 我们这里的函数 计算出了正确的代价函数 这些就是我们 用简单的训练样本 尝试的几次试验 这也可以作为我们对 定义的代价函数 J 进行了完整性检查 确实是可以计算出正确的代价函数的 至少基于这里的 X 和 y 是成立的 也就是我们 这几个简单的训练集 至少是成立的 好啦 现在你知道 如何在 Octave 环境下写出正确的控制语句 比如 for 循环、while 循环和 if 语句 以及如何定义和使用函数 在接下来的视频中 我会非常快的 介绍一下 如何在这门课里 完成和提交作业 如何使用我们的提交系统 在此之后 在最后的 Octave 教程视频里 我会讲解一下向量化 这是一种可以使你的 Octave 程序运行非常快的思想 【教育无边界字幕组】翻译：Jaminalia、reanghect 校对：所罗门捷列夫 审核：Naplessss