1
00:00:00,111 --> 00:00:02,628
Di video tutorial Octave kedua ini,

2
00:00:02,630 --> 00:00:03,904
saya ingin mulai

3
00:00:03,930 --> 00:00:07,322
membahas bagaimana mengolah data di
Octave.

4
00:00:07,340 --> 00:00:08,783
Jika Anda punya data dari

5
00:00:08,783 --> 00:00:12,125
persoalan machine learning, bagaimana
Anda memuat data itu di Octave?

6
00:00:12,125 --> 00:00:13,693
Bagaimana Anda menempatkannya

7
00:00:13,693 --> 00:00:15,284
ke dalam matriks dan memanipulasinya?

8
00:00:15,290 --> 00:00:16,982
Bagaimana menyimpan hasilnya?

9
00:00:17,000 --> 00:00:22,185
Bagaimana Anda mengolah dan
mengoperasikan data?

10
00:00:22,900 --> 00:00:25,044
Ini jendela Octave saya,

11
00:00:25,044 --> 00:00:29,256
tampilan terakhir pada video sebelumnya.

12
00:00:29,290 --> 00:00:31,132
Jika saya ketik A, itu

13
00:00:31,140 --> 00:00:32,258
matriks, kita membuatnya

14
00:00:32,258 --> 00:00:35,197
dengan perintah

15
00:00:35,197 --> 00:00:38,152
A = [1 2; 3 4; 5 6]

16
00:00:38,190 --> 00:00:40,696
Ini merupakan matriks 3 x 2.

17
00:00:40,710 --> 00:00:42,415
Perintah 'size' di Octave

18
00:00:42,430 --> 00:00:46,361
memberitahu Anda ukuran suatu matriks.

19
00:00:46,361 --> 00:00:48,207
Jadi, size(A) hasilnya 3 x 2.

20
00:00:48,207 --> 00:00:50,160
Tampaknya bahwa

21
00:00:50,180 --> 00:00:52,155
perintah 'size' sendiri sebenarnya

22
00:00:52,155 --> 00:00:54,591
menghasilkan matriks 1 x 2.

23
00:00:54,591 --> 00:00:56,598
Jadi, Anda bisa set

24
00:00:56,598 --> 00:00:58,370
sz = size(A) dan sekarang sz

25
00:00:58,380 --> 00:00:59,597
merupakan matriks

26
00:00:59,597 --> 00:01:01,627
1 x 2, dimana elemen pertamanya

27
00:01:01,640 --> 00:01:04,689
3, dan elemen keduanya adalah 2.

28
00:01:04,700 --> 00:01:07,494
Jika Anda ketik size(sz),

29
00:01:07,494 --> 00:01:08,898
ukurannya merupakan

30
00:01:08,898 --> 00:01:10,862
matriks 1 x 2 yang memiliki 2 elemen

31
00:01:10,862 --> 00:01:13,721
berisi dimensi dari

32
00:01:13,721 --> 00:01:15,279
matriks A. Anda juga

33
00:01:15,279 --> 00:01:17,787
bisa ketik size(A, 1)

34
00:01:17,787 --> 00:01:19,505
untuk memberikan dimensi

35
00:01:19,510 --> 00:01:21,542
pertama matriks A, ukuran

36
00:01:21,542 --> 00:01:22,662
dimensi pertama matriks A.

37
00:01:22,680 --> 00:01:24,108
Jadi, itu jumlah

38
00:01:24,110 --> 00:01:26,307
baris, dan size(A, 2)

39
00:01:26,320 --> 00:01:28,361
hasilnya 2, yaitu

40
00:01:28,361 --> 00:01:29,598
jumlah kolom dalam

41
00:01:29,598 --> 00:01:31,942
matriks A. Jika Anda

42
00:01:31,950 --> 00:01:34,034
punya vektor v,

43
00:01:34,034 --> 00:01:36,016
katakanlah

44
00:01:36,030 --> 00:01:38,089
v = [1 2 3 4], dan Anda

45
00:01:38,089 --> 00:01:40,830
ketik length(v).

46
00:01:40,830 --> 00:01:42,097
Ini memberi Anda

47
00:01:42,097 --> 00:01:44,123
ukuran dari dimensi terpanjang.

48
00:01:44,170 --> 00:01:45,609
Anda bisa juga ketik

49
00:01:45,609 --> 00:01:48,487
length(A) dan karena

50
00:01:48,500 --> 00:01:49,856
A adalah matriks

51
00:01:49,860 --> 00:01:52,305
3 x 2, dimensi terpanjangnya

52
00:01:52,330 --> 00:01:53,825
adalah 3.

53
00:01:53,825 --> 00:01:56,145
Jadi, ini harusnya menampilkan 3.

54
00:01:56,145 --> 00:01:58,805
Tapi, biasanya kita mengaplikasikan
'length' hanya pada vektor.

55
00:01:58,810 --> 00:02:00,194
Jadi, length([1;2;3;4;5])

56
00:02:00,200 --> 00:02:02,222
daripada

57
00:02:02,230 --> 00:02:04,010
mengaplikasikan 'length' ke matriks

58
00:02:04,010 --> 00:02:07,205
karena itu sedikit membingungkan.

59
00:02:07,620 --> 00:02:10,122
Sekarang, mari lihat

60
00:02:10,122 --> 00:02:11,843
bagaimana memuat data dan

61
00:02:11,860 --> 00:02:13,732
mencari data dalam sistem berkas.

62
00:02:13,732 --> 00:02:15,254
Saat kita membuka Octave,

63
00:02:15,254 --> 00:02:16,882
biasanya kita berada

64
00:02:16,920 --> 00:02:19,098
dalam path, yaitu

65
00:02:19,098 --> 00:02:21,738
dimana lokasi program Octave berada.

66
00:02:21,750 --> 00:02:24,042
Jadi, perinta 'pwd' menunjukkan

67
00:02:24,060 --> 00:02:25,619
direktori saat ini, atau

68
00:02:25,640 --> 00:02:28,738
path saat ini dimana Octave berada.

69
00:02:28,738 --> 00:02:31,932
Jadi sekarang kita ada di direktori ini.

70
00:02:31,932 --> 00:02:33,999
Perintah 'cd' singkatan untuk

71
00:02:34,000 --> 00:02:35,322
'change directory',

72
00:02:35,330 --> 00:02:40,681
jadi saya bisa menggantinya ke
C:/Users/ang/Desktop, dan

73
00:02:40,681 --> 00:02:43,657
sekarang saya berada di direktori
Desktop saya,

74
00:02:43,657 --> 00:02:45,925
dan jika saya ketik 'ls',

75
00:02:45,925 --> 00:02:49,447
'ls' merupakan perintah Unix
atau Linux.

76
00:02:49,447 --> 00:02:50,648
'ls' akan menampilkan

77
00:02:50,648 --> 00:02:52,435
direktori-direktori di Desktop saya, dan

78
00:02:52,435 --> 00:02:54,137
ini berkas-berkas

79
00:02:54,140 --> 00:02:58,184
yang ada pada Desktop saya saat ini.

80
00:03:15,850 --> 00:03:17,838
Bahkan, ada 2 berkas di desktop

81
00:03:17,838 --> 00:03:19,920
saya, featuresX.dat dan

82
00:03:19,920 --> 00:03:21,689
priceY.dat, yang mungkin berasal

83
00:03:21,689 --> 00:03:23,596
dari persoalan machine learning yang
ingin saya pecahkan.

84
00:03:23,620 --> 00:03:25,830
Ini desktop saya.

85
00:03:25,830 --> 00:03:29,144
Ini featuresX, dan

86
00:03:29,144 --> 00:03:31,598
featuresX adalah

87
00:03:31,630 --> 00:03:34,492
berkas yang berisi 2 kolom data ini.

88
00:03:34,492 --> 00:03:36,702
Ini adalah data harga-harga rumah saya.

89
00:03:36,750 --> 00:03:38,374
Saya pikir,

90
00:03:38,374 --> 00:03:40,652
set data ini ada 47 baris.

91
00:03:40,652 --> 00:03:42,344
Rumah pertama

92
00:03:42,350 --> 00:03:43,966
berukuran

93
00:03:43,970 --> 00:03:46,172
2104 kaki persegi, dengan 3 kamar tidur.
Rumah kedua

94
00:03:46,190 --> 00:03:47,367
berukuran

95
00:03:47,367 --> 00:03:49,862
1600 kaki persegi, dengan 3 kamar tidur,
dst.

96
00:03:49,880 --> 00:03:52,302
priceY adalah

97
00:03:52,302 --> 00:03:55,020
berkas ini yang berisi

98
00:03:55,040 --> 00:03:57,575
harga-harga data dalam set latihan saya.

99
00:03:57,575 --> 00:03:59,735
Jadi, featuresX dan

100
00:03:59,735 --> 00:04:03,061
priceY hanyalah berkas yang berisi
data saya.

101
00:04:03,061 --> 00:04:04,770
Bagaimana memuat data ini dalam Octave?

102
00:04:04,770 --> 00:04:06,050
Cukup dengan mengetik

103
00:04:06,090 --> 00:04:08,163
perintah 'load featuresX.dat'

104
00:04:08,163 --> 00:04:10,069
dan jika saya lakukan itu,

105
00:04:10,069 --> 00:04:11,991
saya memuat data featuresX

106
00:04:11,991 --> 00:04:15,772
dan dapat memuat priceY.dat juga.

107
00:04:15,772 --> 00:04:17,323
Ada beberapa cara untuk melakukan ini.

108
00:04:17,323 --> 00:04:19,245
Perintah ini, jika Anda masukkan

109
00:04:19,245 --> 00:04:20,916
featuresX.dat dalam

110
00:04:20,916 --> 00:04:22,533
tipe string dan memuatnya seperti itu.

111
00:04:22,550 --> 00:04:25,477
Salah ketik.

112
00:04:25,490 --> 00:04:27,317
Perintah ini sama dengan sebelumnya.

113
00:04:27,317 --> 00:04:29,334
Jadi, Anda bisa dengan cara ini,

114
00:04:29,360 --> 00:04:31,985
memasukkan nama berkas,

115
00:04:32,000 --> 00:04:34,148
mendefinisikannya dalam

116
00:04:34,148 --> 00:04:35,716
string, dan di

117
00:04:35,716 --> 00:04:38,902
Octave gunakan petik tunggal untuk

118
00:04:38,930 --> 00:04:41,876
menampilkan string, seperti demikian.

119
00:04:41,910 --> 00:04:42,837
Itu string, dan kita

120
00:04:42,860 --> 00:04:45,517
bisa memuat berkas

121
00:04:45,517 --> 00:04:48,324
yang namanya diberikan dalam string.

122
00:04:48,324 --> 00:04:50,919
Perintah 'who'

123
00:04:50,960 --> 00:04:52,538
menunjukkan pada saya variabel apa saja

124
00:04:52,538 --> 00:04:54,605
yg saya punya dalam ruang kerja Octave.

125
00:04:54,605 --> 00:04:56,310
Jadi, 'who' menunjukkan saya apakah

126
00:04:56,330 --> 00:04:59,952
variabel-variabel yang Octave punya
aktif di memori saat ini.

127
00:04:59,952 --> 00:05:01,367
featuresX dan priceY

128
00:05:01,370 --> 00:05:02,991
ada diantaranya, begitu juga

129
00:05:02,991 --> 00:05:04,120
variabel-variabel yang

130
00:05:04,170 --> 00:05:06,311
kita buat di awal sesi ini.

131
00:05:06,311 --> 00:05:09,198
Saya bisa mengetik featuresX

132
00:05:09,198 --> 00:05:11,062
untuk menampilkan featuresX.

133
00:05:11,062 --> 00:05:14,164
Itu data saya.

134
00:05:14,200 --> 00:05:16,419
Saya bisa ketik size(featuresX)

135
00:05:16,419 --> 00:05:18,022
dan itu

136
00:05:18,022 --> 00:05:20,519
matriks 47 x 2.

137
00:05:20,519 --> 00:05:22,307
Dan sama juga, size(priceY)

138
00:05:22,320 --> 00:05:23,729
menunjukkan

139
00:05:23,729 --> 00:05:26,753
vektor 47 x 1.

140
00:05:26,753 --> 00:05:30,125
Ini vektor berdimensi 47.

141
00:05:30,125 --> 00:05:32,080
Kolom vektor yang

142
00:05:32,080 --> 00:05:35,231
berisi semua harga y dalam set latihan
saya.

143
00:05:35,240 --> 00:05:37,584
Fungsi 'who' memperlihatkan

144
00:05:37,600 --> 00:05:40,086
pada Anda variabel-variabel yang aktif
dalam ruang kerja.

145
00:05:40,086 --> 00:05:42,195
Ada juga 'whos'

146
00:05:42,195 --> 00:05:45,369
variabel yang memberikan pada Anda
tampilan detil.

147
00:05:45,369 --> 00:05:47,252
Dan ini juga,

148
00:05:47,270 --> 00:05:48,574
menampilkan

149
00:05:48,574 --> 00:05:49,979
variabel-variabel saya tapi

150
00:05:49,979 --> 00:05:51,782
bersama dengan ukurannya juga.

151
00:05:51,790 --> 00:05:52,759
Jadi, A adalah

152
00:05:52,759 --> 00:05:54,764
matriks 3 x 2, dan featuresX

153
00:05:54,764 --> 00:05:56,545
adalah matriks 47 x 2.

154
00:05:56,545 --> 00:05:59,327
priceY adalah matriks 47 x 1.

155
00:05:59,327 --> 00:06:01,098
Artinya ini sebuah vektor.

156
00:06:01,130 --> 00:06:03,438
'whos' juga menunjukkan berapa byte
memori yang dipakai.

157
00:06:03,438 --> 00:06:06,020
Begitu juga tipe datanya.

158
00:06:06,020 --> 00:06:07,765
Double berarti dua angka floating

159
00:06:07,765 --> 00:06:08,915
point yang artinya

160
00:06:08,915 --> 00:06:13,148
ini adalah nilai riil, bilangan
floating point.

161
00:06:13,148 --> 00:06:14,190
Jika Anda ingin

162
00:06:14,190 --> 00:06:17,316
menghapus sebuah variabel, Anda bisa
menggunakan perintah 'clear'.

163
00:06:17,340 --> 00:06:21,124
clear featuresX dan ketik 'whos' lagi.

164
00:06:21,130 --> 00:06:23,448
Anda lihat, variabel

165
00:06:23,448 --> 00:06:26,465
featuresX sudah tidak ada.

166
00:06:27,270 --> 00:06:28,567
Bagaimana kita menyimpan data?

167
00:06:28,567 --> 00:06:29,221
Mari lihat.

168
00:06:29,221 --> 00:06:30,411
Buat variabel

169
00:06:30,411 --> 00:06:33,075
v = priveY(1:10)

170
00:06:33,075 --> 00:06:34,826
Ini membuat v

171
00:06:34,826 --> 00:06:38,574
berisi 10 elemen pertama

172
00:06:38,860 --> 00:06:43,215
vektor y. Ketik 'who' atau 'whos'.

173
00:06:43,220 --> 00:06:46,612
priceY adalah vektor 47 x 1.

174
00:06:46,612 --> 00:06:48,474
v adalah vektor 10 x 1

175
00:06:48,474 --> 00:06:50,809
karena v = priceY(1:10)

176
00:06:50,809 --> 00:06:52,451
yang membuatnya

177
00:06:52,451 --> 00:06:53,520
berisi 10 elemen

178
00:06:53,520 --> 00:06:55,705
pertama y. Katakanlah,

179
00:06:55,705 --> 00:06:57,398
saya ingin menyimpan data ini ke disk,

180
00:06:57,398 --> 00:07:00,129
perintah 'save hello.mat v'

181
00:07:00,129 --> 00:07:02,302
akan

182
00:07:02,310 --> 00:07:04,357
menyimpan variabel v ke dalam

183
00:07:04,370 --> 00:07:05,690
berkas bernama hello.mat.

184
00:07:05,720 --> 00:07:08,490
Mari lakukan.

185
00:07:08,640 --> 00:07:10,965
Sekarang sebuah berkas

186
00:07:11,030 --> 00:07:13,181
tampil di desktop saya,

187
00:07:13,181 --> 00:07:15,066
bernama hello.mat.

188
00:07:15,066 --> 00:07:16,509
Kebetulan saya telah menginstal MATLAB,

189
00:07:16,530 --> 00:07:17,962
itulah mengapa

190
00:07:17,962 --> 00:07:19,711
ikonnya tampak

191
00:07:19,711 --> 00:07:21,621
seperti ini, karena Windows mengenalinya

192
00:07:21,621 --> 00:07:23,559
sebagai berkas MATLAB, tapi jangan

193
00:07:23,559 --> 00:07:24,882
khawatir jika berkas ini

194
00:07:24,890 --> 00:07:26,051
tampil dengan ikon berbeda

195
00:07:26,051 --> 00:07:28,778
di komputer Anda.

196
00:07:28,778 --> 00:07:31,017
Katakanlah saya ingin menghapus semua
variabel.

197
00:07:31,020 --> 00:07:32,602
Cukup ketik 'clear'

198
00:07:32,602 --> 00:07:36,061
maka ini menghapus semua variabel
di ruang kerja Anda.

199
00:07:36,080 --> 00:07:39,078
Sekarang ruang kerja kosong.

200
00:07:39,078 --> 00:07:41,856
Jika saya memuat hello.mat,

201
00:07:41,856 --> 00:07:44,388
saya memuat kembali

202
00:07:44,388 --> 00:07:46,054
variabel v, yaitu

203
00:07:46,054 --> 00:07:47,830
data yang saya

204
00:07:47,830 --> 00:07:51,035
simpan sebelumnya ke dalam berkas
hello.mat.

205
00:07:51,035 --> 00:07:54,636
Yang kita lakukan 'save hello.mat v',

206
00:07:54,636 --> 00:07:55,877
ini menyimpan

207
00:07:55,877 --> 00:07:57,811
data dalam format biner,

208
00:07:57,850 --> 00:07:59,702
format biner yang lebih ringkas.

209
00:07:59,702 --> 00:08:01,077
Jadi, jika v berisi banyak

210
00:08:01,077 --> 00:08:03,899
data, ini akan menjadi lebih ringkas.

211
00:08:03,899 --> 00:08:05,645
Hanya akan membutuhkan sedikit ruang.

212
00:08:05,650 --> 00:08:06,784
Jika Anda ingin menyimpan

213
00:08:06,784 --> 00:08:08,959
data dalam format yang bisa terbaca

214
00:08:08,959 --> 00:08:11,870
manusia, maka Anda ketik

215
00:08:11,870 --> 00:08:14,055
'save hello.txt v -ascii'.

216
00:08:14,110 --> 00:08:16,083
Ini akan menyimpan v

217
00:08:16,083 --> 00:08:18,787
sebagai sebuah teks

218
00:08:18,840 --> 00:08:21,352
atau teks berformat ascii.

219
00:08:21,352 --> 00:08:22,802
Dan, sekali saya lakukan itu,

220
00:08:22,802 --> 00:08:24,973
saya punya berkas ini.

221
00:08:24,973 --> 00:08:26,115
hello.txt

222
00:08:26,130 --> 00:08:28,463
tampil di desktop saya, dan

223
00:08:28,463 --> 00:08:29,951
jika saya buka ini,

224
00:08:29,951 --> 00:08:31,016
kita lihat ini adalah berkas

225
00:08:31,016 --> 00:08:33,958
teks dengan data saya tersimpan
di dalam.

226
00:08:33,958 --> 00:08:36,698
Begitulah Anda memuat dan menyimpan
data.

227
00:08:36,698 --> 00:08:38,832
Sekarang mari bicara sedikit tentang
bagaimana memanipulasi data.

228
00:08:38,832 --> 00:08:40,526
Set A sama dengan

229
00:08:40,526 --> 00:08:44,910
matriks itu lagi, sehingga ini matriks
3 x 2 saya.

230
00:08:45,710 --> 00:08:46,778
Sama seperti pengindeksan.

231
00:08:46,778 --> 00:08:48,493
Ketik A(3,2).

232
00:08:48,493 --> 00:08:51,219
Ini merujuk pada

233
00:08:51,219 --> 00:08:52,917
elemen 3,2 dari

234
00:08:52,917 --> 00:08:54,308
matriks A. Jadi, ini

235
00:08:54,370 --> 00:08:56,320
apa

236
00:08:56,400 --> 00:08:57,488
yang biasanya akan kita tulis

237
00:08:57,510 --> 00:09:00,421
sebagai

238
00:09:00,430 --> 00:09:02,280
A subskrip

239
00:09:03,570 --> 00:09:05,320
3, 2

240
00:09:05,380 --> 00:09:07,028
sehingga itu adalah elemen

241
00:09:07,028 --> 00:09:08,664
baris ke-3, kolom ke-2

242
00:09:08,664 --> 00:09:11,539
matriks A yaitu 6.

243
00:09:11,590 --> 00:09:13,820
Saya bisa juga ketik

244
00:09:14,550 --> 00:09:16,770
A(2,:) untuk mengambil

245
00:09:16,770 --> 00:09:18,851
semua yang ada di baris ke-2.

246
00:09:18,851 --> 00:09:22,806
Jadi, ':' berarti setiap

247
00:09:22,810 --> 00:09:27,381
elemen di baris atau kolom tersebut.

248
00:09:27,420 --> 00:09:29,274
Jadi, A(2,:)

249
00:09:29,274 --> 00:09:32,425
adalah baris ke-2 matriks A ini.

250
00:09:32,470 --> 00:09:35,662
Sama juga, jika saya ketik A(:,2)

251
00:09:35,680 --> 00:09:38,262
maka ini berarti ambil semua yang ada

252
00:09:38,262 --> 00:09:41,328
dalam kolom ke-2 matriks A. Hasilnya,
2 4 6.

253
00:09:41,328 --> 00:09:42,921
Ini berarti

254
00:09:42,930 --> 00:09:45,467
A, semuanya, kolom ke-2.

255
00:09:45,500 --> 00:09:46,967
Jadi, ini

256
00:09:46,970 --> 00:09:49,636
kolom ke-2 matriks A, yaitu 2 4 6.

257
00:09:49,650 --> 00:09:51,267
Anda bisa juga

258
00:09:51,280 --> 00:09:54,148
menggunakan operasi pengindeksan yang
rumit.

259
00:09:54,148 --> 00:09:56,575
Ini satu contoh.

260
00:09:56,575 --> 00:09:58,537
Anda mungkin jarang melakukan ini,

261
00:09:58,550 --> 00:10:02,231
tapi biar saya contohkan, A([1 3],:).

262
00:10:02,231 --> 00:10:03,471
Ini artinya, ambil semua

263
00:10:03,500 --> 00:10:07,444
elemen A yang indeks pertamanya
1 atau 3.

264
00:10:07,450 --> 00:10:08,765
Ini berarti saya mendapatkan semua dari

265
00:10:08,765 --> 00:10:10,588
baris pertama dan ketiga

266
00:10:10,603 --> 00:10:12,780
matriks A dari semua

267
00:10:13,240 --> 00:10:13,240
kolom.

268
00:10:14,163 --> 00:10:16,430
Jadi, ini

269
00:10:16,800 --> 00:10:18,260
matriks A, sehingga

270
00:10:18,440 --> 00:10:21,872
A([1 3],:) berarti ambil

271
00:10:21,900 --> 00:10:23,222
semua dari baris pertama

272
00:10:23,250 --> 00:10:25,023
dan

273
00:10:25,023 --> 00:10:27,172
dari baris ketiga, dan

274
00:10:27,172 --> 00:10:28,313
':' berarti,

275
00:10:28,313 --> 00:10:29,585
kedua kolom

276
00:10:29,585 --> 00:10:31,045
pertama dan kedua.

277
00:10:31,045 --> 00:10:32,842
Hasilnya 1 2 5 6.

278
00:10:32,842 --> 00:10:34,353
Meskipun begitu, mungkin Anda jarang

279
00:10:34,353 --> 00:10:37,182
menggunakan sumber dari operasi

280
00:10:37,182 --> 00:10:39,819
pengindeksan yang rumit.

281
00:10:40,210 --> 00:10:41,453
Contoh lainnya.

282
00:10:41,453 --> 00:10:43,617
Matriks A(:,2),

283
00:10:43,617 --> 00:10:47,276
menampilkan kolom ke-2 matriks A.

284
00:10:47,276 --> 00:10:49,773
Anda bisa menggunakan cara ini untuk
assignment(= input nilai).

285
00:10:49,773 --> 00:10:51,178
Saya bisa mengganti kolom ke-2 matriks A

286
00:10:51,190 --> 00:10:52,949
dengan

287
00:10:52,950 --> 00:10:55,605
10, 11, 12, dan

288
00:10:55,670 --> 00:10:58,084
jika saya mengambil kolom ke-2

289
00:10:58,120 --> 00:10:59,220
matriks A

290
00:10:59,290 --> 00:11:02,768
dan menggantinya dengan vektor kolom
10, 11, 12,

291
00:11:02,768 --> 00:11:05,440
sekarang matriks A menjadi 1, 3, 5,

292
00:11:05,480 --> 00:11:08,760
dan kolom ke-2 digantikan oleh
10, 11, 12.

293
00:11:08,760 --> 00:11:14,513
Ini operasi lainnya.

294
00:11:14,680 --> 00:11:15,917
Set

295
00:11:15,917 --> 00:11:17,738
A = (A, [100, 101, 102])

296
00:11:17,750 --> 00:11:21,605
Ini maksudnya

297
00:11:21,605 --> 00:11:24,109
adalah

298
00:11:24,120 --> 00:11:28,025
menambahkan vektor kolom lain di sebelah
kanan

299
00:11:28,047 --> 00:11:29,855
matriks A.

300
00:11:29,890 --> 00:11:33,230
Ups.

301
00:11:33,260 --> 00:11:36,798
Saya membuat kesalahan.

302
00:11:36,800 --> 00:11:41,065
Seharusnya menggunakan ';' di situ,

303
00:11:41,700 --> 00:11:43,910
dan sekarang A sama dengan ini.

304
00:11:43,910 --> 00:11:44,564
Oke?

305
00:11:44,564 --> 00:11:45,479
Semoga dimengerti.

306
00:11:45,479 --> 00:11:46,480
100, 101, 102

307
00:11:46,480 --> 00:11:48,804
adalah vektor kolom

308
00:11:48,820 --> 00:11:51,668
dan yang baru kita kerjakan

309
00:11:51,668 --> 00:11:53,386
adalah kita ambil A

310
00:11:53,386 --> 00:11:56,156
dan menset A sama dengan nilai awalnya.

311
00:11:56,156 --> 00:11:57,368
Kemudian kita

312
00:11:57,380 --> 00:11:59,192
tambahkan vektor kolom di kanan.

313
00:11:59,192 --> 00:12:00,217
Dengan demikian,

314
00:12:00,217 --> 00:12:04,288
matriks A yang awalnya berisi enam
elemen di kiri

315
00:12:04,288 --> 00:12:05,405
ini.

316
00:12:05,405 --> 00:12:06,785
Kita ambil

317
00:12:06,810 --> 00:12:08,564
matriks A dan tambahkan vektor kolom
lain

318
00:12:08,564 --> 00:12:09,793
di kanan.

319
00:12:09,793 --> 00:12:11,814
Itulah mengapa sekarang matriks A

320
00:12:11,814 --> 00:12:16,083
adalah matriks 3 x 3 seperti itu.

321
00:12:16,200 --> 00:12:18,005
Akhirnya, satu trik cantik yang kadang

322
00:12:18,010 --> 00:12:19,802
saya gunakan,

323
00:12:19,810 --> 00:12:22,022
A(:).

324
00:12:22,022 --> 00:12:25,585
Ini adalah sintaks spesial.

325
00:12:25,590 --> 00:12:28,695
Ini berarti tempatkan semua elemen A
ke dalam

326
00:12:28,695 --> 00:12:30,751
satu vektor kolom

327
00:12:30,850 --> 00:12:34,513
dan ini menghasilkan vektor 9 x 1.

328
00:12:34,513 --> 00:12:38,584
Itu adalah semua elemen A yang
dirangkaikan bersama.

329
00:12:39,700 --> 00:12:45,258
Beberapa contoh lagi.

330
00:12:45,300 --> 00:12:52,073
Set A = [1 2; 3 4; 5 6].

331
00:12:52,181 --> 00:12:54,035
Lalu

332
00:12:54,060 --> 00:12:55,674
set

333
00:12:55,680 --> 00:12:58,984
B = [11 12; 13 14; 15 16].

334
00:12:58,984 --> 00:13:00,346
Saya bisa membuat matriks baru

335
00:13:00,346 --> 00:13:03,161
C = [A B].

336
00:13:03,200 --> 00:13:05,010
Ini matriks A saya.

337
00:13:05,080 --> 00:13:06,666
Ini

338
00:13:06,666 --> 00:13:08,426
matriks B saya, dan saya set

339
00:13:08,426 --> 00:13:11,053
C = [A B].

340
00:13:11,070 --> 00:13:12,225
Yang saya lakukan,

341
00:13:12,225 --> 00:13:15,438
mengambil 2 matriks ini dan
merangkaikannya satu sama lain.

342
00:13:15,438 --> 00:13:18,408
Matriks A di kanan.

343
00:13:18,420 --> 00:13:20,786
Matriks B di kiri.

344
00:13:20,800 --> 00:13:23,738
Begitulah saya membentuk

345
00:13:23,830 --> 00:13:27,145
matriks C.

346
00:13:27,145 --> 00:13:28,927
Bisa juga

347
00:13:28,927 --> 00:13:31,975
C = [A; B].

348
00:13:32,000 --> 00:13:35,552
Tanda ';' berarti

349
00:13:35,552 --> 00:13:38,881
letakkan semua nilai berikutnya di bawah.

350
00:13:38,881 --> 00:13:39,880
Jadi,

351
00:13:39,910 --> 00:13:41,169
C = [A; B] menempatkan

352
00:13:41,170 --> 00:13:42,408
matriks A

353
00:13:42,460 --> 00:13:44,048
dan B bersama akan tetapi

354
00:13:44,048 --> 00:13:46,408
keduanya ditumpuk satu sama lain.

355
00:13:46,408 --> 00:13:49,675
A di atas dan B di bawah, dan C

356
00:13:49,675 --> 00:13:52,038
sekarang matriks 6 x 2.

357
00:13:52,038 --> 00:13:54,263
Jadi, ';'

358
00:13:54,270 --> 00:13:56,705
biasanya berarti pergi ke baris berikut.

359
00:13:56,705 --> 00:13:58,463
Jadi, C dibentuk dari A

360
00:13:58,463 --> 00:13:59,598
lalu pergi

361
00:13:59,598 --> 00:14:00,610
ke bawah A dan

362
00:14:00,690 --> 00:14:02,320
letakkan B di situ.

363
00:14:02,390 --> 00:14:04,225
O ya, [A B] sama dengan

364
00:14:04,225 --> 00:14:05,734
[A, B].

365
00:14:05,750 --> 00:14:09,106
Masing-masing memberikan hasil yang
sama.

366
00:14:10,310 --> 00:14:11,916
Semoga sekarang

367
00:14:11,916 --> 00:14:14,256
Anda tahu membuat matriks, dan

368
00:14:14,260 --> 00:14:17,207
semoga ini menunjukkan pada Anda

369
00:14:17,207 --> 00:14:18,223
beberapa perintah

370
00:14:18,223 --> 00:14:19,822
yang dapat digunakan

371
00:14:19,850 --> 00:14:21,913
untuk menempatkan dan mengambil

372
00:14:21,940 --> 00:14:23,390
matriks dengan cepat, dan

373
00:14:23,390 --> 00:14:24,984
menggabungkannya bersama

374
00:14:25,000 --> 00:14:27,009
untuk membentuk matriks yang lebih besar
hanya dengan

375
00:14:27,009 --> 00:14:28,962
sedikit kode.

376
00:14:28,962 --> 00:14:30,770
Octave sangat menyenangkan dalam hal

377
00:14:30,770 --> 00:14:32,683
seberapa cepatnya kita dapat membuat

378
00:14:32,683 --> 00:14:36,033
matriks kompleks dan mengolah data.

379
00:14:36,050 --> 00:14:38,027
Itu saja untuk pengolahan data.

380
00:14:38,027 --> 00:14:39,347
Di video berikut

381
00:14:39,347 --> 00:14:40,783
akan kita bahas

382
00:14:40,860 --> 00:14:46,232
bagaimana melakukan perhitungan kompleks
pada data kita.

383
00:14:46,830 --> 00:14:48,256
Semoga itu memberi Anda

384
00:14:48,256 --> 00:14:49,961
pengalaman,

385
00:14:49,961 --> 00:14:51,049
hanya dengan sedikit perintah, Anda bisa

386
00:14:51,049 --> 00:14:54,573
dengan sangat cepat mengolah data dengan
Octave.

387
00:14:54,590 --> 00:14:56,164
Anda memuat dan menyimpan vektor dan

388
00:14:56,180 --> 00:14:58,059
matriks, memuat dan menyimpan data,

389
00:14:58,090 --> 00:15:00,201
menempatkan beberapa matriks bersama
untuk membuat

390
00:15:00,201 --> 00:15:02,990
matriks yang lebih besar, melakukan
pengindeksan atau

391
00:15:02,990 --> 00:15:05,021
memilih elemen tertentu dalam matriks.

392
00:15:05,021 --> 00:15:06,015
Saya mengajarkan banyak perintah

393
00:15:06,015 --> 00:15:06,944
jadi,

394
00:15:06,980 --> 00:15:08,244
hal terbaik untuk Anda lakukan
sesudah ini

395
00:15:08,244 --> 00:15:09,741
adalah melihat

396
00:15:09,741 --> 00:15:12,248
pada transkrip hal-hal yang saya ketik
sebelumnya.

397
00:15:12,248 --> 00:15:13,286
Lihat transkripnya

398
00:15:13,286 --> 00:15:14,661
di website dan unduh

399
00:15:14,661 --> 00:15:15,927
transkrip sesi ini

400
00:15:15,950 --> 00:15:17,479
dari situ dan baca transkripnya

401
00:15:17,479 --> 00:15:18,820
lalu ketik

402
00:15:18,820 --> 00:15:21,942
beberapa perintah di Octave

403
00:15:21,942 --> 00:15:24,752
dan mulailah pelajari cara kerja
perintah-perintah itu.

404
00:15:24,752 --> 00:15:28,113
Tidak ada gunanya menghafal semua
perintah ini.

405
00:15:28,113 --> 00:15:30,030
Anda harus mencobanya,

406
00:15:30,030 --> 00:15:31,852
semoga dari

407
00:15:31,852 --> 00:15:32,910
video ini

408
00:15:32,910 --> 00:15:35,065
Anda tahu hal-hal yang bisa dilakukan.

409
00:15:35,100 --> 00:15:36,519
Sehingga saat nanti

410
00:15:36,520 --> 00:15:37,902
Anda coba memprogram

411
00:15:37,902 --> 00:15:39,630
algoritma belajar, jika Anda

412
00:15:39,630 --> 00:15:40,921
mencari perintah

413
00:15:40,930 --> 00:15:42,455
tertentu yang Octave bisa lakukan

414
00:15:42,455 --> 00:15:43,878
karena

415
00:15:43,878 --> 00:15:45,325
mungkin Anda pernah melihatnya di sini,

416
00:15:45,325 --> 00:15:47,300
Anda harus melihat transkrip sesi ini

417
00:15:47,300 --> 00:15:48,545
dan membacanya

418
00:15:48,560 --> 00:15:51,693
untuk menemukan perintah yang ingin
Anda gunakan.

419
00:15:51,693 --> 00:15:53,069
Jadi itu saja untuk

420
00:15:53,069 --> 00:15:54,841
pengolahan data dan pada

421
00:15:54,841 --> 00:15:56,060
video berikutnya saya akan

422
00:15:56,120 --> 00:15:57,699
membahas

423
00:15:57,740 --> 00:15:59,257
bagaimana melakukan

424
00:15:59,257 --> 00:16:01,404
perhitungan kompleks pada

425
00:16:01,410 --> 00:16:03,548
data kita, dan bagaimana

426
00:16:03,550 --> 00:16:04,866
menghitung data, dan

427
00:16:04,866 --> 00:16:06,560
mulai mengimplementasikan algoritma
belajar.