このビデオでは、 制御文を Octave プログラムで どのように書くか 例えば、for、while そして if 文など、 そしてどのように関数を定義して使うかをお話します。 これが私の Octave ウィンドウです。 では最初に for ループの使い方からお見せします。 まず、v を 10 x 1 の 0 のベクトルにします。 ここで私の for ループの書き方は、for i = 1 から 10 つまり、for i = 1:10 そして、そうですね、 v(i) を 2 の i 乗にします、そして最後に end。 スペースは無視されます。 ですから見やすくするために スペースを使って字下げしています。 しかし、スペースは関係ありません。 しかし、これを実行すると、 結果は v が 2 の1 乗、2 乗、というように 設定されます。 ですからこれが構文です。i = 1:10 これは i の値を 1 から 10 まで ループさせます。 ちなみに、これには 別のやり方もあり、 indices = 1:10 として、 indices を 1 からの 10 までの配列とし、 そして、i=indices と書くこともできます。 そして、これは、実際には、for i = 1:10 と同じことです。 そして disp(i) とすると、同じ結果になります。 ということでこれが for ループです。 もし break と continue が お馴染みであれば、break および continue 文もありますので、 Octave のループ内でこれらを 使用することもできます。でも最初に while ループがどのように動作するかをご覧に入れます。 ここにベクトル V があります。では while ループ を書きましょう。 i = 1; while i <= 5 ここで v(i) = 100 と設定し i を 1 インクリメントし end とします。 これが意味するのは、 i が = 1 で始まり、 そして v(i) = 100 に設定され、 それから i が 1 インクリメント されて、i が 5 以上になるまで続きます。 そしてその結果として 以前には、V は 2 の累乗のベクトルでしたが そのベクトルの 最初の5 つの要素を取って 100 という値で置き換えたのです。 これが、while ループの構文です。 ではもう一つ例をご覧頂きます。 i = 1; while true ここでは break 文の使い方をお見せしたいと思います。 たとえば v(i) = 999; そして i = i+1; if i == 6, break; end end。 そして これはここでの最初の if 文の使用例でもあります。 この例のロジックの意味がお分かりいただけると思います。 i == 1 と初期化し、無限ループの中で while で繰り返し v(i) = 1 設定し i を 1 インクリメントします。 そして、 i が 6 になったら、 break して while のループから 離脱し、 その結果として ベクトル v の最初の 5 の要素を 取り出してそれらを 999 にします。 そして確かに、v の値のうち 最初の 5 つの要素の値が 999 で上書きされています。 以上が if 文と while 文の構文の説明です。end に注意してください。 ここに二つ end があります。 ここの end は if 文を締めくくり、 この二番目の end は while 文を締めくくります。 では、if 文の使いかたについて もっと一般的な構文をご紹介します。 さて、ここで v(1) = 999、いや この例では v(1) = 2 とします。 そこで 入力するのは if v(1) == 1; disp('the value is one') ; です。 else 文の書き方は こうします: else if v(1) == 2 これは、この例の場合は真となります disp('the value is two'); else disp('the value is not one or two'); お分かり頂けたでしょうか、これが if-else- if-else 文で、end で締めくくります。 そしてもちろん、ここで v(1) = 2 としましたので、うまくいけば、 うん、確かに値が 2 であると表示しました。 そして、最後に、そう言えば これについてお話していなかったと思います Octave を終了する必要がある場合、 exit コマンドを入力し Enter を押すと、Octave が終了します。 また q、quit コマンドでも同様です。 最後に、関数と その定義の仕方、使いかたに ついてお話します。 ここに私のデスクトップがあります。 そして定義済みのファイル というか、予めデスクトップに保存しておいたファイル squarethisnumber.m があります。 Octave で関数を定義する方法は以下の通りです。 ファイルを作成し、その名前を 関数の名前とし、最後に.mを付けます。 Octave がそのファイルを 見つけると、その関数の 定義は、squarethisnumber.m で探す必要があることがわかります。 ではこのファイルを開きましょう。 お気づきのように、私が このファイルを開いているのは Microsoft の Wordpadです。 私がお勧めしたいのは、もし Microsoft Windows を使う場合は、 こうしたファイルを開くときに、Wordpad を 使い、Notepad は使わないことです。 もし異なる テキストエディタをお使いの場合はそれでも構いません。 Notepad は時々スペースが無茶苦茶になることがあるからです。 もし Notepad しか手元にない場合 それも使えますが、 でも、もし WordPad もあるなら、 それを使うか、その他の テキストエディタを使って、関数を編集します。 では、Octave での関数の定義の仕方は次の通りです。 ちょっと拡大します。 このファイルには、三行のテキストしかありません。 一行目は、function y = square this number (x)、そしてこれは Octave に対し、この関数が y の値を戻すこと、その値は 一つであること、そして その値は 変数 y に保存されることを知らせます。 さらに、Octave は この関数の引数は一つだけであること そしてそれが 引数 x であることも理解します。 そして関数の本体は、 y = x^2; と定義されています。 では、この関数を 呼び出して、square this number (5) すると、これは実際には 動作せず、 Octave は square this number は定義されていないと言います。 なぜなら、 Octave はそのファイルがどこにあるか知らないからです。 そこで、いつもながら、pwd を使いましょう。 これは正しいディレクトリではないので では cd C:\users\ang\Desktop としましょう。 これが私のデスクトップです。 おっと、打ち間違いがありました。 users\ang\Desktop そしてここで square this number (5) とすると、 25 が答えとして返ります。 すこし高度な機能ですので、これは 検索パスという用語の 意味が分かる方のみで結構ですが、 もし Octave の検索パスを 変更したい場合は、 次の部分は、上級の 自主選択の教材だと 考えていただいて結構です。 プログラミング言語における 検索パスという概念をご存知の方 のみで結構ですが、 次のようなコマンドを使うことができます。 addpath('C: \users\ang\Desktop すると、このディレクトリが Octave の検索パスに追加され、 たとえ、他のディレクトリに 行っても、 Octave は関数を探すのに users\ang\ Deskotp ディレクトリを見ることを覚えます。 このため、今は 別のディレクトリにいるにも関わらず、 Octave は square this number 関数がどこにあるか見つけることができます。 分かりましたか。 もし、検索パスの概念に 馴染みがない場合は、心配する必要は ありません。 関数を実行する前に単に cd コマンドを使って 関数があるディレクトリに 行くのを覚えていれば。 これで実際には支障はないはずです。 Octave にあって、 他の多くのプログラミング 言語にはない概念に 複数の戻り値や 複数の引数を定義できるという点があります。 ここにその例があります。 この関数を定義します square and cube this number(x) これが何かというと、この 関数は y1 および y2 の二つの関数を戻します。 その定義は以下の通りです。 y1 は 二乗、y2 は三乗です。 これを実行すると、実際に二つの数が戻ります。 皆さんの中には、 お使いのプログラミング言語によって、 C++ やその他に馴染んでいる場合、 しばしば、関数は一つの値を戻すものと思いがちです。 しかし、Octave の文法では、 複数の値を戻すことができます。 Octave ウィンドウに戻ります。 そうですね、[a, b] = square and cube this number(5) とすると、 a は = 25 で b = 5の三乗、よって = 125 となります。 ですから、これは 複数の値を戻す関数を 定義するのに多くの場合とても便利です。 最後にお見せしたいのは、 さらに詳細な関数の例です。 例えば、次のようなデータセットがあるとします。 1、1、2、2、3、3 でのデータポイントがこうなっています。 そして、私が行いたいのは、 異なる値の theta に対する 目的関数 J(theta) を算出する Octave 関数を定義することです。 まず、データを Octave で作成します。 計画行列を 1、1、2、2、3、3 とします。 これが、私の計画 行列 x で、x 0、 最初の列が切片 項で二列目が 訓練データの三つの x 値です。 そして、 y = [1; 2; 3] とし、 これは y 軸の値となります。 そして、仮に theta = [0; 1] とします。 私のデスクトップ上に 目的関数Jを予め定義しておきました。 そして この関数の定義を開くと、以下のようになっています。 function J = costFunction J 引数 x, y, theta、 コメントで入力の 定義をし、そして その次に幾つかのステップを定義します。m を 訓練データサンプル数とします。 つまり x の行数ですね。 predictions を計算します。predictions = x * theta; これは自動改行されたコメントの 続きです。ということは、これがその前の行のコメントですね。 二乗誤差を計算します。これは、 predictions と y の 値の差をとって それを要素単位で二乗します。 最後に、目的関数 J を計算します。Octave は J が私の 戻したい値であるのを知っています。なぜなら、J はここ関数定義に出ているからです。 ところで、いつでも遠慮なく このビデオを停止して この関数定義を じっくり見て、 それぞれのステップをちゃんと理解してください。 これを Octave 内で 実行するには、J = cost function J(x, y, theta) を実行します。 すると、演算が実行され、おっと、ここが打ち間違いです 大文字の X でした。すると 計算が実行され、J = 0 となります。 なぜなら、データセットが 1、2、3、1、2、3 なので、theta 0 は = 0、theta 1 = 1 とすると、これは丁度 このデータセットに完全に一致する45度の線になります。 一方、対照的に、もし theta を仮に =[0, 0] とした場合、 この仮説は 全てに対して同じく 0 と予測します。 theta 0 = 0、 theta1 = 0 そして 目的関数を計算すると 答えは 2.333となり、それは 実は = 1^2 これは最初のサンプルの 二乗誤差、+ 2^2 + 3^2 そして次に /(2*m) これは 訓練データのサンプル数の二倍です。 そしてその結果は確かに 2.33 になります。 この要所確認により、 この関数は、 正しい目的関数を計算しているということが 分かります。そしてここまでで シンプルな訓練サンプルを使っていくつか例を 試してみたわけです。 この要所確認は 目的関数 J が ここに定義されているように 確かに正しい 目的関数を演算しているかどうかを確認します。 そしてこれが先ほど使った 簡単な訓練セット X と Y で、これが いま見た簡単な訓練データの例です。 ここまでのところで、 Octave において、for ループ、 while ループ、if 文などの制御文の書き方、 および関数の定義の仕方と使いかたがご理解いただけたと思います。 次のビデオでは、 非常に手短に、 このクラスで課題に 取り組んで提出する 手順を順番に紹介し、 提出用システムをどのように使うか説明します。 そして最後に、その後で、 最後の Octave チュートリアル ビデオでは ベクトル化についてお話します。 これは Octave プログラムの実行速度を 高速化する手法です。