En este video, me gustaría enseñarte cómo escribir instrucciones de control para tus programas hechos en Octave; como las instrucciones "for", "while", "if" y también cómo definir y usar funciones. Esta es mi ventana de Octave. Déjame mostrarte primero cómo usar un ciclo for "for". Voy empezar a establecer que "v" es un vector de 10x1 cero. Ahora, aquí voy a escribir un ciclo for "for" para "i" que empieza en 1 hasta 10. Entonces queda "for" "i" igual a 1 dos puntos 10. Ahora, veamos. voy a definir v(i) igual a dos elevado a la "i", y finalmente end, El espacio en blanco no importa, entonces estoy dejando espacios simplemente para que se vea bien organizado, pero ten en cuenta que los espacios no son necesarios. Si hago esto, entonces el resultado es que el vector "v" se inicializa con dos a la uno, dos a la dos, etc. Entonces esta es la sintaxis "for" "i" igual a 1 dos puntos 10 la cual hace que el ciclo I se repita desde los valores uno hasta 10. A propósito, también puedes hacer esto definiendo tus índices igual desde 1 hasta 10, entonces los índices del vector se asignan desde uno hasta 10. También puedes escribir for i=indices. Y esto es realmente lo mismo que escribir i= 1 hasta 10. Tú puedes mostrar los valores de "i" y esto hará lo mismo. Entonces, esto es un ciclo "for". Si estás familiarizado con "break" y "continue", existen instrucciones "break" y "continue" que también puedes usar dentro de los ciclos for en Octave. Pero primero, déjame mostrarte cómo funciona un ciclo for "while". Aquí está mi vector v. Escribamos el ciclo for "while". i=1, mientras que "i" sea menor o igual que 5, definamos el vector v(i) igual a 100 y luego incrementas "i" en uno y luego "end". Entonces ¿qué nos dice esto? bien, "i" empieza en uno y luego voy a definir el vector v(i) igual a 100 y luego incrementas "i" en uno hasta que "i" sea mayor que cinco. Y como resultado de esto, mientras que anteriormente "v" era un vector con potencias de 2. Ahora he tomado los primeros cinco elementos de mi vector y los he sobrescrito con el valor 100. Bien, esa es la sintaxis del ciclo for "while". Hagamos otro ejemplo. "i" igual a uno mientras que sea verdadero, y aquí quiero mostrarte cómo usar la instrucción "break". Digamos que v(i) es igual a 999 y que "i" es igual a i+1 Si "i" es igual a 6 entonces use break  y luego end, Y esta también es la primera vez que usamos la instrucción "if". Espero que hayas entendido la lógica de esto. Puesto que "i"  es igual a uno y, luego, entra al ciclo for. Repetidamente asigna 1 a v(i) e incrementa "i"  en 1, y cuando "i" llegue a 6, haga una interrupción, la cual se hace aquí y sale del ciclo for "while". Entonces el efecto de esto es tomar los primeros cinco elementos de este vector "v" y reemplazarlos con el valor 999. Y sí, en realidad, estamos tomando el vector "v" y reemplazando los primeros cinco elementos con  999. Aquí tenemos las sintaxis de las instrucciones "if" y "while". Ten en cuenta que tenemos dos instrucciones "end" aquí. Este "end" de aquí termina la instrucción "if". y el segundo "end" de aquí, termina la instrucción "while". Ahora déjame mostrarte una sintaxis más general de la instrucción "if-else". Entonces, veamos. v(1) es igual a 999. Asignemos 2 a v(1), para este ejemplo. Entonces, escribamos "if" v(1) es igual a 1, muestre el valor es uno. Aquí tenemos la forma de escribir una instrucción else. O mejor: elseif: v(1) igual a 2. En caso de que sea verdadero en nuestro ejemplo, muestre "el valor es 2". De lo contrario, muestre "el valor es diferente a uno y a dos". Bien. Esta es la instrucción "if-else" y termina con "end". Y por supuesto, aquí simplemente hemos asignado el valor de 2 a v(1)  y esperemos, sí, ha mostrado que el valor es 2. Finalmente, no creo que haya hablado de esto anteriormente, pero si alguna vez necesitas salir de Octave, puedes escribir el comando "exit" y presionar la tecla Enter, lo cual hará que Octave se cierre. O también puedes usar el comando "quit" que también sirve. Finalmente, hablemos de funciones, cómo definirlas y cómo usarlas. Aquí, en mi escritorio, tengo un archivo que he guardado anteriormente y su nombre es  squarethisnumber.m. Esa la forma cómo puedes definir funciones en Octave. Creas un archivo llamado, bien, con el nombre de la función y con la extensión .m Cuando Octave encuentre este archivo, sabrá que ahí es donde debería buscar la definición de la función squarethisnumber.m. Abre este archivo. Ten en cuenta que estoy usando El programa de Microsoft llamado Wordpad para abrir ese archivo. Te aconsejo, si usas Microsoft Windows, que uses Wordpad en lugar de Notepad para abrir estos archivos. Si tienes un editor de texto diferente, también sirve. Pero Notepad, algunas veces desorganiza los espacios. Si solamente tienes Notepad, también debería funcionar. pero si también tienes Wordpad, yo lo usaría u otro editor de texto para editar tus funciones. Entonces, aquí tenemos la forma de definir funciones en Octave. Déjame agrandar un poquito. Este archivo simplemente tiene tres líneas en él. La primera línea es function Y = squareThisNumber (x) Esto le dice a Octave que voy a devolver el valor de "y". Voy a  devolver  un valor y este valor se guardará en la variable "y". Además, le dice a Octave que esta función tiene un argumento, el cual es X, y la forma en que el cuerpo de la función está definido es. Si "y" es igual a "x" al cuadrado. Ahora tratemos de llamar esta función escribiendo squareThisNumber(5) esto realmente no va a funcionar y Octave dice que squareThisNumber no se ha definido. Esto pasa porque Octave no sabe dónde buscar este archivo. Como de costumbre, usemos PWD, o no en mi directorio, entonces usemos el comando cd c:\users\ang\desktop. Aquí es donde se encuentra mi escritorio. ¡ups! hay un error de escritura aquí. cd c:\users\ang\desktop. Ahora, si escribo squareThisNumber(5) devolverá la respuesta 25. Ahora voy a hablar de una variable avanzada, pero esto es sólo para aquellos que sepan el significado de rutas de búsqueda. Entonces, si deseas modificar la ruta de búsqueda de Octave simplemente podrías considerar esta parte como avanzada u opcional. Solamente para aquellos que estén familiarizados con los conceptos de rutas de búsqueda y lenguajes de permisos, entonces, puedes usar addpath ('c: \users\ang\desktop') para agregar ese directorio a la ruta de búsqueda de Octave, de tal forma que incluso si vas a ir a otro directorio, lo puedes hacer y Octave sabe que debe buscar en c:\users\ang\desktop para la función squareThisNumber(5) incluso si estoy en un directorio diferente, el programa sabe dónde encontrar la función squareThisNumber(5) ¿Bien? pero si no estás familiarizado con el concepto de rutas de búsqueda, no te preocupes. simplemente, asegúrate de usar el comando cd para ir al directorio donde esté la función antes de ejecutarla para que funcione bien. Un concepto que Octave tiene que muchos otros lenguajes de programación no tienen es que Octave te permite definir funciones que devuelven varios valores o varios argumentos. Aquí tenemos un ejemplo de eso. Define la función llamada function [y1, y2] = squareAndCubeThisNumber(x) esto significa que la función devuelve dos valores: y1 y y2. Cuando asigno los  valores y1 = x^2; y2 = x^3; Lo que esta función hace es devolver 2 números. Entonces, sí tú, dependiendo del lenguaje de programación que uses, estás familiarizado, por decir, con C C++ a menudo piensas en que la función devolverá solamente un valor. Pero la sintaxis de Octave permite devolver varios valores. Ahora, volvamos a la ventana de Octave. Si escribo, como sabes, [a,b] = squareAndCubeThisNumber(5) entonces el valor de "a" es 25 y el valor de "b" es el cubo de 5 que es igual a 125. Entonces, esto es a menudo conveniente si necesitas definir una función que devuelva varios valores. Finalmente, te voy a mostrar un ejemplo más complejo de una función. Supongamos que tenemos un conjunto de datos como este, con puntos de datos en 1, 1, 2, 2, 3, 3. y lo que me gustaría hacer es definir una función en Octave para calcular la función de costos J(«theta») para los diferentes valores de «theta». Primero pongamos los datos en Octave. Entonces la matriz de diseño la voy a definir como X = [1 1; 1 2; 1 3]; Entonces, esta es mi matriz de diseño X, con x0, la primera columna corresponde al primer valor y la segunda columna al segundo valor. Como sabrás, estoy usando los valores de X de mis 3 ejemplos de práctica. Ahora, voy a definir Y = [1; 2; 3]; para los valores del eje y. Ahora asignemos los valores de «theta» «theta» = [0; 1]; Aquí en mi escritorio, tengo la función de costos predefinida J y si miramos la definición de esta función, encontramos lo siguiente: function J=costFunctionJ (x,y,«theta») algunos comentarios especificando las entradas y luego algunos pasos, para definir m como el número de ejemplos de práctica. Entonces X corresponde al número de filas. Se calculan las predicciones. Predicciones igual a X multiplicado por «theta» Este comentario se ha cortado. Probablemente pertenezca al comentario de la línea anterior. Se calculan los errores del programa, al hacer la diferencia entre sus predicciones y los valores de "Y"  y tomando el elemento del cuadrado de “y”, luego finalmente calculando la función de costos "J". Y Octave sabe que "J" es el valor que quiero devolver porque "J" aparece aquí en la definición de la función. Si quieres, puedes hacer una pausa en este vídeo si deseas analizar bien la definición de esta función para que estés seguro de entender bien los diferentes pasos. Cuando la ejecuto en Octave, "J" es igual a costFunctionJ(x,y,«theta») hace los cálculos. ¡Ups! hay un error de escritura aquí. la letra X debe estar en mayúscula Calcula J = 0 Si mi conjunto de datos fue de 123, 123, entonces al asignar 0 a «theta» igual 0, «theta» 1 igual a 1 esto me da exactamente la línea de 45 grados que coincide perfectamente con mi conjunto de datos. Pero si asigno 0, 0 a «theta», entonces esta hipótesis está prediciendo ceros en todo. Lo mismo, «theta» 0 igual a 0, «theta» 1 igual a 0 y calculo la función de costos J=costFunctionJ(x,y,«theta») se obtiene 2.333 y eso es realmente 1 al cuadrado el cual es el error de cuadrado en mi primer ejemplo, más el cuadrado de 2, más el cuadrado de 3, y todo dividido entre 2*m, lo cual es 2 veces el número de ejemplos de práctica lo cual es en realidad 2.33 y así "sanity" comprueba que esta función calcula la función de costos correcta y estos son los ejemplos que analizamos en nuestro ejemplo de práctica simple. Y así "sanity" hace seguimiento a la función de costos "J", como se define aquí,  que en realidad va a calcular la función de costos correcta J, al menos en nuestro conjunto de práctica simple que tenemos aquí con "X" y "Y" en este ejemplo de práctica simple que hemos resuelto. Bien, ahora sabes cómo escribir las instrucciones de control correctas para ciclo fors, como ciclo fors "while" e instrucciones "if" en Octave, así como también como definir y usar funciones. En el siguiente vídeo, de manera rápida, voy a tratar la logística para trabajar y enviar conjuntos de problemas para esta clase y cómo usar nuestro sistema de envío. y finalmente, después de eso, en el vídeo tutorial final de Octave, te voy a enseñar lo relacionado con la vectorización, la cual es una idea que se usa para que tus programas escritos en Octave se ejecuten mucho más rápido.