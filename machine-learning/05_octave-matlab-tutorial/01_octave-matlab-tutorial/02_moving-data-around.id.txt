Di video tutorial Octave kedua ini, saya ingin mulai membahas bagaimana mengolah data di
Octave. Jika Anda punya data dari persoalan machine learning, bagaimana
Anda memuat data itu di Octave? Bagaimana Anda menempatkannya ke dalam matriks dan memanipulasinya? Bagaimana menyimpan hasilnya? Bagaimana Anda mengolah dan
mengoperasikan data? Ini jendela Octave saya, tampilan terakhir pada video sebelumnya. Jika saya ketik A, itu matriks, kita membuatnya dengan perintah A = [1 2; 3 4; 5 6] Ini merupakan matriks 3 x 2. Perintah 'size' di Octave memberitahu Anda ukuran suatu matriks. Jadi, size(A) hasilnya 3 x 2. Tampaknya bahwa perintah 'size' sendiri sebenarnya menghasilkan matriks 1 x 2. Jadi, Anda bisa set sz = size(A) dan sekarang sz merupakan matriks 1 x 2, dimana elemen pertamanya 3, dan elemen keduanya adalah 2. Jika Anda ketik size(sz), ukurannya merupakan matriks 1 x 2 yang memiliki 2 elemen berisi dimensi dari matriks A. Anda juga bisa ketik size(A, 1) untuk memberikan dimensi pertama matriks A, ukuran dimensi pertama matriks A. Jadi, itu jumlah baris, dan size(A, 2) hasilnya 2, yaitu jumlah kolom dalam matriks A. Jika Anda punya vektor v, katakanlah v = [1 2 3 4], dan Anda ketik length(v). Ini memberi Anda ukuran dari dimensi terpanjang. Anda bisa juga ketik length(A) dan karena A adalah matriks 3 x 2, dimensi terpanjangnya adalah 3. Jadi, ini harusnya menampilkan 3. Tapi, biasanya kita mengaplikasikan
'length' hanya pada vektor. Jadi, length([1;2;3;4;5]) daripada mengaplikasikan 'length' ke matriks karena itu sedikit membingungkan. Sekarang, mari lihat bagaimana memuat data dan mencari data dalam sistem berkas. Saat kita membuka Octave, biasanya kita berada dalam path, yaitu dimana lokasi program Octave berada. Jadi, perinta 'pwd' menunjukkan direktori saat ini, atau path saat ini dimana Octave berada. Jadi sekarang kita ada di direktori ini. Perintah 'cd' singkatan untuk 'change directory', jadi saya bisa menggantinya ke
C:/Users/ang/Desktop, dan sekarang saya berada di direktori
Desktop saya, dan jika saya ketik 'ls', 'ls' merupakan perintah Unix
atau Linux. 'ls' akan menampilkan direktori-direktori di Desktop saya, dan ini berkas-berkas yang ada pada Desktop saya saat ini. Bahkan, ada 2 berkas di desktop saya, featuresX.dat dan priceY.dat, yang mungkin berasal dari persoalan machine learning yang
ingin saya pecahkan. Ini desktop saya. Ini featuresX, dan featuresX adalah berkas yang berisi 2 kolom data ini. Ini adalah data harga-harga rumah saya. Saya pikir, set data ini ada 47 baris. Rumah pertama berukuran 2104 kaki persegi, dengan 3 kamar tidur.
Rumah kedua berukuran 1600 kaki persegi, dengan 3 kamar tidur,
dst. priceY adalah berkas ini yang berisi harga-harga data dalam set latihan saya. Jadi, featuresX dan priceY hanyalah berkas yang berisi
data saya. Bagaimana memuat data ini dalam Octave? Cukup dengan mengetik perintah 'load featuresX.dat' dan jika saya lakukan itu, saya memuat data featuresX dan dapat memuat priceY.dat juga. Ada beberapa cara untuk melakukan ini. Perintah ini, jika Anda masukkan featuresX.dat dalam tipe string dan memuatnya seperti itu. Salah ketik. Perintah ini sama dengan sebelumnya. Jadi, Anda bisa dengan cara ini, memasukkan nama berkas, mendefinisikannya dalam string, dan di Octave gunakan petik tunggal untuk menampilkan string, seperti demikian. Itu string, dan kita bisa memuat berkas yang namanya diberikan dalam string. Perintah 'who' menunjukkan pada saya variabel apa saja yg saya punya dalam ruang kerja Octave. Jadi, 'who' menunjukkan saya apakah variabel-variabel yang Octave punya
aktif di memori saat ini. featuresX dan priceY ada diantaranya, begitu juga variabel-variabel yang kita buat di awal sesi ini. Saya bisa mengetik featuresX untuk menampilkan featuresX. Itu data saya. Saya bisa ketik size(featuresX) dan itu matriks 47 x 2. Dan sama juga, size(priceY) menunjukkan vektor 47 x 1. Ini vektor berdimensi 47. Kolom vektor yang berisi semua harga y dalam set latihan
saya. Fungsi 'who' memperlihatkan pada Anda variabel-variabel yang aktif
dalam ruang kerja. Ada juga 'whos' variabel yang memberikan pada Anda
tampilan detil. Dan ini juga, menampilkan variabel-variabel saya tapi bersama dengan ukurannya juga. Jadi, A adalah matriks 3 x 2, dan featuresX adalah matriks 47 x 2. priceY adalah matriks 47 x 1. Artinya ini sebuah vektor. 'whos' juga menunjukkan berapa byte
memori yang dipakai. Begitu juga tipe datanya. Double berarti dua angka floating point yang artinya ini adalah nilai riil, bilangan
floating point. Jika Anda ingin menghapus sebuah variabel, Anda bisa
menggunakan perintah 'clear'. clear featuresX dan ketik 'whos' lagi. Anda lihat, variabel featuresX sudah tidak ada. Bagaimana kita menyimpan data? Mari lihat. Buat variabel v = priveY(1:10) Ini membuat v berisi 10 elemen pertama vektor y. Ketik 'who' atau 'whos'. priceY adalah vektor 47 x 1. v adalah vektor 10 x 1 karena v = priceY(1:10) yang membuatnya berisi 10 elemen pertama y. Katakanlah, saya ingin menyimpan data ini ke disk, perintah 'save hello.mat v' akan menyimpan variabel v ke dalam berkas bernama hello.mat. Mari lakukan. Sekarang sebuah berkas tampil di desktop saya, bernama hello.mat. Kebetulan saya telah menginstal MATLAB, itulah mengapa ikonnya tampak seperti ini, karena Windows mengenalinya sebagai berkas MATLAB, tapi jangan khawatir jika berkas ini tampil dengan ikon berbeda di komputer Anda. Katakanlah saya ingin menghapus semua
variabel. Cukup ketik 'clear' maka ini menghapus semua variabel
di ruang kerja Anda. Sekarang ruang kerja kosong. Jika saya memuat hello.mat, saya memuat kembali variabel v, yaitu data yang saya simpan sebelumnya ke dalam berkas
hello.mat. Yang kita lakukan 'save hello.mat v', ini menyimpan data dalam format biner, format biner yang lebih ringkas. Jadi, jika v berisi banyak data, ini akan menjadi lebih ringkas. Hanya akan membutuhkan sedikit ruang. Jika Anda ingin menyimpan data dalam format yang bisa terbaca manusia, maka Anda ketik 'save hello.txt v -ascii'. Ini akan menyimpan v sebagai sebuah teks atau teks berformat ascii. Dan, sekali saya lakukan itu, saya punya berkas ini. hello.txt tampil di desktop saya, dan jika saya buka ini, kita lihat ini adalah berkas teks dengan data saya tersimpan
di dalam. Begitulah Anda memuat dan menyimpan
data. Sekarang mari bicara sedikit tentang
bagaimana memanipulasi data. Set A sama dengan matriks itu lagi, sehingga ini matriks
3 x 2 saya. Sama seperti pengindeksan. Ketik A(3,2). Ini merujuk pada elemen 3,2 dari matriks A. Jadi, ini apa yang biasanya akan kita tulis sebagai A subskrip 3, 2 sehingga itu adalah elemen baris ke-3, kolom ke-2 matriks A yaitu 6. Saya bisa juga ketik A(2,:) untuk mengambil semua yang ada di baris ke-2. Jadi, ':' berarti setiap elemen di baris atau kolom tersebut. Jadi, A(2,:) adalah baris ke-2 matriks A ini. Sama juga, jika saya ketik A(:,2) maka ini berarti ambil semua yang ada dalam kolom ke-2 matriks A. Hasilnya,
2 4 6. Ini berarti A, semuanya, kolom ke-2. Jadi, ini kolom ke-2 matriks A, yaitu 2 4 6. Anda bisa juga menggunakan operasi pengindeksan yang
rumit. Ini satu contoh. Anda mungkin jarang melakukan ini, tapi biar saya contohkan, A([1 3],:). Ini artinya, ambil semua elemen A yang indeks pertamanya
1 atau 3. Ini berarti saya mendapatkan semua dari baris pertama dan ketiga matriks A dari semua kolom. Jadi, ini matriks A, sehingga A([1 3],:) berarti ambil semua dari baris pertama dan dari baris ketiga, dan ':' berarti, kedua kolom pertama dan kedua. Hasilnya 1 2 5 6. Meskipun begitu, mungkin Anda jarang menggunakan sumber dari operasi pengindeksan yang rumit. Contoh lainnya. Matriks A(:,2), menampilkan kolom ke-2 matriks A. Anda bisa menggunakan cara ini untuk
assignment(= input nilai). Saya bisa mengganti kolom ke-2 matriks A dengan 10, 11, 12, dan jika saya mengambil kolom ke-2 matriks A dan menggantinya dengan vektor kolom
10, 11, 12, sekarang matriks A menjadi 1, 3, 5, dan kolom ke-2 digantikan oleh
10, 11, 12. Ini operasi lainnya. Set A = (A, [100, 101, 102]) Ini maksudnya adalah menambahkan vektor kolom lain di sebelah
kanan matriks A. Ups. Saya membuat kesalahan. Seharusnya menggunakan ';' di situ, dan sekarang A sama dengan ini. Oke? Semoga dimengerti. 100, 101, 102 adalah vektor kolom dan yang baru kita kerjakan adalah kita ambil A dan menset A sama dengan nilai awalnya. Kemudian kita tambahkan vektor kolom di kanan. Dengan demikian, matriks A yang awalnya berisi enam
elemen di kiri ini. Kita ambil matriks A dan tambahkan vektor kolom
lain di kanan. Itulah mengapa sekarang matriks A adalah matriks 3 x 3 seperti itu. Akhirnya, satu trik cantik yang kadang saya gunakan, A(:). Ini adalah sintaks spesial. Ini berarti tempatkan semua elemen A
ke dalam satu vektor kolom dan ini menghasilkan vektor 9 x 1. Itu adalah semua elemen A yang
dirangkaikan bersama. Beberapa contoh lagi. Set A = [1 2; 3 4; 5 6]. Lalu set B = [11 12; 13 14; 15 16]. Saya bisa membuat matriks baru C = [A B]. Ini matriks A saya. Ini matriks B saya, dan saya set C = [A B]. Yang saya lakukan, mengambil 2 matriks ini dan
merangkaikannya satu sama lain. Matriks A di kanan. Matriks B di kiri. Begitulah saya membentuk matriks C. Bisa juga C = [A; B]. Tanda ';' berarti letakkan semua nilai berikutnya di bawah. Jadi, C = [A; B] menempatkan matriks A dan B bersama akan tetapi keduanya ditumpuk satu sama lain. A di atas dan B di bawah, dan C sekarang matriks 6 x 2. Jadi, ';' biasanya berarti pergi ke baris berikut. Jadi, C dibentuk dari A lalu pergi ke bawah A dan letakkan B di situ. O ya, [A B] sama dengan [A, B]. Masing-masing memberikan hasil yang
sama. Semoga sekarang Anda tahu membuat matriks, dan semoga ini menunjukkan pada Anda beberapa perintah yang dapat digunakan untuk menempatkan dan mengambil matriks dengan cepat, dan menggabungkannya bersama untuk membentuk matriks yang lebih besar
hanya dengan sedikit kode. Octave sangat menyenangkan dalam hal seberapa cepatnya kita dapat membuat matriks kompleks dan mengolah data. Itu saja untuk pengolahan data. Di video berikut akan kita bahas bagaimana melakukan perhitungan kompleks
pada data kita. Semoga itu memberi Anda pengalaman, hanya dengan sedikit perintah, Anda bisa dengan sangat cepat mengolah data dengan
Octave. Anda memuat dan menyimpan vektor dan matriks, memuat dan menyimpan data, menempatkan beberapa matriks bersama
untuk membuat matriks yang lebih besar, melakukan
pengindeksan atau memilih elemen tertentu dalam matriks. Saya mengajarkan banyak perintah jadi, hal terbaik untuk Anda lakukan
sesudah ini adalah melihat pada transkrip hal-hal yang saya ketik
sebelumnya. Lihat transkripnya di website dan unduh transkrip sesi ini dari situ dan baca transkripnya lalu ketik beberapa perintah di Octave dan mulailah pelajari cara kerja
perintah-perintah itu. Tidak ada gunanya menghafal semua
perintah ini. Anda harus mencobanya, semoga dari video ini Anda tahu hal-hal yang bisa dilakukan. Sehingga saat nanti Anda coba memprogram algoritma belajar, jika Anda mencari perintah tertentu yang Octave bisa lakukan karena mungkin Anda pernah melihatnya di sini, Anda harus melihat transkrip sesi ini dan membacanya untuk menemukan perintah yang ingin
Anda gunakan. Jadi itu saja untuk pengolahan data dan pada video berikutnya saya akan membahas bagaimana melakukan perhitungan kompleks pada data kita, dan bagaimana menghitung data, dan mulai mengimplementasikan algoritma
belajar.