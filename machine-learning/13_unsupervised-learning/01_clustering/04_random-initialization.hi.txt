इस वीडियो में, मैं चाहूँगा बात करने के लिए कि कैसे देनी है प्रारम्भिक / ईनिशीयल वैल्यू के-मीन्स को और अधिक महत्वपूर्ण है, कि इससे शुरू होगी चर्चा कैसे बनाना है के-मीन्स कि वह लोकल ऑप्टिमा से बच सके. यहाँ है के-मीन्स क्लस्टरिंग एल्गोरिद्म जिसके बारे में हमने पहले बात की थी. एक स्टेप जिसकी हमने कभी ज़्यादा बात नहीं की थी वह था यह स्टेप कि आप कैसे रैंडम ढंग से प्रारम्भिक वैल्यू देते हो क्लस्टर सेंट्रोईड्स को. बहुत से ऐसे विभिन्न ढंग हैं जो कोई सोच सकता हैं इस्तेमाल करने के लिए रैंडम ढंग से प्रारम्भिक वैल्यू क्लस्टर सेंट्रोईड्स को. लेकिन, यह होता है कि एक विधि है जिसकी सबसे ज़्यादा सलाह दी जाती है तुलना बहुत से दूसरे विकल्पों की अपेक्षा जो कोई सोच सकता है. तो, चलो मैं बताता हूँ आपको उस विकल्प के बारे में क्योंकि वह अक्सर बढ़िया काम करता है. यहाँ है कि मैं अक्सर कैसे रैंडम ढंग से प्रारम्भिक वैल्यू देता हूँ मेरे क्लस्टर सेंट्रोईड्स को. जब चला रहे हैं के-मीन्स, आपके पास होनी चाहिए संख्या क्लस्टर सेंट्रोईड्स की, K, सेट की गई कम ट्रेनिंग इग्ज़ाम्पल्ज़ की संख्या M से. यह होगा वास्तव में अजीब चलाना के-मीन्स जिसमें संख्या क्लस्टर सेंट्रोईड्स की है, आप जानते हैं, बराबर या बड़ी इग्ज़ाम्पल्ज़ की संख्या से जो आपके पास हैं, ठीक है? तो जिस तरह से मैं अक्सर प्रारम्भिक वैल्यू देता हूँ के-मीन्स को वह है मैं रैंडम ढंग से उठाऊँगा K ट्रेनिंग इग्ज़ाम्पल्ज़. तो, और, क्या करता हूँ मैं कि फिर सेट करता हूँ Mu1 ऑफ़ MuK बराबर इन K ट्रेनिंग इग्ज़ाम्पल्ज़. चलिए मैं दिखाता हूँ आपको एक ठोस उदाहरण. मान लो कि K है 2 और इसलिए इस उदाहरण में दाईं तरफ़ मान लो मैं चाहता हूँ ढूँढना दो क्लस्टर्ज़. तो, मैं क्या करूँगा कि देने के लिए प्रारम्भिक वैल्यू मेरे क्लस्टर सेंट्रोईड्स को, मैं रैंडम ढंग से उठाऊँगा कुछ इग्ज़ाम्पल्ज़. और मान लो मैं लेता हूँ यह और मैं लेता हैं वह. और जिस तरह से मैं दूँगा प्रारम्भिक वैल्यू मेरे क्लस्टर सेंट्रोईड्स को कि, मैं दूँगा प्रारम्भिक वैल्यू मेरे क्लस्टर सेंट्रोईड्स बिल्कुल ऊपर उन इग्ज़ाम्पल्ज़ के. तो वह है मेरा पहला क्लस्टर सेंट्रोईड और वह है मेरा दूसरा क्लस्टर सेंट्रोईड, और वह है एक रैंडम ढंग से प्रारम्भिक वैल्यू के-मीन्स की. जो मैंने बनाया है, विशेष रूप से अच्छा दिखता है. और कभी कभी मैं हो सकता हूँ कम भाग्यशाली और शायद मैं उठा पाउँगा वह मेरा पहला रैंडम प्रारम्भिक इग्ज़ाम्पल, वह मेरा दूसरा. और यहाँ मैं ले रहा हूँ दो इग्ज़ाम्पल्ज़ क्योंकि K है 2. क्योंकि हमने रैंडम ढंग से उठाए हैं दो ट्रेनिंग इग्ज़ाम्पल और यदि मैं लेता हूँ वह दो तब मुझे मिलेंगे, शायद यह मेरा पहला क्लस्टर सेंट्रोईड और वह मेरा दूसरा प्रारम्भिक स्थान क्लस्टर सेंट्रोईड का. तो इस प्रकार आप दे सकते हैं रैंडम ढंग से प्रारम्भिक वैल्यू क्लस्टर सेंट्रोईड्स को. और इसलिए शुरू में, आपका पहला क्लस्टर सेंट्रोईड Mu1 होगा बराबर x(i) के किसी रैंडम वैल्यू i के लिए और Mu2 होगा बराबर x(j) किसी रैंडम वैल्यू j के लिए और इसी प्रकार आगे, यदि आपके पास हैं ज़्यादा क्लस्टर्स और ज़्यादा क्लस्टर सेंट्रोईड्स. और एक साइड कॉमेंट की तरह, मैं कहूँगा कि पहले के वीडियो मैं जहाँ मैंने पहली बार चित्रित किया था के-मीन्स ऐनिमेशन के साथ, उन स्लाइड्ज़ के सेट में, सिर्फ़ चित्रण के उद्देश्य से, मैंने वास्तव में इस्तेमाल किया था एक भिन्न ढंग प्रारम्भिक वैल्यू देने के लिए क्लस्टर सेंट्रोईड्स को. लेकिन विधि वर्णित की गई इस स्लाइड पर, वास्तव में है जिसकी सलाह दी जाती है. और किस तरह आपको इसे इस्तेमाल करना चाहिए, जब आप इम्प्लमेंट कर रहे हैं के-मीन्स. तो, उन्होंने सुझाव दिए शायद इन दो चित्रों के द्वारा दाईं तरफ़. आप वास्तव में अनुमान लगा सकते हैं कि के-मीन्स हो सकता है कन्वर्ज एक भिन्न हल पर निर्भर करते हुए वास्तव में कैसे क्लस्टर्ज़ को प्रारंभिक वैल्यूज़ दी गई थी, और इसलिए, निर्भर करते हुए रैंडम ढंग से दी गई प्रारंभिक वैल्यूज़ पर, के-मीन्स पहुँच सकता है भिन्न हल पर. और, विशेष रूप से, के-मीन्स वास्तव में पहुँच सकता है लोकल ऑप्टिमा पर. यदि आपको ऐसा डेटा सेट दिया है. ठीक है, ऐसा लगता है, आप जानते हैं, कि वहाँ तीन क्लस्टर्ज़ है, और इसलिए, यदि आप चलाते हैं के-मीन्स और यदि यह पहुँचता है एक अच्छे लोकल ऑप्टिमा पर यह हो सकता है वास्तव में ग्लोबल ऑप्टिमा, आपको शायद मिले वह क्लस्टर रिंग. यदि आपको मिले थे एक विशेष रूप से ख़राब, रैंडम प्रारम्भिक वैल्यूज़, के-मीन्स अटक सकता है एक भिन्न लोकल ऑप्टिमा पर. तो, इस उदाहरण में उदाहरण बाईं तरफ़ ऐसा लगता है कि इस नीले क्लस्टर ने कैप्चर किए हैं बहुत से पोईँट्स बाईं तरफ़ और फिर वे थे हरे क्लस्टर में प्रत्येक ने किए हैं अपेक्षाकृत कम संख्या में पोईँट्स. और यह इसलिए, कॉरेस्पॉंड करता है एक ख़राब लोकल ऑप्टिमा को क्योंकि इसने मूलरूप से लिए हैं ये दो क्लस्टर्स और इस्तेमाल किया है उन्हें पहले क्लस्टर के लिए, और इसके अलावा, इसने विभाजित किया है दूसरा क्लस्टर दो अलग सब-क्लस्टर्स में इस तरह, और इसने लिया है दूसरा क्लस्टर भी और विभाजित किया इसे दो अलग सब-क्लस्टर्स में इस तरह, और इसलिए, दोनो ये उदाहरण नीचे दाईं तरफ़ कॉरेस्पॉंड करते हैं भिन्न लोकल ऑप्टिमा को के-मीन्स के और वास्तव में, इस उदाहरण में यहाँ, क्लस्टर, लाल क्लस्टर ने कैप्चर किया है केवल एक इग्ज़ाम्पल. और टर्म लोकल ऑप्टिमा, वैसे, रेफ़र करती है लोकल ऑप्टिमा को इस डिस्टॉर्शन फ़ंक्शन J को, और किस को ये हल नीचे बाईं तरफ़, ये किस लोकल ऑप्टिमा को कॉरेस्पॉंड करते हैं वह है वास्तव में हल जहाँ के-मीन्स अटक गया है लोकल ऑप्टिमा पर और नहीं कर रहा है एक अच्छा काम मिनमायज़ करने में इस डिस्टॉर्शन फ़ंक्शन J को. अत:, यदि आप चिंतित हैं कि के-मीन्स अटक जाएगा लोकल ऑप्टिमा पर, यदि बढ़ाना चाहते हैं सम्भावना के-मीन्स की कि यह ढूँढ पाए सबसे बढ़िया सम्भव क्लस्टरिंग, जैसे वह दिखाया है ऊपर यहाँ, हम क्या कर सकते हैं, परखें बहुत सी, रैंडम प्रारंभिक वैल्यूज़. तो, बजाय देने के प्रारम्भिक वैल्यूज़ के-मीन्स को एक बार और उम्मीद करने से कि वह काम करेगा, हम क्या कर सकते हैं प्रारम्भिक वैल्यू दें के-मीन्स को बहुत बार और चलाएँ के-मीन्स को बहुत बार, और इस्तेमाल करे उसका सुनिश्चित करने के लिए कि हमें मिले उतना अच्छा एक हल, उतना अच्छा एक लोकल या ग्लोबल ऑप्टिमा जितना सम्भव है. वास्तव में, कैसे करते हैं आप वह? मान लो, मैं फ़ैसला करता हूँ चलाने का के-मीन्स को सौ बार तो मैं चलाऊँगा इस लूप को सौ बार और यह काफ़ी आम है इतनी बार चलाना. यह हो सकता है कुछ 50 से शायद 1000 तक. तो, मान लो आप फ़ैसला करते हैं चलाने का के-मीन्स को सौ बार. तो क्या मतलब है उससे कि हम रैंडम ढंग से प्रारम्भिक वैल्यू देंगे के-मीन्स को. और प्रत्येक के लिए इन सौ रैंडम प्रारम्भिक वैल्यूज़ में से हम चलाएँगे के-मीन्स और और वह देगा हमें एक सेट क्लस्टरिंग का, और एक सेट क्लस्टर सेंट्रोईड्स का, और तब हम करेंगे तब कम्प्यूट डिस्टॉर्शन J, मतलब कंपयूट करेंगे यह कॉस्ट फंक्शन क्लस्टरिंग असायन्मेंट के सेट पर क्लस्टर सेंट्रोईड्स पर जो हमें मिले. अंत में, इस पूरी प्रक्रिया में एक सौ बार कर लेने पर, आपके पास होंगे सौ अलग ढंग क्लस्टरिंग के डेटा को और तब अंत में आप क्या करते हैं सारे ये सौ तरीक़े जो आपने ढूँढे हैं डेटा की क्लस्टरिंग के, सिर्फ़ लेंगे एक, जो देता है हमें न्यूनतम कॉस्ट. जो देता है हमें न्यूनतम डिस्टॉर्शन. और यह होता है कि यदि आप चलाते हैं के-मीन्स जिसमें एक छोटी संख्या है क्लस्टर्स की, तो आप जानते हैं यदि संख्या क्लस्टर्स की है कहीं दो से शायद 10 तक- देना बहुत सी रैंडम प्रारंभिक वैल्यूज़ अक्सर कर सकता है, कभी-कभी सुनिश्चित कर सकता है कि आपको मिले एक बेहतर लोकल ऑप्टिमा. सुनिश्चित करें कि आपको मिले एक बेहतर क्लस्टरिंग डेटा की. लेकिन यदि K बहुत बड़ा है, तो, यदि K बहुत बड़ा है 10 से, निश्चय ही यदि K होता, आप जानते हैं, यदि आप प्रयास कर रहे होते ढूँढने के सौ से अधिक क्लस्टर्स, तब, देना बहुत सी रैंडम प्रारंभिक वैल्यूज़ होता कम सम्भावित एक बड़ा फ़र्क़ देने में. और एक बहुत अधिक सम्भावना कि आपकी पहली रैंडम प्रारम्भिक वैल्यू देगी आपको एक काफ़ी अच्छा हल पहले से ही और करना, देना बहुत सी रैंडम प्रारम्भिक वैल्यूज़ शायद देगा आपको एक थोड़ा बेहतर हल, लेकिन शायद उतना नहीं. लेकिन वास्तव में उस क्षेत्र में जहाँ आपके पास हैं अपेक्षाकृत छोटी संख्या क्लस्टर्स की, ख़ासकर यदि आपके पास हैं, शायद 2 या 3 4 क्लस्टर्स कि रैंडम प्रारम्भिक वैल्यूज़ ला सकती हैं बहुत बड़ा अंतर सुनिश्चित करने में कि आप करे अच्छे से न्यूनतम / मिनमायज़ डिस्टॉर्शन फ़ंक्शन को जिससे आपको मिले एक अच्छी क्लस्टरिंग. तो, वह था के-मीन्स रैंडम प्रारंभिक वैल्यूज़ से. यदि आप प्रयास कर रहे हैं लर्न करने का एक क्लस्टरिंग जिसमें हैं अपेक्षाकृत छोटी संख्या क्लस्टर्स की, 2, 3, 4, 5 शायद, 6, 7, परखना बहुत सी रैंडम प्रारंभिक वैल्यूज़ कर सकता है कभी कभी, मदद आपकी पाने में डेटा की एक ज्यादा बेहतर क्लस्टरिंग. लेकिन यदि आप लर्न कर रहे हैं एक बड़ी संख्या में क्लस्टरिंग भी, प्रारम्भिक वैल्यूज़, रैंडम प्रारम्भिक वैल्यूज़ की विधि जिसका मैंने यहाँ वर्णन किया है, उसे देना चाहिए के-मीन्स को एक उचित आरम्भिक पोईँट शुरू करने के लिए ढूँढना एक बेहतर सेट क्लस्टर्स का.