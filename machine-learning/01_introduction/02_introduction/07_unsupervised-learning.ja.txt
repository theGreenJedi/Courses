このビデオでは、 二番目に大きな機械学習 問題である「教師なし学習」についてお話します。 前のビデオで教師あり学習についてお話しました。 その時に、このようなデータセットを お見せしたことを思い返してください。個々の サンプルはラベル付けされていて 陽性か陰性の手本のいずれかでした。 良性かあるいは悪性の腫瘍、という風に。 ですから、教師あり学習では、それぞれのサンプルには 明示的に何が いわゆる「正解」が何か示されていました。 良性か悪性かなどのように。 教師なし学習で与えられるのは そのようなデータとは異なる このようなデータになります。 ラベル付けされていないか 全て同じ ラベルか、あるいはラベルがそもそもありません。 そうしたデータセットを与えられ、 それに対して何をすべきか 指定がなく、それぞれの データポイントが何かも明示されていません。 その代わりに、単に、データセットがあるだけです。 このデータに何か構造を見つけることができますか？ このデータセットでは、 教師なし学習アルゴリズムは データが二つの異なるクラスターに属すると結論するかもしれません。 ここに一つのクラスターがあり、 ここに別のクラスターがあります。 このように教師なし学習アルゴリズムは こうしたデータを二つの別々のクラスターに分けたりします。 そしてこれはクラスタリング・アルゴリズムと呼ばれます。 さらに、これは多くの場所で使われています。 クラスタリングが使われている 一例は、Google News です。もし、まだ 見たことがなければ、実際に この URL news.google.com に行って 見てください。 Google News が行うのは、 毎日、 何万、 何十万という数の報道記事を ウェブから集め、これを関連する記事にグループ分けします。 例えば、これを見てみましょう。 これらの URL がリンクしているのは BP 油井のニュースに関する 別々の記事です。 では、これらの URL の一つをクリックして これらの URL の一つをクリックします。 すると、このようなウェブページに辿り着きます。 これは ウォールストリート ジャーナルの記事、BP 油井流出の報道で、 「BP マコンドを閉鎖」 これは流出が発生した 油井の名前です。そして そのグループの違う URL をクリックすると 違う記事に辿り着くかもしれません。 これは、CNN の記事で、 これもまた BP 原油流出に関するものです。 そしてさらに三番目の リンクをクリックすると、また別の記事に行きます。 これは イギリスのガーディアン紙の BP 原油流出に関する記事です。 ですから Google News がしたのは、 数万件もの報道記事を集めて、 それをクラスタリングしてまとめたのです。 これにより、同じ話題の報道記事は 全てまとめて表示されています。 実は、 クラスタリング・アルゴリズムと教師なし学習 アルゴリズムは他にも多くの問題で使われています。 これは、ゲノミックスの理解に関する一例です。 これは、DNA マイクロアレイのデータの例です。 考え方としては、 別々の個人からなるグループで 一人一人、どれだけ特定の 遺伝子を持っているかどうかを測定します。 厳密には、特定の遺伝子がどれだけ発現しているかを測定します。 様々な色、赤、緑 灰色、などは、 異なる個人間でどれぐらい 特定の遺伝子が共通しているか していないかを表しています。 これで何ができるかというと、 クラスタリング・アルゴリズムを実行して、 個人を異なるカテゴリ、 異なるタイプの人々にグループ分けすることです。 これは教師なし学習です。なぜなら 前もってアルゴリズムに これらがタイプ 1 の人々で それらが タイプ 2 の人々で、それら がタイプ 3 の人々だなどと教えていないからです。 代わりに、ここにいくらかデータがあり、 そのデータに何が含まれているかは未知で、 誰がどのタイプかは知らないし、 そもそもどのような異なる タイプの人がいるのか分からないが、 自動的に構造を データの中に見つけられないか、自動的に 個人を前もって知られていないタイプに クラスタリングすることで、と言っているわけです。 アルゴリズムに 正解を データセット内のサンプルに対して与えていないため これは教師なし学習です。 教師なし学習はあるいはクラスタリングは他にも幾つかの応用例があります。 大規模なコンピュータ・クラスターを整理するために使われています。 ある友人は大規模な データセンター、つまり 大規模なコンピュータ・クラスターを調べて どのマシンが一緒に動作する 傾向にあるかを知ろうとしていました。 もしこうしたマシンを隣接させることができれば、 データセンターの稼動効率が改善されます。 二番目の応用例は、ソーシャルネットワーク分析です。 ある知識が与えられていて、例えばどの友人に 最も多くの電子メールを送るかとか Facebook フレンドリストあるいは Google+ サークルの情報を元に、 自動的にどれが 密接な友人のグループか、 また、お互いが全て顔見知りの 人々のグループはどれか、ということを特定できないか? マーケットセグメンテーション（市場細分化）。 多くの企業は巨大な顧客情報データベースを保持しています。 この顧客情報の データセットを見て、自動的に マーケットセグメントを発見し、自動的に 顧客を異なる マーケットセグメントにグループ分けして 自動的に、もっと 効率的に、販売やマーケティングを 異なるマーケットセグメントに一括して行うことができないか? これも、また、教師なし学習です。 なぜなら、こうした 顧客データは全てあるものの、 前もってどのような マーケットセグメントがあるか知りませんし データセット内の顧客について 前もって 誰が マーケットセグメント 1 に属し、誰が マーケットセグメント 2 に属すかなどを知らないからです。 しかしこれを全て単にデータから発見させなければなりません。 最後に、実は教師なし学習が 使われている用途には 意外なことに、天文学データ解析もあります。 そしてこうしたクラスタリング・アルゴリズムは 意外にも銀河の発生について 興味深い有用な理論を提供しています。 これらは全てクラスタリングの事例です。 そしてこれは教師なし学習の一種に過ぎません。 別のものについてお話します。 これからお話するのは、カクテルパーティー問題です。 カクテルパーティーに行ったことはありますよね? 想像できると思いますが、パーティーが あって、部屋に人がいっぱいいて、 みな座って同時に会話を していて、 みんなが同時に話をしているので 話し声が重複しています。 目の前にいる人の声を聞くのも困難なくらいです。 そこで、仮に 二人の人がカクテルパーティをしていて 二人が同時に話をしているとします。 これはやや 小さなカクテルパーティーです。 そして二つの マイクロフォンを部屋に設置します。 これがマイクロフォンです。そして これらのマイクロフォンは二箇所の 異なる距離の場所で 話し手の声を拾いますので、それぞれのマイクロフォンは この二人の話し手の声を異なる組み合わせで録音します。 例えば話し手 1 は マイクロフォン 1 ではやや大きな声に聞こえ、 もしかして話し手 2 は マイクロフォン 2 に対してやや大きな声で聞こえるかもしれません。 二つのマイクロフォンは 相対的に異なる位置で 二人の声を拾うので、それぞれの マイクロフォンが録音するのは、 両方の話し手の声の重複した組み合わせです。 さて、ここに実際に研究者が録音した 二人の話し声があります。 再生してみましょう。 最初に第一のマイクロフォンが拾った音です。 One (uno), two (dos), three (tres), four (cuatro), five (cinco), six (seis), seven (siete), eight (ocho), nine (nueve), ten (y diez). まあ、あんまり楽しそうなカクテル パーティーではなさそうですが、二人の人が 1 から 10 まで 二つの言語で数えています。お分かりの通り。 たった今お聞き頂いたのは、 第一のマイクロフォンの録音です。これが二番目の録音です。 Uno (one), dos (two), tres (three), cuatro, (four), cinco (five), seis (six), siete (seven), ocho (eight), nueve (nine) y diez (ten). そこで私たちができるのは、 この二つのマイクロフォンの録音を 教師なし学習アルゴリズムに与えることです。 これをカクテルパーティー・アルゴリズムと呼びます。 そしてアルゴリズムに命令します このデータから構造を見つけなさいと。 そしてアルゴリズムが行うのは、 これらの 音声録音を聞き、どうやら、 この音声では、 二つの音声録音が 追加されているか、あるいは 合計されてこうした録音が生み出されたと答えます。 さらに、カクテルパーティー アルゴリズムが行うのは、 二つの音源を 追加される、あるいは 合計されて最終的な 録音となったものを分離します。実際に ここにカクテルパーティー・アルゴリズムの最初の出力結果を聞いてみましょう。 One, two, three, four, five, six, seven, eight, nine, ten. このように英語の 声が録音された音声の一つから分離されています。 これが二番目の出力です。 Uno, dos, tres, quatro, cinco, seis, siete, ocho, nueve y diez. なかなか悪くないですね。 もう一つ例を出すと、ここに別の やはり似たような状況で録音されたものがあります。 これが第一のマイクロフォンです。One, two, three, four, five, six, seven, eight, nine, ten. OK 可哀想にこの人は カクテルパーティーから帰ってきて 自宅の部屋でラジオに向かって独り言を言っているようです。 これが二番目のマイクロフォンの録音です。 One, two, three, four, five, six, seven, eight, nine, ten. この二つのマイクロフォンの 録音を同じアルゴリズムに与えると、 それが行うのは、またこう答えます。 この音声には、 二つの音源があって、さらに、 アルゴリズムの答えは、これが 発見された最初の音源です。 One, two, three, four, five, six, seven, eight, nine, ten. これは完璧ではありませんでした。 声は復元されていますが、 そこには少しだけ音楽も混じっています。 そしてこれがアルゴリズムの二番目の出力です。 悪くありません。二番目の 出力では、声がなんとか完全に除去されています。 そしてうまく 音楽から 1 から 10 まで数える声を除去してきれいにしています。 そこで、このような 教師なし学習アルゴリズムを見て、 思い浮かぶ疑問は、 これを実装するのはどれだけ複雑か、ということですよね。 一見して、 このアプリケーションを構築するには、一見して この音声処理を行うには、 たくさんのコードを書くか、 あるいは、いくつかの 音声処理用の C++ や Java ライブラリに リンクするか、一見して 非常に複雑なプログラムのように見えます このように音声を処理し、音声を分離したりするのは。 実は、このアルゴリズムが 先ほどお聞き頂いたものを出力するのに 実行するのは単に一行の コードだけです。ここにある通り。 研究者が この一行のコードを開発するのには大変時間がかかりました。 ですから、これが簡単な問題であるというつもりはありません。 しかし、実は、 適切なプログラミング環境を用いると、多くの学習 アルゴリズムは非常に短いプログラムになります。 ですから、これが このクラスでは、 Octave プログラミング環境を利用する理由です。 Octave は無料のオープンソース ソフトウェアです。そして Octave や MATLAB のようなツールを使うと 多くの学習アルゴリズムが単に 数行のコードとして実装できます。 このクラスでは後で 少しどのように Octave を使うか講義します。 そしてこうしたアルゴリズムを Octave で実装していくことになります。 もし MATLAB をお持ちであれば、それを使うことも出来ます。 実は、シリコンバレーでは、 多くの機械学習アルゴリズムにおいて まず最初に行うのは、ソフトウェアの試作を Octave で行います。Octave の ソフトウェアを使うと信じられないほど速く こうした学習アルゴリズムを実装できるからです。 ここの、これらの関数のそれぞれ、 例えば svd 関数は、特異値分解 singular value decomposition の略です。 これは実は Octave では単に内蔵された線型代数ルーチンです。 これを C++ か Java で行おうとすると これは、多くの行数の 複雑な C++ や Java のライブラリにリンクするコードとなります。 つまり、こうしたものを C++ や Java あるいは Pythonで実装可能ですが、 こうした言語ではもっと複雑なことになります。 私がこれまで 機械学習を教えて ほぼ十年間見てきたことは、 プログラミング環境として Octave を使うと、 非常に速く学ぶことができるということです。 Octave を 学習のため、そして 試作のためのツールとして使うと 学習アルゴリズムをもっと手早く学び、試作ができるということです。 そして、事実、多くの人が 大手のシリコン バレーの企業で行っているのは、 Octave のアルゴリズムを使って最初に 学習アルゴリズムを試作し、そして それが実際に機能するようにした後にのみ それを C++ あるいは Java などに移植します。 結果的に、こうした やり方をすると、 アルゴリズムが実際に機能するように するのに、C++ で始めるよりずっと速くなります。 もちろん、私は承知しています。 教師として 「これについては私の言うことを 信じなさい」と言えるのはほんのわずかの限定された 回数のみであると。 しかし、こうした Octave のようなプログラミング環境を使ったことがない方に お願いしたいことは、 これについては私の言うことを信じてください、ということです。 そして、言いたいのは、皆さんは、 皆さんの時間、皆さんの開発 時間は、もっとも貴重な資源の一つであると。 そして多くの 人がこれを実践するのを見てきて言えるのは、 機械学習の 研究者あるいは機械学習の開発者として あなたの生産性がずっと高くなるのは、 試作から始めることを習得し、 他の言語ではなく Octave から始める場合ですと。 最後に、この ビデオのまとめとして、一つだけ復習のための問題があります。 教師なし学習について学んできました。これは 学習の設定として、 アルゴリズムに非常に多くの データを与え、そして単に データから構造を見つけなさいと求めるというものです。 以下の四つの例のうち、 この四つのどれが あなたの考えでは 教師なし学習アルゴリズムで、 教師ありアルゴリズムではないと思いますか。 左の四つの チェックボックスそれぞれ チェックして頂きたいのは、 教師なし学習 アルゴリズムが適切だと思われるものです。 そして、右下にあるボタンをクリックして正解を見てください。 ビデオが停止したら、どうぞ スライドにある質問に答えてください。 さて、スパムフォルダの問題で覚えていて頂きたいのは、 ラベルがついたデータがある場合は、 電子メールがスパムか 非スパムかなど、これは教師あり学習として取り扱います。 報道記事の例は、これは 正にこのビデオで見た Google News の例と 同じですので、 既に見たとおり、 クラスタリング・アルゴリズムを使って こうした記事をクラスタリングしてまとめることが出来ますので、これは教師なし学習です。 マーケットセグメンテーションの例は 少し前にお話したもので、 これも教師なし学習問題として扱うことが出来ます。 なぜなら、単に アルゴリズムにはデータを与えるだけで、 後はそれに自動的にマーケットセグメントを発見させるからです。 最後の糖尿病の例は、 これは実は、 前のビデオの乳癌の例にちょうど似ています。 単に、 良性と悪性の癌腫瘍、 良性と悪性の腫瘍ではなく その代わりに、糖尿病か そうでないかということですので、 これは教師あり これを解決するのには 教師あり学習問題として扱います。 ちょうど乳房の腫瘍のデータと同じように。 さて、ここまでが教師なし 学習です。次の ビデオでは、もっと 特定の学習アルゴリズムを掘り下げていき、 実際にこうした アルゴリズムがどのように動くのか そしてそれをどのように実装するのかについてお話していきます。