U ovom videu ćemo govoriti o drugoj važnoj vrsti problema mašinskog učenja, pod nazivom nenadgledano učenje (unsupervised learning). U prošlom videu, govorili smo o nadgledanom učenju (supervised learning). Tada su setovi podataka izgledali ovako, gde je svaki primer bio označen bilo kao pozitivan ili negativan primer, u zavisnosti od toga da li se radilo o benignom ili malignom tumoru. Dakle, za svaki primer u nadgledanom učenju, bilo nam je eksplicitno dato šta je takozvani ispravan odgovor, tj. da li je tumor benigan ili maligan. U nenadgledanom učenju, dati su nam podaci koji izgledaju drugačije, npr. podaci koji izgledaju ovako, koji nemaju nikakve oznake, tj. gde svi imaju istu oznaku ili zaista nikakvu oznaku. Dakle, dat nam je set podataka i nije nam rečeno šta da radimo sa njima, i nije nam rečeno šta pojedinačan podatak predstavlja. Umesto toga, samo nam je rečeno: ”evo seta podataka, možete li da vidite neku struktuiranost u podacima?” Npr. sa ovim setom podataka algoritam nenadgledanog učenja može da zaključi da podaci postoje u dve različite grupe (klastera). Evo jedne grupe i evo druge grupe. Algoritam nenadgledanog učenja može da razvrsta ove podatke u ove dve različite grupe. Ovo se zove algoritam grupisanja (clustering algorithm). I ovo ima primenu na mnogim mestima. Jedan primer gde se grupisanje upotrebljava je u Gugl Vestima i ako niste ovo videli ranije, možete otići na adresu news.google.com i baciti pogled. Ono što Gugl Vesti rade svakog dana je da pregledaju desetine hiljada ili čak stotine hiljada novnskih članaka na vebu i grupišu ih u srodne noinske vesti. Na primer, pogledajmo ovo. Linkovi ovde vode do različitih novinskih članaka sa pričom o naftnoj bušotini kompanije BP. Hajde da kliknemo na jedan od ovih linkova. I kada kliknem na jedan od ovih linkova doći ću na jednu ovakvu veb stranicu. Ovo je članak Volstrit žurnala o, pogađate, curenju nafte iz BP naftne bušotine koju BP zove Makondo što je i ime naftne mrlje. I ako kliknete na drugi link iz te grupe možete dobiti neku drugu priču. Evo ovde Si-En-Enovog članka na tu temu, curenje BP nafte, i ako kliknete na još jedan, treći link, možete dobiti neku drugu priču. Evo Gardijanove priče o BP naftnoj mrlji. Dakle Gugl koristi na ovom veb sajtu, desetine hiljada novinskih priča i automatski ih grupiše zajedno, tako da se sve priče na istu temu mogu prikazati zajedno. Algoritmi grupisanja i algoritmi nenadgledanog učenja se koriste i za mnoge druge probleme. Evo jednog u vezi sa razumevanjem genoma. Ovo je primer DNK mikročip podataka. Ideja je sastaviti grupu različitih osoba i za svaku od njih, meriti koliko imaju ili nemaju određeni gen. Tehnički merite koliko su pojedini geni izraženi. Tako ove boje, crvena, zelena, siva, itd, pokazuju stepen u kom različite osobe imaju ili nemaju određeni gen. Ono što možete da učinite je da pokrenete algoritam grupisanja i grupišete osobe u različite kategorije ili različite tipove ljudi. Dakle, to je nenadgledano učenje jer ne govorimo algoritmu ”ovo su ljudi tipa 1, ovo su osobe tipa 2, ovo su osobe tipa 3” i tako dalje, i umesto toga kažemo - ”Evo gomile podataka. Ne znam šta je u tim podacima. Ne znam ko je kog tipa. Ne znam čak ni koji su to različiti tipovi ljudi, ali možeš li da mi automatski nađeš strukturu u podacima ovih ljudi i možeš li automatski da svrstaš individue u ove tipove koje ne znam unapred?” Pošto algoritmu ne dajemo ispravne odgovore za primere u mom setu podataka, ovo je nenadgledano učenje. Nenadgledano učenje, ili grupisanje, ima mnogo drugih primena. Koristi se za organizovanje velikih klastera računara. Neki moji prijatelji su se zanimali za velike centre za obradu podataka, tj. velike klastere računara, i pokušavali da razumeju koje mašine imaju tendenciju da rade zajedno - ukoliko bi se te mašine mogle staviti zajedno, mogli biste učiniti da vaš centar za obradu podataka radi efikasnije. Druga primena je u analizi socijalnih mreža. Ukoliko se zna kojim prijateljima najčešće šaljete mejlove, ili ukoliko se zna ko su vam Fejsbuk prijatelji ili ko je u vašim Gugl Plus krugovima, može li se automatski identifikovati šta su srodne grupe prijatelja, i takođe koje su grupe ljudi koji se svi međusobno poznaju? Segmentacija tržišta. Mnoge kompanije imaju ogromne baze informacija o svojim potrošačima. Možete li uvidom u ove setove podataka o potrošačima automatski otkriti segmente tržišta i automatski grupisati svoje potrošače u različite segmente tržišta tako da možete automatski i efikasnije prodavati ili raditi marketing u okviru različitih segmenata tržišta? Ovo je opet nenadgledano učenje, jer imamo sve ove podatke o potrošačima, ali ne znamo unapred koji su segmenti tržišta niti ko je od potrošača iz našeg seta podataka u kom segmentu - ne znamo unapred ko je u prvom segmentu tržišta, ko je u drugom segmentu tržišta, itd. Umesto toga, moramo da prepustimo algoritmu da otkrije sve ovo samo na osnovu podataka. Konačno, nenadgledano učenje se, na iznenađenje, takođe koristi za analizu astronomskih podataka i ovi algoritmi grupisanja proizvode iznenađujuće interesantne i korisne teorije o tome kako su galaksije nastale. Sve ovo su primeri grupisanja, što je samo jedna vrsta nenadgledanog učenja. Dozvolite da vam ispričam o još jednoj. Ispričaću vam o problemu koktel zabave. Bili ste nekad na koktel zabavama, zar ne? Zamislite žurku, sobu punu ljudi, svi sede uokolo, svi pričaju u isto vreme, i imamo sve te izmešane glasove pošto svi pričaju istovremeno, i skoro da je teško čuti čak i osobu sa kojom pričate. Dakle, recimo da na koktel zabavi sa dva čoveka, dva čoveka pričaju istovremeno. Neka to bude jedna mala koktel zabava. Stavićemo dva mikrofona u sobu Dakle, tu su mikrofoni, i pošto su ovi mikrofoni na dve različite udaljenosti od govornika, svaki mikrofon snima različitu kombinaciju glasova ova dva govornika. Možda se prvi govornik čuje malo glasnije na poziciji prvog mikrofona i možda se drugi govornik čuje malo glasnije na poziciji drugog mikrofona pošto su dva mikrofona na različitim pozicijama u odnosu na govornike, ali svaki mikrofon dobija izmešanu kombinaciju glasova oba govornika. Evo konkretnog snimka dva govornika koje je snimio istraživač. Pustiću vam prvo kako zvuči snimak sa prvog mikrofona. One (uno), two (dos), three (tres), four (cuatro), five (cinco), six (sais), seven (siete), eight (ocho), nine (nueve), ten (dies). Ok, možda nije neka naročito zanimljiva koktel zabava - tu su dva čoveka koji broje od jedan do deset na dva jezika, ali šta je tu je. To što ste upravo čuli je bio snimak sa prvog mikrofona. Evo drugog snimka. Uno (one), dos (two), tres (three), cuatro (four), cinco (five), sais (six), siete (seven), ocho (eight), nueve (nine) y dies (ten). Ono šta možemo da uradimo je da uzmemo ova dva snimka i damo ih algoritmu nenadgledanog učenja, zvanom ”algoritam koktel zabave” (cocktail party algorithm), i kažemo algoritmu - pronađi mi strukturu u ovim podacima. Ono što će algoritam učiniti je da će slušati ova dva snimka i reći - znaš, zvuči kao da su dva audio snimka kombinovani zajedno, tj. da su sabrani zajedno da bi proizveli ove snimke koje imamo. Dodatno, algoritam koktel zabave će razdvojiti ova dva izvora zvuka koji su bili kombinovani, tj. koji su bili sabrani zajedno da bi formirali druge zapise. Zapravo, evo prvog izlaza algoritma koktel zabave. One, two, three, four, five, six, seven, eight, nine, ten. Dakle, izdvojio sam engleski glas iz jednog od snimaka. A evo i drugog. Uno, dos, tres, quatro, cinco, seis, siete, ocho, nueve y dies. Nije loše. Kao još jedan primer, evo još jednog snimka druge slične situacije. Evo prvog mikrofona: One, two, three, four, five, six, seven, eight, nine, ten. Ok, jadničak je otišao kući sa koktel zabave i sad sedi sam u sobi i priča sa svojim radiom. Evo snimka drugog mikrofona: One, two, three, four, five, six, seven, eight, nine, ten. Kada propustite ova dva snimka kroz isti algoritam, ono što će on uraditi je da ponovo kaže - znaš, zvuči kao da ima dva izvora - i dodatno, algoritam kaže - evo prvog audio izvora koji sam našao. One, two, three, four, five, six, seven, eight, nine, ten. Dakle to nije bilo baš savršeno, našao je glas, ali je takođe dobio i malo muzike uz njega. Evo drugog izlaza algoritma. Nije loše, u tom drugom izlazu je uspeo da ukloni glas u potpunosti. Pročistio je muziku i uklonio brojanje od jedan do deset. Dakle, možete pogledati algoritam nenadgledanog učenja poput ovoga, i pomisliti - ”koliko je komplikovano da se ovo implementira”, zar ne? Čini se da je, da bi se napravila ova aplikacija, čini se da je, da bi se napravila ova audio obrada bilo potrebno napisati mnogo koda ili možda koristiti gomilu C++ ili Java biblioteka koje obrađuju zvuk, čini se kao vrlo komplikovan program, da se napravi ovo razdvajanje zvuka, itd. Ali ispostavlja se da se algoritam koji radi ovo što ste upravo čuli može napraviti u jednoj liniji koda! - Pokazanoj ovde. Doduše, trebalo je istraživačima dosta vremena da dođu do ove linije koda. Ne kažem da je ovo lak problem. Ispostavlja se da, kada koristite pravo programersko okruženje, mnogi algoritmi mašinskog učenja mogu biti vrlo kratki programi. Ovo je takođe razlog zašto ćemo na ovim predavanjima koristiti Oktavu (Octave) kao programersko okruženje. Oktava je besplatan, softver otvorenog koda. Korišćenjem alata kao što su Oktava ili Matlab, mnogi algoritmi mašinskog učenja se svode na samo nekoliko linija koda za implementaciju, Kasnije na ovim predavanjima, učiću vas malo o tome kako da koristite Oktavu i neke od ovih algoritama ćete implementirati u Oktavi. Ili ako imate Matlab, možete i to koristiti. Ispostavilo se da u Silicijumskoj dolini za puno algoritama mašinskog učenja, ono što radimo je da prvo napravimo prototip našeg softvera u Oktavi jer se u Oktavi neverovatno brzo mogu implementirati ovi algoritmi. Ovde je svaka od ovih funkcija, kao na primer SVD, funkcija za dekompoziciju singularnih vrednosti, u stvari rutina iz linearne algebre koja je samo ugrađena u Oktavu. Da ste pokušali da ovo uradite u C++-u ili Javi, ovo bi bilo mnogo, mnogo linija koda uz linkovane kompleksne C++ ili Java biblioteke. Dakle, sve ovo možete implementirati u C++-u ili Javi ili Pajtonu, ali je mnogo komplikovanije uraditi to u tim jezicima. Primetio sam nakon, sada već skoro decenije podučavanja mašinskog učenja, da učite mnogo brže ukoliko koristite Oktavu kao vaše programersko okruženje, i ako koristite Oktavu kao vaš alat za učenje i kao vaš alat za pravljenje prototipova, jer omogućava mnogo brže učenje i pravljenje prototipova algoritama mašinskog učenja. I zapravo, ono što će mnogi ljudi učiniti u velikim kompanijama Silicijumske doline, je da upotrebe alat poput Oktave da prvo naprave prototip učećeg algoritma, i tek nakon što tamo proradi će migrirati to u C++, ili Javu, ili štagod. Ispostavilo se da, radeći na taj način, često možete mnogo brže naterati vaš algoritam da proradi nego ako odmah krenete iz C++-a. Svestan sam da kao instruktor mogu samo konačan broj puta da zatražim da mi verujete na reč, ali za one među vama koji nikada ranije nisu koristili ovu vrstu programskog okruženja kao što je Oktava, zamoliću vas da mi verujete na reč u vezi sa ovim. Mislim da je vaše vreme, vaše vreme provedeno u programiranju, jedan od najdragocenijih resursa. I pošto sam video dosta ljudi da ovo radi, mislim da ćete Vi, kao istraživač u oblasti mašinskog učenja, ili inženjer na razvoju mašinskog učenja, biti mnogo produktivniji ako naučite da krenete od prototipa, na primer u Oktavi, nego ako počnete u nekom drugom jeziku. Najzad, da zaokružimo ovaj video, Imam jedno brzo pitanje za vas. Govorili smo o nenadgledanom učenju, što je postavka učenja u kojoj dajete algoritmu gomilu podataka i samo ga pitate da nađe za vas strukturu u tim podacima. Od sledeća 4 primera, koji... koji od ova četiri mislite da će biti problem nenadgledanog učenja, suprotno od problema nadgledanog učenja. Za svaki od četiri kvadratića na levoj strani, štiklirajte one za koje mislite da bi algoritam nenadgledanog učenja bio prikladan, i onda kliknite na dugme dole desno da proverite svoj odgovor. Kada se video pauzira, molim Vas odgovorite na pitanje sa slajda. Dakle, nadam se da ste se setili problema sa spam folderom. Ako imate označene podatke šta jeste i šta nije spam i-mejl, ovo bismo posmatrali kao problem nadgledanog učenja. Primer sa novinskim člancima, to je upravo primer Gugl Vesti koji smo videli u ovom videu, videli smo kako možete da upotrebite algoritam grupisanja da grupišete ove članke zajedno - tako da je to nenadgledano učenje. O primeru sa segmentiranjem tržišta sam pričao nešto ranije. To možete da tretirate kao problem nenadgledanog učenja, jer ću samo dati svom algoritmu podatke, i tražiti mu da automatski pronađe segmente tržišta. I poslednji primer, dijabetes - pa, taj je baš kao naš primer sa rakom dojke iz prethodnog videa. Samo što umesto dobroćudnih i zloćudnih tumora, iliti benignih i malignih tumora, imamo ili nemamo dijabetes, i zato ćemo koristiti algoritam nadgledanog učenja, tj. rešićemo ovo kao problem nadgledanog učenja, baš kao što smo radili sa podacima o tumoru dojke. I to je to što se tiče nenadgledanog učenja. U sledećem videu zaći ćemo dublje u konkretne algoritme mašinskog učenja i počećemo da pričamo o tome kako ovi algoritmi rade i kako ih možemo implementirati.