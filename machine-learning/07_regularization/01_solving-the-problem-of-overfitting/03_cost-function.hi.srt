1
00:00:00,144 --> 00:00:02,011
इस विडीओ में, मैं चाहूँगा 

2
00:00:02,011 --> 00:00:03,990
बताना आपको, मुख्य इंट्यूशंज / अंतः अनुभव 

3
00:00:03,990 --> 00:00:05,771
कि रेग्युलराइज़ेशन कैसे काम करता है.

4
00:00:05,771 --> 00:00:07,386
और, हम लिखेंगे भी 

5
00:00:07,386 --> 00:00:11,724
कॉस्ट फ़ंक्शन जो हम इस्तेमाल करेंगे, जब हम करेंगे रेग्युलराइज़ेशन.

6
00:00:11,780 --> 00:00:13,327
हाथ से बनाए उदाहरणों के साथ जो 

7
00:00:13,327 --> 00:00:14,916
हमारे पास हैं इन स्लाइड्ज़ पर, में 

8
00:00:14,950 --> 00:00:17,642
सोचता हूँ मैं बता पाउँगा कुछ अंतः अनुभव.

9
00:00:17,700 --> 00:00:19,608
लेकिन एक इस से भी बेहतर 

10
00:00:19,608 --> 00:00:21,192
ढंग कि आप स्वयं देख सकें, कि कैसे 

11
00:00:21,192 --> 00:00:22,643
रेग्युलराइज़ेशन काम करता है, वह है यदि 

12
00:00:22,643 --> 00:00:25,869
आप इम्प्लमेंट करते हैं इसे, और देखते हैं इसे अपने लिए काम करते हुए.

13
00:00:25,869 --> 00:00:26,888
और, यदि आप करते हैं 

14
00:00:26,888 --> 00:00:28,603
उचित एक्सर्सायज़ेज़ / अभ्यास इसके बाद, 

15
00:00:28,603 --> 00:00:30,053
आपको मिलता है अवसर 

16
00:00:30,053 --> 00:00:33,927
स्वयं देखने का रेग्युलराइज़ेशन काम करते हुए आपके लिए.

17
00:00:33,930 --> 00:00:36,519
तो, यहाँ है अंतर्ज्ञान.

18
00:00:36,519 --> 00:00:38,233
पिछले विडीओ में, हमने देखा 

19
00:00:38,233 --> 00:00:39,771
कि, यदि हमें फ़िट करना होता 

20
00:00:39,771 --> 00:00:41,420
एक क्वाड्रैटिक फंक्शन / मॉडल इस 

21
00:00:41,420 --> 00:00:44,283
डेटा में, यह देता है हमें एक काफ़ी अच्छा फ़िट डेटा को.

22
00:00:44,283 --> 00:00:45,286
जबकि, यदि हम करते 

23
00:00:45,310 --> 00:00:47,175
फ़िट एक अधिक बड़ी उच्च

24
00:00:47,210 --> 00:00:48,823
डिग्री का पालिनोमीयल, हमें मिलता अंत में

25
00:00:48,850 --> 00:00:50,111
एक कर्व जो शायद फ़िट करता 

26
00:00:50,111 --> 00:00:51,760
ट्रेनिंग सेट को बहुत अच्छे से, लेकिन,

27
00:00:51,760 --> 00:00:53,381
वास्तव में नहीं होता फ़िट 

28
00:00:53,420 --> 00:00:54,497
बल्कि ओवेरफ़िट होता डेटा को 

29
00:00:54,497 --> 00:00:57,225
घटिया तरीके से, और, जनरलाइज न हो पाता ढंग से.

30
00:00:57,900 --> 00:01:00,453
ग़ौर कीजिए निम्न पर, मान लो हमें 

31
00:01:00,453 --> 00:01:02,088
दण्डित करना है, और, बनाने हैं 

32
00:01:02,088 --> 00:01:04,753
पेरामिटर्स थीटा 3 और थीटा 4 बहुत ही छोटे.

33
00:01:04,753 --> 00:01:06,543
यहाँ है क्या मेरा 

34
00:01:06,543 --> 00:01:09,676
मतलब है, यह है हमारा ऑप्टिमायज़ेशन 

35
00:01:09,690 --> 00:01:10,859
अब्जेक्टिव, या यह है हमारा 

36
00:01:10,870 --> 00:01:12,574
ऑप्टिमायज़ेशन प्रॉब्लम, जहाँ हम न्यूनतम करते हैं 

37
00:01:12,580 --> 00:01:15,526
हमारे हमेशा के स्क्वेर्ड एरर कॉस्ट फ़ंक्शन को.

38
00:01:15,526 --> 00:01:17,350
मान लो मैं लेता हूँ यह अब्जेक्टिव 

39
00:01:17,370 --> 00:01:19,125
और बदल देता हूँ इसे और जोड़ देता हूँ 

40
00:01:19,160 --> 00:01:23,291
इसमें, प्लस 1000 थीटा 

41
00:01:23,291 --> 00:01:28,334
3 स्क्वेर्ड, प्लस 1000 थीटा 4 स्क्वेर्ड.

42
00:01:28,334 --> 00:01:32,354
1000 मैं सिर्फ़ लिख रहा हूँ केवल एक बड़ी संख्या के तौर पर.

43
00:01:32,354 --> 00:01:33,538
अब, यदि हमें करना होता 

44
00:01:33,540 --> 00:01:35,127
न्यूनतम इस फ़ंक्शन को, 

45
00:01:35,140 --> 00:01:36,688
एकमात्र ढंग बनाने के लिए इस 

46
00:01:36,710 --> 00:01:38,620
नए कॉस्ट फ़ंक्शन को छोटा है 

47
00:01:38,620 --> 00:01:40,769
यदि थीटा 3 और थीटा 

48
00:01:40,769 --> 00:01:42,133
4 छोटे होंगे, सही?

49
00:01:42,133 --> 00:01:43,264
क्योंकि अन्यथा, यदि आपके पास है 

50
00:01:43,264 --> 00:01:44,956
एक हज़ार गुना थीटा 3, यह 

51
00:01:44,970 --> 00:01:48,103
नया कॉस्ट फ़ंक्शन होगा काफ़ी बड़ा.

52
00:01:48,140 --> 00:01:49,245
तो जब हम न्यूनतम करते हैं इस

53
00:01:49,245 --> 00:01:50,402
नए कॉस्ट फ़ंक्शन को हमें 

54
00:01:50,402 --> 00:01:52,107
मिलेगा थीटा 3 

55
00:01:52,110 --> 00:01:53,776
0 के आसपास और थीटा 

56
00:01:53,776 --> 00:01:56,700
4 भी 0 के आसपास और जैसे 

57
00:01:56,700 --> 00:01:59,691
हम हटा रहे हों 

58
00:01:59,691 --> 00:02:03,206
ये दो टर्म्ज़ वहाँ पर.

59
00:02:03,710 --> 00:02:05,282
और यदि हम वह करते हैं, अच्छा तब,

60
00:02:05,290 --> 00:02:06,783
यदि थीटा 3 और थीटा 4 हैं 

61
00:02:06,783 --> 00:02:07,973
0 के आसपास तब हमारे पास 

62
00:02:07,973 --> 00:02:09,643
बचता है एक क्वाड्रैटिक फ़ंक्शन, 

63
00:02:09,643 --> 00:02:11,089
और, इसलिए, हमें मिलता हैं 

64
00:02:11,110 --> 00:02:13,343
एक फ़िट डेटा को, और वह है, आप जानते हैं, क्वाड्रैटिक 

65
00:02:13,343 --> 00:02:15,463
फ़ंक्शन प्लस शायद, बहुत छोटा सा 

66
00:02:15,463 --> 00:02:17,856
योगदान छोटी टर्म्ज़ से,

67
00:02:17,860 --> 00:02:20,207
थीटा 3, थीटा 4, क्योंकि वे है बहुत नज़दीक 0 के.

68
00:02:20,207 --> 00:02:27,293
और, इसलिए, हमें मिलता हैं 

69
00:02:27,293 --> 00:02:29,386
दरअसल, एक क्वाड्रैटिक फ़ंक्शन, जो अच्छा है.

70
00:02:29,386 --> 00:02:30,544
क्योंकि यह है एक 

71
00:02:30,544 --> 00:02:34,060
अधिक बेहतर हायपॉथिसस.

72
00:02:34,104 --> 00:02:36,666
इस ख़ास उदाहरण में, हमने देखा प्रभाव 

73
00:02:36,700 --> 00:02:39,023
दण्डित करने का दो 

74
00:02:39,023 --> 00:02:41,446
पेरमिटर्स वैल्यूज़ को बड़ा होने का.

75
00:02:41,446 --> 00:02:46,510
साधारणतया, यहाँ है आईडिया / सुझाव रेग्यूलराईज़ेशन का.

76
00:02:46,980 --> 00:02:48,924
आईडिया / सुझाव है कि, यदि हमारे पास 

77
00:02:48,924 --> 00:02:50,303
हैं छोटी वैल्यूज़ 

78
00:02:50,303 --> 00:02:53,083
पेरमिटर्स के लिए, तब, होना 

79
00:02:53,083 --> 00:02:55,250
छोटी वैल्यूज़ का पेरमिटर्स के लिए, 

80
00:02:55,250 --> 00:02:57,866
किसी तरह होगा, बहुधा कॉरेस्पॉंड करेगा 

81
00:02:57,866 --> 00:03:00,386
एक सरल हायपॉथिसस से.

82
00:03:00,386 --> 00:03:02,279
तो, हमारे पिछले उदाहरण के लिए, हमने 

83
00:03:02,279 --> 00:03:04,024
दण्डित किया केवल थीटा 3 और 

84
00:03:04,024 --> 00:03:05,666
थीटा 4 को और जब दोनो 

85
00:03:05,666 --> 00:03:07,046
ये हो गए नज़दीक ज़ीरो के, 

86
00:03:07,046 --> 00:03:08,450
हमें मिली एक काफ़ी सरल 

87
00:03:08,480 --> 00:03:12,549
हायपॉथिसस, जो दरअसल थी एक क्वाड्रैटिक फ़ंक्शन.

88
00:03:12,549 --> 00:03:13,991
लेकिन साधारणतया,  यदि हम दण्डित करे, सारे 

89
00:03:13,991 --> 00:03:15,989
पेरमिटर्स को, अक्सर वह, हम 

90
00:03:15,989 --> 00:03:17,416
सोच सकते हैं उसे, प्रयास की तरह 

91
00:03:17,420 --> 00:03:19,076
पाने के एक सरल हायपॉथिसस.

92
00:03:19,110 --> 00:03:20,943
भी क्योंकि जब, आप 

93
00:03:20,943 --> 00:03:22,380
जानते हैं, ये पेरमिटर्स हैं 

94
00:03:22,410 --> 00:03:23,700
काफ़ी नज़दीक ज़ीरो के इस 

95
00:03:23,700 --> 00:03:26,105
उदाहरण में, जिससे हमें मिला एक क्वाड्रैटिक फ़ंक्शन.

96
00:03:26,105 --> 00:03:29,038
लेकिन साधारणतया, यह है 

97
00:03:29,038 --> 00:03:30,493
संभव दिखाना कि होने से 

98
00:03:30,530 --> 00:03:32,536
छोटी वैल्यूज़ पेरमिटर्स की 

99
00:03:32,540 --> 00:03:34,416
कोर्रेसपोड करता हैं अक्सर स्मूद /  सम 

100
00:03:34,416 --> 00:03:36,780
फ़ंक्शन से और सरल फ़ंक्शन से भी.

101
00:03:36,780 --> 00:03:41,667
और जो हैं इसलिए, भी, कम सम्भावित ओवेरफ़िट्टिंग के लिए.

102
00:03:41,680 --> 00:03:43,245
मैंने अनुभव किया कि विचार कि 

103
00:03:43,245 --> 00:03:45,441
क्यों होने चाहिए सारे परमिटर्स छोटे.

104
00:03:45,441 --> 00:03:46,944
क्यों वह कॉरेस्पॉंड करता हैं एक सरल 

105
00:03:46,960 --> 00:03:48,916
हायपॉथिसस को; मैंने यह अनुभव किया कि 

106
00:03:48,916 --> 00:03:51,572
विचार शायद आपको अभी पूरी तरह स्पष्ट न हो अभी.

107
00:03:51,590 --> 00:03:52,784
और यह है एक प्रकार से कठिन 

108
00:03:52,784 --> 00:03:54,477
समझा पाना जब तक कि आप इम्प्लमेंट नहीं 

109
00:03:54,480 --> 00:03:56,446
करते अपने आप और देखते इसे अपने लिए.

110
00:03:56,470 --> 00:03:58,247
लेकिन मैं आशा करता हूँ कि उदाहरण 

111
00:03:58,247 --> 00:03:59,610
लेने से थीटा 3 और थीटा 

112
00:03:59,650 --> 00:04:01,230
4 को काफ़ी छोटे और कैसे 

113
00:04:01,230 --> 00:04:02,535
उससे हमें मिली एक अधिक सरल 

114
00:04:02,540 --> 00:04:04,776
हायपॉथिसस, मैं आशा करता हूँ कि 

115
00:04:04,800 --> 00:04:06,314
उससे मदद मिली होगी समझने में कि क्यों, कम से कम दिया होगा 

116
00:04:06,330 --> 00:04:09,320
कुछ अनुभव कि क्यों वह शायद सही होगा.

117
00:04:09,320 --> 00:04:11,476
चलिए देखते है एक विशेष उदाहरण.

118
00:04:12,010 --> 00:04:13,873
घर की क़ीमत की प्रिडिक्शन के लिए हमारे पास 

119
00:04:13,873 --> 00:04:15,465
शायद हैं हमारे सौ फ़ीचर्ज़ 

120
00:04:15,480 --> 00:04:17,223
जिनकी हमने बात की थी जहाँ शायद 

121
00:04:17,250 --> 00:04:18,756
एक्स 1 है साइज़, एक्स 2 

122
00:04:18,756 --> 00:04:20,096
है संख्या शयन कक्षों की, एक्स 3

123
00:04:20,096 --> 00:04:21,963
संख्या मंज़िलों की इत्यादि.

124
00:04:21,963 --> 00:04:24,502
और हमारे पास शायद हैं सौ फ़ीचर्ज़. 

125
00:04:24,502 --> 00:04:26,896
और विपरीत हमारे पालिनोमीयल 

126
00:04:26,920 --> 00:04:28,459
उदाहरण के, हम नहीं जानते, सही,

127
00:04:28,460 --> 00:04:29,826
हम नहीं जानते कि थीटा 3,

128
00:04:29,826 --> 00:04:32,641
थीटा 4, हैं हाइअर ऑर्डर पालिनोमीयल टर्म्ज़.

129
00:04:32,641 --> 00:04:34,515
तो, यदि हमारे पास है सिर्फ़ एक 

130
00:04:34,540 --> 00:04:35,863
बैग, यदि हमारे पास है सिर्फ़ एक 

131
00:04:35,863 --> 00:04:38,074
सेट एक सौ फ़ीचर्ज़ का, यह कठिन होगा 

132
00:04:38,100 --> 00:04:40,210
 चुनना पहले से कि कौन से 

133
00:04:40,260 --> 00:04:42,729
हैं जो कम सम्भावित हैं उपयुक्त होने के.

134
00:04:42,729 --> 00:04:45,773
तो हमारे पास शायद सौ फ़ीचर्ज़ या एक सौ एक पेरमिटर्स.

135
00:04:45,780 --> 00:04:47,340
और हम नहीं जानते कौन 

136
00:04:47,340 --> 00:04:48,987
सा लेना है, हम 

137
00:04:49,010 --> 00:04:50,445
नहीं जानते कौन सा 

138
00:04:50,450 --> 00:04:54,272
पेरामिटर लेने का प्रयास करना है, छोटा करने की कोशिश में.

139
00:04:54,430 --> 00:04:56,237
अत:, रेगुलराइज़ेशन में, हम क्या 

140
00:04:56,237 --> 00:04:58,438
करते हैं, कि लेते हैं हमारा 

141
00:04:58,438 --> 00:05:01,213
कॉस्ट फ़ंक्शन, यहाँ है मेरा कॉस्ट फ़ंक्शन लिनीअर रेग्रेशन के लिए.

142
00:05:01,213 --> 00:05:02,656
और मैं क्या करूँगा कि

143
00:05:02,660 --> 00:05:04,326
बदलूँगा इस कॉस्ट 

144
00:05:04,340 --> 00:05:06,246
फ़ंक्शन को छोटे करने के लिए सारे 

145
00:05:06,270 --> 00:05:07,643
मेरे पेरमिटर्स, क्योंकि, आप जानते हैं,

146
00:05:07,643 --> 00:05:09,059
मैं नहीं जानता कौन से 

147
00:05:09,059 --> 00:05:10,440
एक या दो छोटे करने हैं.

148
00:05:10,440 --> 00:05:11,690
तो मैं बदलूँगा मेरा 

149
00:05:11,690 --> 00:05:16,732
कॉस्ट फ़ंक्शन जोड़ने के लिए एक टर्म अंत में.

150
00:05:17,390 --> 00:05:20,436
इस प्रकार हमारे पास हैं स्क्वेर ब्रैकेट्स यहाँ भी.

151
00:05:20,440 --> 00:05:22,212
जब मैं जोड़ता हूँ एक अतिरिक्त 

152
00:05:22,212 --> 00:05:23,516
रेग्युलराईज़ेशन टर्म 

153
00:05:23,530 --> 00:05:25,510
अंत में छोटे करने के लिए प्रत्येक 

154
00:05:25,560 --> 00:05:27,286
पेरामिटर को और इसलिए यह 

155
00:05:27,320 --> 00:05:28,745
टर्म हम प्रयास करते हैं छोटा करने का 

156
00:05:28,760 --> 00:05:30,747
सारे मेरे पेरमिटर्स को थीटा 1,

157
00:05:30,747 --> 00:05:32,746
थीटा 2, थीटा 3 से

158
00:05:32,746 --> 00:05:35,490
थीटा 100 तक.

159
00:05:36,790 --> 00:05:39,629
वैसे तो, कन्वेन्शन के हिसाब से समेशन 

160
00:05:39,629 --> 00:05:41,007
यहाँ शुरू होता है एक से अत: मैं 

161
00:05:41,007 --> 00:05:43,341
नहीं करूँगा दण्डित थीटा 

162
00:05:43,360 --> 00:05:45,416
ज़ीरो को बड़ा होने के लिए.

163
00:05:45,470 --> 00:05:46,435
वह कन्वेन्शन कि, 

164
00:05:46,435 --> 00:05:48,664
सम आइ ईक्वल्ज़ वन से 

165
00:05:48,664 --> 00:05:50,185
एन तक, बजाय आइ ईक्वल्ज़ ज़ीरो 

166
00:05:50,190 --> 00:05:51,953
से एन तक. लेकिन व्यावहारिक रूप में, 

167
00:05:51,960 --> 00:05:53,464
इससे कोई ज़्यादा अंतर नहीं पड़ता, और, 

168
00:05:53,490 --> 00:05:54,788
चाहे आप शामिल करें, आप जानते हैं, 

169
00:05:54,788 --> 00:05:56,221
थीटा ज़ीरो को या नहीं, 

170
00:05:56,221 --> 00:05:59,532
व्यवहार में, इससे कोई ज़्यादा अंतर नहीं पड़ता परिणाम में. 

171
00:05:59,540 --> 00:06:01,804
लेकिन कन्वेन्शन से, प्रायः, हम रेग्युलराइज़ करते हैं 

172
00:06:01,804 --> 00:06:03,356
केवल थीटा एक से थीटा 

173
00:06:03,360 --> 00:06:06,084
100 तक. लिखते हैं 

174
00:06:06,084 --> 00:06:08,978
हमारा रेगुलराइज्ड ऑप्टिमायज़ेशन ओबजेक्टिव,

175
00:06:08,978 --> 00:06:10,655
हमारा रेगुलराइज्ड कॉस्ट फ़ंक्शन फिर से.

176
00:06:10,655 --> 00:06:11,718
यहाँ है यह. यहाँ है जे ऑफ़ 

177
00:06:11,718 --> 00:06:13,903
थीटा जहाँ, यह टर्म 

178
00:06:13,970 --> 00:06:15,863
दाईं तरफ़ है एक रेग्युलरेज़ेशन

179
00:06:15,863 --> 00:06:17,548
टर्म और लैम्डा 

180
00:06:17,570 --> 00:06:23,950
यहाँ है रेग्युलरेज़ेशन पेरामीटर और 

181
00:06:23,973 --> 00:06:26,334
लैम्डा क्या करता है, यह 

182
00:06:26,334 --> 00:06:28,480
नियंत्रित करता है एक समझौता 

183
00:06:28,510 --> 00:06:30,636
दो भिन्न लक्ष्यों में.

184
00:06:30,636 --> 00:06:32,478
पहला लक्ष्य है, कैप्चर करें इसे 

185
00:06:32,500 --> 00:06:34,399
पहले अब्जेक्टिव से, है 

186
00:06:34,399 --> 00:06:36,081
कि हम ट्रेन करना चाहते हैं, 

187
00:06:36,090 --> 00:06:38,350
कि हम फ़िट करना चाहते हैं ट्रेनिंग डेटा सही ढंग से.

188
00:06:38,390 --> 00:06:41,083
हम फ़िट करना चाहते हैं ट्रेनिंग सेट डेटा सही ढंग से.

189
00:06:41,083 --> 00:06:42,954
और दूसरा लक्ष्य है कि.

190
00:06:42,954 --> 00:06:44,474
हम रखना चाहते हैं पेरमिटर्स को 

191
00:06:44,474 --> 00:06:46,053
छोटा, और वह कैप्चर होता है 

192
00:06:46,060 --> 00:06:49,103
दूसरी टर्म से, रेग्यूलराईज़ेशन अब्जेक्टिव से. और रेग्यूलराईज़ेशन टर्म से.

193
00:06:49,103 --> 00:06:53,583
और लैम्डा क्या करता है, जो रेग्यूलराईज़ेशन

194
00:06:53,583 --> 00:06:55,937
पेरामिटर है, कि नियंत्रित करता है समझौता 

195
00:06:55,937 --> 00:06:57,694
बीच में इन दो 

196
00:06:57,694 --> 00:06:58,938
लक्ष्यों के, बीच में फ़िट करने के ट्रेनिंग सेट सही ढंग से के लक्ष्य 

197
00:06:58,960 --> 00:07:00,562
और 

198
00:07:00,562 --> 00:07:02,043
उद्देश्य में रखने के लिए पेरमिटर्स को 

199
00:07:02,080 --> 00:07:05,688
छोटा और इसलिए रखने के लिए हायपाथिसस को अपेक्षाकृत 

200
00:07:05,688 --> 00:07:09,134
सरल ओवेरफ़िट्टिंग टालने के लिए.

201
00:07:09,290 --> 00:07:11,026
घर की क़ीमत की प्रिडिक्शन के

202
00:07:11,030 --> 00:07:13,026
उदाहरण में, यद्यपि, पहले, यदि 

203
00:07:13,030 --> 00:07:14,256
हमारे पास होता फ़िट एक बहुत अधिक 

204
00:07:14,256 --> 00:07:15,968
ऑर्डर का पालिनोमीयल, हमें शायद 

205
00:07:15,968 --> 00:07:17,461
मिलता एक बहुत 

206
00:07:17,480 --> 00:07:19,020
ही घुमावदार फ़ंक्शन इस 

207
00:07:19,020 --> 00:07:22,460
तरह का. यदि आप अभी भी फ़िट करते हैं  हाइअर ऑर्डर पालिनोमीयल

208
00:07:22,460 --> 00:07:24,120
सारे पालिनोमीयल 

209
00:07:24,120 --> 00:07:26,038
फ़ीचर्ज़ के साथ वहाँ, लेकिन इसके स्थान पर, 

210
00:07:26,038 --> 00:07:27,956
आप सिर्फ़ सुनिश्चित करते हैं, कि इस्तेमाल करना है 

211
00:07:27,970 --> 00:07:30,798
यह एकमात्र रेगुलराइज्ड अब्जेक्टिव, तब क्या 

212
00:07:30,798 --> 00:07:32,272
आपको मिलता है 

213
00:07:32,272 --> 00:07:34,332
एक कर्व जो नहीं है 

214
00:07:34,340 --> 00:07:36,465
एक क्वाड्रैटिक फ़ंक्शन बल्कि है 

215
00:07:36,490 --> 00:07:38,510
काफ़ी सम और काफ़ी सरल 

216
00:07:38,510 --> 00:07:39,870
और शायद एक कर्व जैसे मजेंटा 

217
00:07:39,870 --> 00:07:42,261
लाइन वह, आप जानते हैं, देता है एक 

218
00:07:42,261 --> 00:07:45,445
अधिक बेहतर हायपॉथिसस इस डेटा के लिए.

219
00:07:45,445 --> 00:07:46,613
एक बार फिर, मैं अनुभव करता हूँ 

220
00:07:46,613 --> 00:07:47,919
यह हो सकता है थोड़ा कठिन देख पाना कि क्यों छोटे करने से 

221
00:07:47,919 --> 00:07:50,064
पेरमिटर्स को हो सकता है 

222
00:07:50,064 --> 00:07:51,668
यह प्रभाव, लेकिन यदि आप 

223
00:07:51,690 --> 00:07:54,584
इम्प्लमेंट करें अपने आप रेगुलराइज़ेशन के साथ 

224
00:07:54,650 --> 00:07:56,063
आप देख पाएँगे 

225
00:07:56,090 --> 00:07:58,859
यह प्रभाव स्वयं.

226
00:08:00,620 --> 00:08:02,777
रेगुलराइज्ड लिनीअर रेग्रेशन में, यदि 

227
00:08:02,777 --> 00:08:05,748
रेग्युलरेज़ेशन पेरामीटर लैम्डा को 

228
00:08:05,748 --> 00:08:07,669
सेट करते हैं बहुत बड़ा,

229
00:08:07,669 --> 00:08:09,542
तब क्या होगा कि 

230
00:08:09,542 --> 00:08:11,698
हम दण्डित कर देंगे 

231
00:08:11,698 --> 00:08:13,513
पेरमिटर्स थीटा 1, थीटा 

232
00:08:13,520 --> 00:08:15,207
 2, थीटा 3, थीटा  

233
00:08:15,230 --> 00:08:17,409
4 को बहुत अधिक.

234
00:08:17,430 --> 00:08:21,916
मतलब कि, यदि हमारी हायपाथिसस है यह जो यहाँ नीचे है.

235
00:08:21,930 --> 00:08:23,674
यदि हम दण्डित कर देते हैं  

236
00:08:23,674 --> 00:08:24,913
थीटा 1, थीटा 2, थीटा  

237
00:08:24,990 --> 00:08:26,145
3, थीटा 4 को बहुत अधिक, तब हमें 

238
00:08:26,145 --> 00:08:29,463
मिलते हैं ये सब पेरमिटर्स ज़ीरो के आसपास, सही?

239
00:08:29,463 --> 00:08:32,240
थीटा 1 होगा लगभग ज़ीरो; थीटा 2 होगा लगभग ज़ीरो.

240
00:08:32,240 --> 00:08:34,410
थीटा तीन और थीटा चार 

241
00:08:34,410 --> 00:08:36,646
होंगे लगभग ज़ीरो.

242
00:08:36,646 --> 00:08:37,810
और यदि हम वह करते हैं, यह है जैसे 

243
00:08:37,810 --> 00:08:39,143
कि हम हटा रहे है ये 

244
00:08:39,160 --> 00:08:41,189
टर्म्ज़ हायपॉथिसस से ताकि 

245
00:08:41,189 --> 00:08:43,597
हमारे पास रह जाए एक हायपॉथिसस 

246
00:08:43,597 --> 00:08:44,224
जो कहती है कि 

247
00:08:44,230 --> 00:08:46,020
यह कहती है कि, अच्छा, घर की 

248
00:08:46,020 --> 00:08:48,624
क़ीमत है बराबर थीटा ज़ीरो के, 

249
00:08:48,650 --> 00:08:50,830
और वह समान है फ़िट करने के 

250
00:08:50,830 --> 00:08:54,679
एक सीधी हॉरिज़ॉंटल लाइन डेटा में.

251
00:08:54,679 --> 00:08:56,533
और यह है एक 

252
00:08:56,570 --> 00:08:58,773
उदाहरण अंडरफ़िटिंग का, और 

253
00:08:58,773 --> 00:09:00,926
ख़ासतौर पर यह हायपॉथिसस, यह 

254
00:09:00,950 --> 00:09:02,552
सीधी लाइन यह सिर्फ़ फ़ेल हो जाती है 

255
00:09:02,570 --> 00:09:04,063
फ़िट करने में ट्रेनिंग सेट को 

256
00:09:04,070 --> 00:09:05,423
बेहतर ढंग से. यह है सिर्फ़ एक सम सीधी 

257
00:09:05,423 --> 00:09:07,173
लाइन, यह नहीं जाती हैं, आप जानते हैं, नज़दीक.

258
00:09:07,173 --> 00:09:10,432
यह नहीं जाती कहीं भी नज़दीक अधिकांश ट्रेनिंग इग्ज़ाम्पल्ज़ के.

259
00:09:10,432 --> 00:09:11,592
और दूसरा ढंग इसे कहने का है 

260
00:09:11,592 --> 00:09:13,697
कि इस हायपॉथिसस में है 

261
00:09:13,720 --> 00:09:15,410
बहुत अधिक एक पूर्व कल्पना या 

262
00:09:15,450 --> 00:09:17,091
बहुत अधिक बायस कि घर 

263
00:09:17,120 --> 00:09:18,446
की क़ीमतें है केवल बराबर 

264
00:09:18,460 --> 00:09:20,183
थीटा ज़ीरो के, और बावजूद होने के 

265
00:09:20,230 --> 00:09:22,123
स्पष्ट डेटा इसके विपरीत, 

266
00:09:22,123 --> 00:09:23,207
आप जानते हैं चुनती है फ़िट करना एक प्रकार 

267
00:09:23,207 --> 00:09:25,648
से, सीधी लाइन, केवल एक 

268
00:09:25,650 --> 00:09:28,230
सम सीधी लाइन. मैंने वह बहुत अच्छे से नहीं बनाई है.

269
00:09:28,230 --> 00:09:30,447
यह सिर्फ़ एक सम सीधी / फ़्लैट लाइन  

270
00:09:30,447 --> 00:09:33,059
डेटा के लिए. अत:

271
00:09:33,060 --> 00:09:35,626
रेग्युलराइज़ेशन को सही ढंग से काम करने के लिए, कुछ 

272
00:09:35,626 --> 00:09:37,835
सावधानी बरतनी चाहिए, 

273
00:09:37,850 --> 00:09:39,903
चुनने के लिए एक अच्छा विकल्प 

274
00:09:39,903 --> 00:09:42,991
रेग्युलरेज़ेशन पेरामीटर लैम्डा के लिए भी॰

275
00:09:42,991 --> 00:09:44,908
और जब हम बात करेंगे मल्टी-सिलेक्शन की 

276
00:09:44,920 --> 00:09:46,717
बाद में इस कोर्स में, हम बात करेंगे 

277
00:09:46,717 --> 00:09:48,413
एक तरीक़े की, एक विविध प्रकार के 

278
00:09:48,420 --> 00:09:50,803
तरीक़ों की, अपने आप चुनने के लिए 

279
00:09:50,810 --> 00:09:54,833
रेग्युलरेज़ेशन पेरामीटर लैम्डा को भी. तो, वह है 

280
00:09:54,833 --> 00:09:56,570
आइडिया रेगुलराइज़ेशन का 

281
00:09:56,570 --> 00:09:58,254
और कॉस्ट फ़ंक्शन के रिव्यू का करने 

282
00:09:58,254 --> 00:10:00,454
के लिए इस्तेमाल रेग्युलराइज़ेशन इसमें. 

283
00:10:00,454 --> 00:10:01,885
अगले दो विडीओज़ में, चलो लेते हैं 

284
00:10:01,885 --> 00:10:03,736
ये सुझाव और अप्लाई करते हैं उन्हें 

285
00:10:03,750 --> 00:10:05,440
लिनीअर रेग्रेशन में और 

286
00:10:05,440 --> 00:10:07,111
लजिस्टिक रेग्रेशन में, ताकि 

287
00:10:07,111 --> 00:10:09,020
हम करवा सके उनसे 

288
00:10:09,060 --> 00:10:10,982
बचाव / अवॉयड ओवरफ़िटिंग.