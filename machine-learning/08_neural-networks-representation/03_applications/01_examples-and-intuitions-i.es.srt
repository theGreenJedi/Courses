1
00:00:00,130 --> 00:00:00,980
En este y en el siguiente video

2
00:00:01,240 --> 00:00:02,030
quiero trabajar

3
00:00:02,140 --> 00:00:03,650
con un ejemplo detallado que muestra

4
00:00:04,530 --> 00:00:05,920
cómo una red neuronal puede calcular

5
00:00:06,220 --> 00:00:07,740
una función no lineal compleja de

6
00:00:07,970 --> 00:00:09,780
la entrada y, con suerte, esto te

7
00:00:09,950 --> 00:00:10,950
dará una buena idea de por qué

8
00:00:11,510 --> 00:00:12,470
las redes neuronales pueden usarse

9
00:00:13,050 --> 00:00:14,810
para aprender hipótesis no lineales complejas.

10
00:00:16,790 --> 00:00:18,210
Considere el siguiente problema en el que

11
00:00:18,900 --> 00:00:20,560
tenemos variables de entrada x1

12
00:00:20,770 --> 00:00:21,680
y x2 que son valores

13
00:00:22,310 --> 00:00:23,760
binarios, así que son cero o uno.

14
00:00:23,990 --> 00:00:25,320
Entonces x1 y x2 pueden

15
00:00:25,510 --> 00:00:27,160
tomar sólo uno de dos valores posibles.

16
00:00:28,660 --> 00:00:29,670
En este ejemplo dibujé

17
00:00:29,990 --> 00:00:31,420
sólo dos ejemplos positivos y

18
00:00:31,530 --> 00:00:33,240
dos ejemplos negativos, pero

19
00:00:33,320 --> 00:00:34,370
puedes considerar esto como

20
00:00:34,540 --> 00:00:36,210
una versión simplificada de un

21
00:00:36,290 --> 00:00:37,710
problema de aprendizaje más complejo en el que

22
00:00:37,920 --> 00:00:38,910
pueden haber varios

23
00:00:39,030 --> 00:00:40,320
ejemplos positivos en la parte superior

24
00:00:40,480 --> 00:00:41,350
derecha y en la parte inferior izquierda y

25
00:00:41,470 --> 00:00:43,090
varios ejemplos negativos para notificar

26
00:00:43,580 --> 00:00:46,110
los círculos, lo que

27
00:00:46,140 --> 00:00:46,900
nos gustaría hacer es aprender un límite de decisión

28
00:00:48,330 --> 00:00:50,090
no lineal en el que debemos

29
00:00:50,210 --> 00:00:52,210
separar los ejemplos positivos y negativos.

30
00:00:53,750 --> 00:00:54,590
Entonces, ¿cómo puede una red

31
00:00:55,070 --> 00:00:56,160
neuronal hacer esto? Y, en lugar de

32
00:00:56,710 --> 00:00:57,550
usar uno de los ejemplos de la

33
00:00:57,600 --> 00:00:59,260
derecha, voy a usar éste que es quizás más sencillo

34
00:00:59,680 --> 00:01:01,670
para examinar el ejemplo de la izquierda.

35
00:01:02,620 --> 00:01:03,940
Específicamente, lo que ésto está

36
00:01:04,110 --> 00:01:05,570
calculando realmente es la etiqueta

37
00:01:05,990 --> 00:01:09,810
destino "y" es igual a x1 XOR x2.

38
00:01:10,070 --> 00:01:11,650
O esto es realmente la

39
00:01:11,910 --> 00:01:13,880
función x1 XNOR x2

40
00:01:14,700 --> 00:01:15,750
en donde XNOR es la notación

41
00:01:16,400 --> 00:01:18,420
alternativa para "NOT x1 XOR  x2".

42
00:01:19,350 --> 00:01:20,730
Entonces x1, XOR o

43
00:01:20,760 --> 00:01:22,730
x2 - sólo es verdadero

44
00:01:23,210 --> 00:01:24,820
si exactamente uno de

45
00:01:25,190 --> 00:01:27,900
x1 o x2 es igual a 1.

46
00:01:27,960 --> 00:01:29,160
Sucede que el ejemplo

47
00:01:29,450 --> 00:01:30,680
específico que voy a utilizar funciona

48
00:01:30,810 --> 00:01:32,840
un poco mejor si

49
00:01:33,020 --> 00:01:35,000
usamos el ejemplo de XNOR.

50
00:01:35,460 --> 00:01:36,290
Ambos son lo mismo, desde luego.

51
00:01:36,720 --> 00:01:38,540
Esto significa NOT x1 XOR

52
00:01:38,780 --> 00:01:40,140
x2, así que vamos a

53
00:01:40,320 --> 00:01:42,360
tener ejemplos positivos

54
00:01:42,950 --> 00:01:44,150
si ambos son verdaderos o si

55
00:01:44,530 --> 00:01:46,470
ambos son falsos, y vamos a

56
00:01:46,620 --> 00:01:49,600
tener que "y"es igual a 1, "y" es igual a 1 y

57
00:01:49,990 --> 00:01:51,480
vamos a tener que "y" es igual a 0 si

58
00:01:51,860 --> 00:01:52,650
sólo uno de ellos es

59
00:01:52,760 --> 00:01:53,830
verdadero y queremos

60
00:01:54,000 --> 00:01:54,710
saber si podemos

61
00:01:54,860 --> 00:01:57,210
hacer que una red neuronal ajuste este tipo de conjuntos de aprendizaje.

62
00:01:59,160 --> 00:02:00,200
Con el fin de construir

63
00:02:00,450 --> 00:02:01,610
una red que ajuste el

64
00:02:02,080 --> 00:02:04,900
ejemplo XNOR, vamos

65
00:02:05,350 --> 00:02:06,590
a comenzar con uno ligeramente más simple

66
00:02:07,050 --> 00:02:09,710
y mostrar una red que se ajuste a la función AND.

67
00:02:10,760 --> 00:02:12,150
Concretamente, digamos que

68
00:02:12,310 --> 00:02:14,070
tenemos las entradas x1 y

69
00:02:14,240 --> 00:02:17,190
x2 que, de nuevo, son binarias. Entonces, son cero o uno.

70
00:02:17,820 --> 00:02:18,680
Y digamos que nuestras etiquetas

71
00:02:18,760 --> 00:02:20,980
destino "y" son

72
00:02:21,910 --> 00:02:23,470
iguales a x1 y x2.

73
00:02:23,860 --> 00:02:24,870
Éste es un AND lógico.

74
00:02:30,740 --> 00:02:31,820
Entonces, ¿podemos hacer que una

75
00:02:32,060 --> 00:02:34,330
red de una unidad calcule

76
00:02:35,060 --> 00:02:36,120
esta función lógica AND?

77
00:02:37,400 --> 00:02:38,530
Para hacer esto, voy, de hecho,

78
00:02:38,690 --> 00:02:40,000
a dibujar

79
00:02:40,580 --> 00:02:42,780
las unidades de oscilación también, la unidad más uno.

80
00:02:45,030 --> 00:02:46,500
Ahora, vamos a asignar algunos

81
00:02:46,770 --> 00:02:48,050
valores a los pesos o

82
00:02:48,160 --> 00:02:50,130
los parámetros de esta red.

83
00:02:50,450 --> 00:02:52,220
Voy a escribir los parámetros en este diagrama.

84
00:02:52,820 --> 00:02:54,090
Menos 30 aquí

85
00:02:56,360 --> 00:02:57,740
más 20 y más

86
00:02:58,710 --> 00:02:59,600
20, y esto significa

87
00:02:59,970 --> 00:03:01,320
que estoy asignando un valor

88
00:03:01,860 --> 00:03:03,790
de menos de treinta al

89
00:03:04,120 --> 00:03:05,770
valor asociado a x0.

90
00:03:06,120 --> 00:03:07,230
Esto es más 1 yendo

91
00:03:07,530 --> 00:03:08,840
a esta unidad y un

92
00:03:09,420 --> 00:03:10,890
valor del parámetro de más 20

93
00:03:11,250 --> 00:03:12,960
que se multiplica en x1 en

94
00:03:13,070 --> 00:03:14,300
un valor de más 20 para

95
00:03:14,680 --> 00:03:15,980
el parámetro que se multiplica en x2.

96
00:03:17,190 --> 00:03:18,860
Así, concretamente, esto está diciendo

97
00:03:19,060 --> 00:03:20,340
que mis hipótesis “h” de

98
00:03:20,420 --> 00:03:21,780
x es igual a

99
00:03:22,410 --> 00:03:24,500
g de  -30 + 20x1 + 20x2.

100
00:03:25,490 --> 00:03:31,390
Así que, a veces, es conveniente

101
00:03:31,640 --> 00:03:33,240
dibujar estos

102
00:03:33,810 --> 00:03:34,880
pesos y dibujar estos parámetros

103
00:03:35,620 --> 00:03:38,250
aquí, ya sabes, en el diagrama de la red neuronal.

104
00:03:38,790 --> 00:03:40,230
Y, por supuesto, este menos 30

105
00:03:40,390 --> 00:03:42,500
es realmente «theta» 1

106
00:03:43,670 --> 00:03:44,830
de 1, 0.

107
00:03:45,290 --> 00:03:47,390
Este es «theta» 1

108
00:03:47,600 --> 00:03:50,550
de 1, 1 y este es «theta»

109
00:03:51,560 --> 00:03:52,990
1 de 1, 2

110
00:03:53,290 --> 00:03:54,320
pero es más fácil considerarlos

111
00:03:54,590 --> 00:03:56,660
como la asociación de estos

112
00:03:56,840 --> 00:03:58,430
parámetros con los bordes de la red.

113
00:04:01,170 --> 00:04:04,170
Veamos lo que calculará esta red con una sola neurona.

114
00:04:05,050 --> 00:04:06,290
Sólo para recordarte, la función

115
00:04:06,720 --> 00:04:08,820
de activación sigmoidea g de z se ve así.

116
00:04:09,110 --> 00:04:10,810
Comienza en 0, se eleva

117
00:04:11,160 --> 00:04:12,270
lentamente, pasa por 0.5 y

118
00:04:12,750 --> 00:04:14,720
tiene su asíntota en uno.

119
00:04:15,730 --> 00:04:16,510
Y para darte un punto de referencia,

120
00:04:17,350 --> 00:04:18,850
si el valor en el eje horizontal es

121
00:04:19,460 --> 00:04:21,770
igual a 4.6, entonces

122
00:04:23,840 --> 00:04:25,910
La función sigmoidea es igual a 0.99.

123
00:04:26,220 --> 00:04:27,950
Esto está muy cerca

124
00:04:28,150 --> 00:04:29,560
a 1 y es casi simétrico.

125
00:04:30,350 --> 00:04:32,270
Si es negativo 4.6, entonces

126
00:04:33,090 --> 00:04:34,970
la función sigmoidea es

127
00:04:35,080 --> 00:04:37,820
igual a 0.01, que está muy cerca de 0.

128
00:04:39,440 --> 00:04:40,700
Veamos los cuatro posibles valores

129
00:04:41,040 --> 00:04:41,680
de entrada para x1 y x2

130
00:04:41,730 --> 00:04:43,470
y veamos si las hipótesis se

131
00:04:43,620 --> 00:04:47,090
abrirán en ese caso.

132
00:04:47,220 --> 00:04:47,910
Si ambas, x1 y x2 son

133
00:04:48,150 --> 00:04:49,160
iguales a 0 - si

134
00:04:49,460 --> 00:04:50,560
ves esto, si

135
00:04:50,710 --> 00:04:51,650
x1 y x2 son iguales

136
00:04:52,010 --> 00:04:54,780
a 0 entonces las hipótesis del punto g de -30.

137
00:04:55,120 --> 00:04:56,790
Entonces, está muy

138
00:04:57,290 --> 00:04:58,510
hacia la izquierda de este diagrama.

139
00:04:58,750 --> 00:05:01,380
Esto estará muy cerca de 0.

140
00:05:01,590 --> 00:05:03,160
Si x1 es igual a 0 y

141
00:05:03,330 --> 00:05:05,100
x2 es igual a 1, entonces esta

142
00:05:05,550 --> 00:05:07,610
fórmula aquí evalúa a

143
00:05:07,830 --> 00:05:09,470
g, por lo tanto la función sigmoidea aplicó

144
00:05:09,890 --> 00:05:12,000
a -10 y, otra vez,

145
00:05:12,450 --> 00:05:13,640
está en el extremo izquierdo

146
00:05:13,880 --> 00:05:14,970
de este diagrama y, por lo tanto,

147
00:05:15,150 --> 00:05:16,540
está nuevamente muy cerca de 0.

148
00:05:16,660 --> 00:05:19,180
Esta es también g de -10.

149
00:05:19,270 --> 00:05:21,320
Esto es si x1

150
00:05:22,000 --> 00:05:24,110
es igual a 1 y

151
00:05:24,560 --> 00:05:26,110
x(2)0, esto es, -30 más 20, lo que es -10.

152
00:05:26,230 --> 00:05:28,450
Y, finalmente, si

153
00:05:28,590 --> 00:05:29,940
x1 es igual a 1, x2 es igual a

154
00:05:30,670 --> 00:05:31,970
1, entonces tienes g de

155
00:05:32,770 --> 00:05:34,020
-30   +20   +20,

156
00:05:34,190 --> 00:05:35,370
y eso es g de

157
00:05:35,440 --> 00:05:36,480
+10, que, por lo tanto,

158
00:05:36,710 --> 00:05:38,140
está muy cerca de 1.

159
00:05:39,040 --> 00:05:40,210
Y si se observa esta

160
00:05:40,490 --> 00:05:42,700
columna, esta es

161
00:05:43,010 --> 00:05:45,280
exactamente la función lógica AND.

162
00:05:45,820 --> 00:05:47,790
Entonces, esto es calcular h de

163
00:05:47,890 --> 00:05:49,870
x, que es

164
00:05:50,260 --> 00:05:54,910
aproximadamente x1 y x2.

165
00:05:55,200 --> 00:05:56,210
En otras palabras, muestra

166
00:05:56,650 --> 00:05:57,820
1 si y sólo

167
00:05:58,270 --> 00:05:59,470
si x1 y x2 son

168
00:06:00,950 --> 00:06:02,410
iguales a 1.

169
00:06:03,360 --> 00:06:04,840
Entonces, haciendo nuestra pequeña

170
00:06:05,320 --> 00:06:07,070
tabla de verdad de esta manera,

171
00:06:07,780 --> 00:06:09,060
podemos averiguar cuál es

172
00:06:09,350 --> 00:06:11,170
la función lógica que nuestra

173
00:06:11,650 --> 00:06:12,870
red neuronal calcula.

174
00:06:16,990 --> 00:06:18,350
La red que se muestra calcula

175
00:06:18,880 --> 00:06:20,280
la función OR, sólo para

176
00:06:20,370 --> 00:06:21,810
mostrarte cómo lo resolví,

177
00:06:22,530 --> 00:06:23,230
si escribes la

178
00:06:23,680 --> 00:06:25,240
hipótesis, encontrarás que

179
00:06:25,360 --> 00:06:26,690
está calculando g de

180
00:06:27,110 --> 00:06:29,980
-10  +20  x1

181
00:06:30,170 --> 00:06:32,040
+20  x2. Y si

182
00:06:32,270 --> 00:06:33,380
completas estos valores

183
00:06:33,520 --> 00:06:35,110
encontrarás que g de

184
00:06:35,460 --> 00:06:37,080
-10, que es aproximadamente 0,

185
00:06:37,820 --> 00:06:38,840
g de 10 lo que es

186
00:06:39,040 --> 00:06:40,550
aproximadamente 1, y así sucesivamente.

187
00:06:40,930 --> 00:06:42,650
Estos son aproximadamente 1, y aproximadamente

188
00:06:43,550 --> 00:06:45,410
1, y estos números son

189
00:06:46,160 --> 00:06:47,650
esencialmente, la función lógica

190
00:06:47,860 --> 00:06:50,210
OR.
 Entonces, espero que

191
00:06:50,590 --> 00:06:52,010
con esto ahora comprendas cómo

192
00:06:52,350 --> 00:06:53,930
neuronas individuales en una

193
00:06:54,020 --> 00:06:54,980
red neuronal pueden utilizarse

194
00:06:55,180 --> 00:06:58,390
para calcular funciones lógicas como AND y OR y así sucesivamente.

195
00:06:59,000 --> 00:07:00,280
En el siguiente video continuaremos

196
00:07:00,790 --> 00:07:03,870
avanzando con estos ejemplos y trabajaremos con un ejemplo más complejo.

197
00:07:04,730 --> 00:07:05,610
Vamos a llegar a mostrarte cómo

198
00:07:06,170 --> 00:07:07,570
una red neuronal, ahora con

199
00:07:07,820 --> 00:07:09,780
múltiples capas de unidades, puede

200
00:07:09,960 --> 00:07:10,960
usarse para calcular funciones más

201
00:07:11,400 --> 00:07:13,870
complejas como la función XOR o la función XNOR.