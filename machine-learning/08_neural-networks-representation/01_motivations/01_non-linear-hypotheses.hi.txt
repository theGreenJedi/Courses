इस में और वीडियोज़ के अगले सेट, मैं चाहूँगा आपको बताना एक अल्गोरिद्म के बारे में जिसे कहते हैं एक न्यूरल नेटवर्क. हम पहले बात करेंगे रेप्रेज़ेंटेशन की और फिर वीडियो के अगले सेट में बात करेंगे इसके लर्निंग अल्गोरिद्म्स की. न्यूरल नेटवर्क वास्तव में है एक बहुत पुराना विचार, लेकिन लोकप्रिय नहीं रहा कुछ समय के लिए. लेकिन आज, यह है अत्याधुनिक तकनीक बहुत सी भिन्न मशीन लर्निंग प्राब्लम्ज़ के लिए. तो क्यों चाहिए हमें और एक अन्य लर्निंग अल्गोरिद्म? हमारे पास पहले से ही है लिनीअर रेग्रेशन और हमारे पास है लजिस्टिक रेग्रेशन, तो क्यों हमें चाहिए, आप जानते हैं, न्यूरल नेटवर्क? यह चर्चा प्रेरित करने के लिए न्यूरल नेटवर्क्स पर, मैं शुरू करता हूँ दिखाते हुए आपको कुछ उदाहरण मशीन लर्निंग प्राब्लम्ज़ के जहाँ हमें आवश्यकता है लर्न करने की जटिल नॉन-लिनीअर हायपॉथिसस. मान लो एक सूपर्वायज़्ड लर्निंग क्लैसिफ़िकेशन प्रॉब्लम है जहाँ आपके पास एक ट्रेनिंग सेट इस तरह का. यदि आप अप्लाई करना चाहते हैं लॉजिस्टिक रेग्रेशन इस प्रॉब्लम को, एक काम जो हम कर सकते हैं है कि अप्लाई करें लॉजिस्टिक रिग्रेशन एक बहुत से नॉन लिनीअर फ़ीचर्ज़ के साथ उस तरह. तो यहाँ, g हमेशा की तरह है सिग्मोईड फ़ंक्शन, और हम शामिल कर सकते हैं बहुत से पालिनोमीयल टर्म्ज़ इस तरह की. और, यदि आप लेते हैं पर्याप्त पालिनोमीयल टर्म्ज़ तब, आप जानते हैं, शायद आप को मिल सकती है एक हायपॉथिसस जो अलग करती है पॉज़िटिव या नेगेटिव इग्ज़ाम्पल को. यह ख़ास विधि सही काम करती है जब आपके पास हैं केवल, मान लो, दो फ़ीचर्ज़ - x1 और x2 - क्योंकि तब आप शामिल कर सकते हैं ये सब पालिनोमीयल टर्म्ज़ x1 और x2 की. लेकिन कई दिलचस्प मशीन लर्निंग प्राब्लम्ज़ में होंगे बहुत अधिक फ़ीचर्ज़ बजाय सिर्फ़ दो के. हम बात कर रहे हैं बहुत समय से घरों की क़ीमत की प्रिडिक्शन के बारे में, और मान लो कि आपके पास है एक घरों की क्लैसिफ़िकेशन की प्रॉब्लम बजाय एक रेग्रेशन प्रॉब्लम के, जैसे कि शायद यदि आपके पास हैं विभिन्न फ़ीचर्ज़ एक घर के और आप चाहते हैं प्रिडिक्ट करना कि क्या है सम्भावना कि आपका घर बिक सकेगा अगले छः महीनों में, तो वह होगी एक क्लैसिफ़िकेशन प्रॉब्लम. और जैसा कि हमने देखा हम बना सकते हैं बहुत अधिक फ़ीचर्ज़, शायद एक सौ भिन्न फ़ीचर्ज़ विभिन्न घरों के. इस तरह की एक प्रॉब्लम के लिए, यदि आपको लेनी होती सभी क्वाड्रैटिक टर्म्ज़, सब इनमे से, यहाँ तक कि सारी क्वाड्रैटिक टर्म्ज़ जो है दूसरी या पालिनोमीयल टर्म्ज़, वे सब बहुत सी होंगी. वहाँ ऐसी टर्म्ज़ होंगी जैसे x1 स्क्वेर्ड, x1x2, x1x3, आप जानते हैं, x1x4 से x1x100 तक और फिर आपके पास है x2 स्क्वेर्ड, x2x3 और इसी तरह आगे॰ और, यदि आप लेते हैं सिर्फ़ सेकंड ऑर्डर टर्म्ज़, जो हैं, टर्म्ज़ जो हैं गुणन, आप जानते हैं, ये दो टर्म्ज़ का, x1 गुणा x1, और इसी प्रकार आगे, तब, केस n बराबर 100 के लिए, आपको मिलेंगे क़रीब पाँच हज़ार फ़ीचर्ज़. और, इस तरह, संख्या फ़ीचर्ज़ की बढ़ती है लगभग अनुक्रम में n स्क्वेर्ड, जहाँ n है संख्या प्रारम्भिक फ़ीचर्ज़ की, जैसे x1 से x100 तक जो हमारे पास थे. और वास्तव में है नज़दीक n स्क्वेर्ड बटा दो के. तो लेते हुए सारे क्वाड्रैटिक फ़ीचर्ज़ नहीं प्रतीत हो रही जैसे यह है एक अच्छा विचार, क्योंकि वे हैं बहुत से फ़ीचर्ज़, और आप शायद ओवर फ़िटिंग करेंगे ट्रेनिंग सेट को, और यह हो सकता है कॉम्प्यूटेशनली महँगा भी, आप जानते हैं, काम करना उतने सारे फ़ीचर्ज़ के साथ. एक काम जो आप कर सकते हैं कि लें सिर्फ़ एक सब्सेट इनका, तो यदि आप लेते हैं सिर्फ़ फ़ीचर्ज़ x1 स्क्वेर्ड, x2 स्क्वेर्ड, x3 स्क्वेर्ड, आगे शायद x100 स्क्वेर्ड तक, तब संख्या फ़ीचर्ज़ की है काफ़ी कम. यहाँ आपके पास हैं केवल 100 ऐसे क्वाड्रैटिक फ़ीचर्ज़, लेकिन यह नहीं हैं पर्याप्त फ़ीचर्ज़ और निश्चित रूप से आपको फिट नहीं करने देंगे डेटा सेट उस जैसा जो ऊपर बाईं तरफ़ है. वास्तव में, यदि आप शामिल करते हैं केवल ये क्वाड्रैटिक फ़ीचर्ज़ साथ में प्रारम्भिक x1, और इसी तरह, x100 फ़ीचर्ज़ तक, तब आप वास्तव में कर सकते हैं फ़िट बहुत दिलचस्प हायपॉथिसस. तो, आप फ़िट कर सकते हैं इस तरह की चीज़ें, आप जानते हैं, बना सकते हैं एक लाइन इलिप्स्स की इस तरह, लेकिन आप निश्चित रूप से नहीं फिट कर सकते एक अधिक जटिल डेटा सेट जैसा दिखाया है यहाँ. तो 5000 फ़ीचर्ज़ लगते हैं बहुत अधिक, यदि आपको करनी होती शामिल क्यूबिक, या थर्ड ऑर्डर पालिनोमीयल प्रत्येक टर्म का, x1, x2, x3. आप जानते हैं, x1 स्क्वेर्ड, x2, x10 और x11, x17 और इसी प्रकार आगे. आप कल्पना कर सकते हैं वहाँ होंगे बहुत अधिक ये फ़ीचर्ज़. वास्तव में, वे होंगे अनुक्रम में n क्यूब के इन फ़ीचर्ज़ के और यदि n है 100 आप कर सकते हैं कम्प्यूट वह, आपको मिलता है वह अनुक्रम लगभग 170,000 इस प्रकार के क्यूबिक फ़ीचर्ज़ का और तो लेते हुए इन हाइअर ऑर्डर पालिनोमीयल फ़ीचर्ज़ को जब आपका मूल फ़ीचर सेट है बड़ा यह वास्तव में बहुत अधिक संख्या में बढा सकता है आपकी फ़ीचर स्पेस और यह नही लगता है जैसे एक अच्छा ढंग बनाने का अतिरिक्त फ़ीचर्ज़ जिससे बना पाएँ एक नॉन-लिनीअर क्लैसिफ़ायअर जब n बड़ा है. बहुत सी मशीन लर्निंग प्राब्लम्ज़ के लिए, n होगा काफ़ी बड़ा. एक अन्य उदाहरण चलो देखते हैं कम्प्यूटर विज़न की प्रॉब्लम पर. और मान लो आप चाहते हो इस्तेमाल करना मशीन लर्निंग ट्रेन करने के लिए एक क्लैसिफ़ायअर को कि वह देखे एक इमिज और बताए हमें कि क्या वह इमिज कार की है या नहीं. कई लोगों को आश्चर्य होता है कि क्यों कंप्यूटर विज़न कठिन हो सकता है. मेरा मतलब है कि जब आप और मैं देखते हैं इस तस्वीर को तो यह स्पष्ट है कि यह क्या है. आप आश्चर्य करते है कि यह कैसे होता है कि लर्निंग अल्गोरिद्म सम्भवत: असफल हो सकता है जानने में कि क्या है यह तस्वीर. समझने के लिए कि क्यों कंप्यूटर विज़न कठिन है चलो जूम करते हैं एक छोटे से हिस्से में इमिज के इस तरह के क्षेत्र में जहाँ छोटा लाल रंग का आयत है. यह समझ आता है कि जहाँ आप और में देखते हैं कार, कम्प्यूटर देखता है वह. यह जो देखता है वह है यह मेट्रिक्स, या यह ग्रिड, पिक्सेल इंटेन्सिटी वैल्यूज़ की जो बताती है हमें प्रत्येक पिक्सेल की चमक इमिज में. तो कंप्यूटर विज़न प्रॉब्लम है कि देखें इस मेट्रिक्स को पिक्सेल इंटेन्सिटी वैल्यूज़ की, और बताएँ हमें कि ये नम्बर्ज़ दर्शाते हैं डोर हैंडल एक कार का. वस्तुतः, जब हम इस्तेमाल करते हैं मशीन लर्निंग बनाने के लिए एक कार डिटेक्टर, हम क्या करते हैं कि हम बनाते हैं एक लेबल्ड ट्रेनिंग सेट, साथ, मान लो, कुछ लेबल्ड इग्ज़ाम्पल्ज़ कार के और कुछ लेबल्ड इग्ज़ाम्पल्ज़ चीज़ों के जो कार नहीं है, तब हम देते हैं हमारा ट्रेनिंग सेट लर्निंग अल्गोरिद्म को ट्रेन करने के लिए एक क्लैसिफ़ायअर और तब, आप जानते हैं, आप इसे टेस्ट कर सकते हैं और दिखा सकते हैं नई इमिज और पूछ सकते हैं, " क्या है यह नई चीज़?". और उम्मीद है कि यह पहचान लेगा कि वह एक कार है. समझने के लिए कि क्यों हमें चाहिए नॉन-लिनीअर हायपॉथिसस, चलो डालते हैं एक नज़र कुछ इमिजेज़ पर कार की और शायद नॉन-कार्ज़ की जो हम देंगे हमारे लर्निंग अल्गोरिद्म को. चलो उठाते हैं कुछ पिक्सेल स्थान हमारी इमिजेज़ में, तो वह है पिक्सेल एक स्थान और पिक्सेल दो स्थान, और चलो प्लॉट करते हैं इस कार को, आप जानते हैं, उस स्थान पर, एक ख़ास पोईँट पर, निर्भर करते हुए इंटेन्सिटी पर पिक्सेल एक और पिक्सेल दो की. और चलो करते हैं यह दूसरी इमिजेज़ के साथ भी. चलिए लेते हैं कुछ भिन्न उदाहरण कार के और आप जानते हैं, देखते हैं वही दो पिक्सेल स्थान पर और उस इमिज की है एक भिन्न इंटेन्सिटी पिक्सेल एक पर और एक भिन्न इंटेन्सिटी पिक्सेल दो पर. तो, यह पहुँचता हैं एक भिन्न स्थान पर चित्र में. और तब चलो प्लॉट करते हैं कुछ नेगेटिव इग्ज़ाम्पल्ज़ भी. वह है एक नॉन-कार, वह है एक नॉन-कार. और यदि हम ऐसा करते हैं अधिक से अधिक इग्ज़ाम्पल्ज़ के लिए इस्तेमाल करते हुए प्लस डिनोट करने के लिए कार तथा माइनस डिनोट करने के लिए नॉन-कार, हमें क्या मिलता है कि कार तथा नॉन-कार मिलती हैं भिन्न क्षेत्रों में स्पेस के, और हमें क्या चाहिए इसलिए कि कुछ एक प्रकार की नॉन-लिनीअर हायपॉथिसस प्रयास करने के लिए अलग करने का हमारी दो क्लैसेज़ को. क्या है डिमेन्शन हमारी चित्र स्पेस की? मान लो हम इस्तेमाल करते हैं सिर्फ़ 50 बाई 50 पिक्सेल की इमिजेज़. अब मान लो हमारी इमिजेज़ थी काफ़ी छोटी, सिर्फ़ 50 पिक्सेल्स साइड में. तब हमारे पास होंगे 2500 पिक्सेल्स, और इसलिए डिमेन्शंज़ हमारे फ़ीचर साइज़ की होंगी N बराबर 2500 जहाँ हमारा फ़ीचर वेक्टर x जो है एक लिस्ट सारी पिक्सेल टेस्टिंग्स का, आप जानते हैं पिक्सेल चमक पिक्सेल एक की, पिक्सेल चमक पिक्सेल दो की, और इसी प्रकार आगे पिक्सेल चमक अंतिम पिक्सेल की जहाँ, आप जानते हैं, एक टिपिकल कम्प्यूटर रेप्रेज़ेंटेशन में, प्रत्येक ये होंगी वैल्यूज़ बीच में मान लो 0 से 255 के यदि यह देता है हमें ग्रेस्केल वैल्यू. तो यदि हमारे पास है n बराबर 2500, और कि यदि हम इस्तेमाल कर रहे होते ग्रेस्केल इमिजेज़. यदि हम इस्तेमाल कर रहे होते RGB इमिजेज़ अलग लाल, हरी और नीली वैल्यूज़ के साथ, हमारे पास होता n बराबर 7500. तो यदि हमें करना होता प्रयास लर्न करने का एक नॉन-लिनीअर हायपॉथिसस लेते हुए सारे क्वाड्रैटिक फ़ीचर्ज़, मतलब कि सभी टर्म्ज़ जिनकी फ़ॉर्म है, आप जानते हैं, xi गुणा xj, जबकि 2500 पिक्सेल्स के साथ हमें मिलेंगे कुल तीस लाख फ़ीचर्ज़. और वह है उतना बड़ा कि वह उचित नहीं हो सकता; कॉम्प्यूटेशन होगी बहुत महँगी ढूँढने के लिए और रेप्रेज़ेंट करने के लिए सारे ये तीस लाख फ़ीचर्ज़ प्रत्येक ट्रेनिंग इग्ज़ाम्पल के लिए. तो सरल लॉजिस्टिक रिग्रेशन साथ में जोड़ते हुए शायद क्वाड्रैटिक या क्यूबिक फ़ीचर्ज़ - वह नहीं है एक अच्छा ढंग लर्न करने का जटिल नॉन-लिनीअर हायपॉथिसस जब n है बहुत बड़ा क्योंकि आपको मिलेंगे बहुत अधिक फ़ीचर्ज़. अगले कुछ वीडियो में, मैं बताना चाहूँगा आपको न्युरल नेटवर्क़्स के बारे में, जो निकलता है एक बेहतर तरीक़ा लर्न करने का जटिल हायपॉथिसस को, जटिल नॉन-लिनीअर हायपॉथिसस तब भी जब आपकी इनपुट फ़ीचर स्पेस, तब भी जब आपका n है बड़ा. और उसके साथ ही मैं दिखा पाउँगा आपको कुछ मजेदार वीडियो ऐतिहासिक दृष्टि से महत्वपूर्ण ऐप्लिकेशन्स के न्यूरल नेटवर्क़्स के भी और मैं उम्मीद करता हूँ कि वे वीडियो जो देखेंगे बाद में आपको भी मज़ा आएगा देखने में.