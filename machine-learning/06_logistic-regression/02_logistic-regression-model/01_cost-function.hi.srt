1
00:00:00,200 --> 00:00:04,200
इस वीडियो में, हम बात करेंगे कि थीटा के पैरामीटर्ज़ फिट कैसे करने हैं

2
00:00:04,200 --> 00:00:05,930
लॉजिस्टिक रिग्रेशन में.

3
00:00:05,930 --> 00:00:10,020
ख़ासकर, मैं परिभाषित करूँगा ऑप्टिमायज़ेशन अब्जेक्टिव, या 

4
00:00:10,020 --> 00:00:13,180
कॉस्ट फ़ंक्शन जो हम इस्तेमाल करेंगे फ़िट करने के लिए पेरमिटर्स.

5
00:00:15,420 --> 00:00:19,800
यहाँ है सूपर्वायज़्ड लर्निंग प्रॉब्लम फ़िट करने के लिए लजिस्टिक रेग्रेशन मॉडल.

6
00:00:19,800 --> 00:00:26,310
हमारे पास है एक ट्रेनिंग सेट एम ट्रेनिंग इग्ज़ाम्पल्ज़ का और हमेशा की तरह,

7
00:00:26,310 --> 00:00:31,570
प्रत्येक हमारा इग्ज़ाम्पल दर्शाया गया है एक फ़ीचर वेक्टर से जो है एक एन प्लस एक डिमेन्शनल,

8
00:00:32,820 --> 00:00:36,700
और हमेशा की तरह हमारे पास है एक्स 0 बराबर एक.

9
00:00:36,700 --> 00:00:40,060
पहला फ़ीचर या एक ज़ीरो फ़ीचर है हमेशा बराबर एक.

10
00:00:40,060 --> 00:00:42,860
और क्योंकि यह एक कॉम्प्यूटेशनल प्रॉब्लम है,

11
00:00:42,860 --> 00:00:48,220
हमारे ट्रेनिंग सेट की प्रॉपर्टी / गुणस्वभाव है प्रत्येक लेबल वाय या 0 है या 1.

12
00:00:48,220 --> 00:00:54,340
यह है एक हायपॉथिसस, और पेरमिटर्स इस हायपॉथिसस के हैं यह थीटा यहाँ पर.

13
00:00:54,340 --> 00:00:58,620
और प्रश्न जिसकी मैं बात करना चाहता हूँ है कि दिया होने पर यह ट्रेनिंग सेट,

14
00:00:58,620 --> 00:01:02,480
कैसे करते हैं हम चुनाव, या कैसे फ़िट करते हैं पेरमिटर्स थीटा?

15
00:01:02,480 --> 00:01:06,180
पहले जब हम बना रहे थे लिनीअर रेग्रेशन मॉडल,

16
00:01:06,180 --> 00:01:08,580
हमने इस्तेमाल किया था निम्न कॉस्ट फ़ंक्शन.

17
00:01:08,580 --> 00:01:11,940
मैं लिखा है इसे थोड़ा भिन्न ढंग से जहाँ बजाय लिखने के 1 ओवर 2एम,

18
00:01:11,940 --> 00:01:16,410
मैंने लिया एक आधा / वन-हाफ़ और डाला है इसे समेशन के अंदर. 

19
00:01:16,410 --> 00:01:20,190
अब मैं इस्तेमाल करना चाहता हूँ एक वैकल्पिक ढंग लिखने का इस कॉस्ट फ़ंक्शन को.

20
00:01:20,190 --> 00:01:23,950
जो है कि लिखने के स्थान पर यह स्क्वेर टर्म यहाँ, 

21
00:01:23,950 --> 00:01:28,333
चलिए लिखते हैं यहाँ कॉस्ट्स 

22
00:01:28,333 --> 00:01:33,280
एच ऑफ़ एक्स, वाय और 

23
00:01:33,280 --> 00:01:39,790
और मैं करूँगा परिभाषित वह कुल / टोटल कॉस्ट एच ऑफ़ एक्स, वाय बराबर इसके. 

24
00:01:39,790 --> 00:01:42,710
सिर्फ़ बराबर इस स्क्वेर्ड एरर के आधे के.

25
00:01:42,710 --> 00:01:49,070
तो अब हम अधिक स्पष्ट रूप से देख सकते हैं कि कॉस्ट फ़ंक्शन है एक सम मेरे ट्रेनिंग 

26
00:01:49,070 --> 00:01:54,730
सेट पर, जो है 1 ओवर एन टाइम्ज़ सम मेरे ट्रेनिंग सेट की इस कॉस्ट टर्म का यहाँ.

27
00:01:56,050 --> 00:01:59,280
और सरल करने के लिए इस इक्वेज़न को थोड़ा और,

28
00:01:59,280 --> 00:02:02,660
यह होगा सुविधाजनक हटा देना उन सूपरस्क्रिप्ट्स को.

29
00:02:02,660 --> 00:02:06,150
तो सिर्फ़ परिभाषित करें कॉस्ट एच ऑफ़ एक्स कॉमा वाय बराबर 

30
00:02:06,150 --> 00:02:08,360
आधा इस स्क्वेर्ड एरर का.

31
00:02:08,360 --> 00:02:13,110
और अर्थ इस कॉस्ट फ़ंक्शन का है कि, यह है कॉस्ट जो मैं चाहता हूँ मेरा 

32
00:02:13,110 --> 00:02:18,650
लर्निंग अल्गोरिद्म चुकाए / दे, यदि यह आउट्पुट करता है वह वैल्यू,

33
00:02:18,650 --> 00:02:23,340
यदि इसकी प्रिडिक्शन है एच ऑफ़ एक्स और असली लेबल था वाय.

34
00:02:23,340 --> 00:02:28,110
तो सिर्फ़ काट देता हैं सूपरस्क्रिप्ट्स, सही,

35
00:02:28,110 --> 00:02:32,010
और कोई आश्चर्य नहीं लिनीअर रेग्रेशन के लिए जो कॉस्ट हमने परिभाषित की है या 

36
00:02:32,010 --> 00:02:36,650
इसकी कॉस्ट है यह वन-हाफ़ टाइम्ज़ स्क्वेर अंतर का बीच में 

37
00:02:36,650 --> 00:02:40,010
मैंने प्रिडिक्ट किया है और जो असली वैल्यू है जो हमारे पास है 0 वाय के लिए.

38
00:02:40,010 --> 00:02:43,900
अब इस फ़ंक्शन ने सही काम किया लिनीअर रेग्रेशन के लिए.

39
00:02:43,900 --> 00:02:47,490
लेकिन यहाँ, हमारी रुचि है लजिस्टिक रेग्रेशन में.

40
00:02:47,490 --> 00:02:52,040
यदि हम मिनमायज़ कर सकते इस कॉस्ट फ़ंक्शन को जो प्लग किया है जे में यहाँ.

41
00:02:52,040 --> 00:02:53,830
यह सही काम करेगा.

42
00:02:53,830 --> 00:02:57,650
लेकिन ऐसा होता है कि यदि हम इस्तेमाल करते हैं यह विशेष कॉस्ट फ़ंक्शन,

43
00:02:57,650 --> 00:03:01,870
यह होगा एक नॉन-कान्वेक्स फ़ंक्शन पेरमिटर्स थीटा का.

44
00:03:01,870 --> 00:03:04,130
यहाँ है कि मेरा क्या मतलब है नॉन-कान्वेक्स से.

45
00:03:04,130 --> 00:03:06,930
यहाँ है मेरा कॉस्ट फ़ंक्शन जे ऑफ़ थीटा और 

46
00:03:06,930 --> 00:03:10,870
लजिस्टिक रेग्रेशन के लिए, यह फ़ंक्शन एच यहाँ 

47
00:03:12,150 --> 00:03:16,570
है नॉन लिनीअर जो है वन ओवर वन प्लस ई टु नेगेटिव थीटा ट्रान्स्पोज़.

48
00:03:16,570 --> 00:03:19,570
तो वह है एक काफ़ी पेचीदा नॉनलिनीअर फ़ंक्शन.

49
00:03:19,570 --> 00:03:22,800
और यदि आप लेते हैं फ़ंक्शन प्लग करते हैं इसे यहाँ.

50
00:03:22,800 --> 00:03:26,190
और तब लेते हैं यह कॉस्ट फ़ंक्शन और प्लग करते हैं इसे वहाँ और 

51
00:03:26,190 --> 00:03:28,980
फिर प्लॉट करते हैं कि जे ऑफ़ थीटा कैसा दिखता है.

52
00:03:28,980 --> 00:03:32,530
आप पाते हैं कि जे ऑफ़ थीटा दिख सकता है एक फ़ंक्शन की तरह जो ऐसा है 

53
00:03:33,710 --> 00:03:35,620
बहुत से लोकल मिनिमा के साथ.

54
00:03:35,620 --> 00:03:39,370
और औपचारिक टर्म उसके लिए हैं कि यह है एक नॉन-कान्वेक्स फ़ंक्शन.

55
00:03:39,370 --> 00:03:42,950
और आप एक तरह से बता सकते हैं, यदि आपको रन करना होता ग्रेडीयंट डिसेंट इस तरह के 

56
00:03:42,950 --> 00:03:47,780
फ़ंक्शन पर यह नहीं है गारंटी कि यह कन्वर्ज होगा ग्लोबल मिनिमम पर.

57
00:03:47,780 --> 00:03:52,580
जबकि इसके विपरीत हम क्या चाहेंगे कि हो एक कॉस्ट फ़ंक्शन जे ऑफ़ थीटा जो है 

58
00:03:52,580 --> 00:03:56,490
कान्वेक्स, जो है एक धनुष के आकार का फ़ंक्शन जो दिखता हैं ऐसा 

59
00:03:56,490 --> 00:04:00,560
ताकि यदि रन करें ग्रेडीयंट डिसेंट हमें गारंटी होगी कि 

60
00:04:01,610 --> 00:04:04,930
वह कन्वर्ज करेगा ग्लोबल मिनिमम पर.

61
00:04:04,930 --> 00:04:10,210
और समस्या इस स्क्वेर्ड कॉस्ट फ़ंक्शन को इस्तेमाल करने से है क्योंकि यह 

62
00:04:10,210 --> 00:04:15,560
बहुत नॉन-लिनीअर फ़ंक्शन जो है यहाँ मध्य में, जे ऑफ़ थीटा हो जाता है 

63
00:04:15,560 --> 00:04:21,280
एक नॉन-कान्वेक्स फ़ंक्शन यदि आपको परिभाषित करना होता इसे एक स्क्वेर कॉस्ट फ़ंक्शन.

64
00:04:21,280 --> 00:04:25,360
तो मैं क्या करना चाहूँगा कि, बजाय बनाने के एक भिन्न कॉस्ट फ़ंक्शन,

65
00:04:25,360 --> 00:04:29,850
जो कान्वेक्स है, और ताकि हम अप्लाई कर सकें एक बढ़िया अल्गोरिद्म,

66
00:04:29,850 --> 00:04:33,680
जैसे ग्रेडीयंट डिसेंट और हमें गारंटी हो जाए ग्लोबल मिनिमम मिलने की.

67
00:04:33,680 --> 00:04:37,310
यहाँ है कॉस्ट फ़ंक्शन जो हम इस्तेमाल करेंगे लजिस्टिक रेग्रेशन के लिए.

68
00:04:37,310 --> 00:04:39,400
हम कहेंगे कि कॉस्ट, या 

69
00:04:39,400 --> 00:04:44,420
पेनल्टी / जुर्माना जो अल्गोरिद्म अदा करता है, यदि यह देता है वैल्यू एच(एक्स),

70
00:04:44,420 --> 00:04:49,570
तो यदि यह है कोई संख्या जैसे 0.7, यह प्रिडिक्ट करता है वैल्यू एच ऑफ़ एक्स.

71
00:04:49,570 --> 00:04:53,430
और असली कॉस्ट लेबल है वाय.

72
00:04:53,430 --> 00:04:58,414
कॉस्ट होगी -लॉग(एच(एक्स)) यदि वाय = 1 और 

73
00:04:58,414 --> 00:05:01,960
-लॉग (1-एच(एक्स)) यदि वाय =0.

74
00:05:01,960 --> 00:05:04,380
यह दिखता है एक काफ़ी पेचीदा फ़ंक्शन, लेकिन 

75
00:05:04,380 --> 00:05:08,220
चलिए प्लॉट करते हैं इस फ़ंक्शन को समझने के लिए कि यह क्या कर रहा है.

76
00:05:08,220 --> 00:05:10,801
चलिए शुरू करते हैं केस वाय = 1 से.

77
00:05:10,801 --> 00:05:18,030
यदि वाय = 1, तब यह कोस्ट फ़ंक्शन है -लॉग(एच(एक्स)).

78
00:05:18,030 --> 00:05:22,940
और यदि हम प्लॉट करे उसे, तो मान लो कि हॉरिज़ॉंटल ऐक्सिस है एच(एक्स).

79
00:05:22,940 --> 00:05:27,678
तो अब हम जानते हैं कि एक हायपॉथिसस आउट्पुट करेगी एक वैल्यू 0 और 1 के बीच में.

80
00:05:27,678 --> 00:05:31,810
 सही, एच(एक्स), वह रहता है 0 और 1 के बीच.

81
00:05:31,810 --> 00:05:38,000
यदि आप प्लॉट करते हैं कि यह कॉस्ट फ़ंक्शन कैसा दिखता हैं, आप पाते हैं कि यह ऐसा दिखता है.

82
00:05:38,000 --> 00:05:43,610
एक नज़रिया देखने का कि यह क्यों ऐसा दिखता है क्योंकि यदि आपको प्लॉट करना होता लॉग ज़ी 

83
00:05:45,040 --> 00:05:48,790
ज़ी हॉरिज़ॉंटल ऐक्सिस पर, तब वह ऐसा दिखता.

84
00:05:48,790 --> 00:05:50,970
और यह जाता है माइनस इन्फ़िनिटी, सही?

85
00:05:50,970 --> 00:05:53,770
तो ऐसा दिखता है लॉग फ़ंक्शन.

86
00:05:53,770 --> 00:05:56,610
और यह है 0, यह है 1.

87
00:05:56,610 --> 00:06:00,078
यहाँ, ज़ी निस्संदेह रोल कर रहा है एच ऑफ़ एक्स का.

88
00:06:00,078 --> 00:06:05,090
और इसलिए -लॉग ज़ी दिखेगा ऐसा.

89
00:06:06,510 --> 00:06:11,460
केवल बदल देने से साइन, माइनस लॉग ज़ी, और हमें रुचि है सिर्फ़ रेंज में 

90
00:06:11,460 --> 00:06:16,030
कि कब यह फ़ंक्शन होता है ज़ीरो और एक के बीच, तो उसे छोड़ देते हैं.

91
00:06:16,030 --> 00:06:20,120
और इसलिए हमारे पास बचता है सिर्फ़, आप जानते हैं, यह हिस्सा कर्व का, और 

92
00:06:20,120 --> 00:06:23,210
वैसा यह कर्व बाईं तरफ़ दिखता है.

93
00:06:23,210 --> 00:06:29,740
अब, इस कॉस्ट फ़ंक्शन के हैं कुछ दिलचस्प और वांछनीय गुणस्वभाव.

94
00:06:29,740 --> 00:06:34,870
पहला, आप ध्यान करो कि यदि वाय है बराबर 1 और एच(एक्स) है बराबर 1,

95
00:06:34,870 --> 00:06:39,870
दूसरे शब्दों में, यदि हायपॉथिसस ठीक-ठीक प्रिडिक्ट करती है एच बराबर 1 और 

96
00:06:39,870 --> 00:06:44,410
वाय है वास्तव में बराबर उसके जो प्रिडिक्ट किया है, तब कॉस्ट = 0 सही?

97
00:06:44,410 --> 00:06:47,380
वह कॉरेस्पॉंड करता है कर्व को वाक़ई में दबाया हुआ नहीं है.

98
00:06:47,380 --> 00:06:48,970
कर्व अभी भी आगे जा रहा है.

99
00:06:48,970 --> 00:06:53,534
पहले, ध्यान दें कि यदि एच(एक्स)=1, यदि वह हायपॉथिसस 

100
00:06:53,534 --> 00:06:58,400
प्रिडिक्ट करती है वाय =1 और असली में वाय=1 तब कॉस्ट=0.

101
00:06:58,400 --> 00:07:01,370
वह कॉरेस्पॉंड करता है इस पोईँट को नीचे यहाँ, सही?

102
00:07:01,370 --> 00:07:05,666
यदि एच(एक्स)=1 और हम केवल ले रहे है केस वाय =1 यह.

103
00:07:05,666 --> 00:07:11,340
लेकिन यदि एच(एक्स)=1 तब कॉस्ट है नीचे यहाँ, है बराबर 0.

104
00:07:11,340 --> 00:07:15,520
और वह है जहाँ हम चाहते हैं होना क्योंकि यदि हम सही प्रिडिक्ट करेंगे आउट्पुट 

105
00:07:15,520 --> 00:07:17,750
वाय, तब कॉस्ट है 0.

106
00:07:17,750 --> 00:07:24,420
लेकिन अब ध्यान करें कि जैसे एच(एक्स) पहुँचता है 0, तो जैसे 

107
00:07:24,420 --> 00:07:30,500
आउट्पुट एक हायपॉथिसस की पहुँचती है 0, कॉस्ट अत्यधिक बढ़ जाती है और जाती है इन्फ़िनिटी तक.

108
00:07:30,500 --> 00:07:35,710
और यह क्या करता है कि यह कैप्चर करता है कि यदि एक हायपॉथिसस 0 की,

109
00:07:35,710 --> 00:07:41,512
है ऐसा कहने जैसा कि हायपॉथिसस बता रही है कि वाय बराबर है 1 की सम्भावना है 0.

110
00:07:41,512 --> 00:07:44,440
यह एक प्रकार से है जाना हमारे रोगी के पास और कहना 

111
00:07:44,440 --> 00:07:49,200
कि सम्भावना कि आपको एक मेलिगनेंट ट्यूमर है, सम्भावना कि वाय=1, ज़ीरो है.

112
00:07:49,200 --> 00:07:54,120
अत:, यह बिल्कुल सम्भावित नहीं है कि आपका ट्यूमर मेलिगनेंट है.

113
00:07:55,190 --> 00:08:00,190
लेकिन यदि ऐसा होता है कि ट्यूमर, रोगी का ट्यूमर, असल में मेलिगनेंट है, तो 

114
00:08:00,190 --> 00:08:03,370
यदि वाय है बराबर एक, हमारे उसे बताने के बाद भी, 

115
00:08:03,370 --> 00:08:05,410
कि सम्भावना वह होने की ज़ीरो है.

116
00:08:05,410 --> 00:08:08,970
अत:, यह बिल्कुल सम्भावित नहीं है कि यह मेलिगनेंट है.

117
00:08:08,970 --> 00:08:13,000
लेकिन यदि हम उन्हें बताते है इतनी दृढ़ता से और हम ग़लत सिद्ध हो जाते हैं

118
00:08:13,000 --> 00:08:16,160
तब हम दण्डित करते हैं लर्निंग अल्गोरिद्म को एक बहुत ही बड़ी कॉस्ट से.

119
00:08:16,160 --> 00:08:20,290
और वह कैप्चर होता है करने से इस कॉस्ट पहुँचाने से 

120
00:08:20,290 --> 00:08:24,870
इन्फ़िनिटी तक यदि वाय बराबर है 1 और एच(एक्स) पहुँचता है 0.

121
00:08:24,870 --> 00:08:28,190
यह स्लाइड लेती है केस वाय बराबर 1 का.

122
00:08:28,190 --> 00:08:31,205
चलो देखते हैं कि यह कॉस्ट फ़ंक्शन कैसा दिखता हैं वाय बराबर 0 के लिए.

123
00:08:32,460 --> 00:08:35,810
यदि वाय है बराबर 0 के, तब कोस्ट फ़ंक्शन ऐसा दिखता है,

124
00:08:35,810 --> 00:08:41,045
यह दिखता है इस इक्स्प्रेशन के जैसे यहाँ पर, और यदि आप प्लॉट करते हैं फ़ंक्शन,

125
00:08:41,045 --> 00:08:49,240
-लॉग(1-ज़ी), आपको जो मिलता है वह है कॉस्ट फ़ंक्शन वास्तव में ऐसा दिखता है.

126
00:08:49,240 --> 00:08:54,630
तो यह जाता है 0 से 1, कुछ वैसे और इसलिए यदि आप प्लॉट करते हैं 

127
00:08:54,630 --> 00:08:59,740
कॉस्ट फ़ंक्शन को वाय बराबर 0 के केस में, आप पाते हैं कि यह ऐसा दिखता है.

128
00:08:59,740 --> 00:09:04,940
और यह कर्व क्या करता है यह अब ऊपर जाता है और 

129
00:09:04,940 --> 00:09:09,660
यह जाता है प्लस इन्फ़िनिटी पर जैसे एच ऑफ़ एक्स होता है 1 क्योंकि जैसे कि मैं कह रहा था,

130
00:09:09,660 --> 00:09:11,940
कि यदि वाय हो जाता है बराबर 0 के.

131
00:09:11,940 --> 00:09:16,670
लेकिन हमने प्रिडिक्ट किया था कि वाय है बराबर 1 लगभग निश्चिंतता के साथ, शायद 1,

132
00:09:16,670 --> 00:09:19,080
तब हमें देनी पड़ती है एक बहुत बड़ी कॉस्ट.

133
00:09:19,080 --> 00:09:23,080
और इसके विपरीत,
134
00:09:23,080 --> 000:09:28,080
यदि एच ऑफ़ एक्स है 0 और वाय बराबर है 0, तब हायपॉथिसस ने सही 
135
000:09:28,080 --> 000:09:32,080
सही प्रिडिक्ट किया है वाय बराबर 0, और वाय हुआ भी बराबर 0,
136
000:09:32,080 --> 000:09:37,080
तो इस पोईँट पर, कॉस्ट फ़ंक्शन होगा 0.
137
000:09:37,080 --> 000:09:42,080
इस विडीओ में हम परिभाषित करेंगे कॉस्ट फ़ंक्शन एक ट्रेनिंग इग्ज़ाम्पल के लिए.
138
000:09:42,080 --> 000:09:46,080
कन्वेक्सिटी अनालिसिस का विषय इस पाठ्य क्रम के विषय क्षेत्र से बाहर है, लेकिन 
139
000:09:46,080 --> 000:09:51,080
यह सम्भव है दिखा पाना कि एक ख़ास कॉस्ट फ़ंक्शन के साथ,
140
000:09:51,080 --> 000:09:55,080
यह देगा एक कान्वेक्स ऑप्टिमायज़ेशन प्रॉब्लम.
141
000:09:55,080 --> 000:10:00,080
ओवरॉल कॉस्ट फ़ंक्शन जे ऑफ़ थीटा होगा कान्वेक्स और लोकल ऑप्टिमा नहीं होंगे.
142
000:10:00,080 --> 000:10:05,080
अगले विडीओ में हम आगे ले जाएँगे इन कॉस्ट फ़ंक्शन के सुझावों को 
143
000:10:05,080 --> 000:10:10,080
एक ट्रेनिंग इग्ज़ाम्पल के और आगे डिवेलप करेंगे, और परिभाषित करेंगे कॉस्ट फ़ंक्शन 
144
000:10:10,080 --> 000:10:14,080
ट्रेनिंग सेट के लिए.
145
000:10:14,080 --> 000:10:18,080
और हम निकालेंगे एक आसान तरीक़ा इसे लिखने का बजाय जो हम प्रयोग कर रहे थे 
146
000:10:18,080 --> 000:10:20,080
अभी तक, और निर्भर करते हुए उस पर हम गणन करेंगे ग्रेडीयंट डिसेंट, और 
147
000:10:20,080 --> 000:10:22,080
जो हमें देगा हमारा लजिस्टिक रेग्रेशन अल्गोरिद्म.