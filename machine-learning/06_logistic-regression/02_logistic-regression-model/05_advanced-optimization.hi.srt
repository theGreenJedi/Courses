1
00:00:00,300 --> 00:00:01,680
पिछले विडीओ में, हमने बात की 

2
00:00:01,990 --> 00:00:03,920
ग्रेडीयंट डिसेंट के बारे में, मिनिमाईज़ / न्यूनतम करने के लिए 

3
00:00:04,440 --> 00:00:06,700
कॉस्ट फ़ंक्शन जे ऑफ थीटा को लौजिस्टिक रिग्रेशन के लिए.

4
00:00:07,800 --> 00:00:08,930
इस विडीओ में, मैं चाहूँगा 

5
00:00:09,020 --> 00:00:10,250
आपको बताना कुछ एडवांस्ड 

6
00:00:10,850 --> 00:00:12,340
ऑप्टिमायज़ेशन अल्गोरिद्म्स और कुछ 

7
00:00:12,670 --> 00:00:14,060
एडवांस्ड ऑप्टिमायज़ेशन कोन्सेप्ट्स / सिद्धांत.

8
00:00:15,180 --> 00:00:16,480
इन में से कुछ सिद्धांतों का प्रयोग करते हुए, हम 

9
00:00:16,630 --> 00:00:17,930
करवा पाएँगे लजिस्टिक रिग्रेशन को 

10
00:00:19,010 --> 00:00:20,220
रन करना और अधिक तेज़ी से उससे  

11
00:00:20,350 --> 00:00:21,970
जो सम्भव है ग्रेडीयंट डिसेंट के साथ.

12
00:00:22,880 --> 00:00:24,190
और इससे यह भी होगा 

13
00:00:24,320 --> 00:00:26,060
कि अल्गोरिद्म्स को ज़्यादा अच्छी तरह से स्केल कर पाएँगे 

14
00:00:26,670 --> 00:00:28,030
बहुत बड़ी मशीन लर्निंग की समस्याओं के लिए, 

15
00:00:28,660 --> 00:00:30,950
जैसे कि अगर हमारे पास बहुत अधिक संख्या में फ़ीचर्ज़ हों.

16
00:00:31,850 --> 00:00:33,360
यहाँ पर एक दूसरा व्यू है 

17
00:00:33,750 --> 00:00:34,910
उसका कि ग्रेडीयंट डिसेंट क्या कर रहा है.

18
00:00:35,590 --> 00:00:38,030
हमारे पास कोई कॉस्ट फ़ंक्शन जे है और हम उसे मिनिमाईज़ / न्यूनतम करना चाहते हैं.

19
00:00:38,950 --> 00:00:39,980
तो हमें करने की ज़रूरत है

20
00:00:40,340 --> 00:00:41,080
कि हमें लिखना चाहिए  

21
00:00:41,330 --> 00:00:42,640
कोड जो ले सकता है 

22
00:00:42,850 --> 00:00:44,980
इनपुट पेरामिटरज़ थीटा को और 

23
00:00:45,200 --> 00:00:46,470
और वे कम्प्यूट कर सकते हैं  दो चीज़ें: जे 

24
00:00:46,700 --> 00:00:48,190
ऑफ थीटा और ये पार्शल 

25
00:00:48,620 --> 00:00:50,280
डेरिवेटिव टर्म्ज़ फॉर, आप जानते हैं,

26
00:00:50,530 --> 00:00:51,820
जे इकुअल्ज़ 0, 1 

27
00:00:51,890 --> 00:00:53,700
एन तक. दिया गया कोड जो 

28
00:00:53,830 --> 00:00:54,980
यह दो चीज़ें कर सकता है, क्या 

29
00:00:55,160 --> 00:00:56,710
ग्रेडीयंट डिसेंट करता है कि यह 

30
00:00:56,790 --> 00:00:58,620
रीपिटिडली (बार बार दोहराते हुए) फोलोविंग (आगे का) अपडेट करता है.

31
00:00:59,100 --> 00:00:59,100
ठीक?

32
00:00:59,280 --> 00:01:00,500
तो दिया गया कोड जो 

33
00:01:00,670 --> 00:01:01,750
हमने लिखा कम्प्यूट करने के लिए ये पार्शल 

34
00:01:02,090 --> 00:01:03,800
डेरिवेटिवज़, ग्रेडीयंट डिसेंट प्लग इन होता (जुड़ता)  है यहाँ 

35
00:01:04,480 --> 00:01:07,330
और उसको यूज़ करता है हमारे पेरामिटरज़ थीटा को अप्डेट करने के लिए.

36
00:01:08,650 --> 00:01:09,590
तो दूसरा तरीक़ा सोचने का 

37
00:01:09,910 --> 00:01:11,070
ग्रेडीयंट डिसेंट के बारे में है कि 

38
00:01:11,350 --> 00:01:12,670
हमें कोड सप्लाई करना है 

39
00:01:12,810 --> 00:01:14,050
जे ऑफ थीटा को कम्प्यूट करने के लिए और 

40
00:01:14,230 --> 00:01:15,700
इन डेरिवेटिवज़ को, और तब 

41
00:01:15,900 --> 00:01:16,930
तब ये प्लगड हो जाते हैं  

42
00:01:17,370 --> 00:01:20,110
ग्रेडीयंट डिसेंटस में, जो तब कोशिश कर सकता है फ़ंक्शन को हमारे लिए मिनिमाईज़ करने की॰

43
00:01:20,970 --> 00:01:21,970
ग्रेडीयंट डिसेंट के लिए, मेरा अनुमान है 

44
00:01:22,480 --> 00:01:23,790
तकनीकी तौर पर आपको वास्तव में कोड की जरूरत नहीं है 

45
00:01:24,170 --> 00:01:26,520
कम्प्यूट करने के लिए कॉस्ट फ़ंक्शन जे ऑफ थीटा.

46
00:01:26,940 --> 00:01:28,980
आपको चाहिए कोड सिर्फ़ कम्प्यूट करने के लिए डेरिवेटिव टर्म्ज़.

47
00:01:29,740 --> 00:01:30,480
लेकिन अगर आप सोचते हो अपने  

48
00:01:30,590 --> 00:01:32,300
कोड को कन्वर्जेन्स मॉनिटर करते हुए भी 

49
00:01:33,000 --> 00:01:34,060
ऐसे किसी / कुछ की,

50
00:01:34,190 --> 00:01:35,440
हम केवल सोचेंगे अपने आप को  

51
00:01:35,530 --> 00:01:37,380
कोड प्रोवाईड करते (देते) हुए 

52
00:01:37,510 --> 00:01:38,530
कम्प्यूट करने के लिए दोनो  

53
00:01:38,890 --> 00:01:40,250
कॉस्ट फ़ंक्शन और डेरिवेटिव टर्म्ज़ को.

54
00:01:42,700 --> 00:01:44,130
अतः, कोड लिख चुकने के बाद 

55
00:01:44,280 --> 00:01:45,860
इन दोनो चीजों को कम्प्यूट करने के लिए, 

56
00:01:46,090 --> 00:01:47,820
एक अल्गोरिद्म जो हम प्रयोग कर सकते हैं वह है ग्रेडीयंट डिसेंट.

57
00:01:48,910 --> 00:01:51,590
लेकिन ग्रेडीयंट डिसेंट ही एक अल्गोरिद्म नहीं है जो हम प्रयोग कर सकते हैं. 

58
00:01:52,280 --> 00:01:53,690
और अन्य अल्गोरिद्म्स भी हैं, 

59
00:01:54,330 --> 00:01:55,930
ज़्यादा एडवांस्ड, ज़्यादा सोफिस्टीकेटिड (प्रगतिशील), 

60
00:01:56,720 --> 00:01:57,880
जिनको, अगर हम सिर्फ़ प्रोवाईड कर दें 

61
00:01:58,400 --> 00:01:59,520
एक वे / तरीक़ा कम्प्यूट करने का

62
00:01:59,960 --> 00:02:01,550
इन दोनों चीजों को, तब ये 

63
00:02:01,760 --> 00:02:03,040
अलग अलग पद्धतियाँ हैं ऑप्टिमायज़ करने की 

64
00:02:03,490 --> 00:02:04,790
कॉस्ट फ़ंक्शन को हमारे लिए.

65
00:02:05,110 --> 00:02:07,910
अत: कॉंजुगेट ग्रेडीयंट बीएफ़जीएस और 

66
00:02:08,110 --> 00:02:09,240
एल-बीएफ़जीएस उदाहरण हैं और अधिक 

67
00:02:09,460 --> 00:02:11,490
सोफिस्टीकेटिड ऑप्टिमायज़ेशन अल्गोरिद्म्स के जिन्हें 

68
00:02:11,640 --> 00:02:12,610
जरूरत होती है एक वे (तरीक़ा) की कम्प्यूट करने के लिए  

69
00:02:12,810 --> 00:02:13,670
जे ऑफ थीटा को, और चाहिए होता है एक वे  

70
00:02:13,750 --> 00:02:15,430
डेरिवेटिवज़ को कम्प्यूट करने के लिए, और 

71
00:02:15,670 --> 00:02:16,940
तब प्रयोग कर सकते हैं और अधिक सोफिस्टीकेटिड 

72
00:02:17,620 --> 00:02:19,880
स्ट्रेटिजीज / युक्तियों को ग्रेडीयंट डिसेंट के अलावा कॉस्ट फ़ंक्शन को न्यूनतम करने के लिए.

73
00:02:21,260 --> 00:02:22,560
वह विस्तृत जानकारी कि वास्तव में 

74
00:02:22,780 --> 00:02:25,920
क्या हैं ये तीन अल्गोरिद्म्स इस पाठ्यक्रम के विषय क्षेत्र से बाहर है.

75
00:02:26,490 --> 00:02:28,200
और असल में आप प्रायः 

76
00:02:28,650 --> 00:02:30,570
लगा चुकते हैं, आप जानते हैं, कई दिन,

77
00:02:31,060 --> 00:02:32,670
या कुछ सप्ताह इन अल्गोरिद्म्स के अध्ययन में.

78
00:02:33,240 --> 00:02:35,840
अगर आप एक क्लास लें और नूमेरिकल कम्प्यूटिंग एडवांस करें.

79
00:02:36,920 --> 00:02:38,200
परंतु मैं बताता हूँ आपको उनकी कुछ प्रॉपर्टीज़ के बारे में॰

80
00:02:40,080 --> 00:02:42,150
इन तीन अल्गोरिद्म्स की बहुत सी ऍडवेंटिजिज / लाभ हैं.

81
00:02:42,900 --> 00:02:44,070
एक है कि, इन में से किसी 

82
00:02:44,290 --> 00:02:45,850
अल्गोरिद्म्स के साथ आपको प्रायः 

83
00:02:46,000 --> 00:02:48,970
नहीं आवश्यकता है मैन्युअली पिक करने की लर्निंग रेट अल्फ़ा को.

84
00:02:50,670 --> 00:02:51,450
तो एक तरीक़ा सोचने का 

85
00:02:51,650 --> 00:02:53,630
इन अल्गोरिद्म्स के बारे में यह है कि दिया गया 

86
00:02:54,230 --> 00:02:56,900
है तरीक़ा कम्प्यूट करने का डेरिवेटिव और कॉस्ट फ़ंक्शन को.

87
00:02:57,320 --> 00:02:59,740
आप सोच सकते हैं इन अल्गोरिद्म्स को एक चतुर इंटर-लूप सहित. 

88
00:03:00,060 --> 00:03:00,680
और, वास्तव में, इनमें एक चतुर 

89
00:03:01,810 --> 00:03:03,780
इंटर-लूप है जिसे कहते हैं  

90
00:03:04,200 --> 00:03:05,840
लाइन सर्च अल्गोरिद्म जो ओटोमेटिकली / स्वतः  

91
00:03:06,520 --> 00:03:08,010
परीक्षण करता है  अलग अलग संख्याएँ 

92
00:03:08,080 --> 00:03:09,360
लर्निंग रेट अल्फ़ा के लिए और अपने आप 

93
00:03:10,010 --> 00:03:11,090
पिक करता है एक अच्छा लर्निंग रेट अल्फ़ा

94
00:03:12,030 --> 00:03:12,900
ताकि यह पिक भी कर सके 

95
00:03:13,130 --> 00:03:14,570
एक अलग लर्निंग रेट हर आइटरेशन के लिए.

96
00:03:15,490 --> 00:03:18,230
और तब आपको आवश्यकता नहीं ख़ुद उसको चुनने की.

97
00:03:21,430 --> 00:03:22,770
ये अल्गोरिद्म्स वास्तव में करते हैं 

98
00:03:22,910 --> 00:03:24,260
ज़्यादा प्रगतिशील चीज़ें बजाय सिर्फ़ 

99
00:03:24,470 --> 00:03:25,640
एक अच्छा लर्निंग रेट पिक करने के, और 

100
00:03:25,800 --> 00:03:27,300
इसलिए वे प्रायः एंड अप होते हैं 

101
00:03:27,490 --> 00:03:30,320
अधिक तेज़ी से कन्वर्ज होते हुए ग्रेडीयंट डिसेंट की तुलना में.

102
00:03:32,470 --> 00:03:33,740
ये अल्गोरिद्म्स वास्तव में करते हैं अधिक 

103
00:03:33,980 --> 00:03:35,160
प्रगतिशील चीज़ें बजाय सिर्फ़ 

104
00:03:35,360 --> 00:03:36,740
पिक करने के एक अच्छा लर्निंग रेट, और 

105
00:03:36,880 --> 00:03:38,770
इसलिए वे प्रायः एंड अप होते हैं 

106
00:03:39,020 --> 00:03:40,840
अधिक तेज़ी से कन्वर्ज होते हुए ग्रेडीयंट डिसेंट की तुलना में, परंतु 

107
00:03:41,040 --> 00:03:42,230
विस्तृत चर्चा कि वास्तव में

108
00:03:42,710 --> 00:03:44,420
वे क्या करते हैं  इस पाठ्य क्रम के विषय क्षेत्र से बाहर है.

109
00:03:45,580 --> 00:03:47,060
वास्तव में, मैं वास्तव में  

110
00:03:47,570 --> 00:03:49,020
प्रयोग किया करता था इन अल्गोरिद्म्स का 

111
00:03:49,170 --> 00:03:50,170
एक लम्बे समय से, शायद 

112
00:03:50,470 --> 00:03:53,070
एक दशक से ज़्यादा, अक्सर, और यह 

113
00:03:53,290 --> 00:03:54,410
सिर्फ़, आप जानते हैं, 

114
00:03:54,510 --> 00:03:55,460
कुछ ही साल पहले था कि मैं वास्तव में 

115
00:03:56,150 --> 00:03:57,200
समझ पाया अपने लिए विस्तार से कि 

116
00:03:57,780 --> 00:04:00,220
क्या करते हैं कॉंजुगेट ग्रेडीयंट, बीएफ़जीएस और ओ-बीएफ़जीएस.

117
00:04:00,980 --> 00:04:02,740
अत: यह वास्तव में पूरी तरह सम्भव है 

118
00:04:03,560 --> 00:04:05,380
इन अल्गोरिद्म्स का सफलता पूर्वक प्रयोग करना और 

119
00:04:05,480 --> 00:04:06,530
उनका इस्तेमाल करना विभिन्न लर्निंग

120
00:04:06,780 --> 00:04:08,490
समस्याओं में बिना पूरी तरह समझे 

121
00:04:09,460 --> 00:04:11,140
इंटर-लूप को उसके जो ये अल्गोरिद्म्स करती हैं॰

122
00:04:12,270 --> 00:04:13,630
अगर इन अल्गोरिद्म्स में एक डिसएडवेंटेज / अलाभ है, 

123
00:04:14,200 --> 00:04:15,350
मैं कहूँगा कि प्रमुख 

124
00:04:15,610 --> 00:04:16,970
अलाभ है कि ये 

125
00:04:17,110 --> 00:04:19,390
काफ़ी पेचीदा हैं ग्रेडीयंट डिसेंट की तुलना मैं.

126
00:04:20,180 --> 00:04:21,700
और विशेषत:, आपको शायद 

127
00:04:21,970 --> 00:04:23,290
इम्प्लमेंट नहीं करना चाहिए इन अल्गोरिद्म्स को  

128
00:04:23,850 --> 00:04:26,060
- कॉंजुगेट ग्रेडीयंट, एल-बीजीएफ़एस, बीएफ़जीएस-

129
00:04:26,360 --> 00:04:29,520
अपने आप जब तक आप निपुण नहीं हो जाते नूमेरिकल कम्प्यूटिंग में. 

130
00:04:30,720 --> 00:04:32,320
उसके स्थान पर, जैसे मैं 

131
00:04:32,420 --> 00:04:33,640
रेकमेंड नहीं करूँगा कि आप लिखें 

132
00:04:33,850 --> 00:04:35,240
आपका अपना कोड कम्प्यूट करने के लिए स्क्वेर 

133
00:04:35,590 --> 00:04:36,660
रूट संख्याओं का या 

134
00:04:36,770 --> 00:04:39,010
कम्प्यूट करना मेट्रिसीज़ के इन्वर्स का, 

135
00:04:39,140 --> 00:04:40,600
इन अल्गोरिद्म्स के लिए भी मैं 

136
00:04:40,710 --> 00:04:42,530
रेकमेंड करूँगा कि आप केवल एक सॉफ़्ट्वेर लाइब्रेरी का प्रयोग करें.

137
00:04:43,030 --> 00:04:43,770
तो, आप जानते हैं, लेने के लिए स्क्वेर 

138
00:04:44,120 --> 00:04:44,940
रूट क्या करते हैं हम सब 

139
00:04:45,150 --> 00:04:46,440
वह है कि कोई फ़ंक्शन का प्रयोग करते हैं 

140
00:04:47,080 --> 00:04:48,310
जो किसी और ने 

141
00:04:48,530 --> 00:04:50,200
लिखा है कम्प्यूट करने के लिए स्क्वेर रूट हमारी संख्याओं का.

142
00:04:51,330 --> 00:04:53,530
और सौभाग्य से, ओकटेव और 

143
00:04:53,760 --> 00:04:55,070
और उससे नजदीकी संबन्धित लैंग्विज मैटलैब 

144
00:04:55,430 --> 00:04:57,110
- जिसका हम प्रयोग करेंगे - 

145
00:04:57,140 --> 00:04:58,370
ओकटेव में काफ़ी अच्छी और सम्पन्न 

146
00:04:58,530 --> 00:05:02,410
लाइब्रेरी है जिसमें इम्प्लमेंट किए है इनमें से कुछ एडवांस्ड ऑप्टिमायज़ेशन अल्गोरिद्म्स.

147
00:05:03,380 --> 00:05:04,350
और इसलिए यदि आप सिर्फ़ इस्तेमाल करें 

148
00:05:04,600 --> 00:05:06,800
बिल्ट- इन लाइब्रेरी, आप जानते हैं, आपको काफ़ी अच्छे परिणाम मिलते हैं. 

149
00:05:08,010 --> 00:05:08,880
मैं तो कहूँगा कि 

150
00:05:09,370 --> 00:05:10,880
एक अंतर होता है अच्छे 

151
00:05:11,230 --> 00:05:12,740
और बुरे इम्प्लमेंटेशन में इन अल्गोरिद्म्स के.  

152
00:05:13,690 --> 00:05:15,010
और इसलिए, अगर आप प्रयोग कर रहे है एक 

153
00:05:15,120 --> 00:05:16,270
अलग लैंग्विज आपकी मशीन 

154
00:05:16,470 --> 00:05:17,560
लर्निंग ऐप्लिकेशन के लिए, अगर आप प्रयोग कर रहे हैं 

155
00:05:18,190 --> 00:05:20,090
सी, सी प्लस प्लस, जावा, और 

156
00:05:20,250 --> 00:05:24,060
इत्यादि, आप 

157
00:05:24,210 --> 00:05:24,710
ट्राइ करना चाहेंगे कुछ 

158
00:05:24,730 --> 00:05:25,660
अलग लाइब्रेरीज़ को यह सुनिश्चित करने के लिए कि आपको मिल सके एक 

159
00:05:25,740 --> 00:05:27,790
अच्छी लाइब्रेरी इन अल्गोरिद्म्स को इम्प्लमेंट करने के लिए.

160
00:05:28,250 --> 00:05:29,410
क्योंकि अंतर होता है 

161
00:05:29,480 --> 00:05:30,740
कार्य क्षमता में एक अच्छी इम्प्लमेंटेशन की,

162
00:05:31,680 --> 00:05:33,150
आप जानते हैं, कांटुर ग्रेडीयंट की या 

163
00:05:33,530 --> 00:05:35,150
एलपीएफ़जीएस के मुक़ाबले में एक कम अच्छी 

164
00:05:35,350 --> 00:05:37,680
इम्प्लमेंटेशन कांटुर ग्रेडीयंट या एलपीएफ़जीएस की.

165
00:05:43,060 --> 00:05:44,310
तो चलो अब मैं समझाता हूँ कि कैसे 

166
00:05:44,580 --> 00:05:47,080
प्रयोग करते हैं इन अल्गोरिद्म्स का, मैं ऐसा एक उदाहरण के साथ करूँगा.

167
00:05:48,970 --> 00:05:50,220
मान लेते हैं कि आप के पास एक 

168
00:05:50,370 --> 00:05:51,620
प्रॉब्लम है दो पेरामीटर्स

169
00:05:53,380 --> 00:05:55,580
इकुअल्ज़ थीटा ज़ीरो और थीटा वन.

170
00:05:56,410 --> 00:05:57,450
और मान लेते हैं कि आपका कॉस्ट फ़ंक्शन है 

171
00:05:57,970 --> 00:05:59,210
जे ऑफ़ थीटा इकुअल्ज़ थीटा 

172
00:05:59,430 --> 00:06:01,540
वन माइनस फ़ाइव स्क्वेर्ड, प्लस थीटा टू माइनस फ़ाइव स्क्वेर्ड.

173
00:06:02,630 --> 00:06:04,080
तो इस कॉस्ट फ़ंक्शन के साथ.

174
00:06:04,590 --> 00:06:06,960
आप जानते है वैल्यू थीटा 1 और थीटा 2 की.

175
00:06:07,080 --> 00:06:09,590
अगर आप न्यूनतम करना चाहते हैं जे ऑफ़ थीटा को एज़ ए फ़ंक्शन ऑफ थीटा.

176
00:06:09,940 --> 00:06:10,910
वैल्यू जो इसे न्यूनतम करती है 

177
00:06:11,030 --> 00:06:12,040
वह होगी थीटा 1 

178
00:06:12,420 --> 00:06:14,220
इकुअल्ज़ 5, थीटा 2 इकुअल्ज़ पाँच.

179
00:06:15,230 --> 00:06:16,620
अब, फिर से, मैं जानता हूँ कि  

180
00:06:16,950 --> 00:06:18,320
आप में से कुछ दूसरों से ज़्यादा कैल्क्युलुस जानते हैं, 

181
00:06:19,010 --> 00:06:20,770
लेकिन डेरिवेटिव 

182
00:06:20,850 --> 00:06:23,420
कॉस्ट फ़ंक्शन जे का आता है ये दो इक्स्प्रेशंज़.

183
00:06:24,270 --> 00:06:25,060
मैंने कैल्क्युलुस किया है.

184
00:06:26,260 --> 00:06:27,250
इसलिए अगर आप अप्लाई करना चाहते हैं 

185
00:06:27,480 --> 00:06:29,220
एडवांस्ड ऑप्टिमायज़ेशन अल्गोरिद्म में से कोई एक 

186
00:06:29,810 --> 00:06:31,380
कॉस्ट फ़ंक्शन जे को मिनिमाईज़ करने के लिए.

187
00:06:31,660 --> 00:06:32,630
तो, आप जानते हैं, अगर हमें 

188
00:06:32,880 --> 00:06:34,680
नहीं पता कि न्यूनतम वैल्यू 

189
00:06:34,780 --> 00:06:36,140
5,5 पर है, लेकिन अगर आप चाहते हैं लेना 

190
00:06:36,240 --> 00:06:37,550
कॉस्ट फ़ंक्शन को न्यूनतम जानना  

191
00:06:37,970 --> 00:06:39,840
नूमेरिक्ली प्रयोग करके कुछ

192
00:06:40,040 --> 00:06:41,560
ऐसा जैसे ग्रेडीयंट डिसेंट लेकिन प्रेफर करते हुए 

193
00:06:41,730 --> 00:06:43,430
अधिक एड्वान्सड ग्रेडीयंट डिसेंट के मुक़ाबले, क्या 

194
00:06:43,550 --> 00:06:45,010
करेंगे आप कि इम्प्लमेंट करें एक ओकटेव 

195
00:06:45,570 --> 00:06:46,690
फ़ंक्शन इस तरह, तो हम 

196
00:06:46,860 --> 00:06:48,190
इम्प्लमेंट करते हैं एक कॉस्ट फ़ंक्शन,

197
00:06:49,210 --> 00:06:51,180
कॉस्ट फ़ंक्शन थीटा, फ़ंक्शन ऐसे,

198
00:06:52,180 --> 00:06:53,250
और यह करता है कि यह 

199
00:06:53,380 --> 00:06:55,660
रिटर्न करता है दो अरगुमेंट्स, 

200
00:06:55,760 --> 00:06:57,780
पहली जे-वैल, है ऐसे 

201
00:06:58,910 --> 00:07:00,020
जैसे हम कम्प्यूट करेंगे कॉस्ट फ़ंक्शन 

202
00:07:00,680 --> 00:07:01,780
जे. और यह बताता है जे-वैल 

203
00:07:02,080 --> 00:07:03,210
बराबर है, आप जानते है, थीटा 

204
00:07:03,440 --> 00:07:04,630
वन माइनस फ़ाइव स्क्वेर्ड, प्लस थीटा 

205
00:07:05,330 --> 00:07:06,230
टू माइनस फ़ाइव स्क्वेर्ड.

206
00:07:06,540 --> 00:07:09,140
तो यह केवल कम्प्यूट कर रहा है इस कॉस्ट फ़ंक्शन को यहाँ.

207
00:07:10,540 --> 00:07:12,040
और दूसरा आर्ग्युमेंट जो 

208
00:07:12,260 --> 00:07:14,190
यह फ़ंक्शन रिटर्न करता है वह है ग्रेडीयंट.

209
00:07:14,840 --> 00:07:16,030
तो ग्रेडीयंट होगा 

210
00:07:16,160 --> 00:07:17,320
एक दो बाई एक वेक्टर,

211
00:07:18,870 --> 00:07:20,050
और दो एलिमेंटस 

212
00:07:20,120 --> 00:07:22,100
ग्रेडीयंट वेक्टर के कोरेस्पोंड करते हैं 

213
00:07:22,800 --> 00:07:24,670
दो पार्शल डेरिवेटिव टर्म्ज़ से यहाँ पर.

214
00:07:27,150 --> 00:07:28,570
इस कॉस्ट फ़ंक्शन को इम्प्लमेंट करने के बाद,

215
00:07:29,580 --> 00:07:30,390
आप, आप तब   

216
00:07:31,510 --> 00:07:33,010
कॉल कर सकते हैं एडवांस्ड ऑप्टिमायज़ेशन

217
00:07:34,270 --> 00:07:35,720
फ़ंक्शन जिसे कहते हैं एफमिनअंक 

218
00:07:35,950 --> 00:07:36,900
- जिसका मतलब है फ़ंक्शन 

219
00:07:37,610 --> 00:07:39,360
मिनीमाईजेशन अनकन्स्ट्रेंड इन ओकटेव 

220
00:07:40,300 --> 00:07:41,520
- और जैसे उसे कॉल करते हैं वह इस प्रकार है. 

221
00:07:41,790 --> 00:07:42,350
आप कुछ ऑप्शंज़ सेट करते हैं.

222
00:07:43,230 --> 00:07:43,580
यह एक ऑप्शंज़ 

223
00:07:44,330 --> 00:07:46,680
डेटा स्ट्रक्चर की तरह है जो स्टोर करता है ऑप्शंज़ को जो आप चाहते हैं॰

224
00:07:47,320 --> 00:07:48,960
तो ग्रैंट अप ऑन,

225
00:07:49,160 --> 00:07:52,100
यह सेट करता है ग्रेडीयंट अब्जेक्टिव पैरामीटर को ऑन पर॰

226
00:07:52,270 --> 00:07:55,180
इसका सिर्फ मतलब है कि आप वाक़ई में देने वाले है एक ग्रेडीयंट इस अल्गोरिद्म को.

227
00:07:56,150 --> 00:07:57,550
मैं सेट करने जा रहा हूँ अधिकतम संख्या 

228
00:07:57,840 --> 00:07:59,280
आइटरेशंस की, मान लीजिए, एक सौ.

229
00:07:59,580 --> 00:08:02,230
हम देंगे इसे इनिशियल गैस्स थीटा के लिए.

230
00:08:02,720 --> 00:08:03,680
यह एक 2 बाई 1 वेक्टर है.

231
00:08:04,440 --> 00:08:06,860
और फिर यह कमांड कॉल करती है एफमिनअंक को. 

232
00:08:07,530 --> 00:08:10,290
यह @ चिन्ह देता है 

233
00:08:10,420 --> 00:08:11,810
पोईंटर कॉस्ट फ़ंक्शन को

234
00:08:13,010 --> 00:08:14,320
जो हमने वहाँ ऊपर परिभाषित किया था.

235
00:08:15,060 --> 00:08:16,020
और अगर आप इसे कॉल करते हैं,

236
00:08:16,270 --> 00:08:18,290
यह कम्प्यूट करेगा, आप जानते हैं, प्रयोग करेगा 

237
00:08:18,620 --> 00:08:20,490
अधिक एडवांस्ड ऑप्टिमायज़ेशन अल्गोरिद्म में से कोई एक. 

238
00:08:21,110 --> 00:08:23,350
और अगर आप सोचना चाहते हैं इसे ग्रेडीयंट डिसेंट जैसा ही.

239
00:08:23,690 --> 00:08:25,170
लेकिन अपने आप चुनता है लर्निंग 

240
00:08:25,500 --> 00:08:27,290
रेट अल्फ़ा आपके लिए ताकि आपको वह न करना पड़े अपने आप,  

241
00:08:28,210 --> 00:08:29,880
लेकिन तब यह कोशिश करेगा

242
00:08:30,160 --> 00:08:32,000
प्रयोग करने की इस प्रकार के एडवांस्ड ऑप्टिमायज़ेशन अल्गोरिद्म्स.

243
00:08:32,640 --> 00:08:33,770
जैसे ग्रेडीयंट डिसेंट स्टेरॉड्ज़ पर.

244
00:08:34,400 --> 00:08:36,490
ढूँढने के लिए थीटा की ओप्टिमल वैल्यू आपके लिए.

245
00:08:37,180 --> 00:08:39,040
चलिए मैं आपको वास्तव में दिखाता हूँ यह कैसा दिखता है ओकटेव में.

246
00:08:40,690 --> 00:08:42,460
तो मैंने लिखा है यह कॉस्ट फ़ंक्शन 

247
00:08:42,900 --> 00:08:46,440
थीटा फ़ंक्शन का बिलकुल वैसे जैसे पिछली लाइन में था.

248
00:08:46,650 --> 00:08:49,070
यह कम्प्यूट करता है जे-वैल जो कॉस्ट फ़ंक्शन है.

249
00:08:49,920 --> 00:08:51,810
और यह कम्प्यूट करता है ग्रेडीयंट जिसमें 

250
00:08:52,040 --> 00:08:53,050
दो एलिमेंट हैं पार्शल 

251
00:08:53,450 --> 00:08:54,430
डेरिवेटिव कॉस्ट फ़ंक्शन के 

252
00:08:55,220 --> 00:08:56,200
जो हैं संदर्भ में, आप जानते हैं,

253
00:08:56,360 --> 00:08:57,910
दो पेरामिटर्स के, थीटा वन और थीटा टू.

254
00:08:59,040 --> 00:09:00,360
अब चलिए जाते हैं मेरी ओकटेव विंडो पर.

255
00:09:00,710 --> 00:09:02,900
मैं वे कमांड्ज़ टाइप करता हूँ जो अभी मेरे पास थीं.

256
00:09:03,470 --> 00:09:05,850
तो, ऑप्शंज़ इकूअल्ज़ ओप्टिमसेट. यह है 

257
00:09:06,630 --> 00:09:08,510
नोटेशन सेट करने के लिए मेरे 

258
00:09:09,670 --> 00:09:11,190
पेरमिटर्स मेरी ऑप्शंज़ पर,

259
00:09:11,710 --> 00:09:13,850
मेरे ऑप्टिमायज़ेशन अल्गोरिद्म के लिए. ग्रैंट आप्शन ऑन, मैक्सआइटर , 100

260
00:09:14,130 --> 00:09:17,600
तो इसका मतलब है 100 

261
00:09:18,310 --> 00:09:19,610
आइटरेशंस, और मैं 

262
00:09:19,730 --> 00:09:22,090
देने जा रहा हूँ ग्रेडीयंट मेरे अल्गोरिद्म को.

263
00:09:23,490 --> 00:09:27,190
मान लेते हैं कि ईनिशीयल थीटा बराबर है ज़ीरोज़, दो बाई एक.

264
00:09:27,980 --> 00:09:29,280
तो वह मेरा शुरू का गैस्स है थीटा के लिए.

265
00:09:30,500 --> 00:09:31,390
और अब मेरे पास है थीटा का 

266
00:09:32,620 --> 00:09:35,100
फ़ंक्शन वैल एग्ज़िट फ़्लैग 

267
00:09:37,610 --> 00:09:39,430
इकुअल्ज़ एफमिनअंक कन्स्ट्रेंट.

268
00:09:40,570 --> 00:09:41,600
एक पोईंटर कॉस्ट फ़ंक्शन को.

269
00:09:43,010 --> 00:09:44,700
और देता हूँ मेरा ईनिशीयल ग़ैस्स.

270
00:09:46,090 --> 00:09:49,060
और ऑप्शंज़ भी वैसे ही.

271
00:09:49,820 --> 00:09:52,760
और यदि मैं एंटर बटन दबाता हूँ यह रन करेगा ऑप्टिमायज़ेशन अल्गोरिद्म .

272
00:09:53,940 --> 00:09:54,810
और यह काफ़ी जल्दी रिटर्न करता है.

273
00:09:55,790 --> 00:09:57,040
यह हास्यमय फ़ॉर्मैटिंग है वह इसलिए क्योंकि 

274
00:09:57,430 --> 00:09:58,430
मेरी लाइन, आप जानते हैं, मेरा 

275
00:09:59,700 --> 00:10:00,290
कोड रैप अराउंड / दोहरा हो गया.

276
00:10:00,680 --> 00:10:02,540
अतः, यह हास्यमय चीज़ 

277
00:10:02,760 --> 00:10:04,890
केवल इसलिए है क्योंकि मेरी कमांड लाइन दोहरी हो गई थी.

278
00:10:05,490 --> 00:10:06,290
परंतु यह क्या कहता है कि यह 

279
00:10:06,550 --> 00:10:08,500
नूमेरिक्ली रेंडर / बनाता है, आप जानते हैं, सोचें 

280
00:10:08,670 --> 00:10:10,400
इसे ग्रेडीयंट डिसेंट की तरह 

281
00:10:10,440 --> 00:10:11,620
स्टेरॉड्ज़ पर, उन्हें मिली ओप्टिमल वैल्यू 

282
00:10:11,760 --> 00:10:13,150
एक थीटा की थीटा 1 

283
00:10:13,400 --> 00:10:15,670
बराबर है 5, थीटा 2 बराबर है पाँच, बिलकुल वैसा जैसा हम उम्मीद कर रहे थे.

284
00:10:16,520 --> 00:10:18,760
फ़ंक्शन की वैल्यू 

285
00:10:18,840 --> 00:10:21,430
ओप्टिमम पर है दर असल 10 की पावर माइनस 30.

286
00:10:21,670 --> 00:10:23,160
तो वह वास्तव में शून्य है, जिसकी 

287
00:10:23,370 --> 00:10:24,760
भी हम उम्मीद कर रहे थे.

288
00:10:24,840 --> 00:10:27,060
और एग्ज़िट फ़्लैग है 

289
00:10:27,240 --> 00:10:29,080
1, और यह बताता है 

290
00:10:29,730 --> 00:10:31,400
कि इसका कन्वर्जेन्स स्टेटस क्या है.

291
00:10:31,800 --> 00:10:33,010
और अगर आप चाहें तो आप कर सकते हैं

292
00:10:33,150 --> 00:10:35,020
सहायता एफमिनअंक की 

293
00:10:35,130 --> 00:10:36,480
डॉक्युमेंटेशन पढ़ने में कि कैसे 

294
00:10:36,680 --> 00:10:38,650
मतलब निकालना है एग्ज़िट फ़्लैग का.

295
00:10:38,760 --> 00:10:41,600
लेकिन एग्ज़िट फ़्लैग आपको  करने देता है वेरिफ़ाई / सुनिश्चित कि यह अल्गोरिद्म कन्वर्ज हुआ है या नहीं॰

296
00:10:43,960 --> 00:10:46,450
तो ऐसे आप रन करते हैं ये अल्गोरिद्म्स ओकटेव में.

297
00:10:47,480 --> 00:10:48,920
मुझे बताना चाहिए, वैसे तो, 

298
00:10:48,940 --> 00:10:51,020
कि ओकटेव इम्प्लमेंटेशन के लिए, यह वैल्यू 

299
00:10:51,640 --> 00:10:53,010
थीटा की, आपका पेरामिटर वेक्टर 

300
00:10:53,370 --> 00:10:54,940
थीटा का, होना चाहिए 

301
00:10:55,280 --> 00:10:58,210
आरडी में जहाँ डी बड़ा है या बराबर है 2 के.

302
00:10:58,450 --> 00:11:00,330
तो यदि थीटा सिर्फ़ रियल नम्बर है.

303
00:11:00,770 --> 00:11:02,040
अत:, यदि यह नहीं है कम से कम 

304
00:11:02,160 --> 00:11:03,160
दो डिमेन्शन का वेक्टर 

305
00:11:03,800 --> 00:11:04,860
या कोई दो डिमेन्शन से बड़ा 

306
00:11:05,160 --> 00:11:06,840
वेक्टर, यह एफमिनअंक 

307
00:11:07,560 --> 00:11:08,760
शायद काम न करे, इसलिए और यदि 

308
00:11:09,140 --> 00:11:10,310
आपके पास है 

309
00:11:10,590 --> 00:11:11,590
एक एक डिमेन्शन का फ़ंक्शन जो आप प्रयोग करते हैं 

310
00:11:11,830 --> 00:11:12,930
ऑप्टिमायज़ करने के लिए, आप देख सकते हैं 

311
00:11:13,100 --> 00:11:14,680
ओकटेव डॉक्युमेंटेशन में एफमिनअंक की 

312
00:11:14,950 --> 00:11:16,230
अधिक जानकारी के लिए.

313
00:11:18,230 --> 00:11:19,360
तो इस प्रकार हम ऑप्टिमायज़ करते हैं 

314
00:11:19,620 --> 00:11:21,640
हमारा आज़माइश का उदाहरण है जो है 

315
00:11:22,190 --> 00:11:23,810
सरल तुरंत ड्राइविंग कॉस्ट फ़ंक्शन.

316
00:11:24,440 --> 00:11:26,520
हालाँकि, हम इसे अप्लाई करते है लजिस्टिक रेग्रेशन के लिए.

317
00:11:27,720 --> 00:11:29,270
लजिस्टिक रिग्रेशन में हमारे पास है  

318
00:11:29,520 --> 00:11:31,290
एक पेरामिटर वेक्टर थीटा, और 

319
00:11:31,430 --> 00:11:32,210
मैं प्रयोग करूँगा एक मिली जुली 

320
00:11:32,620 --> 00:11:34,880
ओकटेव की नोटेशन तथा एक प्रकार से गणित की नोटेशन.

321
00:11:35,300 --> 00:11:36,400
लेकिन मैं आशा करता हूँ कि यह व्याख्या 

322
00:11:36,870 --> 00:11:38,050
समझ आएगी, लेकिन हमारा पेरामिटर  

323
00:11:38,520 --> 00:11:40,360
वेक्टर थीटा बना है इन 

324
00:11:40,540 --> 00:11:41,780
पेरामिटर्स थीटा 0 से थीटा 

325
00:11:42,210 --> 00:11:44,230
एन तक क्योँकि ऑक्टेव के इंडेक्सेस, 

326
00:11:46,090 --> 00:11:48,040
वेक्टर्स प्रयोग करते हैं इन्डेक्सेस 

327
00:11:48,460 --> 00:11:49,640
1 से, आप जानते हैं, थीटा 0 

328
00:11:49,710 --> 00:11:51,190
वास्तव में लिखा जाता है थीटा 1 

329
00:11:51,330 --> 00:11:53,290
ऑक्टेव में, थीटा 1  लिखा जाएगा 

330
00:11:53,930 --> 00:11:54,690
थीटा 2  की तरह ऑक्टेव में 

331
00:11:55,280 --> 00:11:56,180
और थीटा एन लिखा जाएगा 

332
00:11:56,780 --> 00:11:58,430
थीटा एन प्लस 1, सही है?

333
00:11:58,610 --> 00:12:00,650
और वह इसलिए क्योँकि ऑक्टेव के इन्डेक्सेस 

334
00:12:01,320 --> 00:12:03,070
वेक्टर्स में शुरू होते हैं इंडेक्स 

335
00:12:03,430 --> 00:12:05,200
1 से बजाय इंडेक्स 0 से. 

336
00:12:06,920 --> 00:12:07,950
तो हमें क्या चाहिए 

337
00:12:08,160 --> 00:12:09,670
करना कि लिखें एक 

338
00:12:09,880 --> 00:12:12,070
कॉस्ट फंक्शन जो कैप्चर करता है

339
00:12:12,710 --> 00:12:14,210
कॉस्ट फंक्शन लॉजिस्टिक रिग्रेशन के लिए. 

340
00:12:15,170 --> 00:12:16,450
वस्तुत:, कॉस्ट फंक्शन को

341
00:12:16,880 --> 00:12:18,310
रिटर्न करना चाहिए जे -वैल, जो है, आप जानते हैं, जे- वैल 

342
00:12:18,940 --> 00:12:20,430
ऐसा जो आपको चाहिए कुछ कोड 

343
00:12:20,640 --> 00:12:22,440
थीटा के जे को कम्प्यूट करने के लिए और 

344
00:12:22,710 --> 00:12:24,010
हमें इसे देना पड़ेगा ग्रेडिएंट भी. 

345
00:12:24,540 --> 00:12:25,460
अत:, ग्रेडिएंट 1 होगा 

346
00:12:25,920 --> 00:12:27,080
कुछ कोड कंप्यूट करने के लिए 

347
00:12:27,280 --> 00:12:29,100
पार्शियल डेरिवेटिव इन रेस्पेक्ट टू 

348
00:12:29,390 --> 00:12:31,250
थीटा 0, अगला पार्शियल 

349
00:12:31,600 --> 00:12:34,300
डेरिवेटिव रेस्पेक्ट टू थीटा 1 और इसी प्रकार आगे  भी. 

350
00:12:34,770 --> 00:12:36,260
एक बार फिर, यह है ग्रेडिएंट 

351
00:12:37,500 --> 00:12:38,390
1, ग्रेडिएंट 2, और इसी 

352
00:12:39,030 --> 00:12:40,330
प्रकार आगे, बजाय ग्रेडिएंट 0, ग्रेडिएंट 

353
00:12:40,500 --> 00:12:42,730
1, क्योँकि ऑक्टेव के इन्डेक्सेस 

354
00:12:43,460 --> 00:12:46,200
वेक्टर्स में शुरू होते हैं एक से बजाय जीरो के. 

355
00:12:47,440 --> 00:12:48,460
लेकिन मूल सिद्धांत मैं आशा करता हूँ 

356
00:12:48,690 --> 00:12:49,540
जो आपको इस स्लाइड से लेना चाहिए 

357
00:12:49,900 --> 00:12:50,870
वह है, आपको क्या करने की आवश्यकता है,

358
00:12:51,070 --> 00:12:54,370
कि एक फंक्शन लिखें जो रिटर्न करता है 

359
00:12:55,500 --> 00:12:56,930
कॉस्ट फंक्शन और रिटर्न करता है ग्रेडिएंट. 

360
00:12:58,410 --> 00:12:59,750
और इसलिए यह

361
00:12:59,960 --> 00:13:01,410
लॉजिस्टिक रिग्रेशन में अप्लाई करने के लिए 

362
00:13:02,100 --> 00:13:03,430
या यहाँ तक कि लीनियर रिग्रेशन को भी, यदि 

363
00:13:03,560 --> 00:13:06,230
आप प्रयोग करना चाहते हैं ये ऑप्टिमाइजेशन अल्गोरिद्म्स लीनियर रिग्रेशन के लिए 

364
00:13:07,340 --> 00:13:08,350
आपको क्या करना है कि प्लग इन करना है 

365
00:13:08,500 --> 00:13:09,960
उचित कोड कंप्यूट करने के लिए 

366
00:13:10,820 --> 00:13:12,280
ये चीजें यहाँ पर. 

367
00:13:15,100 --> 00:13:17,910
तो, अब आप जानते हैं कि कैसे प्रयोग करने हैं ये एडवांस्ड ऑप्टिमाइजेशन 

368
00:13:19,030 --> 00:13:21,170
क्योँकि, प्रयोग करने के लिए 

369
00:13:21,320 --> 00:13:22,660
ये अल्गोरिद्म्स, आप प्रयोग कर रहे हैं एक 

370
00:13:22,870 --> 00:13:25,190
प्रगतिशील ऑप्टिमाइजेशन लाइब्रेरी, यह बनाता है 

371
00:13:25,690 --> 00:13:26,710
केवल थोड़ा सा 

372
00:13:26,940 --> 00:13:28,510
ज्यादा अपारदर्शक और इसलिए 

373
00:13:28,740 --> 00:13:30,390
सिर्फ थोड़ा ज्यादा कठिन डिबग करना. 

374
00:13:31,290 --> 00:13:32,660
लेकिन क्योँकि ये अल्गोरिद्म्स प्राय:

375
00:13:33,010 --> 00:13:34,370
काफी तेज रन करते हैं ग्रेडिएंट डिसेंट की तुलना में, 

376
00:13:35,010 --> 00:13:36,760
प्राय: विशिष्ट रूप से जब जब 

377
00:13:37,060 --> 00:13:38,180
मेरे पास एक बड़ी मशीन लर्निंग 

378
00:13:38,410 --> 00:13:39,500
प्रॉब्लम होती है, मैं प्रयोग करता हूँ 

379
00:13:39,760 --> 00:13:42,110
ये अल्गोरिद्म्स  बजाय ग्रेडिएंट डिसेंट प्रयोग करने के. 

380
00:13:43,900 --> 00:13:45,070
और इन सुझावोँ के साथ, उम्मीद है

381
00:13:45,450 --> 00:13:46,710
आप कर पाएंगे लॉजिस्टिक रिग्रेशन 

382
00:13:47,350 --> 00:13:48,780
और लीनियर रिग्रेशन भी 

383
00:13:49,100 --> 00:13:51,410
बड़ी प्रोब्लेम्स पर. 

384
00:13:51,830 --> 00:13:53,820
तो यह है एडवांस्ड ऑप्टिमाइजेशन के सिद्धांत. 

385
00:13:55,120 --> 00:13:56,170
और अगले और

386
00:13:56,320 --> 00:13:57,720
अंतिम विडियो में लॉजिस्टिक रिग्रेशन पर 

387
00:13:58,550 --> 00:13:59,470
मैं आपको बताना चाहूंगा कि कैसे 

388
00:13:59,600 --> 00:14:00,990
ले कर जाना है लॉजिस्टिक रिग्रेशन को 

389
00:14:01,520 --> 00:14:02,790
जो आप पहले से जानते हैं और 

390
00:14:02,990 --> 00:14:05,420
उसे काम कराना है मल्टी-क्लास क्लासिफिकेशन प्रॉब्लम पर.