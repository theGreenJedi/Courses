Қазір бізде тапсырмалар мен тізбектер бар,
Бұл жердегі негізгі мәселе біз үрдісті тоқтатпақшымыз, сөйтіп оны 
қиындатпақшымыз. Біздің функционалды негіздеріміз
жеткілікті дәрежеде ұзын болады, сонымен қатар бізге ағылшын тілінде
кейбір түсіндірмелер қажет. дауыс_үсті функциясы бізге 
алдыңғы  дәрістен белгілі. Біз оған екі түсіндірме қостық. Түсіндірме бірнеше нысандардан
басталады. Олар әдетте үнсіз нысандар деп те аталады. Жол аяқталғаншы осы нысандар беріледі.
Пайсон бұл нысандарды елемейді. Олардың негізгі мақсаты кодты құжаттау,
 құжат функциясындағы құжат жолдары сияқты. Біріншісі функцияда қолданылған
өзгермелерді сипаттайды. Бұл екеуі бір бірімен 
s және i дыбыстары алдында қалай қосылатындығын байқаңыздар. Бұның не екендігін білуге тырысып көрейік. Біз мұны zymurgy сөзін қолдану арқылы зерттеп көреміз, Оның көрсеткіштері
Нөл, бір, екі, үш, төрт, бес және алты.. Енді біздің көріп тұрғанымыздай екіншісі Менің өтпелі жолыма енгізілмеген, сондықтан
Бұл нөлдік индекстің жетілік индекске өсуін білдіреді . нөлден жетіге көтерілу деген не? Бұл zymurg. Ал нөлден беске дейін zymur.
S нөлден төртке дейін zymu.
S нөлден үшке дейін zym.
S нөлден екіге дейін zy. S нөлден бірге дейін z.
Нөлден нөлге дейін айырмашылық жоқ десе де болады. нөлден нөлге дейін кезекті
кемі үлгісі болып табылады. Бірден бастаған ұзындығы бос жолды береді. Енді біз бос жолда дауысты дыбыс алдынан бастадық, бос жолда мен нөлдік көрсеткіштен бастадым.
Егер біз нөлді [ДАУЫССЫЗ]. Біз осы амалды аяқтаймыз, S нысанын
нөлден нөлге жылжытамыз. Және нөлден шыққан  S нөл арқылы бос жолды құрайды, әрине, дауысты дыбыс S нысанындағы барлық нысандардан тұрады нөлден нөл арқылы және дауысты дыбыстың алдында бос жол тұрады. Бос жолды құрастырған  қарапайым жүктеу мәннің алдында  және нөлді i таңбасына алмастырдық. Бұл сипаттамалар дұрыс болып есептелінеді. Содан кейін тізбек бойымен нөлдік көрсеткішке s таңбасын қойдық.
ол дауысты дыбыстың алдына қойылады.
Қазір дауысты дыбыс алдында Z таңбасы қойылады. I нөлдік болатын, кейін i қосу 1,
1 болып есептелінеді , i таңбасынан
1 шығады. Біз енді  i таңбасы 1-ге тең кезге жеттік.
Бұл сипаттама әлі уақытқа дейін дұрыс болып есептелінеді. Бірінші көрсеткіштен S нысанына тізбектен қарағанда қазір ол y таңбасы болып есептелінеді. Біз  y таңбасын алып оны тізбектің соңына
дауысты дыбыстың алдына қоямыз, 
содан кейін біз i таңбасын өсіреміз. Қазір I екі, ал S, нөлден екіге дейін
шын мәнінде біз дауысты дыбыс алдына қойған таңба болып шықты. Өзгермелер арасындағы 
Осы қарым-қатынастарды сақтай отырып Мұның күрделі жұмыс екендігін байқауға болады, Дегенмен бұл тізбектің ішінде не
 болып жатқандығын түсінуге көмектеседі. осы қарым-қатынастарды түсініп алысымен
бірінші рет орындау қиындау келеді, бірақ бірнеше рет қайталап жасағаннан кейін жеңілдене түседі. Тізбекті қай жерде жазбасаңыз да
өзгермелер арасында байланыстар болады. Бұл байланыстардың қандай екендігін анықтап көріңіз бұл тізбектің негізін жасауды жеңілдетеді. Егер сіз байланысты анықтап алсаңыз
оны жазып қойыңыз. Түсіндірме ішіне енгізіп қойыңыз, келесі жолы кодты ашқан кезде қайта анықтауды қажет етпейді. Түсіндірменің екінші түрі
жолдың басындағы дауысты еместерді анықтайды, тізбектің қандай қызмет атқаратындығын сипаттайды,
 құжаттық жолдар мұндай ақпарат бермейді. Бұл түсіндірме жұмыстың қалай жүзеге
асатындығын түсіндірмейді. Бұл тек әсерді ғана сипаттайды. Түсіндірмелер програмисттерге арналған, 
сондықтан оларға тізбектің қалай жұмыс істейтіндігін түсіндірудің қажеті жоқ. Біз амалды орындап кодтың кейбір бөліктерін, 
түсіндіруге бағытталған. Бұл оның негізгі мақсаты. Сонымен қатар сіз де өзгермелер арасындағы байланысты сипаттау үшін 
түсіндірме жазыңыз.