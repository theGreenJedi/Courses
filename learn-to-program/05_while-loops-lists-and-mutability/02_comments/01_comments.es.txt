Ahora que tenemos declaraciones de condición If e iteraciones,
los problemas que vamos a enfrentar van a ser
más complicados Los cuerpos de las funciones van a
ser más largas también y van a necesitar alguna explicación
en Inglés Aquí está la función up_to_vowel de
la lectura de la iteración While Hemos añadido dos comentarios Un comentario empieza con un carácter signo
de número # Comúnmente llamado carácter hash Y es válido hasta el final de la línea
Python ignora estos carácteres. Su propósito es para documentar el código, muy
parecido a las funciones de documentos doc string La primera describe las variables que
son usadas en esta función Noten como vincula conjuntamente antes de la
vocal s e i. Vamos a explorar un poco que
significa esto lo haremos usando la palabra zymurgy con
índices cero, uno, dos, tres, cuatro, cinco y seis Bien, sabemos que el segundo índice no esta incluido in mi sub-string, lo que significa
que esta empezando con el índice cero aumentando
hasta el índice siete Qué es s desde cero hasta el índice seis? Eso es zymurg. Y desde cero a cinco, es zymur.
S desde cero a cuatro es zymu.
S desde cero a tres es zym.
S desde cero a dos es zy. S desde cero a uno is z.
Y aquí esta bit gracioso s desde cero hasta cero, solo siguiendo el patrón
de reducir la longitud por uno, me da una string
vacía Bien, empezamos antes de la vocales off en la
string vacía y empiezo off en cero. Así que si insertamos cero en [INAUDIBLE] I, terminamos, con una S desde cero
hasta cero, eso es lo que es esto. Y S desde cero hasta cero es la string vacía, por lo que de hecho, antes que la vocal
contiene todos los caractéres encontrados en S desde cero
hasta cero y antes de la vocal es la string vacía Esta simple inicialización, donde
asignamos una string vacía antes del valor y asignamos cero a i. Estableciendo que esta descripción aquí es
correcta Por otra parte, la primera vez a travéz de la iteración
vamos a a añadir s al índice cero antes de la vocal y reemplazar lo que tenemos.
Bien ahora antes que la vocal contenga a Z. I era cero, así que i mas 1 es 1, hará i
1. Ahora estamos en esa línea donde i es 1. Y en efecto esta descripción aún es válida La próxima vez a través de la iteración veremos a S en el índice uno, viniendo aquí, eso es
y Tomamos la y, y la ponemos al final delante de la vocal, y luego incrementamos i. I es ahora dos, así que S, desde cero hasta dos, es en efecto lo que hemos guardado dentro de la vocal anterior Manteniendo este tipo de relaciones
entre variables es un negocio tramposo, pero esto realmente ayuda a entender que es lo que está pasando
dentro de la iteración Llegar con a estas relaciones en primer lugar es también un desafío pero con la práctica irás mejorando Cuando escribas un azo habrá una relación entre las variables Trata y encuentra que relación
es y vas a tener un tiempo fácil escribiendo
el cuerpo de la iteración Así mismo, una vez qye hallas figurado la relación, anótala Pon un comentario de tal forma que no tendrás
que figurar nuevamente la próxima vez que leas
el código Este segundo comentario, acumula las no vocales al comienzo del string, describe lo que la iteración hace, muy parecido a doc string, no dice como la función trabaja Este comentario no dice como la iteración hace el trabajo Solo describe el efecto Los comentarios son destinados para los programadores
y ellos no necesitan describir como la iteración hace su
trabajo Debes tratar y comentar bits complicados de código para explicar el propósito de este. Y debes así mismo escribir comentarios para describir relaciones entre tus
variables