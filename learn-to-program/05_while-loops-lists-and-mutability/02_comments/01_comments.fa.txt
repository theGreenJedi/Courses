اکنون در مورد عبارات-اگر دار و چرخه دار صحبت میکنیم،موضوعی که میخواهیم درگیر  مواردپیچیده تری  شویم. بدنه توابع ما نیز طولانی تر میشوند و احتیاج به توضیحاتی به زبان انگلیسی دارند. در اینجا تابعup_to_vowel ازدرس چرخه while مطرح هست. دو توضیح اضافه کرده ایم. توضیح با علامتی اغلب هشتک خوانده میشود و تا آخر خط ادامه مییابد.پایتون این کاراکترها را ندید میگیرد. هدف این نوشته ها زبان دارکردن برنامه هست،چیزی شبیه توابع doc strings اولی متغیرهایی را که در تابع به کار میروند تعریف میکند. توجه داشته باشید که چگونه قبل از vowel حروفs,i به هم پیوند میدهد. کمی کنکاش کنیم که مفهوم این چیزهایی که میگوییم چیست. با استفاده از کلمه zymurgy و اندیس اینکار را انجام میدهیم. اندیس صفر،یک،دو،سه،چهار،پنج،و شش. خوب،میدانیم که اندیس دوم در زیرstring ما موجود نیست،به این معنی که از اندیس صفر شروع شده تا اندیس هفت بالا میرود. sاز اندیس صفر تا شش چیست؟ zymurg و از صفر تا پنج zymur S از صفر تا چهار است. zymu  هست.S از صفر تا سه zym هست.S از صفر تا دو zy هست. S از صفر تا یک z هست.و این هم محض خنده s از صفر تا صفر، تنها با پیگیری روند کاهش طول به اندازه یک به string خالی میرسیم. خوب،قبل از VOWEL OFF درSTRING تهی  و صفر کارمان را شروع میکنیم. پس در صورتی که شامل صفر باشد [INAUDIBLE] آخر کار میرسیم بهsازصفر تا صفر،این طوری. و S از صفر به صفر STRING خالی است پس در واقع قبل از VOWEL همه کاراکترهایی را که در S از صفر تا صفر و قبل ازVOWL یک STRING خالی است. این شروع کردن ساده،که در آن string تهی را قبل از مقدار تعیین میکنیم و به i عدد صفر میدهیم. تصدیق میکند که این توضیحات صحیح هست. علاوه براین،اولین باری که وارد چرخه میشویم میخواهیم که s با اندیس صفر را به قبل از vowel اضافه کنیم و جای آن چه را که داشتیم بگیرد.خوب حالا قبل از vowel حرفz هست. iصفر بود،پسi به علاوه1 میشود 1. حالا در آن ردیفی هستیم که i یک هست.و در واقع این توضیحات هنوز صحیح است. مورد بعدی در چرخه به s با اندیس 1 که در اینجا به صورت y آمده نگاه میکنیم. y را میگیریم و آن را به انتهای قبل از vowel جا میدهیم،و آنگاه یکی به iاضافه میکنیم اکنون i دو هست،پس s از صفر تا دو در واقع همان چیزی هست که قبل از vowel به حافظه سپردیم. با فراهم ساختن این نوع رابطه بین متغیرها کمی کلک دارد،ولی در واقع کمک میکند که بفهمیم داخل این چرخه چه میگذرد. دریافتن این روابط در اول کار حال آدم را میگیرد ولی با تمرین بهتر و بهتر میشود. وقتی که چرخه ای را مینویسید روابطی بین متغیرها برقرار میسازید. کوشش کنید که دریابید آن روابط چه هستند و در این صورت کارتان برای نوشتن بدنه چرخه راحت تر میشود. همچنین،وقتی آن رابطه را دریافتید،آن را بنویسید. گذاشتن آن داخل نقل قول باعث میشود که مجبور نباشید دفعه دیگر که برنامه  را میخوانید آن را ارزیابی کنید. نقل قول دومی،غیر vowel ها را در ابتدای string جمع میکند، توضیح میدهد که چرخه چه میکند،درست مانند doc stringsکه نمیگویند که توابع چگونه کار میکنند. این نقل قول نمیگوید که این چرخه چگونه کارها را به پیش میبرد. تنها تاثیرات را توصیف میکند. نقل قول ها برای برنامه نویس ها است و بنابراین نیازی نیست که چرخه کارش را به پیش میبرد. باید که کوشش کنید و اجزای پیچیده برنامه را در نقل قول بگنجانید. هدف آن. و باید که نقل قولها را بنویسید. برای توصیف روابط بین متغیرهای شما.