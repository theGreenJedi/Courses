1
00:00:01,600 --> 00:00:04,564
Ora che abbiamo le istruzioni if e i cicli,
i problemi che

2
00:00:04,564 --> 00:00:08,000
andremo ad affrontare diventeranno
più complicati.

3
00:00:08,000 --> 00:00:10,128
Il corpi della nostra funzione diventeranno
più anche

4
00:00:10,128 --> 00:00:12,760
più lunghi, e avremo bisogno di alcune spiegazioni
in inglese.

5
00:00:15,280 --> 00:00:18,970
Qui c'è la funzione up_to_vowels della lezione
dei cicli while.

6
00:00:18,970 --> 00:00:21,290
Abbiamo aggiunto due commenti.

7
00:00:21,290 --> 00:00:24,090
Un commento inizia con un carattere numerico.

8
00:00:24,090 --> 00:00:26,190
Spesso detto carattere di hash.

9
00:00:26,190 --> 00:00:31,420
E va fino alla fine della riga.
Python ignora questi caratteri.

10
00:00:31,420 --> 00:00:36,880
Il loro proposito è documentare il codice, proprio
come le doc string delle funzioni.

11
00:00:36,880 --> 00:00:40,950
La prima descrive le variabili che
vengono usati in questa funzione.

12
00:00:40,950 --> 00:00:45,000
Notate che collega before a vowel s
e i.

13
00:00:45,000 --> 00:00:49,080
Analizziamo ancora un po' cosa questo 
significa.

14
00:00:49,080 --> 00:00:54,078
Lo faremo usando la parola zymurgy con
indici

15
00:00:54,078 --> 00:00:59,218
zero, uno, due, tre, quattro, cinque
e sei.

16
00:00:59,218 --> 00:01:02,226
Bene, sappiamo che il secondo indice non è

17
00:01:02,226 --> 00:01:05,986
incluso nella mia sotto stringa, quindi questo
significa che

18
00:01:05,986 --> 00:01:10,460
questa è s che inizia con l'indice zero che va
fino all'indice sette.

19
00:01:12,370 --> 00:01:17,060
Cosa è s dall'indice zero fino all'indice sei?

20
00:01:17,060 --> 00:01:22,000
Quella è zymurg.

21
00:01:22,000 --> 00:01:26,344
Ed è da zero a cinque è

22
00:01:26,344 --> 00:01:31,758
zymur.
S da zero a quattro

23
00:01:31,758 --> 00:01:37,768
è zymu.
S da zero a tre

24
00:01:37,768 --> 00:01:44,240
è zym.
S da zero a due è zy.

25
00:01:44,240 --> 00:01:50,906
S da zero a uno è z.
E qui c'è il bit di s da

26
00:01:50,906 --> 00:01:57,300
zero a zero, solo seguendo questo schema
di ridurre

27
00:01:57,300 --> 00:02:03,050
la lunghezza di uno e mi da semplicemente
la stringa vuota.

28
00:02:03,050 --> 00:02:09,190
Bene, iniziamo before vowel alla
stringa vuota e inizio da zero.

29
00:02:09,190 --> 00:02:10,934
Quindi se inseriamo zero

30
00:02:10,934 --> 00:02:11,915
link, vedrete un

31
00:02:11,915 --> 00:02:17,753
Io, noi finiamo con from, con una S da zero
da zero, ecco qui.

32
00:02:17,753 --> 00:02:20,185
E S da zero a zero è la stringa

33
00:02:20,185 --> 00:02:23,605
vuota, quindi invece, before vowel
contiene tutti

34
00:02:23,605 --> 00:02:26,341
i caratteri trovati in S da zero
fino

35
00:02:26,341 --> 00:02:29,090
a zero e before vowel è la stringa vuota.

36
00:02:30,530 --> 00:02:34,210
Questa semplice inizializzazione, dove
assegniamo la stringa vuota

37
00:02:34,210 --> 00:02:36,930
a before value e assegniamo zero

38
00:02:36,930 --> 00:02:37,980
ad i.

39
00:02:37,980 --> 00:02:41,750
Stabiliamo che la descrizione qui è corretta.

40
00:02:44,120 --> 00:02:48,467
Inoltre, la prima volta che attraversiamo il ciclo
andremo ad aggiungere s all'indice zero a

41
00:02:48,467 --> 00:02:54,788
before vowel e rimpiazzare quello che avevamo.
Bene ora before vowel contiene una Z.

42
00:02:54,788 --> 00:03:02,540
i era zero, quindi i più 1 fa 1, renderà i pari
ad 1.

43
00:03:02,540 --> 00:03:09,176
Ora che siamo su quella riga quando i è 1.
E invece questa

44
00:03:09,176 --> 00:03:11,870
descrizione è ancora vera.

45
00:03:14,460 --> 00:03:17,199
La prossima volta che attraversiamo il ciclo guardiamo

46
00:03:17,199 --> 00:03:20,400
S all'indice uno, che arriva qui e c'è y.

47
00:03:21,500 --> 00:03:27,350
Prendiamo la y e la analizziamo alla fine
di before vowel, e poi incrementiamo i.

48
00:03:27,350 --> 00:03:30,233
i ora vale due, quindi S, da zero a

49
00:03:30,233 --> 00:03:34,430
due è invece ciò che abbiamo salvato
all'interno di before vowel-

50
00:03:36,110 --> 00:03:39,883
Mantenendo questa sorta di relazioni
fra le variabili

51
00:03:39,883 --> 00:03:42,193
è un lavoro leggermente ingannevole, ma

52
00:03:42,193 --> 00:03:46,370
aiuta molto a capire cosa succede all'interno
del ciclo.

53
00:03:47,840 --> 00:03:50,801
Portare queste relazioni al primo posto è

54
00:03:50,801 --> 00:03:55,160
anche impegnativo ma con la pratica
migliorerete via via.

55
00:03:55,160 --> 00:03:59,880
Ogni volte che scriverete un ciclo ci sarà
una relazione fra le vostre variabili.

56
00:03:59,880 --> 00:04:02,440
Cercate di capire quale sia quella relazione
e

57
00:04:02,440 --> 00:04:05,290
vi sarà più facile scrivere il corpo del
vostro ciclo.

58
00:04:06,380 --> 00:04:09,840
Inoltre, una volta che avete compreso 
quella relazione, scrivetela.

59
00:04:09,840 --> 00:04:11,820
Inserisci un commento in modo da non doverla

60
00:04:11,820 --> 00:04:14,240
capire di nuovo la prossima volta che scrivete
il codice.

61
00:04:15,920 --> 00:04:21,240
Questo secondo commento, accumula le
non vocali all'inizio della stringa,

62
00:04:21,240 --> 00:04:27,290
descrive cosa fa il ciclo, proprio come
la doc string non dice come funziona la funzione.

63
00:04:27,290 --> 00:04:32,290
Questo commento non dice come il ciclo
completa il lavoro.

64
00:04:32,290 --> 00:04:35,040
Descrive solamente l'effetto.

65
00:04:35,040 --> 00:04:38,352
I commenti sono inseriti per i programmatori e
quindi non hanno bisogno

66
00:04:38,352 --> 00:04:40,910
di descrivere come il ciclo effettua
il suo lavoro.

67
00:04:42,850 --> 00:04:47,440
Dovreste commentare le parti complicate
di codici per spiegarne

68
00:04:47,440 --> 00:04:49,090
l'obiettivo.

69
00:04:49,090 --> 00:04:50,656
e dovreste anche scrivere commenti

70
00:04:50,656 --> 00:04:53,150
per descrivere le relazioni fra le vostre
variabili.