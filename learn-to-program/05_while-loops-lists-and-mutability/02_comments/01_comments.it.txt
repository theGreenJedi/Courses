Ora che abbiamo le istruzioni if e i cicli,
i problemi che andremo ad affrontare diventeranno
più complicati. Il corpi della nostra funzione diventeranno
più anche più lunghi, e avremo bisogno di alcune spiegazioni
in inglese. Qui c'è la funzione up_to_vowels della lezione
dei cicli while. Abbiamo aggiunto due commenti. Un commento inizia con un carattere numerico. Spesso detto carattere di hash. E va fino alla fine della riga.
Python ignora questi caratteri. Il loro proposito è documentare il codice, proprio
come le doc string delle funzioni. La prima descrive le variabili che
vengono usati in questa funzione. Notate che collega before a vowel s
e i. Analizziamo ancora un po' cosa questo 
significa. Lo faremo usando la parola zymurgy con
indici zero, uno, due, tre, quattro, cinque
e sei. Bene, sappiamo che il secondo indice non è incluso nella mia sotto stringa, quindi questo
significa che questa è s che inizia con l'indice zero che va
fino all'indice sette. Cosa è s dall'indice zero fino all'indice sei? Quella è zymurg. Ed è da zero a cinque è zymur.
S da zero a quattro è zymu.
S da zero a tre è zym.
S da zero a due è zy. S da zero a uno è z.
E qui c'è il bit di s da zero a zero, solo seguendo questo schema
di ridurre la lunghezza di uno e mi da semplicemente
la stringa vuota. Bene, iniziamo before vowel alla
stringa vuota e inizio da zero. Quindi se inseriamo zero link, vedrete un Io, noi finiamo con from, con una S da zero
da zero, ecco qui. E S da zero a zero è la stringa vuota, quindi invece, before vowel
contiene tutti i caratteri trovati in S da zero
fino a zero e before vowel è la stringa vuota. Questa semplice inizializzazione, dove
assegniamo la stringa vuota a before value e assegniamo zero ad i. Stabiliamo che la descrizione qui è corretta. Inoltre, la prima volta che attraversiamo il ciclo
andremo ad aggiungere s all'indice zero a before vowel e rimpiazzare quello che avevamo.
Bene ora before vowel contiene una Z. i era zero, quindi i più 1 fa 1, renderà i pari
ad 1. Ora che siamo su quella riga quando i è 1.
E invece questa descrizione è ancora vera. La prossima volta che attraversiamo il ciclo guardiamo S all'indice uno, che arriva qui e c'è y. Prendiamo la y e la analizziamo alla fine
di before vowel, e poi incrementiamo i. i ora vale due, quindi S, da zero a due è invece ciò che abbiamo salvato
all'interno di before vowel- Mantenendo questa sorta di relazioni
fra le variabili è un lavoro leggermente ingannevole, ma aiuta molto a capire cosa succede all'interno
del ciclo. Portare queste relazioni al primo posto è anche impegnativo ma con la pratica
migliorerete via via. Ogni volte che scriverete un ciclo ci sarà
una relazione fra le vostre variabili. Cercate di capire quale sia quella relazione
e vi sarà più facile scrivere il corpo del
vostro ciclo. Inoltre, una volta che avete compreso 
quella relazione, scrivetela. Inserisci un commento in modo da non doverla capire di nuovo la prossima volta che scrivete
il codice. Questo secondo commento, accumula le
non vocali all'inizio della stringa, descrive cosa fa il ciclo, proprio come
la doc string non dice come funziona la funzione. Questo commento non dice come il ciclo
completa il lavoro. Descrive solamente l'effetto. I commenti sono inseriti per i programmatori e
quindi non hanno bisogno di descrivere come il ciclo effettua
il suo lavoro. Dovreste commentare le parti complicate
di codici per spiegarne l'obiettivo. e dovreste anche scrivere commenti per descrivere le relazioni fra le vostre
variabili.