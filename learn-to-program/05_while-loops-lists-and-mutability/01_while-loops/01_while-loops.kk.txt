Өткен дәрісте біз бір жолдағы таңбалар үшін төрт тізбіектен
енгізген болатынбыз. Ал егер біз әр таңбаға тізбек енгізуді қаламайтын болсақ ше? Біз дауысты әріп кездеспейінше ғана таңбаларға тізбек енгізуіміз мүмкін.
Мүмкін біз жолдармен мүлде жұмыс жасағымыз келмейтін шығар. Мысалы, пайдаланушы белгілі бір маңызды жерге
кірмейінше біз тапсырманы шығаруымызға болады . Бұл дәрісте біз тізбек енгізу арқылы осы тапсырманы қалай шығаруға болатынын үйренеміз. Ең алдымен, егер нұсқаулық Буль амалымен шығарылатын болса
 жалпы үлгісін қарап шығайық. Егер амал шындық болып шығатын болса, 
тапсырма  орындалады. Егер Буль амалы жалған болса
тапсырма бойынша орындалатын тапсырмалар
жүзеге аспайды. [Белгісіз] Ретсіз тізбектердің құрылымы тапсырманың құрылымына ұқсас, яғни ол да Буль амалдары арқылы шығарылады.
Егер Буль амалы шындық болса тізбек шығарылады. Егер теріс болса, Буль амалы кейін 
қайта тексеріледі. Ал егер тізбек шарттары дұрыс болса, тізбек шығарылады, бұл үрдіс тізбек шарттары қате болып есептелінбейінше тоқтаусыз қайталана береді. Бірінші [Дыбыс] Тізбектің сандық өзгермелерден тұратынына мысал. Санның мәні 2-ге тең. Тізбек [Дыбыс] сан <100 болғанша орындала береді. Тізбектің негізінде сан екі еселенеді [Дыбыс] және басып шығарылады. Мән  көрсеткіші  2-ге тең санмен,
мына Y тізбегі 6 рет шығарылады. егер  4, 8, 16, 32, 64, және соңында
128 ге тең болса Y тізбек шарты қате болып саналды. Егер сандық көлем 10-ға тең болса, 
Y тізбегін енгізуді қайта бастаймыз. Тізбек шарты қате болып саналу үшін төрт 
жұмыс циклы қажет. Бұл орайда тізбек негізі төрт рет шығарылады 4 деген мағынаны білдіреді. Мәні   160-қа жетпейді  және тізбек шарты қате 
болып есептелінеді. Бұндай жағдайда біз тізбекті қайта жаңартамыз. Тізбектің негізі ешқашанда шығарылмайды, себебі тізбек шарты басынан бастап қате болып есептелінеді. Қазір мен алдында атап өткен мәселеге тоқталып өтейік, яғни, дауысты дыбыс кездеспейінше жолға тізбек енгізу мәселесі. Біз жолға тізбекті алдыңғы уақытта қалай енгізгенімізді еске түсірейік. Біз қолданамыз [Дыбыс] Біз S жолына төрттік тізбек енгіздік,
енді мен сол таңбаны жай басып шығарып алмақшымын. Біз бұл тізбекті бұзған кезде S  жолындағы тізбектің көлемі нөльге тең болған. Кейінірек көлемі жолдың соңына жеткенше 
көбейе берді. Біз  Y lтізбегін енгізген кезде, 
осы индекстерді ерекшелуіміз керек. Көлемі нөльге тең
тізбек енгізу керек жолдағы индекстің біріншісін көрсететін өзгермелерді жасап шығарамын. Дауысты дыбыс кездескенге дейін тізбек шартын орындауды жалғастыра беруіміз керек.
жол позицияда сақталса. жай әріптермен a e i o u және бас әріптермен A E I O U
белгіленген дауысты дыбыс шыққан жоқ. Содан кейін біз тізбек негізіне еніп,
оны орындауға кірісеміз. Жолда орналасқан таңбаны басып шығарамын. Y тізбегінен шығар алдында, we need to
Индексті көбейтуіміз қажет, Сол арқылы оның мәні де өсетін болады.
Мен берілген мәнге бірді қосамын. Енді жолдағы келесі таңбаға көшейік.
Бұл жағдайда тізбек бірден шығарылады себебі мәні нөльге тең таңба дауысты дыбыс емес. Екінші ретте тізбек шарты тексерілгеннен кейін, мәні бірге тең таңба дауысты дыбыс жолдарының 
өтпелі жолына енеді. Ретсіз тізбек шарты қате деп есептелінеді және
ретсіз тізбек бар болып есептелінеді. Есептеп шығарайық [Дыбыс] Сол тізбек
Енді [Дыбыс] Жолды мына жерде қолданамыз.Жолды мына жерде қолданамыз. Қайтадан нөльдік мәнмен есептеп ретсіз тізбекті шығарамыз. Бұл жолы ретсіз тізбектің негізі екі рет шығарылады. Бір рет  t дауыссызы үшін, екінші рет  h дауыссызы үшін,
 ал e дауыстысы кездесіп, y тізбегінің шарты қате болып есептелінеді де тізбек сақталады. Егер біздің жолымызда тек дауыссыз дыбыстар кездесетін болса ше [Дыбыс] Бұндай жағдайда, үш дауыссыз көрсетіліп индекс қате болып шығарылады. S(0) -  S(1)'x' таңбасына қатысты. S 1- 'y' және  s (2)  - "z" таңбасына қатысты. i таңбасының  ағымдығы мәні  3 және құны 3-ке тең болу  дұрыс позиция емес, 
s-ті санауға берілген дұрыс емес индекс болғандықтан индекс қате болып есептелінеді. S таңбасын тексеруді қашан тоқтату керектігін анықтаған жоқпыз. Сонымен біз жолдағы берілген амалдарды орындауды тәмамдадық, және жоқ индекстерге қосылу мүмкіндігін іздедік. Бұл амалдардың алдын алу үшін,
Буль шартына екінші бөлім қосуымызға тура келеді. Бұл  i таңбасы  жолда берілген амалдармен қатысты екендігін тексеру үшін орындалады. Ұзындығынан қысқа болып келетіндігіне 
көз жеткізу үшін де қолданылады. Орындап көрейік.
біз i  таңбасына нөльдік мән береміз. S жолда берілген, x y z және
тізбекті есептеп шығарамыз. Бұл амалды шығармас бұрын,
ең алдымен i таңбасы жолдың ұзындығына қарағанда қысқа екендігіне көз жеткізуіміз керек. Кейіннен s және i таңбасы дауысты дыбыстар жолында өтпелі жол екендігін тексеріп алуымыз қажет. i таңбасына аталған шарт бірінші қолданатындығын
байқауға болады. Біз i таңбасы ұзындықтан қысқа екендігіне I позициясына жолды  енгізер алдында
көз жеткізуіміз керек. Пайсон  бағдарламалау тілінің салыстыру амалдары 
және командалары баяу дамыған егер бірінші операнд қате берілсе,
екіншісі саналмайды. Бұл егер i жолдың ұзындығына қарағанда 
қысқа болмаса, бұл орайда N қате болып есептелінеді және біз жолды i позициясына қоймаймыз. Бұл жағдайда үш дауыссыз көрсетіледі
 және ұзындықтан қысқа i амалы қате болып есептелінген шартқа байлансыты 
тізбек сақталады. [ШУ] Басқа мәселе үшін кең тізбек жөніндегі мысалдарды 
қолданып көрейік. Біз дауысты дыбысқа байланысты қызметті
енгізетін боламыз. [ШУ] Оның бір жолдық параметрі бар 
және жолды қайтару амалдары да бар. Бұл s параметріндегі жолддың өтпелі жолын 
нөльдік индекстен жоғары шығару амалын орындайды, бірақ оның ішіне 
бірінші дауысты дыбыс кірмейді. Ұяшықта келтірілген мысалдағыдай
 басып шығармас бұрын, біз өтпелі жолдардың санын көбейтіп оларды қайта орындамақпыз. Осы мәселені шешуде алдыңғы уақыттырда қолданған есептеуіш нұсқаны қолданатын боламыз. [Дыбыс] Дауысты дыбыс алдындағы өзгерме 
бос жолға бағытталады және дауысты дыбыс алдындағы жолы
қайтару арқылы жол санын көбейтеміз. Біз қолданатын уақытша тізбектер алдыңғы уақытта қолданған тізбектің тура көшірмесі. Нөльдік позициядан бастап жолдағы таңбалардың барлығын
тізбекке енгізбекшіміз Біз бұл амалды дауысты дыбыс кездескенше
немесе жол бітіп қалмайынша жалғастыратын боламыз. Тізбек негізінің ішіне [Дыбыс] дауысты дыбысты көбейту амалын қосамыз. [Дыбыс] Дауысты дыбыс алдында, оның ағымдағы мәні мен s жолындағы i позициясында берілген
 таңба қосындысын аламыз. Келесі таңбаға көшу үшін біз индекске бірді қосу арқылы индекс бірлігін 
көбейтеміз. Осы қызметті орындап біткеннен кейін
өтпелі жол қайта орнына келеді Дауысты дыбыс қайта орнына келмейінше
бағдарламалық кодты енгізейік. Бұл қызметті арнайы Митчелл бағдарламсынан
аламыз. Бірінші қызметті орындау арқылы h таңбасын аламыз. Екіншісінде , t h таңбаларын қайта орнына келтіру керек. Ал үшінші мысалда [Дыбыс] Таңбадан тұратын мысалда, дауысты дыбыс жоқ, [Дыбыс] тек дауыссыз дыбыс берілген болса
жол толығымен қайтарылады. Жаңа қызметті енгізіп көрелік. Бұл қызметтің аты жауап алу деп аталады. Бұл қызмет ия немесе жоқ деп жауап беретін 
Сұрақтар қоюға  негізделген. Қолданушы жауап беруі тиіс. Біз оларға жауаптары ия немес жоқ болғанға дейін 
сұрақтар қоя береміз. Бұл бір реттен немесе екінші реттен
немесе 100 реттен кейін ғана, яғни
пайдаланушы дұрыс жауабын енгізбейінше
қайталанып, қолданысқа енеді. Соңында пайдаланушы енгізген жауабына қайта ораламыз. Бұл қызметті шақыруларды енгізуден бастайық, сонымен біз жауап алу үшін сұрақтар енгіземіз, содан кейін сұрақтардың нәтижесін жауаптар ұяшығына енгіземіз. Пайдаланушыға қойылатын сұрақтарды 
жүзеге асыру жолдарын анықтайық. Y тізбегінің негізі жоғарыда көрсетілген 
кодтың көшірмесі болып табылады ол код бір сызықтан тұрады, 
және пайдаланушы сол код арқылы жасалынған
 сұрақтарға жауап береді. Өзімізге қажетті жауап алмайынша біз пайдалаушыларға сұрақ қоюды жалғастырамыз. Жауап ия немесе жоқ  болса ғана сұрақ қоюды
 тоқтатамыз. Біз ия немесе жоқ деген жауап алдық. Соңына таман тізбек аяқталады, бір мезетте Тізбек орындалып болған соң аяқталды, жауап
қайтарылды. Сіз менің бұл жолдың ішіне
Ешқандай мысал шақырулар енгізбегенімді байқай аласыз. Себебі бұл қызметтің орындалуы
бұл пайдаланушының кірісінен шығады, және қандай функцияның қайтып келетінін алдын ала болжау мүмкін емес
себебі ол пайдаланушы қандай ақпарат енгізгеніне байланысты. Ал енді бұл амалды бастан аяқ қайталап шығайық Қалай жүзеге асатынын көру үшін, бұл біз күткендей жүзеге асты. шақыру, [Дыбыс] жауап алу, мен сұрақ жіберемін,
және бізге сұрақтар қойылатын болады. Егер жауап мүмкін болса, біз [Дыбыс] қайтадан жауап беруге тура келеді, [Дыбыс] Бұл кеш болып қалды, сұрақ қайта қойылады. [Дыбыс] Шын мәнінде, бізге сұрақ қайта қойылған жоқ.
Упс. Соңында егер мен «иә» деп жауап берсем
Функция қайтып келеді. Осы амалды қайта жасап көрейік. Бұл жолы  мен бірден жауап бермеймін, 
Сондықтан тізбектің негізі орындалмады, себебі тізбектің шарты «жоқ» функция арқылы қайта оралады. алғашқыда жасағандағыдай қате болып шығады.