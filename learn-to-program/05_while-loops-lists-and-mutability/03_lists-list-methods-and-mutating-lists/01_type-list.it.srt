1
00:00:00,000 --> 00:00:03,148
.
Nel nostro programma spesso lavoriamo con

2
00:00:03,148 --> 00:00:06,971
della collezioni di dati.
Ad esempio potremmo lavorare con i voti

3
00:00:06,971 --> 00:00:11,937
degli studenti o con i titoli dei libri.
In questa lezione introdurrò l'uso

4
00:00:11,937 --> 00:00:17,369
del tipo list di Python e esploreremo
alcune delle funzioni e operazioni che

5
00:00:17,369 --> 00:00:22,147
possono essere applicate alle liste.
Per iniziare andrò a creare una variabile

6
00:00:22,147 --> 00:00:26,557
grades che fa riferimento ad una lista di interi
con tre elementi.

7
00:00:26,557 --> 00:00:33,133
La notazione per la nostra lista è una aperta
parentesi quadra, valori separati da virgole e

8
00:00:33,133 --> 00:00:37,623
una chiusa parentesi quadra.
Grades è una lista a tre elementi.

9
00:00:37,623 --> 00:00:44,359
Dove diciamo che grades ha tre elementi,
il primo elemento è all'indice zero e grades

10
00:00:44,359 --> 00:00:50,534
all'indice zero fa riferimento a 80.
Grades a uno fa riferimento a 90 e grades

11
00:00:50,534 --> 00:00:56,423
all'indice due fa riferimento a 70.
Possiamo anche prendere delle parti delle liste come

12
00:00:56,423 --> 00:01:00,322
possiamo fare con una stringa iniziando con
un indice iniziale.

13
00:01:00,322 --> 00:01:05,050
In questo caso inizierò all'indice uno.
E un indice di fine.

14
00:01:05,050 --> 00:01:12,664
Quindi, andando avanti fino a due, questo mi fornisce
una fetta della lista che contiene un singolo intero.

15
00:01:12,664 --> 00:01:17,086
90.
Se vado da grades a zero fino a due allora

16
00:01:17,086 --> 00:01:20,949
viene restituita una porzione con 80 e
90.

17
00:01:20,949 --> 00:01:26,217
Quindi vengono applicate le stesse regole
dello slicing come per le stringhe.

18
00:01:26,217 --> 00:01:32,187
L'operatore in che abbiamo usato per le stringhe
può anche essere usato con le liste.

19
00:01:32,187 --> 00:01:38,245
Quindi questo chiede se 80 è un elemento della
lista grades e lo è.

20
00:01:38,245 --> 00:01:45,356
L'espressione 60 in grades viene valutata a
falso dato che 60 non è un elemento della

21
00:01:45,356 --> 00:01:49,333
lista grades.
Alcune funzioni integrate di Python che

22
00:01:49,333 --> 00:01:54,040
abbiamo usato precedentemente con altri tipi possono
anche essere applicate al tipo lista.

23
00:01:54,040 --> 00:01:59,816
Ad esempio, possiamo trovare la lunghezza di una
lista, in questo caso tre dato che la lista

24
00:01:59,816 --> 00:02:04,095
ha tre elementi.
Possiamo anche trovare il valore più piccolo in una

25
00:02:04,095 --> 00:02:09,871
lista passando la lista come argomento alla
funzione MIN, e quando chiamiamo la

26
00:02:09,871 --> 00:02:13,722
funzione MAX su una lista viene ritornato
l'elemento più grande.

27
00:02:13,722 --> 00:02:19,345
C'è un'altra funzione chiamata SUM.
Questa sommerà gli elementi della lista.

28
00:02:19,345 --> 00:02:23,148
Quindi in questo caso somma 80, 90 e 70,
ritornando 240.

29
00:02:23,799 --> 00:02:29,493
Grades è una lista di interi, ma possiamo avere
anche liste di altri tipi.

30
00:02:29,493 --> 00:02:33,966
Questo soggetto variabile farà riferimento
ad una lista di stringhe.

31
00:02:34,617 --> 00:02:41,612
Alcune delle funzioni che abbiamo applicato
alla lista di interi possono anche essere applicate alla

32
00:02:41,612 --> 00:02:47,062
lista di stringhe.
Ad esempio, possiamo trovare la sua lunghezza

33
00:02:47,062 --> 00:02:51,129
e possiamo trovare il valore minimo della lista.

34
00:02:51,129 --> 00:02:56,010
Per le stringhe, viene usato l'ordinamento
da dizionario, e il

35
00:02:56,010 --> 00:03:01,176
minimo in questo caso è file.
Il max

36
00:03:02,641 --> 00:03:08,623
sarà la stringa che compare per ultima
nell'alfabeto, o l'ultima

37
00:03:08,623 --> 00:03:13,828
nel dizionario, che è math.
E la funzione sum non può essere applicata alle

38
00:03:13,828 --> 00:03:17,752
stringhe.
Comparirebbe un type error nel caso in cui la sum

39
00:03:17,752 --> 00:03:22,438
venga applicata ad una lista di stringhe.
Nella stessa lista possono essere presenti

40
00:03:22,438 --> 00:03:26,816
dati di tipi differenti.
Ad esempio, facciamo una lista di indirizzi

41
00:03:26,816 --> 00:03:30,426
stradali.
Avrà un int per il numero della strada

42
00:03:30,426 --> 00:03:36,647
e una stringa per il nome della strada.
Quindi abbiamo un int e una stringa nella

43
00:03:36,647 --> 00:03:40,181
stessa lista.
L'ultima cosa da mostrarvi in questa

44
00:03:40,181 --> 00:03:44,021
introduzione alle liste è il ciclo for
sulle liste.

45
00:03:44,021 --> 00:03:51,414
Quindi, osserviamo il nostro esempio grades.
Per ogni grade nella lista grades, effettueremo un

46
00:03:51,414 --> 00:03:55,775
ciclo su di esso e lo mostreremo.
Grade è il nome di una variabile.

47
00:03:55,775 --> 00:03:59,870
Qui potrei aver usato qualcosa come item, o
element.

48
00:03:59,870 --> 00:04:05,558
Quindi stamperemo quei tre voti.
All stesso modo potremmo ciclare sopra subjects.

49
00:04:05,558 --> 00:04:11,776
Sto cambiando il nome della variabile solo
per enfatizzare che, che è solo una variabile,

50
00:04:11,776 --> 00:04:17,995
che fa riferimento ad ogni elemento della lista a turno, 
iniziando dall'indice zero, fino

51
00:04:17,995 --> 00:04:21,180
alla fine della lista.
Stampando gli oggetti.