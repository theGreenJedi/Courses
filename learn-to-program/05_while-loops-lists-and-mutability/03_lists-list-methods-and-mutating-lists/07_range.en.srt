1
00:00:01,740 --> 00:00:06,238
As we'll see in upcoming lectures, it can
be very useful to have sequences of

2
00:00:06,238 --> 00:00:09,451
numbers that represent the indices of
strings or lists.

3
00:00:09,451 --> 00:00:14,007
In this lecture, I will introduce the
Python built-in function range and we'll

4
00:00:14,007 --> 00:00:18,221
use it for this purpose.
In this first example, we will use a for

5
00:00:18,221 --> 00:00:23,071
loop in conjunction with range, to
generate and display a sequence of

6
00:00:23,071 --> 00:00:26,162
integers from zero up to and including
nine.

7
00:00:26,164 --> 00:00:31,576
So for each number n, and this is where we
use range, range will generate that

8
00:00:31,576 --> 00:00:37,129
sequence of numbers, I'm going to pass in
the value ten, this is the value of, of

9
00:00:37,129 --> 00:00:42,964
the sequence that we are going up to.
I'll print each number in the sequence.

10
00:00:42,964 --> 00:00:48,926
The numbers we see on the screen are
integer values from zero to nine.

11
00:00:48,934 --> 00:00:52,832
The starting value produced is by default
zero.

12
00:00:52,832 --> 00:00:57,642
The ending value is up to ten.
So nine is our ending value.

13
00:00:57,642 --> 00:01:03,944
And the step, or the difference between
any two values in the sequence, is by

14
00:01:03,944 --> 00:01:07,258
default, one.
Let's look at the help for range.

15
00:01:07,258 --> 00:01:11,544
The help is rather lengthy, but I want to
focus on the header.

16
00:01:11,544 --> 00:01:17,516
We can see from this header that there are
up to three arguments that we can provide

17
00:01:17,516 --> 00:01:21,451
to the function.
The one that we provided in our example

18
00:01:21,451 --> 00:01:26,958
was the stop, the stopping value.
We can optionally provide a starting value

19
00:01:26,958 --> 00:01:33,249
for which the default is zero, and we can
optionally provide a step if we omit that

20
00:01:33,249 --> 00:01:43,578
then the default as I mentioned and showed
in the example is a step of one.

21
00:01:43,580 --> 00:01:49,484
One of the ways that we'll use range is to
generate a sequence of numbers that

22
00:01:49,484 --> 00:01:52,773
represent the indices of a string or a
list.

23
00:01:52,773 --> 00:01:58,378
So for the string computer science, we'll
use range to generate its indices.

24
00:01:58,378 --> 00:02:04,273
Computer science has sixteen characters.
So the indices are values zero, one, two,

25
00:02:04,273 --> 00:02:08,652
up to fifteen.
Using range we can generate those values.

26
00:02:08,652 --> 00:02:12,380
I could pass sixteen as the argument to
range.

27
00:02:12,380 --> 00:02:17,810
But to be more general I can say, go up to
the length of the string.

28
00:02:17,810 --> 00:02:23,969
Notice that I'm using I to represent the
index of S, so I is short for index.

29
00:02:23,969 --> 00:02:27,860
And the values zero through fifteen are
printed.

30
00:02:29,600 --> 00:02:34,648
But perhaps, we only want the indices
starting from index one.

31
00:02:34,651 --> 00:02:39,372
We can use the optional parameter, start,
to indicate this.

32
00:02:39,372 --> 00:02:45,749
So I can pass in one for the start index,
and then go up to the length of the

33
00:02:45,749 --> 00:02:49,724
string.
And when we're, print the value this time,

34
00:02:49,724 --> 00:02:55,953
we see that we go from one up to and
including fifteen.

35
00:02:55,960 --> 00:02:59,714
Now let's say that we only want odd
indices.

36
00:02:59,714 --> 00:03:03,981
To do this, we can use all three of the
parameters.

37
00:03:03,981 --> 00:03:08,419
So the first is the start parameter,
starting at one.

38
00:03:08,419 --> 00:03:12,088
The end, or the stop value.
And now the step.

39
00:03:12,088 --> 00:03:17,884
By default the step is one, so we go from
values one to two to three.

40
00:03:17,891 --> 00:03:24,547
I'm going to increase the step to two,
getting values one, three, five, seven and

41
00:03:24,547 --> 00:03:30,947
so on.
And that gives us the odd indices to the

42
00:03:30,947 --> 00:03:32,240
string S.