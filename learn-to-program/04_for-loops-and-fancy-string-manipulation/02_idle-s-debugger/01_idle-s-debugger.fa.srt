1
00:00:01,020 --> 00:00:06,517
مجسم ساز پایتون محدودیت هایی دارد،نمیگذارد که گزاره های مربوط به import

2
00:00:06,517 --> 00:00:11,132
و رد گیری را بعد از طی 500 قدم پایان میدهد.Idleبا اصلاحگری میاید که ابزاری

3
00:00:11,132 --> 00:00:15,340
بیشتر شبیه به مجسم ساز است،ولی بدون تصویرهای زیبا.

4
00:00:16,000 --> 00:00:21,113
اینجا تابع convert to minutes و convert to secondsرا میبینیم،که 

5
00:00:21,113 --> 00:00:25,326
در مباحث آخرین هفته تحقیق کردیم.این را در تصحیح کنIDLE فعال میکنیم.

6
00:00:25,326 --> 00:00:31,200
میخواهیم که اطمینان یابیم که ویندو Python shell در بالا باشد،و آنگاه

7
00:00:31,200 --> 00:00:35,386
تصحیح- تصحیح کن را انتخاب میکنیم.ویندویی را باز میکند که debug control(کنترل تصحیح)خوانده میشود.

8
00:00:35,386 --> 00:00:41,260
اکنون میخواهم که اندازه آن را تغییر دهم به طوری که آنچه را که سیربرنامه کارسازی میشود را بتوانیم ببینیم.

9
00:00:41,260 --> 00:00:44,637
میخواهیم جعبه کنترل برای منبع را بررسی کنیم.

10
00:00:44,637 --> 00:00:50,658
آنگاه،به برنامه خود برگردیم به اینجا که میخواهیم تصحیح شده و پردازش را انتخاب کنیم،که برنامه را به جریان بیاندازد

11
00:00:50,658 --> 00:00:55,876
این سطح میانی call stack را نشان میدهد،

12
00:00:55,876 --> 00:00:59,852
یا دست کم توابعی که فراخوانده شده اند.

13
00:00:59,852 --> 00:01:04,160
این پایین متغیرها داخل فراخوان جاری قرار دارند.

14
00:01:04,440 --> 00:01:10,215
توجه داشته باشید که متغیرها برای فابریکها اینجاست،مانند سه متغیر دیگر که

15
00:01:10,215 --> 00:01:15,779
هنوز در این دوره صحبتشان را نکردیم.Step مثل قدم به جلو در مجسم ساز است.

16
00:01:15,779 --> 00:01:20,427
دو فاکتور خود را تعریف خواهیم کرد.توجه داشته باشید که متغیرها اینجا در پایین هستند.

17
00:01:20,427 --> 00:01:25,780
همه آنها،به توابع اشاره دارند.درست اینجااست،آن آدرس حافظه است.

18
00:01:26,120 --> 00:01:31,533
توجه خواهید کرد که حروف را در خود دارد.زیرا پایه شانزده آن،که در آن مورد استفاده قرار میگیرد،

19
00:01:31,533 --> 00:01:36,873
در بسیاری از برنامه نویسی ها اعداد صفر تا نه،بعلاوه

20
00:01:36,873 --> 00:01:41,060
حروفA، B، C، D، E و F،برای شانزده کاراکتر است.

21
00:01:42,340 --> 00:01:46,389
اینجا شبرنگ خاکستری روی خط جاری میبینیم.

22
00:01:46,389 --> 00:01:51,550
پس به ما گفته میشود که پردازش در کدامین سطر انجام میشود

23
00:01:51,550 --> 00:01:54,816
میخواهم که تابع

24
00:01:54,816 --> 00:01:59,552
convert to seconds را فراخوانم.تنها پارامترهای run hours 

25
00:01:59,552 --> 00:02:02,761
و seconds را برای این تابع داریم.

26
00:02:02,761 --> 00:02:08,175
اگر میخواهیم که  متغیرها در برنامه را ببینیم،میتوانیم درست آنجا را کلیک کنیم و

27
00:02:08,175 --> 00:02:12,386
اینکار باعث رویت سرعت ناحیه ای و متغیر ناحیه ای میشود.

28
00:02:12,386 --> 00:02:18,001
برمیگردیم به convert to seconds و  convert to minutes را فرا میخوانیم.

29
00:02:18,001 --> 00:02:22,480
اکنون در call stack در گیر در برنامه سه آیتم داریم.

30
00:02:22,480 --> 00:02:25,994
یک قدم جلو برداشته و متغیر minute را تعریف کنیم.

31
00:02:25,994 --> 00:02:29,759
اکنون Minutes 120 است.تنها برای کنترل،برمیگردیم به 

32
00:02:29,759 --> 00:02:34,779
چارچوب convert to seconds،و توجه میکنیم که تنها یک متغیر دارد کهnum hours باشد.

33
00:02:34,779 --> 00:02:39,674
دلیل اینکه،این فراخوان convert to minutes را پایان نداده ایم،و بنابراین

34
00:02:39,674 --> 00:02:44,925
این متغیر minutes هنوز ایجاد نشده است.میخواهم که به چارچوب بالایی نظر بیاندازم.

35
00:02:44,925 --> 00:02:48,179
و وقتی که قدم برمیدارم،در واقع 

36
00:02:48,179 --> 00:02:53,346
عبارت return را یکباره پردازش میکند از جملهpopping the frame from the stack

37
00:02:53,346 --> 00:02:56,281
قبل از اینکه return واقع شود مقدار آن را نمیبینیم.

38
00:02:56,281 --> 00:03:02,959
پس برمیگردیم به convert to seconds

39
00:03:02,959 --> 00:03:10,221
در جریان ارزیابی 120 ضربدر60 و تعیین نتیجه به ثانیه،به 7200 میرسیم

40
00:03:10,221 --> 00:03:16,699
و میخواهیم 7200 را تحویل دهیم.این فراخوان از convert to seconds،و

41
00:03:16,699 --> 00:03:20,184
متغیر seconds را به وجود آورد،

42
00:03:20,184 --> 00:03:25,670
در چارچوب stack برای برنامه اصلی.با نظر به گذشته و کلیک 

43
00:03:25,670 --> 00:03:29,526
باعث میشود که برنامه ما پایان پذیرد،زیرا این آخرین

44
00:03:29,526 --> 00:03:34,396
عبارت در این برنامه است.برگردیم و توجه کنیم که

45
00:03:34,396 --> 00:03:40,358
تابعی همچون seconds داریم و ساخته شده،پس در انتهای برنامه کمی گیج کننده است

46
00:03:40,358 --> 00:03:45,900
زیرا اگر در عبارت return،که داخل 

47
00:03:45,900 --> 00:03:51,582
یک تابع است که در آخرین دستورکاری که پردازش میگردد،برنامه پایان میپذیرد

48
00:03:51,582 --> 00:03:57,193
و این stackframe کنده نمیشود زیرا تصحیح کن 

49
00:03:57,193 --> 00:04:00,140
وقتی که کار برنامه انجام شد،در انتهای برنامه به روزرسانی نمیشود.