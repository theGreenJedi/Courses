مجسم ساز پایتون محدودیت هایی دارد،نمیگذارد که گزاره های مربوط به import و رد گیری را بعد از طی 500 قدم پایان میدهد.Idleبا اصلاحگری میاید که ابزاری بیشتر شبیه به مجسم ساز است،ولی بدون تصویرهای زیبا. اینجا تابع convert to minutes و convert to secondsرا میبینیم،که در مباحث آخرین هفته تحقیق کردیم.این را در تصحیح کنIDLE فعال میکنیم. میخواهیم که اطمینان یابیم که ویندو Python shell در بالا باشد،و آنگاه تصحیح- تصحیح کن را انتخاب میکنیم.ویندویی را باز میکند که debug control(کنترل تصحیح)خوانده میشود. اکنون میخواهم که اندازه آن را تغییر دهم به طوری که آنچه را که سیربرنامه کارسازی میشود را بتوانیم ببینیم. میخواهیم جعبه کنترل برای منبع را بررسی کنیم. آنگاه،به برنامه خود برگردیم به اینجا که میخواهیم تصحیح شده و پردازش را انتخاب کنیم،که برنامه را به جریان بیاندازد این سطح میانی call stack را نشان میدهد، یا دست کم توابعی که فراخوانده شده اند. این پایین متغیرها داخل فراخوان جاری قرار دارند. توجه داشته باشید که متغیرها برای فابریکها اینجاست،مانند سه متغیر دیگر که هنوز در این دوره صحبتشان را نکردیم.Step مثل قدم به جلو در مجسم ساز است. دو فاکتور خود را تعریف خواهیم کرد.توجه داشته باشید که متغیرها اینجا در پایین هستند. همه آنها،به توابع اشاره دارند.درست اینجااست،آن آدرس حافظه است. توجه خواهید کرد که حروف را در خود دارد.زیرا پایه شانزده آن،که در آن مورد استفاده قرار میگیرد، در بسیاری از برنامه نویسی ها اعداد صفر تا نه،بعلاوه حروفA، B، C، D، E و F،برای شانزده کاراکتر است. اینجا شبرنگ خاکستری روی خط جاری میبینیم. پس به ما گفته میشود که پردازش در کدامین سطر انجام میشود میخواهم که تابع convert to seconds را فراخوانم.تنها پارامترهای run hours و seconds را برای این تابع داریم. اگر میخواهیم که  متغیرها در برنامه را ببینیم،میتوانیم درست آنجا را کلیک کنیم و اینکار باعث رویت سرعت ناحیه ای و متغیر ناحیه ای میشود. برمیگردیم به convert to seconds و  convert to minutes را فرا میخوانیم. اکنون در call stack در گیر در برنامه سه آیتم داریم. یک قدم جلو برداشته و متغیر minute را تعریف کنیم. اکنون Minutes 120 است.تنها برای کنترل،برمیگردیم به چارچوب convert to seconds،و توجه میکنیم که تنها یک متغیر دارد کهnum hours باشد. دلیل اینکه،این فراخوان convert to minutes را پایان نداده ایم،و بنابراین این متغیر minutes هنوز ایجاد نشده است.میخواهم که به چارچوب بالایی نظر بیاندازم. و وقتی که قدم برمیدارم،در واقع عبارت return را یکباره پردازش میکند از جملهpopping the frame from the stack قبل از اینکه return واقع شود مقدار آن را نمیبینیم. پس برمیگردیم به convert to seconds در جریان ارزیابی 120 ضربدر60 و تعیین نتیجه به ثانیه،به 7200 میرسیم و میخواهیم 7200 را تحویل دهیم.این فراخوان از convert to seconds،و متغیر seconds را به وجود آورد، در چارچوب stack برای برنامه اصلی.با نظر به گذشته و کلیک باعث میشود که برنامه ما پایان پذیرد،زیرا این آخرین عبارت در این برنامه است.برگردیم و توجه کنیم که تابعی همچون seconds داریم و ساخته شده،پس در انتهای برنامه کمی گیج کننده است زیرا اگر در عبارت return،که داخل یک تابع است که در آخرین دستورکاری که پردازش میگردد،برنامه پایان میپذیرد و این stackframe کنده نمیشود زیرا تصحیح کن وقتی که کار برنامه انجام شد،در انتهای برنامه به روزرسانی نمیشود.