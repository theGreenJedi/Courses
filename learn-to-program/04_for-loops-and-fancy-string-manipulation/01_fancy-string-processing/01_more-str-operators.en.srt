1
00:00:02,060 --> 00:00:03,970
You've seen how to add two strings and

2
00:00:03,970 --> 00:00:07,170
how you can multiply a string
by an int to repeat the string.

3
00:00:08,200 --> 00:00:11,090
In this video, we're going to
explore other string operators.

4
00:00:14,040 --> 00:00:16,210
We assigned cat to variable solution.

5
00:00:17,510 --> 00:00:23,320
Now, we use the two equal symbols to
compare to see if solution refers to cat.

6
00:00:24,580 --> 00:00:28,740
There is also a not equal operator that
looks like this with an exclamation mark

7
00:00:28,740 --> 00:00:29,680
and the equals symbol.

8
00:00:31,380 --> 00:00:36,235
We'll make solution point
to a new string and

9
00:00:36,235 --> 00:00:40,079
then examine the same operations.

10
00:00:40,079 --> 00:00:43,010
We can compare two strings for
their dictionary order.

11
00:00:44,430 --> 00:00:48,850
Here, Python compares letter by
letter starting at the beginning.

12
00:00:48,850 --> 00:00:50,370
That was the less than operator.

13
00:00:50,370 --> 00:00:52,150
We also have a greater than operator.

14
00:00:54,100 --> 00:00:58,510
We have operators less than or equal to
and greater than or equal to as well, and

15
00:00:58,510 --> 00:01:00,650
we can compare capital letters.

16
00:01:00,650 --> 00:01:02,950
In fact, capitalization matters, and

17
00:01:02,950 --> 00:01:05,490
capital letters are less
than lowercase letters.

18
00:01:07,894 --> 00:01:10,330
Any letter that you can
type can be compared.

19
00:01:13,070 --> 00:01:16,490
We can always compare two values of
different types for equality and

20
00:01:16,490 --> 00:01:22,210
inequality, but we usually can't compare
items of two different types for ordering.

21
00:01:25,030 --> 00:01:27,470
Here is a new string operator.

22
00:01:27,470 --> 00:01:32,070
We can see if one string is
inside another string using in.

23
00:01:33,070 --> 00:01:35,720
Using this,
we can check to see if c is a vowel.

24
00:01:39,130 --> 00:01:41,450
The order of the letters is important.

25
00:01:41,450 --> 00:01:43,660
Zoo is not in ooze.

26
00:01:45,830 --> 00:01:50,772
We can ask if the empty string is in
another string, and the answer is yes,

27
00:01:50,772 --> 00:01:53,417
and also the empty string is in itself.

28
00:01:58,024 --> 00:02:02,840
The last thing we'll discuss in this
lecture is a function, not an operator.

29
00:02:02,840 --> 00:02:07,710
Len takes in a string and tells you
how many letters there are in it.

30
00:02:07,710 --> 00:02:11,810
The empty string has 0 characters
abracadabra has 11 and

31
00:02:11,810 --> 00:02:16,849
the result of this expression has 23.