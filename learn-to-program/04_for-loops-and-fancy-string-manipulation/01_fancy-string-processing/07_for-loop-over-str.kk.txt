Алдынғы сабақта біз жолдың әрбір символы өзімен байланысы бар индекс иеленетіні көрдік, сонымен қатар сол индексін қолданып әрбір символға қалай қол 
жеткізуге болатынын үйрендік. Ал енді біз төрт-цикл деп аталатын нәрсені жолдың символына қол жеткізу үшін қолданамыз, кезекпенен, жеке жеке. Бастасақ, мен мысал ретінде жолды аламын, «Сәлем!» Және мен осы жолды бірінші циклмызда қолданамын. Онда біз соның әрбір символын жасамыз, жеке жеке ретпен. Сим, ол айнымалы, С-И-М, бұл символ дегеніміздің қысқартылған түрі. Бұл жәй ғана айнымалы атауы. Сим-ның айнымалысы цикл орындалған сайын өзгеріп отырады. Циклдің бірінші айналымы, Сим нөлдік орында s мәнін алады, ол дегеніміз H. Содан соң H жазылады. Сонымен циклдің келесі айналымында сим мәні өзгереді. Сонымен сим енді бір орнындағы Sсимволына қатысты, ол дегеніміз I, сосын I жазылады. Циклдің үшінші айналымында S-тің екі орнындағы мәні, ол бос орын. Сонымен сол бос орын жазылады.
Осы мысал жолдың соңына жеткенше жалғаса береді. Сонымен S-тің әрбір символы жеке жеке ретпен жазылады. Шаш дегеніміз айнымалы атауы. Біз өте жеңіл жолмен өзге нәрсені таңдасақ болады.
Мысалы, бұл S-тегі банан үшін балама, банан деп жазамыз. Әрине,айнымалының не екенін білдіре алатын  мағыналы айнымалы алғанымыз игі болар еді. Цикл үшін келесі бірі бар. Бұл циклде  екі жазылған тіркес бар. Ең басында, алғашқы цикл айналымында жұп Н мәнін иеленеді, Н мәнін иеленеді, яғни Н екі рет жазылады. Содан соң жұп І иеленіп, ол екі рет жазылады, тағы солай жалғасып, S жолының соңына дейін барады. Енді біз осыны шешу үшін өзіміздің төрт циклмызды қолданамыз. Біз тап болатын бірінші мәселе, ол жолдағы дауысты дыбыстар санын есептеу. Мен бірнеше мысал болатын функцияны жазудан бастаймын. Мен бұл функцияны Дауысты дыбыстар Саны деп атаймын. Біріншісі аргумент ретінде Happy Anniversary болады. Бұл кезде Дауысты дыбыстар Саны бізге бес деген жауап шығарып беруі қажет. Келесі X Y Z жолы бірде бір дауыстысыз жол, Олай болса функция бізге нөл деген жауап шығарып беруі тиіс. Енді келісімдер типін қосайық. Мұнда бір жол парметрі барғ сонда функция бүтін сан шығарады. Ал енді функцияның жоғарғы бөлігін жазайық. Фунцияның атауы дауыстыларды санау.
Онда бір параметр бар. Мен оған атау бермекшімін, параметр S. Сонда осы функцияның қызметі S-тегі дауысты дыбыстар санын есептеу. Мысалдан байқасаңыз, біз Y қосып отырған жоқпыз сондықтан мен оны өз сипаттамама қосуым қажет. Y әріпін дауысты деп қарастырып отырған жоқпыз.
Ал енді біз функцияның негізгі бөлігін жазамыз. Осы жүйені жазбас бұрын мен мысал функцияның міндетін қалай анықтадық жайында ойланудан бастағым келіп отыр. Менің жүзеге асырған әрекетім жолдағы әрбір символды жеке жеке сынадым, Н бастап. Сонымен, мен Н қарап оның дауысты емес, ал А дауысты дыбыс екенін қарастырып, сол жолмен жалғастырдым. Сосын мен P Y аумағында Р-қарап, келесі бір дыбысқы тап болдым.
Сонда N, келесісі N I, V E және R S және келесі бір А ол бес R Y леп белгісі. Сонда N, келесісі N I, V E және R S және келесі бір А ол бес R Y леп белгісі. Сонымен жолда символ соңынан символға қарап, онда бес дауысты дыбыс бар екеніне көз жеткіземіз. Біз өз бағдарламамызды қазір ғана қолданған тәсілден соң модельдейміз. Осыған дейін байқағанымыздай, дауысты дыбыстар санын бақылап отырамыз. Бастамасында біз нөл дауыстылар көрдік, сонымен мен дауыстылар санын бақылау үшін қолданбақпын. Біз әрбір дауыстыны жеке жеке қарастыра отыра жолды түзетіп өтеміз. Ол үшін циклді қолдансақ болады. Сонда S-тегі әрбір символ үшін, ол дауысты ма, әлде жоқ па екенін тексеруіміз қажет. Мен S тіркесін осыны тексеру үшін қолдана аламын, осы шартты тексеру үшін. Егер де символ a, e, i, o, u, кіші әріптер жолында болса. Және A, E, I, O, U, үлкен әріптер, олай болса ол даусты дыбыс. Ондай жағдайда,  дауыстылар санын мәнін көбейткіміз келеді. Сонда дауыстылар саны өзіні ағымдағы мәніне қосу бірді иеленеді. Бұл цикл орындалуын аяқтаған соң, және біз жолдағы әрбір символды түзеген соң, S-тегі жалпы дауыстылар санын құрайды, яғни ол бізге шығарылатын мән. Ал енді сәл кідіріп, осы меншіктеу тіркесі жайында ой жүгіртіп көрейік. Осы меншіктеу тіркесінің оң қол жағындағы амал дауыстылар саны айнымалысынан тұратынына көңіл аударыңыз. Дауыстылар саны циклдан тыс болып, бұл жерде емес деп елестетіп көріңіз. Осы меншіктеу тіркесіне жеткенімізде, сол дауыстылар санына қарасақ, атау қатесі шығады. Сонда біз бастапқыда дауыстылар санын орнату үшін қолданған меншіктеу тіркесі аса маңызға ие. Ал енді осы жүйені әске қосайық, яғни мысалымызды тексерейік. Сонымен бірінші біз модульді қосамыз, содан соң қорапшада, дауыстыларды санауды қосамыз. Happy Anniversary-дегі жауап бес болған.
Ал XYZ жауап нөл болды. Дауыстылар саны айнымалысы жинақтаушы, себебі ол ақпарат жинайды.
Онда бастапқы мән нөл бар, және оның мәні дауыстының орналасқан жеріне қарамастан өсіп келеді. S сынағы аяқталған кезде цикл да аяқталады, яғни барлық дауыстылар санауға алынды. Онда бастапқы мән нөл бар, және оның мәні дауыстының орналасқан жеріне қарамастан өсіп келеді. S сынағы аяқталған кезде цикл да аяқталады, яғни барлық дауыстылар санауға алынды. Жинақтаушы міндетті түрде сандық бірлікте емес, оның дәлелін келесі мысалдан көреміз. Біздің келесі тапсырмамыз берілген жолдағы барлық дауысты дыбыстарды шығару.
Мен қайтадан мысалдан бастамақпын, біз алдыңғы функциядағыға ұқсас мысалды ала аламыз. Сонымен, бұл функцияның атауы Дауыстыларды Жинау болады, себебі біз оларды жинайын деп отырмыз. Және берілген happy anniversary жолы бізге a, A I E a әріптерін қайта шығарып беруі қажет. Бұл жағдайда, жолда ешқандай дауыссыз жоқ болғанда ол бізге бос жол шығарып беруі қажет, Сонда бұл жай ашық сілтеме, белгі жабылған сілтеме белгісі. Ол жол параметрін алып, жолды шығарып береді. Және функция атауы көргеніміздей дауыстыларды жинау. Параметрді атау үшін қайтадан мен қайтадын S-ті қолданамын. Бұл функцияның қызметі S-тен дауыстыларды шығарып беру. Бұл жағдайда Y дауысты ретінде қарастырылмаған. Дауыстыларды санауда орындағанымыздай. Мен осы мәселені қалай шешекенімізден бастағым келіп отыр, ол мысал функция нені шығару керек екенін анықтағанымызда. Әрбір символды жеке жеке ретпен қарастырамыз.
Сонымен, бірінші Н қарастырамыз, содан соң А. Мен дауыстыны санаған сайын оны бақылауда ұстап отырамын. Сонда менде A P, P Y бос кеңістік содан соң келесі А бар, кей объект мен осы екеуін таңдағанымда бақылап отыр, N, N I және т.с.с. Сонымен біз жолды символ соңынан символ қарастырамыз, ал а дауыстысын тапқан кезімде, мен оны chara- символдар жиынтығына қосамын. Енді осы функцияны орындайық. Алдындағыдай бізге ақпарат жинау керек. Одан бұрын, ол бүтін сан болғандықтан, бұл жолы біз ақпаратты жолда  жинаймыз. Сол үшін мен айнымалы дауыстыны жолға қатысты ету үшін аламын.
Ол жол бастапқыда бос болды. Онда ешқандай дауысты көрмедік. із осы жолды символ симвло ретімен [дыбыссыз] қолдна отыра сынап көрмекпіз, және сол символ біз алғашқыда қолданған тәсіл қолданған ба екенін тексеруден бастағымыз келіп отыр. Егер де символ дауысты дыбыс болса, мен оны осыған дейін көрген дауыстылар жиынтығына қосқым келіп отыр, сонда менің дауысылар айнымалым өзінің бастапқы мәніне қатысты қосу біз қазір ғана көрген символ. Мен  символды ағымдағы дауыстылар жолына қосу үшін байланыстыру операторын қолданып отырмын. Функцияның аяғында, цикл яқталған сәтте, жолдағы әрбір символ сыналды дауыстылар S әрбір дауысты дыбысын құрайтын жолға қатысты болады, яғни осы біздің алатын жауабымыз болмақ. Бізге функцияны сынақтан өткізу қажет, ол үшін біз модульді іске қосамыз. Содан соң мысал функция шақыртуын қрапшада шақыртамыз. Дауыстыларды жинау жолға қайтады, оны біз күткенбіз. бұл аргумент түрлі аргументтерді шығарады
және біз күткендей жолға қайта оралады. дауыссыз дыбыстар айналмалылары секілді 
дауысты дыбыстар да аккумулятр тәрізді. функцияны атқаруына байланысты курс төңірегіндегі
жол санын есептейді. сандық дауысты дыбыс ретінде нөлден бастап өсіп
дауыстылар бос тәрізді