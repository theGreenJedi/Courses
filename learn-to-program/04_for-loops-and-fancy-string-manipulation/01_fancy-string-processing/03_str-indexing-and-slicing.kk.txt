Жолмен жұмыс істегенде, өте жиі жолдың бөлігі болатын жолды шығара білуіміз керек. Мысалы, жолақ телефон нөмірінен тұрады, бізге аймақ кодын шығарып алу керек. Бұл сабақта, мен екі амал ұсынамын, олар индекстеу және қабаттарға жіктеу, оларды біз осы жолдың ішінен жолды шығарып алуда қолданамыз. Бұл дәрісте біз жолдарды осы мысалымыз тәрізді программаны үйрену үшін қолданамыз. Әрбір символдың өз индексі бар, ол оның жолақтағы орны.
Сонымен, индекстегі жол нөл, жақшамен белгілеуді көрсетеді, ол L. Жолдың индекс бірінде, бізде e бар.
Индекс екіде, бірінші а бар. Нөл бірінші орында екенін аңғарыңыз, бір емес. Сонда біз санақты нөлден бастаймыз. Сонымен бірге біз теріс индекстерді соңынан бастап санау үшін қолдана аламыз, яғни жолдың оң қол жақ бөлігінен. Сонда – бірдегі жолақ m-де. Ал –екі соңғы а, -үш дегеніміз соңғы r. Индексті қолданғанымызда, бір уақытта жол бөліктерінен бір символды бөліп ала аламыз. Дегенмен бірден де көп символды да бөліп шығара аламыз, ол үшін қабаттарына ажырату тәсілін қолданамыз. Қабаттарына ажырату арқылы біз бастапқы индексті колонна соңынан, сосын соңғы индекс  және ол бізге бастапқы индекстен бастап жол астын береді, бірақ соңғы индекссіз. Мысалы, осы жолды біз нөл позициясынан аламыз, индекс нөлге дейін, бірақ индекс бесті құрамайды, сонда ол бізге Learn тізбегін береді. Алты индекске дейін, бірақ сегізсіз болады. Тоғызыншы индекстен бастап он алтыға дейін сөз Program және жол Program болады. Он алты жодың ұзындығына тең. Оның баламасы тоғыз индексінен басталуы керек, бірақ s ұзындығына дейін жетеді. Len дегеніміз орнатылған программа болып табылады, ол жолдың ұзындығын шығарып береді, яғни бұл жоғарыдағының баламасы болып табылады. Келесі бір шешімі тоғыздан бастап негіз қойып, индекс аяған түсіріп тастау. Олай болса өздігінен болатын жолдың соңына көшу, ол да жоғарыдағы екі амалдың баламалары. Бастама индекс те алынып тасталына алады. Мысалы, біз қос нүкте қосып келесі а индекске жете аламыз, сонымен бірге, біз бастапқы да соңғы да индексті алып тастай аламыз. Ол бізге толығымен жолды береді.
Теріс индекстер индекстеу үшін қолданыла алатынын байқадық, сонымен бірге оларды қабаттарға жіктеу үшін де қолдануға болады. Бір индекстен сегізге дейінгі, бірақ кірмейтін жол ішіндегі жолды алайық. 
Сонда біздің балама амалымыз бірденбастап бірақ –сегіз кірмейтін, немесе –он бестен бастап, бірақ –сегіз кірмейтін амалды ала аламыз. Яғни осы үш амал өзара баламалар болып табылады. Қабаттарына жіктеу мен индекстеу тәсілдері белсінді болатын жолды жетілдірмейді.
 Яғни s қатысты болатын мән жоғырадағы тәсілдер салдыранын өзгермейді. Шындығында, біз жолдың мәнін өзгерте алмаймыз. Келесідегідей тәсілдер қатеге алып келеді. Егер де мен индекс алтыдағы жолды алсам және қолдансам және d енгізсем, қате жауапқа тап боламын. Сол сияқты, индекс тоғыздан он алтыға дейінгіден жолды жетілдіруге тырысатын болсам, іске қоссам, ол кезде де қатеге кез боламын. Learned to Program қатысты жолды өзгерткім келеді делік. Мұнда біз қолдана алатын тек бір ғана амал-тәсіл бар. s-тің ағымдағы мәнін қолданып, оқу деген сөзді ала аламыз, содан соң оны жолдың қалған бөлігімен байланыстырамыз. Ол есептеп келе Программаны Үйрену шығарып береді. Ал енді бізде сол жаңа жол бар, Программаны Үйрену, біз s-ті осының тақ мәні орнына білдіретіндей етіп аламыз. Біз s  жолды жетілдірген жоқпыз, өзінің бастапқы қалпында қалды. Біз оны жетілдіре алмаймыз. Оның орнына біз жаңа жол жасадық та сол s соған қатысты қылдық.