1
00:00:01,240 --> 00:00:05,608
In this lecture, we're going to combine
some of the different topics that we've

2
00:00:05,608 --> 00:00:08,317
covered.
We're going to read data from a file and

3
00:00:08,317 --> 00:00:13,406
store it in a dictionary.
In this lecture, we're going to work with

4
00:00:13,406 --> 00:00:16,600
the file on the left-hand side of your
screen.

5
00:00:16,600 --> 00:00:21,738
It contains assignment one grades.
There are two columns, one for a student

6
00:00:21,738 --> 00:00:26,876
ID, and a second for the grade that the
student with that ID earned on the

7
00:00:26,876 --> 00:00:30,487
assignment.
If you watch the optional lecture from

8
00:00:30,487 --> 00:00:35,503
last week, the data will look familiar,
and the task will be a bit familiar too.

9
00:00:35,503 --> 00:00:39,940
But, this time we're working with
dictionaries rather than with lists.

10
00:00:40,780 --> 00:00:43,703
We're going to write the function
read<u>grades.</u>

11
00:00:43,703 --> 00:00:48,250
It has one parameter, which is a file that
has been opened for reading.

12
00:00:48,250 --> 00:00:53,512
That file will start with a header that
contains no blank lines and then a blank

13
00:00:53,512 --> 00:00:58,320
line and then the lines of the file with
the student number and the grade.

14
00:00:58,900 --> 00:01:04,833
The task that this function will complete
is to read the grade information from the

15
00:01:04,833 --> 00:01:08,506
file and build a dictionary for each key
as a grade.

16
00:01:08,506 --> 00:01:13,310
And each value is the list of IDs of
students who earned that grade.

17
00:01:13,310 --> 00:01:20,362
For example, for the grade 77.5 for that
key, there will be a list containing

18
00:01:20,362 --> 00:01:27,693
student ID 0052 and student ID 1311,
because those two student ID's earned that

19
00:01:27,693 --> 00:01:31,591
grade.
There may be other students, as well,

20
00:01:31,591 --> 00:01:38,180
later in the file who will appear in the
values list for that key 77.5.

21
00:01:38,580 --> 00:01:43,847
To implement this function, we need to
perform two main tasks.

22
00:01:43,847 --> 00:01:47,560
The first is you just skip over the
header.

23
00:01:47,560 --> 00:01:55,157
Once we have skipped the header, we can
move on to reading the grades from the

24
00:01:55,157 --> 00:02:00,320
file and accumulating them in the
dictionary, .

25
00:02:00,320 --> 00:02:05,898
We'll begin by skipping the header.
We have four ways to read from a file and

26
00:02:05,898 --> 00:02:11,078
since we're only processing part of the
file, we're going to use the read line

27
00:02:11,332 --> 00:02:15,099
approach.
So we'll start by using one line as a file

28
00:02:15,099 --> 00:02:21,040
and we want to keep reading the lines of
the header until we reach the blank line.

29
00:02:21,040 --> 00:02:29,334
A blank line isn't truly blank.
It contains the new line character, so as

30
00:02:29,334 --> 00:02:36,938
long as the line is not the new line
character, we'll keep reading.

31
00:02:36,938 --> 00:02:43,944
That would be part of the header.
Once the header has been skipped, we can

32
00:02:43,944 --> 00:02:48,191
move on to accumulating the grades into a
dictionary.

33
00:02:48,191 --> 00:02:53,960
The accumulator I'll use is, grade<u>to<u>ids
and it will initially be empty.</u></u>

34
00:02:55,160 --> 00:03:02,646
We need to read the next line as a file.
We can do that using read line and we want

35
00:03:02,646 --> 00:03:08,180
to keep reading lines of the file until
the end of the file is reached.

36
00:03:08,780 --> 00:03:11,960
.
That would mean that the line would be

37
00:03:11,960 --> 00:03:15,207
empty.
So we want to continue reading as lion, as

38
00:03:15,207 --> 00:03:18,320
line is not equal to the empty string.
.

39
00:03:18,320 --> 00:03:23,658
Once we've read a line, we need to extract
a student ID and the grade.

40
00:03:23,658 --> 00:03:29,152
The student ID's are all four characters,
so we'll use that information.

41
00:03:29,152 --> 00:03:32,788
.
Student ID will be a slice of the line

42
00:03:32,788 --> 00:03:38,050
that the line from the beginning up to the
fourth character .

43
00:03:38,050 --> 00:03:43,202
So that will give us a strain containing
the four digits of the student ID.

44
00:03:43,202 --> 00:03:48,767
The grade is going to be what comes after
that, of a, there are a couple of spaces

45
00:03:48,767 --> 00:03:53,301
before the grade and there's a new line
character after the grade.

46
00:03:53,301 --> 00:03:59,072
So what we can do is we can take the rest
of the line, and strip out the white space

47
00:03:59,072 --> 00:04:03,950
that comes before and after it.
So, the grade will be a slice from index

48
00:04:03,950 --> 00:04:09,240
four to the end of the line, but will
strip off the white space for the grade.

49
00:04:09,580 --> 00:04:12,850
We aren't quite done working with grade
yet.

50
00:04:12,850 --> 00:04:18,017
We want grade to refer to a float, not a
string and currently, it refers to a

51
00:04:18,017 --> 00:04:23,459
string that contains a numeric value.
We're going to apply float to that string

52
00:04:23,459 --> 00:04:28,627
to get back a floating point number.
Now that we have the grade and student

53
00:04:28,627 --> 00:04:31,589
I.D., we need to add them to the
dictionary.

54
00:04:31,589 --> 00:04:36,825
There are two scenarios to consider.
One is that a grade is not yet a key in

55
00:04:36,825 --> 00:04:42,268
the dictionary and the other is a case
where the grade is already a key in the

56
00:04:42,268 --> 00:04:45,920
dictionary.
We'll consider these two cases separately.

57
00:04:46,680 --> 00:04:54,648
We'll start with the case where the grade
is not yet a key in the dictionary.

58
00:04:54,648 --> 00:05:01,387
So, if grade is not in grade<u>to<u>ids.
In that case, we need to add it for the</u></u>

59
00:05:01,387 --> 00:05:05,704
first time.
We can access grade<u>to<u>ids and set grade</u></u>

60
00:05:05,704 --> 00:05:10,260
as a key assigning to it the value, which
is a student ID.

61
00:05:10,260 --> 00:05:16,655
Student ID is just a string though, and
the value associated with a key for this

62
00:05:16,655 --> 00:05:20,172
dictionary needs to be in a list of
strings.

63
00:05:20,172 --> 00:05:26,920
So we need to put student ID in a list.
We can use the square brackets to do so.

64
00:05:28,320 --> 00:05:33,591
The second case is the case where grade is
already a key in the dictionary.

65
00:05:33,591 --> 00:05:39,285
So if that if condition is false, we need
to do something different, because grade

66
00:05:39,285 --> 00:05:44,093
already is a key.
Because it's a key already, there already

67
00:05:44,093 --> 00:05:48,912
is a value associated with it, and that
value is a list of strings.

68
00:05:48,912 --> 00:05:52,490
We want to add student ID to the list of
strings.

69
00:05:52,490 --> 00:05:58,120
So we need to access that list of strings
and we can do that by looking at the

70
00:05:58,120 --> 00:06:02,824
dictionary and looking up the value
associated with the key grade.

71
00:06:02,824 --> 00:06:07,885
This gives us a list of strings and to it
we can append the student ID.

72
00:06:07,885 --> 00:06:13,159
So in this case, we don't need to make a
new list we're just going to add the

73
00:06:13,159 --> 00:06:18,857
student ID to the existing list.
Once we finish adding this grade and

74
00:06:18,857 --> 00:06:24,457
student ID to the dictionary, we can move
onto the next line of the file.

75
00:06:24,457 --> 00:06:30,368
So, we'll read another line.
Once all the lines of the file have been

76
00:06:30,368 --> 00:06:36,824
read, the wire loop condition will become
false, and we can return the grade to IDs

77
00:06:36,824 --> 00:06:40,981
dictionary.
Now that we've finished writing this

78
00:06:40,981 --> 00:06:46,874
function, we can run it.
To begin, I have to open up grades file,

79
00:06:46,874 --> 00:06:54,153
which happens to be stored at this long
path and then I can call the grades,

80
00:06:54,153 --> 00:07:00,761
Passing that grades file is the argument
and it returns a dictionary.

81
00:07:00,761 --> 00:07:08,518
We can see in this dictionary that 77.5
does have student ID 0052 as one of it's

82
00:07:08,518 --> 00:07:15,605
values, along with 1311, and actually,
several other student IDs earned that