1
00:00:02,010 --> 00:00:05,530
سابقا از چرخه ها با بهره گیری از ضرایب استفاده کردیم،وقتی با تک string کار میکردیم یا

2
00:00:05,530 --> 00:00:06,990
یک تک لیست.

3
00:00:06,990 --> 00:00:10,040
در این مبحث،قصد داریم که روی ضریب ها از چرخه استفاده کنیم

4
00:00:10,040 --> 00:00:13,720
که به آیتم های موقعیت های مربوطه از دو لیست مختلف دست یابیم.

5
00:00:13,720 --> 00:00:16,770
و کاراکترها در موقعیت های مربوطه از دو string مختلف.

6
00:00:18,630 --> 00:00:22,810
با به کار گیری تابع sum_items کارمان را شروع میکنیم.

7
00:00:22,810 --> 00:00:27,980
دو پارامتر به خود میگیرد ،list1 وlist2 که هر دو لیست اعداد هستند.

8
00:00:27,980 --> 00:00:29,680
و لیست نمرات را تحویل میدهد.

9
00:00:30,700 --> 00:00:34,460
نقش تابع این است که لیست جدیدی را ارائه دهد،که در آن هر

10
00:00:34,460 --> 00:00:39,131
آیتم مجموع آیتمها در موقعیت مربوطه list1,list2باشد.

11
00:00:41,150 --> 00:00:44,230
حالا تحقیق میکنیم که منظور از موقعیت مربوطه چیست.

12
00:00:45,510 --> 00:00:50,682
اگر list1 سه عضو 1و2و3 

13
00:00:50,682 --> 00:00:58,470
و list2سه عضو 2و4و2 را داشته باشد.

14
00:00:58,470 --> 00:01:03,010
آنگاه،سه عضو در هر لیست با ضریب های 0و1و2 داریم.

15
00:01:04,010 --> 00:01:08,710
وقتی که میگوییم که میخواهیم اعضای مربوطه list1,list2،

16
00:01:08,710 --> 00:01:14,170
منظورمان اعضا یا آیتم های با ضریب یکسان است.

17
00:01:14,170 --> 00:01:22,400
مثلا،در ضریب 0،مقادیر 1و2 را داریم که جمعشان میشود3.

18
00:01:22,400 --> 00:01:27,790
در ضریب1،مقادیر2و4 را داریم که وقتی که جمعشان بزنیم میشود5.

19
00:01:27,790 --> 00:01:32,950
و در ضریب2،مقادیر3و2،که وقتی جمع زده میشود،5 را به دست میدهد.

20
00:01:33,980 --> 00:01:37,710
این لیست جدیدی را میسازد که تابع تحویل میدهد.

21
00:01:39,800 --> 00:01:41,740
حالا برنامه را بنویسیم.

22
00:01:41,740 --> 00:01:44,700
قصد داریم که لیست جدیدی را تحویل دهیم،و بنابراین

23
00:01:44,700 --> 00:01:50,720
متغیری با عنوانsum list به وجود میاوریم که در ابتدا لیستی خالی است.

24
00:01:50,720 --> 00:01:52,960
این لیست یکی یکی اضافه میشود،

25
00:01:52,960 --> 00:01:55,440
از طریق دوره ای که تابع پیش میبرد.

26
00:01:57,160 --> 00:01:59,140
دیدیم که وقتی به مثال نگاه میکردیم،

27
00:01:59,140 --> 00:02:04,560
از ضریب ها برای دسترسی به اعضای list1 , list2استفاده میکنیم،پس

28
00:02:04,560 --> 00:02:11,240
میخواهیم از طریق ضریب ها،برای i در دامنه طول لیست، چرخه بسازیم.

29
00:02:11,240 --> 00:02:15,800
و اکنون میتوانیم یکی از این دو لیست را در اینجا به عنوان مولفه رد کنیم.

30
00:02:15,800 --> 00:02:19,970
مطابق با آن چه که نشان داده شد

31
00:02:19,970 --> 00:02:21,700
list1 ,list2 یک طول دارند.

32
00:02:23,320 --> 00:02:27,100
بنابراین،هر یک از دو لیست را میتوانم انتخاب کنم.

33
00:02:27,100 --> 00:02:29,740
برای انتخاب  طولlist1

34
00:02:29,740 --> 00:02:33,227
که به این معنی است که دامنه مقادیر0و1 تا

35
00:02:33,227 --> 00:02:35,780
طول لیست ولی نه خود طول لیست را شامل میشود.

36
00:02:38,145 --> 00:02:42,943
میخواهیم که در بدنه چرخه به i در list1 و

37
00:02:42,943 --> 00:02:45,668
list2 درموقعیت i دسترسی یافته و آنها را با هم جمع کنیم.

38
00:02:49,928 --> 00:02:54,459
وقتی که جمع را حساب کردیم،میخواهیم که آن را به sum list بیافزاییم.

39
00:03:03,192 --> 00:03:07,781
روش متکی به لیست،برای افزودن مجموع به انتهای sum list استفاده میشود.

40
00:03:10,058 --> 00:03:13,606
این تنها کاری است که نیاز ست که در بدنه چرخه for انجام دهیم.

41
00:03:13,606 --> 00:03:16,441
وقتی که چرخه for به پردازش پایان داد و

42
00:03:16,441 --> 00:03:19,051
خارج شد،آنگاه میتوانیم که sum list ا تحویل دهیم.

43
00:03:22,552 --> 00:03:25,023
اکنون فراخوانی تابع نمونه را به جریان میاندازیم.

44
00:03:27,388 --> 00:03:31,897
ابتدا،برنامه را به جریان بیاندازید،و آنگاه shell را،تابع را فراخوانید.

45
00:03:31,897 --> 00:03:35,847
و میتوانیم ببینیم که لیستی را با مقدارهای3و6و5 تحویل میدهد.

46
00:03:39,139 --> 00:03:41,050
یک تابع دیگر را به کار بگیریم.

47
00:03:42,570 --> 00:03:45,180
نام تابع count_matches است،و

48
00:03:45,180 --> 00:03:47,030
دو string دارد.

49
00:03:47,030 --> 00:03:49,280
دو پارامتر stringی s1 و

50
00:03:49,280 --> 00:03:54,540
s2 داشته و عدد صحیحی را تحویل میدهد که تعداد موقعیت ها در string موسوم به s1،

51
00:03:54,540 --> 00:03:58,510
کهدر موقعیت مربوطه s2 همان کاراکتر شده است.

52
00:04:00,680 --> 00:04:05,450
به عنوان نمونه،برای stringهای به نام apeوate،

53
00:04:05,450 --> 00:04:09,560
دو کاراکتر مشترک است.

54
00:04:09,560 --> 00:04:15,390
در ضریب0 aو در ضریب 2 e.

55
00:04:17,730 --> 00:04:21,300
برای string های head ,hard.

56
00:04:23,770 --> 00:04:31,765
در اینجا نیز دو کاراکتر مشترک هست،h در ضریب صفر و d در ضریب 3.

57
00:04:34,090 --> 00:04:38,080
اولین قدم برای به کار گیری این تابع ایجاد جمع کن است.

58
00:04:39,310 --> 00:04:43,980
آن را num matches میخوانم،و مقدار اولیه اش صفر قرار میدهم.

59
00:04:43,980 --> 00:04:46,720
آن متغیر تعداد حروف یک جور را جمع میکند.

60
00:04:48,580 --> 00:04:50,560
در نگاهی به مثال آن را مشاهده کردیم،

61
00:04:50,560 --> 00:04:54,890
مقایسه بین کاراکترها با ضریب یکسان بود.

62
00:04:54,890 --> 00:04:59,940
معنی این سخن این است که میخواهیم که چرخه خود را بر پایه ضریب های string بنویسم.

63
00:04:59,940 --> 00:05:04,879
پس از دامنه استفاده خواهیم کرد،با شروع از وضعیت 0،یا مقدار صفر،

64
00:05:04,879 --> 00:05:07,594
تا طول string به نام s1.

65
00:05:10,413 --> 00:05:17,117
و آن چه که میخواهیم انجام دهیم مقایسه کاراکتر string به نام s1،

66
00:05:17,117 --> 00:05:22,328
پس اگر s1 در ضریب i برابر با s2 در ضریب i باشد

67
00:05:22,328 --> 00:05:24,143
آنگاه که معلوم شد که یکی هستند،و

68
00:05:24,143 --> 00:05:28,525
میتوانیم که به متغیر num_matches یکی یکی اضافه کنیم.

69
00:05:31,221 --> 00:05:33,860
آنگاه که چرخه به پردازش پایان داد و

70
00:05:33,860 --> 00:05:39,454
از تک تک کاراکترهای string ها گذر کردیم،آنگاه num_matches تحویل داده میشود.

71
00:05:44,869 --> 00:05:46,990
فراخوان نونه تابع را به جریان بیاندازیم.

72
00:05:50,311 --> 00:05:55,200
ابتدا مثال ate,ape عدد2 را تحویل میدهد،و

73
00:05:55,200 --> 00:06:00,613
آنگاه مثالhead ,hard عدد 2 را تحویل میدهد.