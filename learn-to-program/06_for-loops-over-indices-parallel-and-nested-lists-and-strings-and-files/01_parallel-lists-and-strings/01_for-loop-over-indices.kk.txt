Алдыңғы дәрістерде біз жол бойында орналасқан нысандардың тізбектері жөнінде сөз қозғаған болатынбыз.
Бұл дәрісте біз жолдар мен тізімдердегі индекстердің тізбектерін талқылайтын боламыз. Бұл бізге бірқатар мәселені шешуге көмектеседі. Бірінші мәселе көршілес орналасқан нысандарды санау, олар жолдың ішінде бірдей орналасқан.
Біз мысал жолды аламыз. Бір жолдың ішінде үш көршілес нысанның жұбы бар олар бірдей, c, f, g нысандары бірдей.
Бұл мәселені шешу үшін бізге осы нысандары салыстыру керек.
Нөлдік индекстегі жол бірінші индекстегі жолмен салыстырылынуы керек.
бірінші жолдағы индекс екінші жолдағы индекспен салыстыру керек.
Бұл амал соңғы нысанға жеткеше жалғасады.
екінші жолдағы нысан біз оны соңғы жолдағы нысанмен салыстырып, бірінші жолдағы индексті аламыз. Жалпы айтқанда, біз оны салыстыру яғни i нысанын жолдағы индексті i+бір.
Біз функциялардың бірқатарын осы сандарды жалпылау үшін қолданамыз.
нөл, бірді қосып, -екіні қосып i мәнін салыстырамыз.
Аймақ үш параметрден тұратынын ұмытпаңыздар. біреуі міндетті және екі қосымша.
Міндетті параметр бөлікті аяқтаған кезде қажет болатын мән,
Ал қосымша параметрлер арқылы біз бастай аламыз.
Бұл жағдайда бізге қажетті бастау нөлге тең. ол орындалмайды.
Бірінші қадам ол да орындалмайды.
Біз енді тек қана тоқтау командасын ғана қолдана аламыз. Біз бірінші жолдың ұзындығы біткенше тоқтап үлгеруіміз керек. басқа сөзбен айтқанда, біз жоғарылып -2 жолының ұзындығын қосып алып, немесе жолдың екінші соңғы нысанын қосып алуымыз керек.
Біз мұны -1,, жолдың ұзындығы арқылы анықтай аламыз бірақ оның мәнін білмейміз. индекстелінген мән басып шығарылады. Біз оны тізбекке жаздық,
біз тура сол атауды жолдағы қайталанатын көршілес жұп нысандарды санауға қолданамыз. Біз көршілес жұптарды санауға кірістік. Мұның бір ғана жолдық параметрі бар және ол кірмелерге қайта оралады. біз бұл функцияны орындаған кезде 
мысал етіп алып отырған жолды аргумент деп есептесек функция үштікті қайтарады.
Бұл функциялар үшін біз қанша қайталанған нысан көріп тұрғанымызды білуіміз керек. Мен бұл амалды орындау үшін өзгерменің атын қолданамын. Бұл қайталамалар нөлдің негізгі мәндері болып табылады. Біз жолдағы нысандарды санап бітіп, оларды уақытты индекстеуге қолданумызы керек.
Біз бұл тізбекке атау жазып қойғанбыз, Біз нөлдік индекстен бастап екінші соңғы нысанға дейін жалғастырамыз Тізбектің негізінде s позициясындағы i индексіндегі нысанды салыстырып олардың қай жерде бірдей болатындығын анықтаймыз.
Біз енді тепе тең анықтағышын көре аламыз, i1 индексіндегі i  индексін s индексімен салыстырамыз +бір.
Олардың мәні бірдей болған кезде біз оларды көршілес нысандар екнін біле аламыз.
Қайталанатын өзгерме бірге көбею керек.
Тізбектің соңында бірінші қадамдағы мән қайта оралады. Ең соңында, осы функцияны дұрыс жұмыс істейтіндігіне көз жеткізуіміз үшін қайта қосамыз. Ол үшін мен модульді орындай бастауым керек. Енді функцияны орындай аламын және ол үшті қайта келтірді, Қорытындылай келгенде, біз тізбектегі элементті өзге тізімдегі элементпен салыстырғымыз келді.
ол үшін біз индекстерді қолданамыз. нысанның мәні қандай екендігін білу маңызды емес. бізге ол нысанның қай жерде орналасқандығын білу жеткілікті ол бізге қай жерде орналасқан элементпен салыстыру үшін қажет.
Біздің қандай амал орындағанымызды түсіну үшін біз ол кодтың қай уақытта орындалғандығын Питон визуализаторы көмегімен анықтаймыз. мен функцияның негізгі қызметі туралы жалпы түсінікті бірінші жолы беріп тұрмын. енді біз он тоғызыншы жолға көшіп функцияны қайта орындаймыз. Функция атауынан соң функция параметрлері a c, c f, f h нысандарына сілтеме жасалынады.
олар функцияға аргумент ретінде қолданылады.
он бірінші жол орындалып  біткеннен кейін ол нөлдік мәнге сілтеме жасайды.
он үшінші жолда тізбектің бірінші жолы орналасқан.
мен нөлдің негізгі мәнін алуым керек. I арқылы нөлге сілтеме жасалынады. Егер шарт бірінше рет тексеріліп жатса,
s нысаны  i, ал s нөлде белгіленеді s нысаны  i + бір нысанымен салыстырылды, ол с нысаны болып табылады.
Бұл нысандар тең емес, сондықтан тізбектің негізі жүзеге аспайды.
біз  i бүтін санына көшеміз. i келесі мәнге, яғни бір мәніне ие. енді  i арқылы бірге сілтеме жасалынады.
бірдегі s екідегі s пен салыстырылынады. себебі бұл нысандар бірдей.
Бұл тізбектің негізі орындалды. Және қайталамалар бірге өсті.
Қаталамалар енді бірінші мәнге сілтенеді. i келесі мәнге, яғни бір мәніне ие. бірінші индекстегі жолмен салыстырылынуы керек.
бірінші жолдағы индекс себебі бұл нысандар бірдей.
Бұл тізбектің негізі орындалды. біз тізбектің атауын қайта қарастырып, І енді келесі мән болады. І арқылы үшке сілтеме жасалынады. бірінші индекстегі жолмен салыстырылынуы керек.
бірінші жолдағы индекс себебі бұл нысандар бірдей.
Бұл тізбектің негізі орындалды. Және қайталамалар бірге өсті.
Қаталамалар енді бірінші мәнге сілтенеді. ол мән төртке тең.
Төртінші индекстегі жол тең емес. бесінші индекстегі негіз де бірдей емес болғандықтан жолдың негізі орындалмайды. біз салыстыруға қажетті жұптардың соңғысы. екінші жолдағы индекспен салыстыру керек.
Бұл амал орындалды, ол тізбектің соңғы амалы болатын. Біз атауды тағы бір жолы қолданып, оған аймаққа жалғасатын сандар жоқ екендігін көрдік.
Осыдан кейін Питон он жетінші жолға көшті.
Енді біз минут айнымалысының мәніне қайта оралмақпыз, және қайталанады, ол екіге тең және қайтарылып, он тоғызыншы жолда басып шығарылады. Индекс арқылы тізбектелетін басқа функциямен танысып көрейік. Бұл солға көшу деп аталады.
Оның бір жол параметрі ғана бар және ол осы жолды жаңартады, сондықтан ешқандай түр қайтарылынбайды. тізімнің жаңартылуы дегеніміз тізім элементтерінің әрқайсысын жаңарту және оларды сол жаққа бір позицияға жылжыту.
Бірінші нысан жалжыды. ол ең соңғы позицияға жылжытылды.
бұл функцияның алдыңғы шарттары тізімнің ұзындығын кем дегенде бірге созады.
Төрт жолдан тұратын тағы бір мысал.
a, b, c, және d жолдары. Бұл тізім солға қарай ығысады.
ол b нысанынан бастап нөлдік индекске қарай бір орынға жылжиды. С екінші индекстен бірінші индекске.
D үшінші индекстен екінші индекске қарай көшеді.
Ал а нөлден соңғы позицияға дейін яғни D нысанынң орнына көшеді.
Сонымен нәтижелі тізім b, c, d және а.
Бұл мысалды Ь нысанының а позициясына көшкенін байқауға болады.
ал с бұрынғы ь ның орнына көшті.
Мен көрсетіп мысал ретінде айта алмайтын бір нәрсе ол біз ь нысанын а ның орнына жылжытқан кезде біз а нысанынң жолын сақтап қалуымыз керек. нөлдік индекстің мәні қандай, ол мәнді кейіннен жылжытудың орнына оны тізімнің ең соңғы орнына қоямыз.
Бұл жердегі өзгерме осы нысанның жолын сақтау кезінде пайда болады.
Ол нөлдік индекстегі мәнді қажет етеді. Кейін біз нөлдік индекстің мәнін алып, тізімнің соңындағы орынға қоя алатын боамыз.
Біз орындайын деп жатқан тапсырма бірден басталатын нысаннан басталады.
Мен аймақты қайта қолданамын. Мен ең бірінші бірінші индекспен жұмыс бастаймын. Біз бірінші жолдың ұзындығы біткенше тоқтап үлгеруіміз керек. бұл жердегі тапсырма біз І позициясындағы тізімді алып- бір және тізімнің ұзындығынан кем болғанша жалғасырамыз.
Басқа сөзбен айтқанда, біз І мәнді, біз тізімді нөлдік позициядан алып бірінші позицияға қоямыз.
Ендіэлементтің барлығы да солға жылжып біткеннен кейін оларды бірінші орында тұрғандарын бөлек алып, оны соңғы жолға жылжытамыз. Соңғы элемент - бір арқылы анықталуы мүмкін, біз оны бірінші өзгермеге енгіземіз, оның түпнұсқасы нөлдік индексте орналасқан еді.
Бұл жерде Л тізімі жаңартылады. Бұл Біз алдында қолданған мәнге ұқсас жаңа тізім жасаймын. Соға жылжып кеткен жолды аргумен ретінде қолдана аламыз. Атаудың құрылымын зерттегенде, оның тізбекке қатысты ол нысан солға жылжып, ең соңғы орынға орнықты. Питон визуализаторын функцияның орындалғанын тексеру үшін қолданамыз. сол арқылы біз кодты жақсырақ түсініп, өз кодыңызды жазған кезде қолданылатын амалдырды үйрендік. он жетінші тізім арқылы әріптің өзгермелері төрт элементке сілтеме болады. оның ішінде a, b, c және d жолдары бар.
Енді солға жылжу функциясы деп аталады. Л параметрінің функциясы функцияға қолданылатын аргумент ретінде жіберілді.
оныншы жолда бірінші нысан нөлдік индекстегі мәнді алады.
Бірінші нысан арқылы А жолына сілтеме жасалынады. тізбек он екінші долда басталып, І нысанының мәні бірге тең. І арқылы бірге сілтеме жасалынады, бірінші мән аймақ арқылы жалпыланады. Тізбектің негізінде, нөлдік индекстің тізімі І -бір. Ол тізімделген мән. Сонымен мен нөлді тізімге енгіздім, ол қазір а болды.
бірдегі тізім ь, және нөлдегі тізімнен мән бірінші тізімге көшеді. нөлдегі тізім б нысанына сілтеме жасалынып, бірдегі индекс сақталады.
Сондықтан біз бірінші нысандағы өзгермені қолданамыз оны нөлдік индекстегі мәнді жалғастыру үшін. Біз оны бірінші нысанды соңғы орынға жылжытар алдында қолданамыз. Тізбекке қайта оралып,он екінші тізімді мән бірге өседі. І арқылы екіге сілтеме жасалады.
бірінші индекстегі тізім екінші индекстегі тізім мәнін алады да, бұл тізім арқылы С нысанына сілтеме жасалады. бірінші тізім орындалады.
ол арнайы жады. Енді бірдегі және екідегі тізімдер арқылы с нысанына сілтеме жасалынады. Ол үш мәніне ие.
екінші индекстегі тізім үшінші индекс арқылы орындалып, 
b, c, d, d. тізімдері пайда болады. Енді соңғы Д тізімін бірінші а тізіміне ауыстыратын уақыт жетті. Ол он бесінші жолда орындалады.
Соңғы орындағы тізім нөлдік индексте орындалатын мән арқылы жүзеге асады. Бұл біздің функциямыздың соңғы жолы. Функция орындалып аяқталады, және қайта оралып, шығарылады. Басып шығарылған кезде мәннің жоқ екендігін байқаңыз. b, c, d, және  a тізіміндегі мәндер енді көрсетіледі.