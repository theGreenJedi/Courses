1
00:00:01,043 --> 00:00:04,019
Olá.
Nesta palestra vamos começar a programar.

2
00:00:04,019 --> 00:00:09,028
Nos referimos a esta palestra ao Python como uma calculadora, porque

3
00:00:09,028 --> 00:00:13,038
nós estaremos nos concentrando em expressões matemáticas. Nesta palestra e ao longo do curso,

4
00:00:13,038 --> 00:00:17,067
estaremos usando IDLE, um programa que vem com a instalação do Python.

5
00:00:17,067 --> 00:00:20,085
Vamos mudar para IDLE agora e começar a programar.

6
00:00:18,746 --> 00:00:23,732
Isso é o IDLE, e a janela que nós estamos olhando agora  é chamada o shell.

7
00:00:23,732 --> 00:00:27,759
Isto é onde poderemos experimentar instruções de Python e explorar  as caracteristicas do Python

8
00:00:27,759 --> 00:00:32,728
Este símbolo, os símbolos de três setas, é

9
00:00:32,728 --> 00:00:37,776
chamado o prompt.
Ao lado do prompt, digitamos instruções.

10
00:00:37,776 --> 00:00:41,722
E quando nós teclamos Enter, 
o Python avalia essas instruções.

11
00:00:41,722 --> 00:00:46,714
Por exemplo, vamos digitar a instrução

12
00:00:46,714 --> 00:00:49,746
dois mais três, e pedir o Python para avaliá-lo.

13
00:00:49,797 --> 00:00:55,770
É importante notar que nada acontece até eu apertar a tecla Enter.

14
00:00:55,770 --> 00:01:01,792
Vejamos uma outra expressão, seis menos dois e novamente nada acontece

15
00:01:01,792 --> 00:01:06,726
até que eu pressione Enter.
Nesse ponto, Python avalia a expressão

16
00:01:06,726 --> 00:01:11,719
Outra expressão poderia ser sete vezes três.

17
00:01:11,719 --> 00:01:15,720
Até agora nós vimos três operadores,

18
00:01:15,720 --> 00:01:22,721
adição, subtração e multiplicação.
Outra operação é exponenciação.

19
00:01:22,721 --> 00:01:27,712
E podemos ler esta expressão, como dois elevado a cinco.

20
00:01:28,737 --> 00:01:33,707
Em seguida, vamos tomar quatro e divida-o por dois.

21
00:01:33,745 --> 00:01:38,709
Quando Python executa sua expressão, o resultado que obtemos parece um pouco

22
00:01:38,709 --> 00:01:43,792
diferente do que vimos até agora.
A expressão é avaliada para nos dar como 2,0

23
00:01:43,792 --> 00:01:48,743
opõe-se a apenas dois.
O que estamos vendo aqui é que o Python trabalha

24
00:01:48,743 --> 00:01:53,781
com vários tipos numericos e dois de seus tipos numéricos são tipo int, que significa numeros inteiros

25
00:01:53,781 --> 00:01:57,795
e float, que representa o ponto flutuante número 
ou numeros reais.

26
00:01:58,726 --> 00:02:03,706
Esta operação de divisão nos dá como resultado um ponto flutuante.

27
00:02:03,765 --> 00:02:07,722
Vamos explorar mais alguns exemplos de divisão.

28
00:02:07,722 --> 00:02:12,509
Cinco dividido por dois dá 2.5.
E esperamos que dois dividido por

29
00:02:12,509 --> 00:02:15,740
três daria.666666, com seis como repetição.

30
00:02:15,740 --> 00:02:21,717
Isso é o que dá, embora em vez de um número infinito da 6, estamos limitados

31
00:02:21,717 --> 00:02:24,769
o número de dígitos significativos disponíveis.

32
00:02:24,769 --> 00:02:28,750
Assim, Python tem uma quantidade limitada de memória para trabalhar com.

33
00:02:28,750 --> 00:02:34,734
E o número que obtemos, o resultado da divisão de dois por três é uma aproximação

34
00:02:34,734 --> 00:02:38,764
o número real.
Os números são aproximações de ponto flutuante

35
00:02:38,764 --> 00:02:43,613
para números reais.
Outro exemplo seria dividir cinco por

36
00:02:43,613 --> 00:02:49,782
três e podemos ver que o resultado como um resultado aproximado com 1.66666 e o

37
00:02:49,782 --> 00:02:57,736
último dígito é realmente um sete.
Da mesma forma, sete dividido por três, há

38
00:02:57,736 --> 00:03:04,757
2.333333 e o último dígito é um de cinco.
7/3 é flutuante ponto de divisão e desde

39
00:03:04,757 --> 00:03:10,718
números de ponto flutuante são aproximações de números reais, há alguma imprecisão,

40
00:03:10,718 --> 00:03:15,746
e isso é o que estamos vendo aqui.
Python tem um segundo tipo de divisão

41
00:03:15,746 --> 00:03:19,791
Divisão de inteiro chamado.
Nós vai dividir quatro por dois usando inteiro

42
00:03:19,791 --> 00:03:23,751
divisão.
E quando Python avalia esta expressão,

43
00:03:23,751 --> 00:03:27,731
ele irá avaliar para dar um fim em oposição a um flutuador.

44
00:03:28,709 --> 00:03:35,759
Quando dividimos dois por três é um número inteiro, divisão de número inteiro, temos também um INT zero.

45
00:03:35,761 --> 00:03:43,703
Portanto, a maneira de pensar sobre este resultado é que se reescrever isto, poderíamos

46
00:03:43,703 --> 00:03:50,709
reescrever a dois e um terceiro como zero e dois terços, e é o que estamos ficando para trás

47
00:03:50,709 --> 00:03:57,736
Esta parte de número inteiro do resultado.
Então vamos considerar cinco dividido por três

48
00:03:57,749 --> 00:04:03,723
usando a divisão e, novamente, o resultado é um número inteiro.

49
00:04:03,723 --> 00:04:10,741
Então nós poderia reescrever cinco mais três como um e dois terços, e estamos recebendo o que.

50
00:04:12,724 --> 00:04:19,704
Divisão de sete por três, com divisão de número inteiro, temos dois.

51
00:04:19,704 --> 00:04:24,743
Para que isto poderia ser reescrito como dois e um terço.

52
00:04:25,736 --> 00:04:31,757
Estamos apenas recebendo parte do resultado quando fazemos isso, parte do resultado que o

53
00:04:31,757 --> 00:04:34,783
divisão.
A outra parte de nós pode obter usando um

54
00:04:34,783 --> 00:04:40,706
operador diferente chamado o operador de resto ou o operador mod.

55
00:04:40,706 --> 00:04:44,792
Nós usamos o sinal de porcentagem para enviá-lo para, significar esta operação.

56
00:04:44,792 --> 00:04:50,752
Mod então quatro dois é a maneira que nós lemos esta expressão, e o resultado é zero.

57
00:04:50,753 --> 00:04:55,746
Não há nenhum restante para a divisão de quatro dividido por dois.

58
00:04:55,756 --> 00:05:01,775
Quando dividimos dois por três, neste caso o restante é dois.

59
00:05:02,757 --> 00:05:08,762
E quando dividimos cinco por três, o restante é dois.

60
00:05:08,762 --> 00:05:15,790
Então, novamente, como uma revisão, podemos pensar de cinco dividido por três, reescrevendo como

61
00:05:15,790 --> 00:05:21,748
um e dois terços.
Quando fazemos cinco dividido por três, obtemos

62
00:05:21,748 --> 00:05:27,716
Esse número inteiro um.
Quando fazemos cinco três mod, vamos conseguir isso.

63
00:05:27,716 --> 00:05:31,732
Dois.
O numerador da parte fracionária do

64
00:05:31,732 --> 00:05:36,730
o resultado.
Assim quando fazemos sete três MOD, obtemos um

65
00:05:36,730 --> 00:05:43,699
um, porque essa expressão poderia ser reescrita como dois terço.

66
00:05:43,707 --> 00:05:50,722
Ficamos com aquele.
Agora que temos trabalhado com esses operadores

67
00:05:50,722 --> 00:05:53,772
separadamente, vamos combiná-los em expressões.

68
00:05:53,772 --> 00:05:59,761
Vamos adicionar três a quatro e cinco subtrair.
E as operações são realizadas, são

69
00:05:59,761 --> 00:06:04,761
aplicada da esquerda para a direita.
Três é adicionado a quatro, e, em seguida, cinco é

70
00:06:04,761 --> 00:06:10,772
subtraído do resultado.
Em seguida, vamos adicionar a quatro ou cinco e multiplicar

71
00:06:10,772 --> 00:06:14,730
por três.
Neste caso, a ordem das operações

72
00:06:14,730 --> 00:06:20,705
dita que multiplicação deve ser aplicada primeiro, seguido por adição.

73
00:06:20,705 --> 00:06:25,718
Cinco é multiplicado por três e, em seguida, o resultado é adicionado a quatro.

74
00:06:26,730 --> 00:06:30,779
A expressão seguinte, vamos usar um número negativo.

75
00:06:30,779 --> 00:06:37,780
Assim este sinal que usamos para subtração também é usado com um único

76
00:06:37,780 --> 00:06:44,763
número para significar a negação.
Vamos dar - dez, multiplique isso por três, adicionar

77
00:06:44,763 --> 00:06:48,775
cinco e tomar, que o poder de três.

78
00:06:48,775 --> 00:06:53,706
A ordem das operações serão aplicadas como segue.

79
00:06:53,754 --> 00:06:56,776
Cinco.
Bem, primeiro nós levá-lo ao poder de três,

80
00:06:56,776 --> 00:07:00,733
porque a exponenciação tem a prioridade mais alta.

81
00:07:00,763 --> 00:07:08,757
E aqui, o sinal negativo se aplica para os dez primeiros e o resultado, negativo

82
00:07:08,757 --> 00:07:15,706
dez é multiplicado por três.
Finalmente, esses valores são combinados usando

83
00:07:15,706 --> 00:07:21,778
a adição.
Assim como em matemática regular, nós pode substituir

84
00:07:21,778 --> 00:07:28,701
precedência de operador, usando parênteses.
Eu posso ter a expressão quatro + cinco

85
00:07:28,701 --> 00:07:32,766
Avalie, em primeiro lugar, antes de multiplicar o resultado com três.

86
00:07:33,751 --> 00:07:41,731
Da mesma forma, pode decidir que gostaria que a adição de acontecer primeiro na segunda

87
00:07:41,731 --> 00:07:48,718
expressão que nós olhamos, usando parênteses para avaliar, tê-lo a avaliar

88
00:07:48,718 --> 00:07:53,740
primeiro.
Até este ponto, todas as instruções que

89
00:07:53,740 --> 00:07:58,792
nós demos ao Python que resultou.
Por exemplo, quando perguntamos a Python

90
00:07:58,792 --> 00:08:04,704
avaliar a expressão de dois mais três, ele nos deu o resultado de cinco.

91
00:08:04,704 --> 00:08:09,794
Isso é porque a expressão mais dois, mais três segue a sintaxe do

92
00:08:09,794 --> 00:08:14,721
Linguagem Python.
A sintaxe é as regras que especificam que

93
00:08:14,721 --> 00:08:20,727
as combinações de símbolos são legais, e dois mais três é uma expressão válida em

94
00:08:20,727 --> 00:08:24,715
Python.
A expressão mais três, com uma

95
00:08:24,715 --> 00:08:28,726
combinação de símbolos, três +, não é sintaxe válida.

96
00:08:28,726 --> 00:08:33,761
Então quando eu pergunto Python para avaliar esta expressão, temos um erro.

97
00:08:33,761 --> 00:08:38,764
Este é nosso primeiro erro de sintaxe, e vamos ver muitos mais ao longo do curso.

98
00:08:38,764 --> 00:08:43,767
Então Python não entendo o que fazer com aqueles que, com essa combinação de

99
00:08:43,767 --> 00:08:48,757
símbolos e ele não podem nos dar de volta um resultado, então em vez nos dá um erro.

100
00:08:48,757 --> 00:08:53,780
Outro símbolos de combinação que resultarão em um erro de sintaxe seria apenas

101
00:08:53,780 --> 00:08:59,710
Use o operador de exponenciação em seu próprio sem fornecer qualquer [indiscernible].

102
00:08:59,710 --> 00:09:06,741
Podemos também escrever uma expressão como a que acabamos de ver, apenas, em vez de ter um

103
00:09:06,741 --> 00:09:12,768
aberto, abrindo e fechando parênteses, apenas incluímos um parêntese de fechamento.

104
00:09:12,768 --> 00:09:19,743
Que nos dará um erro de sintaxe.
Incluiria um parêntese de abertura

105
00:09:19,743 --> 00:09:23,755
mas nenhum fechamento, então vamos acabar com uma situação diferente.

106
00:09:23,755 --> 00:09:28,732
Quando eu bati entrar, nada acontece, ou parece que nada acontece.

107
00:09:28,732 --> 00:09:33,723
Isso é porque Python permite instruções estender linhas de múltiplos.

108
00:09:33,723 --> 00:09:38,715
Quando nós batemos entrar, esperando, na verdade, o parêntese de fechamento.

109
00:09:38,715 --> 00:09:43,778
Até que eu dou esse parêntese de fechamento e tecle enter, em seguida, a expressão não é

110
00:09:43,778 --> 00:09:48,717
violados.
Além de erros de sintaxe, vamos também

111
00:09:48,717 --> 00:09:53,752
encontra erros semânticos.
Erros semânticos ocorrem quando o significado de

112
00:09:53,752 --> 00:09:59,578
uma expressão particular é inválida.
Assim, por exemplo, a sintaxe de dois plus

113
00:09:59,578 --> 00:10:03,769
três é válido que está acima da combinação de símbolos.

114
00:10:03,769 --> 00:10:09,759
E o significado e a semântica desta expressão é que dois é adicionado a três.

115
00:10:09,759 --> 00:10:14,785
Então isso é bom.
Quatro dividido por três é válido

116
00:10:14,785 --> 00:10:18,779
sintaticamente.
Nós somos capazes de usar essa combinação de

117
00:10:18,779 --> 00:10:22,758
símbolos.
No entanto, o significado dessa expressão é

118
00:10:22,758 --> 00:10:26,721
Inválido.
Não é possível dividir um número por

119
00:10:26,721 --> 00:10:31,729
zero, e então nós começamos um zero erro da divisão, que é um erro de semântico.