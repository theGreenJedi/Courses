Ciao.
In questa lezione inizieremo a programmare. In questa lezione faremo riferimento a Python
come un calcolatore dato che andremo a concentrarci sulle espressioni matematiche.
In questa lezione e per tutto il corso, useremo IDLE, un programma fornito all'interno
dell'installazione di Python. Ora passiamo ad IDLE e iniziamo a programmare. Questo è IDLE, e la finestra che vediamo 
ora viene detta shell. Qui è il punto in cui possiamo provare delle
istruzioni di Python ed esplorare le funzionalità di Python.
Questo simbolo, il simbolo con tre frecce, è detto prompt.
Di fianco al prompt, digiteremo le istruzioni di Python.
E quando premiamo Enter, Python valuterà queste istruzioni.
Ad esempio, digitiamo l'istruzione due più tre e chiediamo a Python di
valutarla. E' importante notare che non accade
nulla finché non premo il tasto Enter. Proviamo un'altra espressione, sei
meno due, e di nuovo non accade nulla finché non premo Enter.
A questo punto, Python valuta l'espressione.
Un'altra espressione potrebbe essere sette per tre.
A questo punto abbiamo visto tre operatori, addizione, sottrazione e moltiplicazione.
Un'altra operazione è l'elevamento a potenza. E abbiamo letto questa espressione, come due
elevato a cinque. Poi, prendiamo quattro e dividiamolo per
due. Quando Python valuta la sua espressione, il
risultato che vediamo è un po' diverso da quello che abbiamo visto finora.
L'espressione viene valutata e ci restituisce 2.0 al posto di avere semplicemente due.
Quello che vediamo è che Python possiede diversi tipi, e due dei suoi tipi numerici
sono il tipo int, che sta per intero, e float, che sta per
numero a virgola mobile. L'operazione di divisione ci da un
risultato di tipo float. Vediamo ancora qualche esempio di
divisione. Cinque diviso due ci da 2.5.
E ci saremmo aspettati che due diviso per tre ci avrebbe dato .666666, con sei
che si ripete. Questo è ciò che restituisce, invece di
un numero infinito di 6, siamo limitati dal numero di cifre significative 
disponibili. Quindi, Python ha una quantità di memoria limitata
con cui lavorare. E il numero che otteniamo, il risultato della
divisione di due per tre è un'approssimazione del numero reale.
I numeri a virgola mobile sono approssimazioni dei numeri reali.
Un altro esempio sarebbe dividere cinque per tre, e possiamo vedere che il risultato è
approssimato con 1.66666 e che l'ultima cifra è in realtà un sette.
Similmente, sette diviso per tre, c'è 2.333333, e l'ultima cifra è un cinque.
7/3 è una divisione in virgola mobile, e dato che i numeri a virgola mobile sono approssimazioni
dei numeri reali, ci sono alcune imprecisioni, e questo è ciò che vediamo qui.
Python possiede un secondo tipo di divisione detta divisione intera.
Dividiamo quattro per due usando la divisione intera.
E quando Python valuta questa espressione, la valuterà per restituire qualcosa di diverso
di un float. Quando dividiamo due per tre con una divisione,
divisione intera, otteniamo anche un INT zero. Quindi il modo di pensare a questo risultato è
che se dovessimo riscriverlo, potremmo riscrivere due e un terzo come zero e
due-terzi, e che ciò che otterremmo sarebbe questa parte intera del risultato.
Quindi consideriamo cinque diviso per tre usando la divisione intera e di nuovo
il risultato è il numero intero uno. Quindi possiamo riscrivere cinque su tre come uno
e due-terzi, e otteniamo l'uno. Dividendo sette per tre, usando la divisione
intera, otteniamo due. Quindi questo verrebbe riscritto come due e
un terzo. Otteniamo solo la parte del risultato quando
facciamo questo, parte del risultato della divisione.
Per l'altra parte possiamo usare un altro operatore chiamato resto
dell'operatore, o operatore mod. Usiamo il segno di percentuale per indicare
questa operazione. Quindi quattro mod due è il modo in cui leggiamo
questa espressione, e il risultato è zero. Non c'è resto per la divisione di
quattro diviso per due. Quando dividiamo due per tre, il resto
in questo caso è due. E poi quando dividiamo cinque per tre, il
resto è due. Quindi, di nuovo, come riassunto, possiamo pensare a
cinque diviso per tre, riscrivendolo come uno e due-terzi.
Quando facciamo cinque diviso per tre, otteniamo questo numero uno intero.
Quando facciamo cinque mod tre, otteniamo questo due.
Il numeratore della parte frazionaria del risultato.
Quindi quando facciamo sette MOD tre, otteniamo uno, dato che questa espressione può essere 
riscritta come due e un-terzo. Otteniamo quell'uno.
Ora che abbiamo lavorato con questi operatori separatamente, combiniamoli in
espressioni. Aggiungiamo tre a quattro e sottraiamo cinque.
E le operazioni vengono effettuate, sono applicate da sinistra a destra.
Tre viene aggiunto a quattro, e poi cinque viene sottratto da quel risultato.
Poi, aggiungiamo quattro a cinque e moltiplichiamo per tre.
In questo caso, l'ordine delle operazioni stabilisce che la moltiplicazione debba essere
applicata per prima, seguita dall'addizione. Cinque viene moltiplicato per tre e poi quel 
risultato viene aggiunto a quattro. Nell'espressione successiva, useremo un numero
negativo. Quindi il segno meno che abbiamo usato per
la sottrazione viene anche usato con un singolo numero per significare la negazione.
Prenderemo -dieci, moltiplicato per tre, più cinque, e prendiamo, quello elevato alla
terza. L'ordine delle operazioni sarà il
seguente. Cinque.
Prima effettuiamo l'elevamento alla terza, dato che l'elevamento a potenza ha la
precedenza più elevata. Poi qui, il segno negativo viene applicato 
a dieci e il risultato, -dieci viene moltiplicato per tre.
Infine questi valori sono combinati usando l'addizione.
Proprio come nella matematica normale, possiamo modificare la precedenza degli operatori usando le parentesi.
Posso avere l'espressione quattro + cinque valutata prima, prima di moltiplicare il
risultato per tre. Similmente, posso decidere che
l'addizione avvenga prima nella seconda espressione che abbiamo visto, usando
le parentesi per valutarla, valutarla prima.
Fino a questo punto, ogni istruzione che abbiamo dato a Python ci ha fornito un risultato.
Per esempio, quando abbiamo chiesto a Python di valutare l'espressione due più tre, ci
ha dato il risultato cinque. Questo accade perché l'espressione due più,
più tre segue la sintassi del linguaggio di Python.
Le regole di sintassi che specificano quali combinazioni di simboli siano legali, e due
più tre è un'espressione valida in Python.
L'espressione tre più con una combinazione di simboli, tre +, non è
una sintassi valida. Quindi quando chiediamo a Python di valutare questa espressione, 
otteniamo un errore. Questo è il nostro primo errore di sintassi e
ne vedremo molti altri durante il corso. Quindi Python non capisce cosa fare con
quelli, con quella combinazione di simboli e non può restituirci un
risultato, quindi ci da invece un errore. Un'altra combinazione di simboli che
porterà ad un errore di sintassi è usare solamente l'operatore di elevazione a potenza
da solo senza fornire alcun [incomprensibile]. Possiamo anche scrivere l'espressione come quella
che abbiamo appena visto, solo che invece di avere una aperta, aperta e chiusa parentesi, inseriamo
solo la parentesi chiusa. Questo ci restituirà un errore di sintassi.
Questo includerebbe una parentesi aperta e non chiusa, allora otterremo una
situazione differente. Quando premo invio, non accade nulla, o 
sembra che non accada nulla. Questo perché Python permette che le istruzioni
si estendano su più righe. Quando premiamo invio, sta aspettando,
per la parentesi chiusa. Finché non gli inserisco la parentesi chiusa, e
premo invio, allora, l'espressione non è errata.
Oltre agli errori di sintassi, possiamo anche incontrare degli errori semantici.
Gli errori semantici avvengono quando il significato di una particolare espressione non è valida.
Quindi per esempio, la sintassi di due più tre è valida che è sopra la 
combinazione di simboli. E il significato e la semantica di quella
espressione è che due viene aggiunto a tre. Quindi va bene.
Quattro diviso per tre è valido sintatticamente.
Siamo in grado di usare questa combinazione di simboli.
Ma il significato di questa espressione non è valido.
Non è possibile dividere un numero per zero, e quindi otteniamo un errore di divisione per zero,
che è un errore semantico.