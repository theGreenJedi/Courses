Сәлем! Бұл сабақта біз программалауды бастаймыз. Біз  бүгін Pythonды есептеуіш құрал, яғни калькулятор ретінде қарастырамыз, себебі негізінен математикалық амалдарға тоқталмақпыз. Осы дәрісте және толық курс барысында Pythonды орнатуда бірге жүретін  IDLEді қолданамыз. Сонымен, IDLEға ауысып, программалауды бастайық. Бұл IDLE, ал қазір біз көріп отырған терзеше каңқа немесе тірек деп аталады. Мұнда Python нұсқауларын мұқият оқып, оның ерекшеліктерін зерттеп біле аламыз. Мына үш тілді символ жылдамдату символы деп аталады. Оның қасына біз Python нұсқауламасын жазамыз. Содан кейін Енгізу батырмасын басу арқылы біз сол нұсқауламаға есептеме аламыз. Мысалы, екі қосылған үш нұсқауламасын жазып көрелік, сосын Pythonнан есептемесін сұралық. Енгізу батырмасының көмегінсіз бізде ешнәрсе шықпайтынын ұмытпау қажет. Келесі амалды қарастырайық, алтыдан екіні азайту, байқағаныңыздай Енгізу батырмасынсыз ешқандай нәтижеге қол жеткізбедік. Бұл тұста Python тек берілген амалды есептейді. Келесі амалымыз жеті жердегі үш болуы мүмкін. Біз қарастырғандар үш түрлі амал, яғни қосу, азайту және көбейту. 
Келесі амал –дәрежесін шығару. Берілген мысалды біз екінің бесінші дәрежесі деп оқимыз. Келесі ретте төртті екіге бөлейік. Осы берілген мысалдарды Python, яғни Питон есептегенде, біздегі бар берілгеннын біршама өзгеше болып келеді. 
Берілген мысалдың жауабы 2.0 болып беріледі, яғни жай екі емес. Осы тұрғыда байқайтынымыз, Python көп түрі бар, және оның сандық көрсеткішінің екеуі  аралық типі, яғни аралықтың белгісі, және жуық шама, яғни бөлшек санның жуық шамамен алынған сандық көрсеткіші. Бөлу амалы бізге бөлшек сан береді. Бөлудің тағы бірнеше мысалын қарастырайық. Бестің екіге бөліндісі 2.5ке тең. Ал екінің алтыға бөліндісі .666666 береді, мұнда алты қайталанған бөлшек. Бұл  6 мәні, алты шексіз санының орнына орнына белгілі бір цифр санымен шектелгенімізге қарамастан. Бұдан байқайтынымыз,  Python жұмыс істейтін шектелген есте сақтау жады бар. Яғни екіні үшке бөлгендігі шыққан сан нақты нәтиженің жуық шамамен көрсеткіші. Бөлшек сан негізгі нәтиженің жуық шамамен көрсеткіші.
Келесі мысалда бесті үшке бөлуді қарастырамыз, мұнда жуық шамамен 1.66666 нәтижесін аламыз және мұндағы соңғы цифра жеті болуы абзал. Сол сияқты, жеті бөлінген үш 2.333333 тең, мұндағы соңғы цифра бес.
7/3 бөлшек сан, ал бөлшек сан дегеніміз жуық шамамаен алынған нәтиже болғандықтан, мұнда нақты емес нәтиже байқалады. Питонның екінші бөлу түрі –бұтін бөлшек деп аталады. Бүтін бөлу арқылы біз төртті екіге бөлеміз.
Содан соң, Python осы амалды есептеп, бөлшек санға өзара қарсы нәтиже береді. Екіні үшке бөлгенде бүтін сан, яғни бүтін бөлу, сонымен қатар INT нөлдігін аламыз. Бұндай нәтижеге қол жеткізу жолы былай, егер біз осыны қайта жазар болсақ , онда оны екі және үшіншіні нөл ретінде және үштен екі ал неліктен біз қайта қарастырып жатқанымыз ол осы бүкіл сандық бөлік нәтиже болып табылады. Сонымен, бесті үшке бөлуді бүтін санды бөлу амалымен қарастыралық, нәтижесінде бүтін сан. Яғни, біз бестен үшті бір және үштен екі деп жаза аламыз, нәтижесінде бір аламыз. Жетіні үшке бөлу, бүтін санды бөлу амалы арқылы бізде екі болады. Яғни, екі және үштен бір деп жазуға болады. Бұл амалды қолданғанда біз нәтиженің тек бір бөлігін аламыз, яғни бөлу нәтижесінің тек бір бөлігін. Өзгеше реттілікті пайдалана отырып қол жеткізітен келесі бөлік қалдық деп аталады, яғни бүтін сандық бөлудегі қалдық. Осы амалды көрсету үшін біз пайыздық көрсеткішті қолданамыз. Сонымен, төрттің екіге қалдықсыз бөлу деп оқылады, ал нәтижесі нөлге тең. Төртті екіге бөлгенде қалдық қалмайды. Ал егер екіні үшке бөлсек, қалдық екі болады. Және бесті үшке бөлсек, қалдық екіге тең. Сонымен, тағы да бір рет, бесті үшке бөлу, бір және үштен екі деп жазуға болады. Біз бесті үшке бөлгенде бір деген бүтін сан аламыз. Бес бөлу, яғни mod  үш дегенде осы нәтижеге қол жеткіземіз. 
Екі. Нәтиженің бөлшек бөлігінің бөлінгіші. 
Осы сияқты, жетіні үшке бөлгенде бірге тең болады себебі бұны екі бүтін үштен бір деп жазуға болады. Сол бірді аламыз. Біз осы амалдарды бөлек−бөлек қарастырдық, енді оларды бір берілгенге біріктірелік. Енді үшке төртті қосып, одан бесті азайтайық. Бұл есепті солда оңға қарай орындайды. Үшке төрт қосылып, қосындыдан бес азайтылады.
Келесі мысал, төртке бесті қосып, оны үшке көбейтейік. Бұл ретте, есепті шығару ережесіне сәйкес, көбейту амалы бірінші кейін қосу амалы орындалуы керек. Бесті үшке көбейтіп, төртке қосу керек. Келесі мысалда теріс санды қолданамыз. Азайту амалы үшін қолданылатын минус символы, санның теріс екенін білдіру үшін де қолданылады. Біз  −он санын аламыз да оны үшке көбейтеміз, оған бестің үшінші дәрежесін қосамыз. Бұл есепті шығару реті келесідегідей. Бес. Ең біріншіден бестің үшінші дәрежесін табамыз, себебі дәреже шығару ең маңыздысы. Осыдан кейін теріс белгісі онға иеленіп, нәтижесінде нәтижесінде теріс он саны үшке көбейтіледі. Нәтижесінде, осы шыққан санға қосынды қосынды + амалы орындалады. 
Математикада кең қолданылатын жақшаларды қолдана отырып алғаш орындалатын амалдың ретін ауыстары аламыз. Шыққан санды үшке көбейтпес бұрын төртке бесті қосуды бірінші орындалатындай жақшаға алуға болады. Осы тәрізді, екінші мысалда қарастырғанымыздай, қосындыны бірінші орындау үшін жақшаға алуға болады, сонда ең бірінші қосу амалы орындалады. Осыған дейінгі Pythonға берген әрбір нұсқауламамыз нәтижеге негізделген. Мысалы, Pythonға екіге үшті қос деп нұсқаулама бергенде, ол бес деген жауапты берді. Оған себеп, екі қосу үш деген Python тілінің синсаксисінан келіп шығады. Синтаксис –ережелер, олар қайсы символдың қисыныны дұрыс екендігін айқындайды, және екі қосу үш Python үшін дұрыс амал. Үш қосу символдар қисыны амалы, үш +, дұрыс емес синтаксис. Біз Pythonнан осы амалдың шешімін сұрағанды қате болады. Бұл, әзірше, біздің бірінші синтаксистік қатеміз, ал курс барысында мұндайдың талайына кезігеміз. Яғни, мұндай берілгенді қалай шығаруды Python білмейді, сондықтан ол бізге нәтиже емес қате шығарып береді. Синтаксистік қатеге алып келетін келесі символдар қисыны ол дәрежесін шығару амалын өздігінен ешқандай көрсеткішсіз қолданғанда байқаймыз. 
[белгісіз] Қазір ғана көрген мысал сияқты есепті жаза аламыз, тек жақшаның ашалып, жабылуының орнына біз тек жақшаны жабамыз. Нәтижесінде синтаксистік қателікке ұрынамыз. Жақшаны ашып, оны жаппаған болсақ, онда өзгеше жағдайға тап боламыз. Мен енгізу батырмасын басқанымда ешқандай әрекетті байқамаймын, ешнәрсе байқалмағандай болады. Себебі, Python нұсқауламаларға шектен шығуға мүмкіндік береді. Енгізу батырмасын басқанда, жабу жақшасын күтетін көрінеді. Жабу жақшасын жауып, енгізу батырмасын басқанда, есеп дұрыс орындалады. 
Синтаксистік қатемен бірге, семантикалық, яғни мағыналық қателерді қарастырамыз. Белгілі бір есептің мағынасында қате болса, семантикалық қате шығады. Мысалы, екі қосу үштің синтаксисі дұрыс, бұл символдар қисынына негізделген. Осы мысалдың мағынасы мен семантикасы екі үшке қосылған дегенді білдіреді. Яғни, бұл дұрыс. Төртті үшке бөлу синтактикалық жағынан дұрыс. Осы символдар қисынын қолдана аламыз. Алайда, мағынасы бұрыс. Санды нөлге бөлуге болмайды, нөлге бөлу қатесіне тап боламыз, яғни бұл семантикалық қате.