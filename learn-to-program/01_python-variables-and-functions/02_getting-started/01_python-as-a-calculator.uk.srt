1
00:00:01,043 --> 00:00:04,019
Привіт.
У цій лекції ми почнемо програмувати.

2
00:00:04,019 --> 00:00:09,028
У цій лекції ми звернемося до Python, як до калькулятора, тому що ми збираємося зосередитись на 

3
00:00:09,028 --> 00:00:13,038
матиматичних виразах.
У цій лекції та протягом всього курсу,

4
00:00:13,038 --> 00:00:17,067
ми будемо використовувати IDLE, програму, яка встановлюється
разом з Python.

5
00:00:17,067 --> 00:00:20,085
Давайте тепер перейдемо на IDLE і почнемо
програмувати.

6
00:00:18,746 --> 00:00:23,732
Це IDLE, і вікно, на яке ми зараз дивимось, називається оболонкою.

7
00:00:23,732 --> 00:00:27,759
Саме тут ми можемо випробовувати инструкції Python та досліджувати його особливості.

8
00:00:27,759 --> 00:00:32,728
Цей символ, три символи зі стрілками, називається

9
00:00:32,728 --> 00:00:37,776
спонукальником. Після спонукальника ми можемо вводити інструкції Python.

10
00:00:37,776 --> 00:00:41,722
І коли ми натискаємо Enter, Python буде

11
00:00:41,722 --> 00:00:46,714
виконувати ці інструкції. Наприклад, введімо команду

12
00:00:46,714 --> 00:00:49,746
два плюс три, і попросимо Python виконати це.

13
00:00:49,797 --> 00:00:55,770
Хочу зауважити, що нічого не відбудеться, поки я не натисну клавішу Enter.

14
00:00:55,770 --> 00:01:01,792
Давайте розглянемо інший вираз, шість
відняти два, і знову нічого не відбувається

15
00:01:01,792 --> 00:01:06,726
поки я не натисну Enter. У цей момент, Python виконує

16
00:01:06,726 --> 00:01:11,719
вираз.
Інший вираз може бути сім помножити на 

17
00:01:11,719 --> 00:01:15,720
три.
До цих пір ми бачили три оператора,

18
00:01:15,720 --> 00:01:22,721
додавання, віднімання і множення.
Іншою операцією є зведення в ступінь.

19
00:01:22,721 --> 00:01:27,712
І ми зчитуємо цей вираз, як два зведено до п'ятої степені.

20
00:01:28,737 --> 00:01:33,707
Далі, давайте чотири розділимо на два.

21
00:01:33,745 --> 00:01:38,709
Коли Python виконує цей вираз, результат, що ми отримуємо виглядає трохи

22
00:01:38,709 --> 00:01:43,792
іншим, на відміну від того, що ми бачили досі.
Результат видав нам 2,0, що

23
00:01:43,792 --> 00:01:48,743
не відповідає просто двійці.
Те, що ми бачимо, виходить тому що Python має

24
00:01:48,743 --> 00:01:53,781
кілька типів, і два з них числові типи, це тип int, який виступає за

25
00:01:53,781 --> 00:01:57,795
ціле число, і float, яке виступає за число з плаваючою крапкою.

26
00:01:58,726 --> 00:02:03,706
Операція з діленням дає нам результат з плаваючою точкою.

27
00:02:03,765 --> 00:02:07,722
Давайте розглянемо ще кілька прикладів
ділення.

28
00:02:07,722 --> 00:02:12,509
П'ять поділене на два дає 2,5.
І можна було б очікувати, що два розділити на

29
00:02:12,509 --> 00:02:15,740
три дасть 0,666666, з шістками, які повторюються

30
00:02:15,740 --> 00:02:21,717
Саме це й і виходить, окрім нескінченного числа 6, бо ми обмежені

31
00:02:21,717 --> 00:02:24,769
за кількістю доступних значущих цифр.

32
00:02:24,769 --> 00:02:28,750
Тож, Python має обмежений обсяг пам'яті, з якою можна працювати.

33
00:02:28,750 --> 00:02:34,734
І число, що ми отримуємо, результат
ділення два на три, є приблизними

34
00:02:34,734 --> 00:02:38,764
до реального числа.
Числа з плаваючою точкою є наближеними

35
00:02:38,764 --> 00:02:43,613
до дійсних чисел.
Іншим прикладом може бути ділення п'ять на

36
00:02:43,613 --> 00:02:49,782
три, і ми можемо бачити приблизний результат - 1,66666 і

37
00:02:49,782 --> 00:02:57,736
Остання цифра насправді сім.
Точно так само, сім розділити на три, є

38
00:02:57,736 --> 00:03:04,757
2.333333, і остання цифра п'ять.
7/3 є плаваючою точкою підрозділ, а з

39
00:03:04,757 --> 00:03:10,718
числа з плаваючою точкою є наближеними
в дійсних чисел, є деякі неточності,

40
00:03:10,718 --> 00:03:15,746
і ось що ми бачимо тут.
Python має другий тип поділу

41
00:03:15,746 --> 00:03:19,791
називається цілий підрозділ.
Ми будемо ділити чотири два допомогою ціле

42
00:03:19,791 --> 00:03:23,751
ділення.
І коли Python обчислює цей вираз,

43
00:03:23,751 --> 00:03:27,731
він буде оцінювати, щоб дати кінець на відміну
до поплавця.

44
00:03:28,709 --> 00:03:35,759
Коли ми ділимо два на три є цілим числом,
цілочисельне ділення, ми також отримати нуль INT.

45
00:03:35,761 --> 00:03:43,703
Таким чином, спосіб думати про цього результату
що якби ми мали переписати це, ми могли б

46
00:03:43,703 --> 00:03:50,709
переписати два і третій рівним нулю і
дві третини, а то, що ми повертаємося є

47
00:03:50,709 --> 00:03:57,736
це ціле число частину результату.
Так що давайте розглянемо п'ять розділити на три

48
00:03:57,749 --> 00:04:03,723
використовуючи цілочисельне ділення і знову
Результатом є одним цілим.

49
00:04:03,723 --> 00:04:10,741
Таким чином, ми можемо переписати п'ять більше трьох в якості одного
і дві третини, і ми отримуємо той.

50
00:04:12,724 --> 00:04:19,704
Розділивши сім на три, використовуючи ціле
поділ, ми отримуємо два.

51
00:04:19,704 --> 00:04:24,743
Так що це буде переписати у вигляді двох з
Третій.

52
00:04:25,736 --> 00:04:31,757
Ми тільки отримувати частину результату, коли
ми зробимо це, частина, в результаті чого

53
00:04:31,757 --> 00:04:34,783
ділення.
Інша частина ми можемо отримати, використовуючи

54
00:04:34,783 --> 00:04:40,706
відрізняється оператор називається залишок
оператор, або мод оператор.

55
00:04:40,706 --> 00:04:44,792
Ми використовуємо знак відсотка, щоб відправити це
щоб, означають цю операцію.

56
00:04:44,792 --> 00:04:50,752
Так чотири мод два, як ми прочитали це
вираз, а результат дорівнює нулю.

57
00:04:50,753 --> 00:04:55,746
Там немає залишок для розділення
чотири ділиться на два.

58
00:04:55,756 --> 00:05:01,775
Коли ми ділимо два на три, залишку
в цьому випадку дорівнює двом.

59
00:05:02,757 --> 00:05:08,762
І коли ми ділимо п'ять на три,
Залишок дорівнює двом.

60
00:05:08,762 --> 00:05:15,790
Так, знову ж, як огляд, ми можемо думати про
п'ять розділити на три, переписавши, що, як

61
00:05:15,790 --> 00:05:21,748
один і дві третини.
Коли ми п'ять розділити на три, отримуємо

62
00:05:21,748 --> 00:05:27,716
вся ця номер один.
Коли ми робимо п'ять мод три, ми отримуємо це.

63
00:05:27,716 --> 00:05:31,732
Два.
Чисельник дробової частини

64
00:05:31,732 --> 00:05:36,730
результат.
Тому, коли ми робимо сім MOD три, отримуємо

65
00:05:36,730 --> 00:05:43,699
один, тому що вираз може бути
переписати у вигляді двох на одну третину.

66
00:05:43,707 --> 00:05:50,722
Ми отримуємо, що один.
Тепер, коли ми працювали з цими операторами

67
00:05:50,722 --> 00:05:53,772
окремо, давайте об'єднувати їх в
виразів.

68
00:05:53,772 --> 00:05:59,761
Ми додамо 3:57 і відняти п'ять.
І операції виконуються, є

69
00:05:59,761 --> 00:06:04,761
застосовується зліва направо.
Три додається чотири, п'ять, а потім це

70
00:06:04,761 --> 00:06:10,772
віднімається з цього результату.
Далі, давайте додамо 4:56 і розмножуватися

71
00:06:10,772 --> 00:06:14,730
на три.
У цьому випадку порядок операцій

72
00:06:14,730 --> 00:06:20,705
підказує, що множення має бути
застосовується в першу чергу, з подальшим додаванням.

73
00:06:20,705 --> 00:06:25,718
П'ять множиться на три, а потім цією
результат додається до чотирьох.

74
00:06:26,730 --> 00:06:30,779
Наступного вираз, ми будемо використовувати негативне
число.

75
00:06:30,779 --> 00:06:37,780
Так що це знак мінус, який ми використовували для
віднімання також використовується з одним

76
00:06:37,780 --> 00:06:44,763
число для того, щоб означати заперечення.
Ми візьмемо-десять, помножте його на три, додати

77
00:06:44,763 --> 00:06:48,775
п'ять, і прийняти, що до влади
три.

78
00:06:48,775 --> 00:06:53,706
Порядок операцій буде застосовуватися як
таким чином.

79
00:06:53,754 --> 00:06:56,776
П'ять.
Ну, по-перше, ми беремо його до влади три,

80
00:06:56,776 --> 00:07:00,733
тому зведення має найвищий
Пріоритет.

81
00:07:00,763 --> 00:07:08,757
Тоді тут, негативний знак відноситься
до десяти першим і результат, негативний

82
00:07:08,757 --> 00:07:15,706
десять множиться на три.
Нарешті ці значення об'єднуються за допомогою

83
00:07:15,706 --> 00:07:21,778
додавання.
Так само, як у звичайній математики, ми можемо перевизначити

84
00:07:21,778 --> 00:07:28,701
пріоритет операторів за допомогою дужок.
У мене може бути вираз чотири + п'ять

85
00:07:28,701 --> 00:07:32,766
оцінити по-перше, перш ніж множення
привести з трьома.

86
00:07:33,751 --> 00:07:41,731
Точно так само я можу вирішити, що я хотів
додавання відбудеться перша в другому

87
00:07:41,731 --> 00:07:48,718
вираз ми дивилися на, за допомогою
дужки, щоб оцінити, тобто це оцінити

88
00:07:48,718 --> 00:07:53,740
в першу чергу.
До цього моменту, кожна команда, що

89
00:07:53,740 --> 00:07:58,792
ми дали Python дали результат.
Наприклад, коли ми запитали, Python, щоб

90
00:07:58,792 --> 00:08:04,704
обчислити вираз два плюс три, це
дав нам результат п'ять.

91
00:08:04,704 --> 00:08:09,794
Це тому, що вираз два плюс,
плюс три відповідає синтаксису

92
00:08:09,794 --> 00:08:14,721
Мова Python.
Синтаксис правила, які визначають, який

93
00:08:14,721 --> 00:08:20,727
комбінації символів є законними, і два
плюс три є допустимим виразом в

94
00:08:20,727 --> 00:08:24,715
Python.
Три Вираз плюс з

95
00:08:24,715 --> 00:08:28,726
комбінація символів, три +, що не
правильний синтаксис.

96
00:08:28,726 --> 00:08:33,761
Тому, коли я прошу Python оцінити цей
вираз, ми отримуємо помилку.

97
00:08:33,761 --> 00:08:38,764
Це наша перша помилка синтаксису і ми будемо
бачити більше протягом всього курсу.

98
00:08:38,764 --> 00:08:43,767
Так Python не розуміє, що робити
з тими,, з цим поєднанням

99
00:08:43,767 --> 00:08:48,757
символи і вона не може дати нам назад
результат, так що замість це дає нам повідомлення про помилку.

100
00:08:48,757 --> 00:08:53,780
Інша комбінація символів, яка буде
привести до синтаксичної помилки було б просто

101
00:08:53,780 --> 00:08:59,710
використовувати оператор зведення в ступінь по собі
без надання будь [нерозрізненої].

102
00:08:59,710 --> 00:09:06,741
Ми також можемо написати вираз, як
той, який ми тільки що бачили, тільки замість того,

103
00:09:06,741 --> 00:09:12,768
відкритим, відкриття і закриття дужки, ми
просто включити заслони дужку.

104
00:09:12,768 --> 00:09:19,743
Це дасть нам про синтаксичну помилку.
Він включатиме відкриває дужку

105
00:09:19,743 --> 00:09:23,755
але не закриття, то ми не в кінцевому підсумку з
інша ситуація.

106
00:09:23,755 --> 00:09:28,732
Коли я вдарив введіть, нічого не відбувається, або це
Схоже, нічого не відбувається.

107
00:09:28,732 --> 00:09:33,723
Це тому, що Python дозволяє інструкції
розширити кратні лінії.

108
00:09:33,723 --> 00:09:38,715
Коли ми потрапили введіть, він чекає, насправді,
для закриває дужки.

109
00:09:38,715 --> 00:09:43,778
Поки я не дати, що заслони дужку, і
натисніть Enter, то, цей вислів не

110
00:09:43,778 --> 00:09:48,717
порушені.
На додаток до синтаксичних помилок, ми будемо також

111
00:09:48,717 --> 00:09:53,752
зіткнутися семантичні помилки.
Відбуваються семантичні помилки, коли значення

112
00:09:53,752 --> 00:09:59,578
Зокрема вираз неприпустимо.
Так, наприклад, синтаксис двох плюс

113
00:09:59,578 --> 00:10:03,769
три дійсна, що вище
комбінація символів.

114
00:10:03,769 --> 00:10:09,759
І сенс і семантика, що
вираження в тому, що два доданий до трьох.

115
00:10:09,759 --> 00:10:14,785
Так що це нормально.
Чотири розділити на три дійсна

116
00:10:14,785 --> 00:10:18,779
синтаксично.
Ми можемо використовувати цю комбінацію

117
00:10:18,779 --> 00:10:22,758
символи.
Проте сенс цього виразу

118
00:10:22,758 --> 00:10:26,721
недійсним.
Це не можливо, щоб ділення числа на

119
00:10:26,721 --> 00:10:31,729
нулю, і таким чином ми отримуємо помилку ділення на нуль,
який є семантична помилка.