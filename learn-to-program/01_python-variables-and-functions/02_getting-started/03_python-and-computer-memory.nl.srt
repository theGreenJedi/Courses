1
00:00:00,080 --> 00:00:03,082
Programma's houden erg veel informatie bij.

2
00:00:03,082 --> 00:00:09,045
Sommige informatie is zichtbaar voor de gebruiker, bijvoorbeeld, waarden in een spreadsheet tabel, maar veel informatie

3
00:00:09,045 --> 00:00:13,077
is verborgen. Bijvoorbeeld, als een spreadsheet programma

4
00:00:13,077 --> 00:00:18,047
het gemiddelde berekend van een groep getallen zal het programma eerst all de getallen optellen

5
00:00:18,047 --> 00:00:23,011
dan tellen hoeveel getallen er zijn en daarna pas de deling doen.

6
00:00:23,011 --> 00:00:26,008
Al die waarden worden bijgehouden of opgeslagen in het computer geheugen.

7
00:00:26,008 --> 00:00:29,830
In deze cursus zullen we het computer geheugen beschouwen als een erg

8
00:00:29,830 --> 00:00:34,579
lange lijst van opslag plaatsen, waarvan elk een unieke nummer heeft. Deze unieke nummer noemt men

9
00:00:34,579 --> 00:00:39,036
een geheugen adres. Meestal zullen we geheugen adressen

10
00:00:39,036 --> 00:00:44,010
met een 'x' ervoor schrijven zodat ze er een beetje anders uitzien dan andere getallen.

11
00:00:44,010 --> 00:00:49,035
X201 is dus geheugen adres 201. Je kan deze geheugen adressen beschouwen als

12
00:00:49,035 --> 00:00:52,084
huisnummers in een lange straat

13
00:00:53,046 --> 00:00:57,016
Zoals we al eerder zeiden, worden waarden opgeslagen in het computer geheugen.

14
00:00:57,016 --> 00:01:02,119
Dus het getal 8.5 kan in geheugen adres x34 zitten en het nummer 44 kan

15
00:01:02,119 --> 00:01:07,055
in het geheugen adres x35 opgeslagen zitten. Programma's hebben een manier nodig om

16
00:01:07,055 --> 00:01:11,011
die waarden bij te houden. Ze doen die aan de hand van iets dat men

17
00:01:11,011 --> 00:01:15,026
variabelen noemt. Een variabele is een benoemde locatie in het geheugen.

18
00:01:15,026 --> 00:01:21,069
Python houdt variabelen bij in een ander geheugen gebied dan de variabelen.

19
00:01:21,069 --> 00:01:28,306
We kunnen zo dus een variabele shoe<u>size hebben die geheugen adres x34 bevat, wat betekent dat</u>

20
00:01:28,306 --> 00:01:34,651
shoe<u>size verwijst naar waarde 8.5. Op dezelfde manier kunnen we een variabele</u>

21
00:01:34,651 --> 00:01:39,619
Paul<u>Age hebben, wiens waarde 44 is. We bereiken dit door geheugen adres</u>

22
00:01:39,619 --> 00:01:44,957
x35 op te slaan in variabele Paul<u>age. Het leuk van Python is dat je</u>

23
00:01:44,957 --> 00:01:50,041
je geen zorgen moet maken over welke specifieke geheugen adressen er gekozen worden.

24
00:01:50,041 --> 00:01:53,193
Python zal dit bijhouden voor jou.

25
00:01:53,193 --> 00:01:56,407
Je kan zelfs niet eens zelf kiezen welke geheugen adressen je wil gebruiken.

26
00:01:56,407 --> 00:02:01,460
Het helpt wel om dit model in je achterhoofd te houden als je aan het programmeren bent.

27
00:02:01,460 --> 00:02:05,777
Hier is een wat terminologie die we door heel de cursus zullen gebruiken.

28
00:02:05,777 --> 00:02:10,893
Een waarde heeft een geheugen adres. Een variabele bevat een geheugen adres.

29
00:02:10,893 --> 00:02:18,914
Een variabele verwijst of linkt naar een waarde. Hier zijn enkele voorbeeldjes van hoe we deze terminologie gebruiken.

30
00:02:18,914 --> 00:02:23,142
Waarde 8.5 heeft geheugen adres x34.

31
00:02:23,142 --> 00:02:27,486
Variabele shoe<u>size bevat adres x34.</u>

32
00:02:27,486 --> 00:02:34,546
De waarde van shoe<u>size is 8.5. shoe<u>size verwijst naar de waarde 8.5.</u></u>

33
00:02:34,546 --> 00:02:38,061
shoe<u>size linkt naar de waarde 8.5.</u>