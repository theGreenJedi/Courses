¡Hola 
En esta clase vamos a comenzar a programar. Nos referimos a esta clase de Python como
calculadora porque nos vamos a centrar en expresiones matemáticas.
En esta clase, y durante todo el curso, usaremos IDLE, un programa que viene 
con la instalación de Python. Vamos a cambiar a IDLE ahora y empezar a
programar. Esto es IDLE, y la ventana que estamos
viendo actualmente se llama la shell. Aquí es donde podemos probar
instrucciones de Python y explorar características de Python.
Este símbolo, los tres símbolos de flecha, es llamado prompt.
Junto al prompt, vamos a escribir instrucciones Python.
Y cuando presionamos la tecla Enter, Python evaluará esas instrucciones. 
Por ejemplo, vamos a escribir la instrucción dos más tres, y pedir a Python la evalúe. Es importante tener en cuenta que nada
pasará hasta que presione la tecla Enter Veamos otra expresión, seis 
menos dos, y otra vez no pasa nada hasta que presione la tecla Enter 
En ese punto, Python evalúa la expresión.
Otra expresión podría ser siete por tres.
Hasta ahora hemos visto tres operadores, suma, resta y multiplicación.
Otra operación es la exponenciación Y leemos esta expresión, como dos a la
potencia de cinco. A continuación, vamos a dividir cuatro para
dos. Cuando Python evalúa esta expresión, el 
resultado que obtenemos se ve un poco diferente de lo que hemos visto hasta ahora.
La expresión se evalúa y nos da 2.0 en lugar de solamente dos.
Lo que estamos viendo aquí es que Python tiene múltiples tipos, y dos de sus tipos numéricos
son de tipo int, que significa entero y float, que significa
número de punto flotante. Esta operación de división nos da un
resultado de coma flotante. Vamos a explorar algunos ejemplos más de
división. Cinco dividido para dos da 2.5.
Y es de esperar que dos dividido para tres daría 0.666666, con seis
repetiendose Eso es lo que da, aunque en vez de
un número infinito de 6`s, estamos limitados por el número de dígitos significativos
disponibles. Así, Python tiene una cantidad limitada de memoria
para trabajar. Y el número que obtenemos, el resultado de
dividir dos para tres es una aproximación al número real.
Los números de punto flotante son aproximaciones a los números reales.
Otro ejemplo sería dividir cinco para tres, y podemos ver que el resultado como
un resultado aproximado con 1,66666 y el última cifra es en realidad una de siete.
Del mismo modo, siete dividido para tres, es 2.333333, y el último dígito es un cinco.
7/3 es la división de punto flotante, y como Los números de punto flotante son aproximaciones
a los números reales, hay algo de imprecisión, y eso es lo que estamos viendo aquí.
Python tiene un segundo tipo de división llamado división entera.
Dividiremos cuatro para dos usando división de enteros
Y cuando Python evalúa esta expresión, se evaluará para dar un final al contrario
de un float. Cuando dividimos dos para tres es un número entero
división de enteros, también conseguimos un INT cero. Así que la manera de pensar sobre este resultado es 
que si tuviéramos que volver a escribir esto, podríamos reescribir dos y un tercio como cero y
dos tercios, y lo que estamos obteniendo es este número completo parte del resultado
Así que consideremos cinco dividido para tres usando división de enteros y de nuevo el
resultado es un número completo. Así que podríamos reescribir cinco sobre tres como uno
y dos tercios, y obteniendo el uno. La división de siete para tres, utilizando divisón
de enteros, obtenemos dos. Así que esto podría volverse a escribir como dos un
tercio. Estamos consiguiendo solamente parte del resultado cuando
hacemos esto, parte del resultado de la división.
La otra parte que podemos conseguir utilizando un operador diferente llamado el operador
de resto o el operador mod. Usamos el signo de porcentaje para enviar esto
a, significar esta operación. Así que cuatro mod dos es la forma en que leemos esta
expresión, y el resultado es cero. No hay restante para la división de
cuatro dividido para dos. Cuando dividimos dos para tres, el restante
en este caso es dos. Y cuando dividimos cinco para tres, el
restante es dos. Así, de nuevo, como repaso, podemos pensar en
cinco dividido para tres, reescribiendo eso como uno y dos tercios
Cuando hacemos cinco dividido para tres, obtenemos este número completo uno
Cuando hacemos cinco mod tres, obtenemos esto. Dos
El numerador de la parte fraccionaria de el resultado
Así que cuando hacemos siete MOD tres, obtenemos un uno, porque esa expresión podría ser
reescrito como dos un tercio. Recibimos ese uno.
Ahora que hemos trabajado con estos operadores por separado, vamos a combinarlos en
expresiones. Vamos a agregar tres a cuatro y restar cinco
Y las operaciones llevadas a cabo, son aplicado de izquierda a derecha
Tres se añade a cuatro, y luego cinco es substraído de ese resultado
A continuación, vamos a agregar cuatro a cinco y multiplicar por tres.
En este caso, el orden de las operaciones dicta que la multiplicación debe ser
aplicado primero, seguido de la adición. Cinco se multiplica por tres y luego ese
resultado se suma a cuatro. La siguiente expresión, usaremos un número
negativo. Así que este signo negativo que utilizamos para la
substracción también se utiliza con un solo número con el fin de significar la negación.
Tomaremos diez, multiplicamos por tres, añadimos cinco, y tomar, eso a la potencia de
tres. El orden de las operaciones se aplicará a como
sigue Cinco.
Bueno, primero lo llevamos a la potencia de tres, porque exponenciación tiene la mayor
precedencia. Entonces aquí, el signo negativo se aplica
a los diez primero y el resultado, negativo diez es multiplicado por tres
Finalmente estos valores se combinan utilizando la adición
Al igual que en matemáticas regular, podemos anular precedencia de operadores mediante paréntesis.
Yo puedo tener la expresión de cuatro + cinco evaluarla primero, antes de multiplicar el
resultado por tres. Del mismo modo, puedo decidir que me gustaría
que la adición pase primero en la segunda expresión que mirábamos, utilizando
paréntesis para evaluar, que lo evalúe primero.
Hasta este punto, cada instrucción que hemos dado a Python ha dado un resultado.
Por ejemplo, cuando le preguntamos a Python evaluar la expresión dos más tres,
nos dio el resultado de cinco. Esto se debe a la expresión dos más,
más tres sigue la sintaxis del lenguaje Python.
La sintaxis es la regla que especifica qué combinaciones de símbolos son legales, y dos
más tres es una expresión válida en Python.
La expresión de tres más una combinación de símbolos, tres +, no es
sintaxis válida. Así que cuando le pregunto a Python para evaluar esta
expresión, obtenemos un error. Este es nuestro primer error de sintaxis y vamos a
ver muchos más durante todo el curso. Así que Python no entiende qué hacer
con los que, con esa combinación de símbolos y no nos puede devolver un
resultado, por lo que en vez de eso nos da un error. Otra combinación de los símbolo que
da lugar a un error de sintaxis sería justo utilizar el operador de exponenciación por sí mismo
sin proporcionar ninguna [indiscernible]. También podemos escribir una expresión como la 
que acabamos de ver, sólo que en lugar de tener un abierto, apertura y cierre de paréntesis, nos
basta con incluir un paréntesis de cierre. Eso nos dará un error de sintaxis
Incluiría un paréntesis de apertura pero no de cierre, y luego terminamos con una
situación diferente. Cuando presione la tecla Enter, no pasará nada, o
parece que no pasa nada. Eso es porque Python permite instrucciones
para extender en las líneas múltiples. Cuando presionamos la tecla Enter, está esperando, en realidad,
por el paréntesis de cierre. Hasta que doy ese paréntesis de cierre, y
presione Enter, entonces, la expresión no es violado
Además de los errores de sintaxis, también vamos a encontrar errores semánticos
Se producen errores semánticos cuando el significado de una expresión particular es inválida
Así, por ejemplo, la sintaxis de dos más tres es válido que está por encima de la
combinación de símbolos. Y el significado y semántica de que la
expresión es que dos se añade a tres Así  esto está muy bien.
Cuatro dividido para tres es válido sintácticamente
Somos capaces de utilizar esta combinación de símbolos.
Sin embargo, el significado de esta expresión es inválida.
No es posible dividir un número para cero, y así se obtiene un error de división para cero,
que es un error semántico.