Привіт.
У цій лекції ми почнемо програмувати. У цій лекції ми звернемося до Python, як до калькулятора, тому що ми збираємося зосередитись на матиматичних виразах.
У цій лекції та протягом всього курсу, ми будемо використовувати IDLE, програму, яка встановлюється
разом з Python. Давайте тепер перейдемо на IDLE і почнемо
програмувати. Це IDLE, і вікно, на яке ми зараз дивимось, називається оболонкою. Саме тут ми можемо випробовувати инструкції Python та досліджувати його особливості. Цей символ, три символи зі стрілками, називається спонукальником. Після спонукальника ми можемо вводити інструкції Python. І коли ми натискаємо Enter, Python буде виконувати ці інструкції. Наприклад, введімо команду два плюс три, і попросимо Python виконати це. Хочу зауважити, що нічого не відбудеться, поки я не натисну клавішу Enter. Давайте розглянемо інший вираз, шість
відняти два, і знову нічого не відбувається поки я не натисну Enter. У цей момент, Python виконує вираз.
Інший вираз може бути сім помножити на три.
До цих пір ми бачили три оператора, додавання, віднімання і множення.
Іншою операцією є зведення в ступінь. І ми зчитуємо цей вираз, як два зведено до п'ятої степені. Далі, давайте чотири розділимо на два. Коли Python виконує цей вираз, результат, що ми отримуємо виглядає трохи іншим, на відміну від того, що ми бачили досі.
Результат видав нам 2,0, що не відповідає просто двійці.
Те, що ми бачимо, виходить тому що Python має кілька типів, і два з них числові типи, це тип int, який виступає за ціле число, і float, яке виступає за число з плаваючою крапкою. Операція з діленням дає нам результат з плаваючою точкою. Давайте розглянемо ще кілька прикладів
ділення. П'ять поділене на два дає 2,5.
І можна було б очікувати, що два розділити на три дасть 0,666666, з шістками, які повторюються Саме це й і виходить, окрім нескінченного числа 6, бо ми обмежені за кількістю доступних значущих цифр. Тож, Python має обмежений обсяг пам'яті, з якою можна працювати. І число, що ми отримуємо, результат
ділення два на три, є приблизними до реального числа.
Числа з плаваючою точкою є наближеними до дійсних чисел.
Іншим прикладом може бути ділення п'ять на три, і ми можемо бачити приблизний результат - 1,66666 і Остання цифра насправді сім.
Точно так само, сім розділити на три, є 2.333333, і остання цифра п'ять.
7/3 є плаваючою точкою підрозділ, а з числа з плаваючою точкою є наближеними
в дійсних чисел, є деякі неточності, і ось що ми бачимо тут.
Python має другий тип поділу називається цілий підрозділ.
Ми будемо ділити чотири два допомогою ціле ділення.
І коли Python обчислює цей вираз, він буде оцінювати, щоб дати кінець на відміну
до поплавця. Коли ми ділимо два на три є цілим числом,
цілочисельне ділення, ми також отримати нуль INT. Таким чином, спосіб думати про цього результату
що якби ми мали переписати це, ми могли б переписати два і третій рівним нулю і
дві третини, а то, що ми повертаємося є це ціле число частину результату.
Так що давайте розглянемо п'ять розділити на три використовуючи цілочисельне ділення і знову
Результатом є одним цілим. Таким чином, ми можемо переписати п'ять більше трьох в якості одного
і дві третини, і ми отримуємо той. Розділивши сім на три, використовуючи ціле
поділ, ми отримуємо два. Так що це буде переписати у вигляді двох з
Третій. Ми тільки отримувати частину результату, коли
ми зробимо це, частина, в результаті чого ділення.
Інша частина ми можемо отримати, використовуючи відрізняється оператор називається залишок
оператор, або мод оператор. Ми використовуємо знак відсотка, щоб відправити це
щоб, означають цю операцію. Так чотири мод два, як ми прочитали це
вираз, а результат дорівнює нулю. Там немає залишок для розділення
чотири ділиться на два. Коли ми ділимо два на три, залишку
в цьому випадку дорівнює двом. І коли ми ділимо п'ять на три,
Залишок дорівнює двом. Так, знову ж, як огляд, ми можемо думати про
п'ять розділити на три, переписавши, що, як один і дві третини.
Коли ми п'ять розділити на три, отримуємо вся ця номер один.
Коли ми робимо п'ять мод три, ми отримуємо це. Два.
Чисельник дробової частини результат.
Тому, коли ми робимо сім MOD три, отримуємо один, тому що вираз може бути
переписати у вигляді двох на одну третину. Ми отримуємо, що один.
Тепер, коли ми працювали з цими операторами окремо, давайте об'єднувати їх в
виразів. Ми додамо 3:57 і відняти п'ять.
І операції виконуються, є застосовується зліва направо.
Три додається чотири, п'ять, а потім це віднімається з цього результату.
Далі, давайте додамо 4:56 і розмножуватися на три.
У цьому випадку порядок операцій підказує, що множення має бути
застосовується в першу чергу, з подальшим додаванням. П'ять множиться на три, а потім цією
результат додається до чотирьох. Наступного вираз, ми будемо використовувати негативне
число. Так що це знак мінус, який ми використовували для
віднімання також використовується з одним число для того, щоб означати заперечення.
Ми візьмемо-десять, помножте його на три, додати п'ять, і прийняти, що до влади
три. Порядок операцій буде застосовуватися як
таким чином. П'ять.
Ну, по-перше, ми беремо його до влади три, тому зведення має найвищий
Пріоритет. Тоді тут, негативний знак відноситься
до десяти першим і результат, негативний десять множиться на три.
Нарешті ці значення об'єднуються за допомогою додавання.
Так само, як у звичайній математики, ми можемо перевизначити пріоритет операторів за допомогою дужок.
У мене може бути вираз чотири + п'ять оцінити по-перше, перш ніж множення
привести з трьома. Точно так само я можу вирішити, що я хотів
додавання відбудеться перша в другому вираз ми дивилися на, за допомогою
дужки, щоб оцінити, тобто це оцінити в першу чергу.
До цього моменту, кожна команда, що ми дали Python дали результат.
Наприклад, коли ми запитали, Python, щоб обчислити вираз два плюс три, це
дав нам результат п'ять. Це тому, що вираз два плюс,
плюс три відповідає синтаксису Мова Python.
Синтаксис правила, які визначають, який комбінації символів є законними, і два
плюс три є допустимим виразом в Python.
Три Вираз плюс з комбінація символів, три +, що не
правильний синтаксис. Тому, коли я прошу Python оцінити цей
вираз, ми отримуємо помилку. Це наша перша помилка синтаксису і ми будемо
бачити більше протягом всього курсу. Так Python не розуміє, що робити
з тими,, з цим поєднанням символи і вона не може дати нам назад
результат, так що замість це дає нам повідомлення про помилку. Інша комбінація символів, яка буде
привести до синтаксичної помилки було б просто використовувати оператор зведення в ступінь по собі
без надання будь [нерозрізненої]. Ми також можемо написати вираз, як
той, який ми тільки що бачили, тільки замість того, відкритим, відкриття і закриття дужки, ми
просто включити заслони дужку. Це дасть нам про синтаксичну помилку.
Він включатиме відкриває дужку але не закриття, то ми не в кінцевому підсумку з
інша ситуація. Коли я вдарив введіть, нічого не відбувається, або це
Схоже, нічого не відбувається. Це тому, що Python дозволяє інструкції
розширити кратні лінії. Коли ми потрапили введіть, він чекає, насправді,
для закриває дужки. Поки я не дати, що заслони дужку, і
натисніть Enter, то, цей вислів не порушені.
На додаток до синтаксичних помилок, ми будемо також зіткнутися семантичні помилки.
Відбуваються семантичні помилки, коли значення Зокрема вираз неприпустимо.
Так, наприклад, синтаксис двох плюс три дійсна, що вище
комбінація символів. І сенс і семантика, що
вираження в тому, що два доданий до трьох. Так що це нормально.
Чотири розділити на три дійсна синтаксично.
Ми можемо використовувати цю комбінацію символи.
Проте сенс цього виразу недійсним.
Це не можливо, щоб ділення числа на нулю, і таким чином ми отримуємо помилку ділення на нуль,
який є семантична помилка.