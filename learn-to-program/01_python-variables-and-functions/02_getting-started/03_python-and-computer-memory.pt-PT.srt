1
00:00:00,080 --> 00:00:03,082
Programas mantem o controle de uma 
grande quantidade de informações

2
00:00:03,082 --> 00:00:09,045
Algumas delas visíveis ao usuário, tais como valores em uma planilha, mas um monte delas

3
00:00:09,045 --> 00:00:13,077
está oculto.
Por exemplo, quando uma planillha

4
00:00:13,077 --> 00:00:18,047
calcula a média de um grupo de números, o programa primeiro soma todos os números,

5
00:00:18,047 --> 00:00:23,011
em seguida conta quantos são e, depois, faz a divisão apropriada.

6
00:00:23,011 --> 00:00:26,008
como sendo numeros de casas numa rua

7
00:00:26,008 --> 00:00:29,830
Com disse, valores sao guardados na memoria do computador

8
00:00:29,830 --> 00:00:34,579
longa lista de locais de armazenamento, cada um dos quais tem um único número chamado de

9
00:00:34,579 --> 00:00:39,036
endereço de memória. Nós geralmente escreveremos os endereços de memória

10
00:00:39,036 --> 00:00:44,010
com um prefixo "x" para que eles pareçam diferentes dos outros números.

11
00:00:44,010 --> 00:00:49,035
x201 é o endereço de memória 201. Você pode pensar nesses endereços de memória como

12
00:00:49,035 --> 00:00:52,084
sendo números de casas em uma longa rua.

13
00:00:53,046 --> 00:00:57,016
Isso siginifica que o tamanho de sapato se refere a um valor, 8.5 por exemplo

14
00:00:57,016 --> 00:01:02,119
Assim, o número 8.5 pode estar no endereço de memória x34 e o número 44 pode estar

15
00:01:02,119 --> 00:01:07,055
no endereço de memória x35. Os programas precisam de uma maneira para manter o controle de todos

16
00:01:07,055 --> 00:01:11,011
esses valores.
Eles fazem isso usando algo chamado "variáveis".

17
00:01:11,011 --> 00:01:15,026
Uma variável é um local nomeado na memória.

18
00:01:15,026 --> 00:01:21,069
O Python mantém o controle das variáveis ​​em uma área da memória separada dos valores.

19
00:01:21,069 --> 00:01:28,306
Podemos ter uma variável shoe<u>size que
armazena o endereço de memória x34, o que significa que</u>

20
00:01:28,306 --> 00:01:34,651
shoe<u>size refere-se ao valor 8.5. Da mesma forma, podemos ter uma variável</u>

21
00:01:34,651 --> 00:01:39,619
paul<u>age, cujo valor é 44. 
Conseguimos isso armazenando o endereço de</u>

22
00:01:39,619 --> 00:01:44,957
memória X35 com a variável paul<u>age.
O legal do Python é que você</u>

23
00:01:44,957 --> 00:01:50,041
não tem que se preocupar com quais endereços
específicos de memória são escolhidos.

24
00:01:50,041 --> 00:01:53,193
O Python vai manter o controle de tudo isso para você.

25
00:01:53,193 --> 00:01:56,407
Na verdade, você nem mesmo pode escolher quais endereços são usados.

26
00:01:56,407 --> 00:02:01,460
No entanto, isso realmente o ajuda a manter esse modelo em mente quando você está programando.

27
00:02:01,460 --> 00:02:05,777
Aqui vai alguma terminologia que usaremos ao longo do curso.

28
00:02:05,777 --> 00:02:10,893
Um valor "possui" um endereço de memória. 
Uma variável "armazena" o endereço de memória.

29
00:02:10,893 --> 00:02:18,914
Uma variável "refere-se" ou "aponta" para um valor. 
Aqui estão alguns exemplos de como utilizar esta

30
00:02:18,914 --> 00:02:23,142
terminologia. O valor 8.5 "possui" o endereço de memória X34.

31
00:02:23,142 --> 00:02:27,486
A variável shoe<u>size "armazena" o endereço de memória X34.</u>

32
00:02:27,486 --> 00:02:34,546
O valor de shoe-size é 8.5, shoe<u>size "refere-se" ao valor 8.5.</u>

33
00:02:34,546 --> 00:02:38,061
shoe<u>size "aponta" para o valor 8.5.</u>