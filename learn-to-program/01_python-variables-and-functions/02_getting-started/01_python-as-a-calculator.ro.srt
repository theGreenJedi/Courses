1
00:00:01,043 --> 00:00:04,019
Bună. În această lecție vom
 începe să programăm.

2
00:00:04,019 --> 00:00:09,028
Numim această lecție: 'Python ca și calculator',
 deoarece ne vom concentra atenția asupra

3
00:00:09,028 --> 00:00:13,038
expresiilor matematice. În această lecție
 și de-a lungul cursului

4
00:00:13,038 --> 00:00:17,067
vom folosi IDLE, un program care
 vine odată cu instalarea Python.

5
00:00:17,067 --> 00:00:20,085
Să trecem în IDLE și să începem
 să programăm.

6
00:00:18,746 --> 00:00:23,732
Acesta este IDLE, iar fereastra la care ne uităm
 acum se numește shell.

7
00:00:23,732 --> 00:00:27,759
Aici putem încerca instrucțiunile
 Python și explora caracteristicile Python.

8
00:00:27,759 --> 00:00:32,728
Acest simbol,
 simbolul cu 3 săgeți, se numește

9
00:00:32,728 --> 00:00:37,776
prompt. Aici vom tasta instrucțiunile

10
00:00:37,776 --> 00:00:41,722
Python și când apăsăm Enter,
 Python va evalua

11
00:00:41,722 --> 00:00:46,714
acele instrucțiuni. De exemplu,
 să tastăm instrucțiunea

12
00:00:46,714 --> 00:00:49,746
2 + 3 și să îi cerem lui Python
 să o evalueze.

13
00:00:49,797 --> 00:00:55,770
Este important să rețineți că nu s-a întâmplat
 nimic până când nu am apăsat tasta Enter.

14
00:00:55,770 --> 00:01:01,792
Să ne uităm la o altă expresie, 6 minus 2
 și, din nou, nu se întâmplă nimic

15
00:01:01,792 --> 00:01:06,726
până când nu apăs Enter. În acel moment,
 Python evaluează expresia.

16
00:01:06,726 --> 00:01:11,719
O altă expresie ar putea fi 7 înmulțit cu 3.

17
00:01:11,719 --> 00:01:15,720
Până acum am văzut trei operatori:

18
00:01:15,720 --> 00:01:22,721
adunarea, scăderea și înmulțirea.
O altă operație este ridicarea la putere,

19
00:01:22,721 --> 00:01:27,712
Și citim această expresie ca 2 la puterea 5.

20
00:01:28,737 --> 00:01:33,707
În continuare, să luăm cifra 4
 și să o împărțim la 2.

21
00:01:33,745 --> 00:01:38,709
Atunci când Python evaluează expresia,
 rezultatul obținut arată diferit de ceea ce

22
00:01:38,709 --> 00:01:43,792
am văzut până acum.Prin evaluarea
 expresiei obținem 2.0, spre

23
00:01:43,792 --> 00:01:48,743
deosebire de valoarea 2. Ce vedem aici
 este faptul că Python

24
00:01:48,743 --> 00:01:53,781
are mai multe tipuri, iar două dintre tipurile
 numerice sunt tipul int, care vine de la

25
00:01:53,781 --> 00:01:57,795
integer, și float, care înseamnă
 număr în virgulă mobilă.

26
00:01:58,726 --> 00:02:03,706
Această operație de împărțire ne dă un
 rezultat în virgulă mobilă.

27
00:02:03,765 --> 00:02:07,722
Să vedem mai multe exemple de împărțire.

28
00:02:07,722 --> 00:02:12,509
Cinci împărțit la 2 dă 2.5.
 Și ne-am aștepta ca 2 împărțit la 3

29
00:02:12,509 --> 00:02:15,740
să dea 0.666666, cu 6 ca recurent.

30
00:02:15,740 --> 00:02:21,717
Asta obținem, doar că în loc de
 un număr infinit de cifre 6,

31
00:02:21,717 --> 00:02:24,769
suntem limitați de numărul de cifre
 semnificative disponibile.

32
00:02:24,769 --> 00:02:28,750
Astfel, Python are o cantitate limitată de
 memorie cu care lucrează,

33
00:02:28,750 --> 00:02:34,734
iar numărul pe care îl obținem, rezultatul
 împărțirii lui 2 la 3 este o aproximare

34
00:02:34,734 --> 00:02:38,764
la numărul real. Numerele în virgulă mobilă
 sunt aproximări ale numerelor reale.

35
00:02:38,764 --> 00:02:43,613
Un alt exemplu
 ar fi împărțirea lui 5 la 3

36
00:02:43,613 --> 00:02:49,782
și putem vedea că rezultatul este un rezultat
 aproximativ cu 1.66666, iar ultima cifră

37
00:02:49,782 --> 00:02:57,736
este de fapt un 7. În mod similar,
 7 împărțit la 3 este 2.333333,

38
00:02:57,736 --> 00:03:04,757
iar ultima cifră este un 5. 7/3 este
 împărțirea cu virgulă mobilă, și deoarece

39
00:03:04,757 --> 00:03:10,718
numerele în virgulă mobilă sunt aproximări
 ale numerelor reale, există o oarecare imprecizie

40
00:03:10,718 --> 00:03:15,746
și asta e ceea ce vedem aici.Python are
 un al doilea tip de împărțire, numit

41
00:03:15,746 --> 00:03:19,791
împărțirea numerelor întregi.Vom împărți
 4 la 2 folosind împărțirea numerelor întregi,

42
00:03:19,791 --> 00:03:23,751
iar când Python evaluează această expresie,

43
00:03:23,751 --> 00:03:27,731
o va evalua astfel încât să rezulte un int,
 spre deosebire de un float.

44
00:03:28,709 --> 00:03:35,759
Atunci când împărțim 2 la 3 avem o împărțire
 de numere întregi, vom obține tot un int: zero.

45
00:03:35,761 --> 00:03:43,703
Deci, ne vom gândi la acest rezultat astfel:
 dacă ar fi să rescriem asta, am putea

46
00:03:43,703 --> 00:03:50,709
să rescriem 2 și 1/3 ca 0 și 2/3,
 iar ceea ce obținem este acest număr întreg

47
00:03:50,709 --> 00:03:57,736
parte a rezultatului. Deci, să luăm în
 considerare 5 împărțit la 3, folosind

48
00:03:57,749 --> 00:04:03,723
împărțirea numerelor întregi și, din nou,
 rezultatul este 1, număr întreg.
 Așa că putem rescrie

49
00:04:03,723 --> 00:04:10,741
5/3 sub forma 1 și 2/3 și obținem valoarea 1.

50
00:04:12,724 --> 00:04:19,704
Când împărțim 7 la 3, folosind împărțirea
 numerelor întregi, obținem 2.

51
00:04:19,704 --> 00:04:24,743
Deci, putem să rescriem asta ca 2 și 1/3.

52
00:04:25,736 --> 00:04:31,757
Obținem doar o parte a rezultatului,
 când facem asta, o parte a rezultatului

53
00:04:31,757 --> 00:04:34,783
împărțirii. Cealaltă parte o putem
 obține folosind un operator diferit,

54
00:04:34,783 --> 00:04:40,706
numit operatorul rest,
 sau operatorul mod.

55
00:04:40,706 --> 00:04:44,792
Folosim semnul procent (%) pentru
 a semnala această operație.

56
00:04:44,792 --> 00:04:50,752
Deci, 4%2 este modul în care citim această
 expresie, iar rezultatul este 0.

57
00:04:50,753 --> 00:04:55,746
Nu există rest pentru împărțirea lui 4 la 2.

58
00:04:55,756 --> 00:05:01,775
Când împărțim 2 la 3,
 restul în acest caz este 2.

59
00:05:02,757 --> 00:05:08,762
Iar când împărțim 5 la 3, restul este 2.

60
00:05:08,762 --> 00:05:15,790
Din nou, ca o recapitulare, ne putem gândi
 la 5 împărțit la 3, rescriind aceasta ca 1 și 2/3.

61
00:05:15,790 --> 00:05:21,748
Când avem 5 împărțit la 3, obținem
 acest număr întreg, 1.

62
00:05:21,748 --> 00:05:27,716
Când avem 5 % 3, obținem 2,

63
00:05:27,716 --> 00:05:31,732
numărătorul părții fracționare a rezultatului.

64
00:05:31,732 --> 00:05:36,730
Deci când vom avea 7 % 3, obținem 1,

65
00:05:36,730 --> 00:05:43,699
deoarece acea expresie poate fi rescrisă
 sub forma 2 1/3. Obținem acel 1.

66
00:05:43,707 --> 00:05:50,722
Acum, că am lucrat cu acești operatori
 în mod separat, să îi combinăm

67
00:05:50,722 --> 00:05:53,772
în expresii. Vom aduna

68
00:05:53,772 --> 00:05:59,761
3 cu 4 și scădem 5. Iar operațiile
 care sunt efectuate

69
00:05:59,761 --> 00:06:04,761
sunt aplicate de la stânga la dreapta.
 3 este adunat la 4, iar apoi 5 este

70
00:06:04,761 --> 00:06:10,772
scăzut din acel rezultat. În continuare,
 să adunăm 4 cu 5 și

71
00:06:10,772 --> 00:06:14,730
înmulțim cu 3. În acest caz, ordinea operațiilor

72
00:06:14,730 --> 00:06:20,705
impune ca înmulțirea să fie efectuată prima,
 urmată de adunare.

73
00:06:20,705 --> 00:06:25,718
5 este înmulțit cu 3, iar rezultatul
 se adună cu 4.

74
00:06:26,730 --> 00:06:30,779
În următoarea expresie,
 vom folosi un număr negativ.

75
00:06:30,779 --> 00:06:37,780
Acest semn minus, pe care l-am folosit pentru
 scădere, se folosește și cu un singur număr,

76
00:06:37,780 --> 00:06:44,763
pentru a semnala negația. Vom lua
 valoarea -10, o înmulțim cu 3, adunăm 5,

77
00:06:44,763 --> 00:06:48,775
și ridicăm totul la puterea 3.

78
00:06:48,775 --> 00:06:53,706
Ordinea operațiilor va fi următoarea:

79
00:06:53,754 --> 00:06:56,776
5, îl ridicăm mai întâi la puterea 3,

80
00:06:56,776 --> 00:07:00,733
deoarece ridicarea la putere are
 cea mai mare prioritate.

81
00:07:00,763 --> 00:07:08,757
Apoi, aici, se aplică mai întâi semnul
 minus cifrei 10, iar rezultatul, -10,

82
00:07:08,757 --> 00:07:15,706
este înmulțit cu 3. În cele din urmă, aceste
 valori sunt combinate folosind adunarea.

83
00:07:15,706 --> 00:07:21,778
Ca și în matematica obișnuită,
 putem trece peste prioritatea operatorilor

84
00:07:21,778 --> 00:07:28,701
folosind parantezele. Pot să am,
 mai întâi, evaluată expresia 4 + 5,

85
00:07:28,701 --> 00:07:32,766
înainte de a înmulți rezultatul cu 3.

86
00:07:33,751 --> 00:07:41,731
În mod similar, pot decide că aș dori să aibă
 loc mai întâi înmulțirea, în a doua expresie

87
00:07:41,731 --> 00:07:48,718
la care ne-am uitat, folosind paranteze,
 pentru a fi evaluată mai întâi.

88
00:07:48,718 --> 00:07:53,740
Până în acest moment, fiecare instrucțiune

89
00:07:53,740 --> 00:07:58,792
pe care i-am dat-o lui Python a produs
 un rezultat. De exemplu, când

90
00:07:58,792 --> 00:08:04,704
i-am cerut să evalueze expresia 2 plus 3,
 ne-a dat rezultatul 5.

91
00:08:04,704 --> 00:08:09,794
Asta, deoarece expresia 2 + 3
 respectă sintaxa limbajului Python.

92
00:08:09,794 --> 00:08:14,721
Sintaxa reprezintă regulile care specifică

93
00:08:14,721 --> 00:08:20,727
ce combinații de simboluri sunt legale,
 iar 2 + 3 este o expresie validă

94
00:08:20,727 --> 00:08:24,715
în Python. Expresia 3 +,

95
00:08:24,715 --> 00:08:28,726
o combinație de simboluri, 3+,
 nu este sintaxă validă.

96
00:08:28,726 --> 00:08:33,761
Așa că, atunci când îi cer lui Python să
 evalueze această expresie, primim o eroare.

97
00:08:33,761 --> 00:08:38,764
Aceasta este prima noastră eroare de
 sintaxă și vom mai vedea multe în acest curs.

98
00:08:38,764 --> 00:08:43,767
Deci Python nu înțelege ce să facă cu acestea,
 cu această combinație de

99
00:08:43,767 --> 00:08:48,757
simboluri, și nu ne poate da
 un rezultat, așa că ne dă o eroare.

100
00:08:48,757 --> 00:08:53,780
O altă combinație de simboluri care va duce
 la o eroare de sintaxă

101
00:08:53,780 --> 00:08:59,710
este să utilizăm operatorul ridicarea la putere
de unul singur, fără să furnizăm vreun operand.

102
00:08:59,710 --> 00:09:06,741
Putem să scriem, de asemenea, o expresie ca cea pe
 care tocmai am văzut-o, doar că în loc să

103
00:09:06,741 --> 00:09:12,768
avem paranteză deschisă și închisă ,
 includem doar o paranteză închisă.

104
00:09:12,768 --> 00:09:19,743
Asta ne va da o eroare de sintaxă.
Dacă includem o paranteză deschisă

105
00:09:19,743 --> 00:09:23,755
dar nici o paranteză închisă, atunci
 vom avea o situație diferită.

106
00:09:23,755 --> 00:09:28,732
Atunci când apăs Enter, nu se întâmplă nimic
 sau pare că nu se întâmplă nimic.

107
00:09:28,732 --> 00:09:33,723
Aceasta pentru că Python permite instrucțiunilor
 să se extindă pe mai multe linii, iar când

108
00:09:33,723 --> 00:09:38,715
apăsăm Enter, el așteaptă,
 de fapt, paranteza închisă,

109
00:09:38,715 --> 00:09:43,778
până când îi dau acea paranteză închisă și apăs
 Enter, atunci expresia este evaluată.

110
00:09:43,778 --> 00:09:48,717
Pe lângă erori de sintaxă, vom întâlni
 și erori semantice.

111
00:09:48,717 --> 00:09:53,752
Erorile semantice apar atunci când sensul
 unei anumite expresii

112
00:09:53,752 --> 00:09:59,578
este invalid. De exemplu, sintaxa 2 plus 3

113
00:09:59,578 --> 00:10:03,769
este validă. Este o combinație
 de simboluri validă.

114
00:10:03,769 --> 00:10:09,759
Iar sensul, semantica acelei expresii este
 că 2 este adunat la 3.

115
00:10:09,759 --> 00:10:14,785
Deci aceasta este în ordine. Patru
 împărțit la zero este valid

116
00:10:14,785 --> 00:10:18,779
din punct de vedere sintactic. Putem
 folosi această combinație de simboluri

117
00:10:18,779 --> 00:10:22,758
Totuși, înțelesul acestei expresii este invalid.

118
00:10:22,758 --> 00:10:26,721
Nu este posibilă împărțirea unui număr la zero.

119
00:10:26,721 --> 00:10:31,729
și astfel avem o eroare de împărțire la 0,
 care este o eroare semantică.