1
00:00:01,043 --> 00:00:04,019
Cześć, w tym wykładzie zaczniemy programować.

2
00:00:04,019 --> 00:00:09,028
Ten wykład zatytuowaliśmy "Python jako kalkulator", ponieważ skupimy się na

3
00:00:09,028 --> 00:00:13,038
wyrażeniach matematycznych. Na tym wykładzie i w czasie kursu

4
00:00:13,038 --> 00:00:17,067
będziemy używać Idle - programu, który jest dostarczany razem z instalacją Pythona.

5
00:00:17,067 --> 00:00:20,085
Przejdźmy teraz na Idle i zacznijmy programować.

6
00:00:22,046 --> 00:00:27,032
To jest Idle, a okno, na które właśnie patrzymy, nazywa się

7
00:00:27,032 --> 00:00:31,059
shell. Właśnie tutaj możemy wypróbować

8
00:00:31,059 --> 00:00:36,028
instrukcje Pythona i obejrzeć zawartość Pythona. Ten symbol, złożony z trzech strzałek,

9
00:00:36,028 --> 00:00:41,076
nazywa się ?prompt?. Obok ?prompt? będziemy wpisywać instrukcje

10
00:00:41,076 --> 00:00:45,022
Pythona. A kiedy przyciśniemy enter, Python

11
00:00:45,022 --> 00:00:50,014
obliczy wartość tych poleceń. Na przykład, wpiszmy polecenie

12
00:00:50,014 --> 00:00:53,046
dwa plus trzy i poprośmy Pythona, żeby to obliczył.

13
00:00:53,097 --> 00:00:59,070
Należy zauważyć, że nic się nie dzieje do momentu, kiedy przycisnę klawisz Enter.

14
00:00:59,070 --> 00:01:05,092
Spójrzmy na inne wyrażenie, sześć odjąć dwa - znowu nic się nie dzieje

15
00:01:05,092 --> 00:01:10,026
aż nacisnę Enter. W tym momencie Python oblicza

16
00:01:10,026 --> 00:01:15,019
wartość wyrażenia. Innym wyrażeniem mogłoby być siedem razy

17
00:01:15,019 --> 00:01:19,020
trzy. Dotąd widzieliśmy trzy operatory:

18
00:01:19,020 --> 00:01:26,021
dodawanie, odejmowanie i mnożenie. Innym działaniem jest potęgowanie.

19
00:01:26,021 --> 00:01:31,012
I czytamy to wyrażenie jako dwa do potęgi piątej.

20
00:01:32,037 --> 00:01:37,007
Następnie weźmy cztery i podzielmy je przez dwa.

21
00:01:37,045 --> 00:01:42,009
Kiedy Python oblicza wartość tego wyrażenia, rezultat, który dostajemy wygląda trochę

22
00:01:42,009 --> 00:01:47,092
inaczej niż to, co widzieliśmy do tej pory. Wyrażenie zostaje obliczone jako 2.0

23
00:01:47,092 --> 00:01:52,043
a nie po prostu dwa. Widzimy tutaj, że Python

24
00:01:52,043 --> 00:01:57,081
ma różne typy, pośród których są typ "int", który oznacza

25
00:01:57,081 --> 00:02:01,095
"integer" (liczba całkowita) oraz "float", który oznacza "floating point number" (liczba zmiennoprzecinkowa)

26
00:02:02,026 --> 00:02:07,006
Takie dzielenie daje nam floata jako rezultat.

27
00:02:07,065 --> 00:02:11,022
Spójrzmy na więcej przykładów dzielenia.

28
00:02:11,022 --> 00:02:15,809
Pięć podzielone na dwa daje 2.5. I oczekiwalibyśmy, że dwa podzielone na

29
00:02:15,809 --> 00:02:19,040
trzy da nam .666666, z powtarzającą się szóstką.

30
00:02:19,040 --> 00:02:25,017
I właśnie to nam daje, ale zamiast nieskończonej liczby 6-tek, mamy limit

31
00:02:25,017 --> 00:02:28,069
dostępnych cyfr znaczących.

32
00:02:28,069 --> 00:02:32,050
A zatem Python ma ograniczoną ilość pamięci, z którą może pracować.

33
00:02:32,050 --> 00:02:38,034
I liczba, którą otrzymujemy, wynik dzielenia dwóch przez trzy jest przybliżeniem

34
00:02:38,034 --> 00:02:42,064
prawdziwej liczby. Floaty są przybliżeniami

35
00:02:42,064 --> 00:02:46,913
prawdziwych liczb. Innym przykładem byłoby podzielenie pięciu przez

36
00:02:46,913 --> 00:02:53,082
trzy i, jak widzimy, wynik jest przybliżony z 1.66666 i

37
00:02:53,082 --> 00:03:01,036
siódemką jako ostatnią cyfrą. Podobnie siedem podzielone na trzy, wychodzi

38
00:03:01,036 --> 00:03:08,057
2.333333, a ostatnią cyfrą jest piątka. 7/3 jest dzieleniem floatów i skoro

39
00:03:08,057 --> 00:03:14,018
floaty są przybliżeniami prawdziwych liczb, jest tam trochę mniej precyzji

40
00:03:14,018 --> 00:03:19,046
i właśnie to widzimy tutaj. Python ma drugi rodzaj dzielenia

41
00:03:19,046 --> 00:03:23,091
nazwany dzieleniem liczb całkowitych. Podzielimy cztery na dwa używając dzielenia

42
00:03:23,091 --> 00:03:27,051
liczb całkowitych. Kiedy Python oblicza wartość tego wyrażenia,

43
00:03:27,051 --> 00:03:31,031
wyliczy "int", a nie "float".