Bună. În această lecție vom
 începe să programăm. Numim această lecție: 'Python ca și calculator',
 deoarece ne vom concentra atenția asupra expresiilor matematice. În această lecție
 și de-a lungul cursului vom folosi IDLE, un program care
 vine odată cu instalarea Python. Să trecem în IDLE și să începem
 să programăm. Acesta este IDLE, iar fereastra la care ne uităm
 acum se numește shell. Aici putem încerca instrucțiunile
 Python și explora caracteristicile Python. Acest simbol,
 simbolul cu 3 săgeți, se numește prompt. Aici vom tasta instrucțiunile Python și când apăsăm Enter,
 Python va evalua acele instrucțiuni. De exemplu,
 să tastăm instrucțiunea 2 + 3 și să îi cerem lui Python
 să o evalueze. Este important să rețineți că nu s-a întâmplat
 nimic până când nu am apăsat tasta Enter. Să ne uităm la o altă expresie, 6 minus 2
 și, din nou, nu se întâmplă nimic până când nu apăs Enter. În acel moment,
 Python evaluează expresia. O altă expresie ar putea fi 7 înmulțit cu 3. Până acum am văzut trei operatori: adunarea, scăderea și înmulțirea.
O altă operație este ridicarea la putere, Și citim această expresie ca 2 la puterea 5. În continuare, să luăm cifra 4
 și să o împărțim la 2. Atunci când Python evaluează expresia,
 rezultatul obținut arată diferit de ceea ce am văzut până acum.Prin evaluarea
 expresiei obținem 2.0, spre deosebire de valoarea 2. Ce vedem aici
 este faptul că Python are mai multe tipuri, iar două dintre tipurile
 numerice sunt tipul int, care vine de la integer, și float, care înseamnă
 număr în virgulă mobilă. Această operație de împărțire ne dă un
 rezultat în virgulă mobilă. Să vedem mai multe exemple de împărțire. Cinci împărțit la 2 dă 2.5.
 Și ne-am aștepta ca 2 împărțit la 3 să dea 0.666666, cu 6 ca recurent. Asta obținem, doar că în loc de
 un număr infinit de cifre 6, suntem limitați de numărul de cifre
 semnificative disponibile. Astfel, Python are o cantitate limitată de
 memorie cu care lucrează, iar numărul pe care îl obținem, rezultatul
 împărțirii lui 2 la 3 este o aproximare la numărul real. Numerele în virgulă mobilă
 sunt aproximări ale numerelor reale. Un alt exemplu
 ar fi împărțirea lui 5 la 3 și putem vedea că rezultatul este un rezultat
 aproximativ cu 1.66666, iar ultima cifră este de fapt un 7. În mod similar,
 7 împărțit la 3 este 2.333333, iar ultima cifră este un 5. 7/3 este
 împărțirea cu virgulă mobilă, și deoarece numerele în virgulă mobilă sunt aproximări
 ale numerelor reale, există o oarecare imprecizie și asta e ceea ce vedem aici.Python are
 un al doilea tip de împărțire, numit împărțirea numerelor întregi.Vom împărți
 4 la 2 folosind împărțirea numerelor întregi, iar când Python evaluează această expresie, o va evalua astfel încât să rezulte un int,
 spre deosebire de un float. Atunci când împărțim 2 la 3 avem o împărțire
 de numere întregi, vom obține tot un int: zero. Deci, ne vom gândi la acest rezultat astfel:
 dacă ar fi să rescriem asta, am putea să rescriem 2 și 1/3 ca 0 și 2/3,
 iar ceea ce obținem este acest număr întreg parte a rezultatului. Deci, să luăm în
 considerare 5 împărțit la 3, folosind împărțirea numerelor întregi și, din nou,
 rezultatul este 1, număr întreg.
 Așa că putem rescrie 5/3 sub forma 1 și 2/3 și obținem valoarea 1. Când împărțim 7 la 3, folosind împărțirea
 numerelor întregi, obținem 2. Deci, putem să rescriem asta ca 2 și 1/3. Obținem doar o parte a rezultatului,
 când facem asta, o parte a rezultatului împărțirii. Cealaltă parte o putem
 obține folosind un operator diferit, numit operatorul rest,
 sau operatorul mod. Folosim semnul procent (%) pentru
 a semnala această operație. Deci, 4%2 este modul în care citim această
 expresie, iar rezultatul este 0. Nu există rest pentru împărțirea lui 4 la 2. Când împărțim 2 la 3,
 restul în acest caz este 2. Iar când împărțim 5 la 3, restul este 2. Din nou, ca o recapitulare, ne putem gândi
 la 5 împărțit la 3, rescriind aceasta ca 1 și 2/3. Când avem 5 împărțit la 3, obținem
 acest număr întreg, 1. Când avem 5 % 3, obținem 2, numărătorul părții fracționare a rezultatului. Deci când vom avea 7 % 3, obținem 1, deoarece acea expresie poate fi rescrisă
 sub forma 2 1/3. Obținem acel 1. Acum, că am lucrat cu acești operatori
 în mod separat, să îi combinăm în expresii. Vom aduna 3 cu 4 și scădem 5. Iar operațiile
 care sunt efectuate sunt aplicate de la stânga la dreapta.
 3 este adunat la 4, iar apoi 5 este scăzut din acel rezultat. În continuare,
 să adunăm 4 cu 5 și înmulțim cu 3. În acest caz, ordinea operațiilor impune ca înmulțirea să fie efectuată prima,
 urmată de adunare. 5 este înmulțit cu 3, iar rezultatul
 se adună cu 4. În următoarea expresie,
 vom folosi un număr negativ. Acest semn minus, pe care l-am folosit pentru
 scădere, se folosește și cu un singur număr, pentru a semnala negația. Vom lua
 valoarea -10, o înmulțim cu 3, adunăm 5, și ridicăm totul la puterea 3. Ordinea operațiilor va fi următoarea: 5, îl ridicăm mai întâi la puterea 3, deoarece ridicarea la putere are
 cea mai mare prioritate. Apoi, aici, se aplică mai întâi semnul
 minus cifrei 10, iar rezultatul, -10, este înmulțit cu 3. În cele din urmă, aceste
 valori sunt combinate folosind adunarea. Ca și în matematica obișnuită,
 putem trece peste prioritatea operatorilor folosind parantezele. Pot să am,
 mai întâi, evaluată expresia 4 + 5, înainte de a înmulți rezultatul cu 3. În mod similar, pot decide că aș dori să aibă
 loc mai întâi înmulțirea, în a doua expresie la care ne-am uitat, folosind paranteze,
 pentru a fi evaluată mai întâi. Până în acest moment, fiecare instrucțiune pe care i-am dat-o lui Python a produs
 un rezultat. De exemplu, când i-am cerut să evalueze expresia 2 plus 3,
 ne-a dat rezultatul 5. Asta, deoarece expresia 2 + 3
 respectă sintaxa limbajului Python. Sintaxa reprezintă regulile care specifică ce combinații de simboluri sunt legale,
 iar 2 + 3 este o expresie validă în Python. Expresia 3 +, o combinație de simboluri, 3+,
 nu este sintaxă validă. Așa că, atunci când îi cer lui Python să
 evalueze această expresie, primim o eroare. Aceasta este prima noastră eroare de
 sintaxă și vom mai vedea multe în acest curs. Deci Python nu înțelege ce să facă cu acestea,
 cu această combinație de simboluri, și nu ne poate da
 un rezultat, așa că ne dă o eroare. O altă combinație de simboluri care va duce
 la o eroare de sintaxă este să utilizăm operatorul ridicarea la putere
de unul singur, fără să furnizăm vreun operand. Putem să scriem, de asemenea, o expresie ca cea pe
 care tocmai am văzut-o, doar că în loc să avem paranteză deschisă și închisă ,
 includem doar o paranteză închisă. Asta ne va da o eroare de sintaxă.
Dacă includem o paranteză deschisă dar nici o paranteză închisă, atunci
 vom avea o situație diferită. Atunci când apăs Enter, nu se întâmplă nimic
 sau pare că nu se întâmplă nimic. Aceasta pentru că Python permite instrucțiunilor
 să se extindă pe mai multe linii, iar când apăsăm Enter, el așteaptă,
 de fapt, paranteza închisă, până când îi dau acea paranteză închisă și apăs
 Enter, atunci expresia este evaluată. Pe lângă erori de sintaxă, vom întâlni
 și erori semantice. Erorile semantice apar atunci când sensul
 unei anumite expresii este invalid. De exemplu, sintaxa 2 plus 3 este validă. Este o combinație
 de simboluri validă. Iar sensul, semantica acelei expresii este
 că 2 este adunat la 3. Deci aceasta este în ordine. Patru
 împărțit la zero este valid din punct de vedere sintactic. Putem
 folosi această combinație de simboluri Totuși, înțelesul acestei expresii este invalid. Nu este posibilă împărțirea unui număr la zero. și astfel avem o eroare de împărțire la 0,
 care este o eroare semantică.