1
00:00:01,043 --> 00:00:04,019
Ciao.
In questa lezione inizieremo a programmare.

2
00:00:04,019 --> 00:00:09,028
In questa lezione faremo riferimento a Python
come un calcolatore dato che andremo a concentrarci

3
00:00:09,028 --> 00:00:13,038
sulle espressioni matematiche.
In questa lezione e per tutto il corso,

4
00:00:13,038 --> 00:00:17,067
useremo IDLE, un programma fornito all'interno
dell'installazione di Python.

5
00:00:17,067 --> 00:00:20,085
Ora passiamo ad IDLE e iniziamo a programmare.

6
00:00:18,746 --> 00:00:23,732
Questo è IDLE, e la finestra che vediamo 
ora viene detta shell.

7
00:00:23,732 --> 00:00:27,759
Qui è il punto in cui possiamo provare delle
istruzioni di Python ed esplorare le funzionalità

8
00:00:27,759 --> 00:00:32,728
di Python.
Questo simbolo, il simbolo con tre frecce, è

9
00:00:32,728 --> 00:00:37,776
detto prompt.
Di fianco al prompt, digiteremo le istruzioni

10
00:00:37,776 --> 00:00:41,722
di Python.
E quando premiamo Enter, Python

11
00:00:41,722 --> 00:00:46,714
valuterà queste istruzioni.
Ad esempio, digitiamo l'istruzione

12
00:00:46,714 --> 00:00:49,746
due più tre e chiediamo a Python di
valutarla.

13
00:00:49,797 --> 00:00:55,770
E' importante notare che non accade
nulla finché non premo il tasto Enter.

14
00:00:55,770 --> 00:01:01,792
Proviamo un'altra espressione, sei
meno due, e di nuovo non accade nulla

15
00:01:01,792 --> 00:01:06,726
finché non premo Enter.
A questo punto, Python valuta

16
00:01:06,726 --> 00:01:11,719
l'espressione.
Un'altra espressione potrebbe essere sette per

17
00:01:11,719 --> 00:01:15,720
tre.
A questo punto abbiamo visto tre operatori,

18
00:01:15,720 --> 00:01:22,721
addizione, sottrazione e moltiplicazione.
Un'altra operazione è l'elevamento a potenza.

19
00:01:22,721 --> 00:01:27,712
E abbiamo letto questa espressione, come due
elevato a cinque.

20
00:01:28,737 --> 00:01:33,707
Poi, prendiamo quattro e dividiamolo per
due.

21
00:01:33,745 --> 00:01:38,709
Quando Python valuta la sua espressione, il
risultato che vediamo è un po'

22
00:01:38,709 --> 00:01:43,792
diverso da quello che abbiamo visto finora.
L'espressione viene valutata e ci restituisce 2.0 al

23
00:01:43,792 --> 00:01:48,743
posto di avere semplicemente due.
Quello che vediamo è che Python possiede

24
00:01:48,743 --> 00:01:53,781
diversi tipi, e due dei suoi tipi numerici
sono il tipo int, che sta per

25
00:01:53,781 --> 00:01:57,795
intero, e float, che sta per
numero a virgola mobile.

26
00:01:58,726 --> 00:02:03,706
L'operazione di divisione ci da un
risultato di tipo float.

27
00:02:03,765 --> 00:02:07,722
Vediamo ancora qualche esempio di
divisione.

28
00:02:07,722 --> 00:02:12,509
Cinque diviso due ci da 2.5.
E ci saremmo aspettati che due diviso per

29
00:02:12,509 --> 00:02:15,740
tre ci avrebbe dato .666666, con sei
che si ripete.

30
00:02:15,740 --> 00:02:21,717
Questo è ciò che restituisce, invece di
un numero infinito di 6, siamo limitati

31
00:02:21,717 --> 00:02:24,769
dal numero di cifre significative 
disponibili.

32
00:02:24,769 --> 00:02:28,750
Quindi, Python ha una quantità di memoria limitata
con cui lavorare.

33
00:02:28,750 --> 00:02:34,734
E il numero che otteniamo, il risultato della
divisione di due per tre è un'approssimazione

34
00:02:34,734 --> 00:02:38,764
del numero reale.
I numeri a virgola mobile sono approssimazioni

35
00:02:38,764 --> 00:02:43,613
dei numeri reali.
Un altro esempio sarebbe dividere cinque per

36
00:02:43,613 --> 00:02:49,782
tre, e possiamo vedere che il risultato è
approssimato con 1.66666 e che

37
00:02:49,782 --> 00:02:57,736
l'ultima cifra è in realtà un sette.
Similmente, sette diviso per tre, c'è

38
00:02:57,736 --> 00:03:04,757
2.333333, e l'ultima cifra è un cinque.
7/3 è una divisione in virgola mobile, e dato che

39
00:03:04,757 --> 00:03:10,718
i numeri a virgola mobile sono approssimazioni
dei numeri reali, ci sono alcune imprecisioni,

40
00:03:10,718 --> 00:03:15,746
e questo è ciò che vediamo qui.
Python possiede un secondo tipo di divisione

41
00:03:15,746 --> 00:03:19,791
detta divisione intera.
Dividiamo quattro per due usando la divisione

42
00:03:19,791 --> 00:03:23,751
intera.
E quando Python valuta questa espressione,

43
00:03:23,751 --> 00:03:27,731
la valuterà per restituire qualcosa di diverso
di un float.

44
00:03:28,709 --> 00:03:35,759
Quando dividiamo due per tre con una divisione,
divisione intera, otteniamo anche un INT zero.

45
00:03:35,761 --> 00:03:43,703
Quindi il modo di pensare a questo risultato è
che se dovessimo riscriverlo, potremmo

46
00:03:43,703 --> 00:03:50,709
riscrivere due e un terzo come zero e
due-terzi, e che ciò che otterremmo sarebbe

47
00:03:50,709 --> 00:03:57,736
questa parte intera del risultato.
Quindi consideriamo cinque diviso per tre

48
00:03:57,749 --> 00:04:03,723
usando la divisione intera e di nuovo
il risultato è il numero intero uno.

49
00:04:03,723 --> 00:04:10,741
Quindi possiamo riscrivere cinque su tre come uno
e due-terzi, e otteniamo l'uno.

50
00:04:12,724 --> 00:04:19,704
Dividendo sette per tre, usando la divisione
intera, otteniamo due.

51
00:04:19,704 --> 00:04:24,743
Quindi questo verrebbe riscritto come due e
un terzo.

52
00:04:25,736 --> 00:04:31,757
Otteniamo solo la parte del risultato quando
facciamo questo, parte del risultato della

53
00:04:31,757 --> 00:04:34,783
divisione.
Per l'altra parte possiamo usare un

54
00:04:34,783 --> 00:04:40,706
altro operatore chiamato resto
dell'operatore, o operatore mod.

55
00:04:40,706 --> 00:04:44,792
Usiamo il segno di percentuale per indicare
questa operazione.

56
00:04:44,792 --> 00:04:50,752
Quindi quattro mod due è il modo in cui leggiamo
questa espressione, e il risultato è zero.

57
00:04:50,753 --> 00:04:55,746
Non c'è resto per la divisione di
quattro diviso per due.

58
00:04:55,756 --> 00:05:01,775
Quando dividiamo due per tre, il resto
in questo caso è due.

59
00:05:02,757 --> 00:05:08,762
E poi quando dividiamo cinque per tre, il
resto è due.

60
00:05:08,762 --> 00:05:15,790
Quindi, di nuovo, come riassunto, possiamo pensare a
cinque diviso per tre, riscrivendolo come

61
00:05:15,790 --> 00:05:21,748
uno e due-terzi.
Quando facciamo cinque diviso per tre, otteniamo

62
00:05:21,748 --> 00:05:27,716
questo numero uno intero.
Quando facciamo cinque mod tre, otteniamo questo

63
00:05:27,716 --> 00:05:31,732
due.
Il numeratore della parte frazionaria del

64
00:05:31,732 --> 00:05:36,730
risultato.
Quindi quando facciamo sette MOD tre, otteniamo

65
00:05:36,730 --> 00:05:43,699
uno, dato che questa espressione può essere 
riscritta come due e un-terzo.

66
00:05:43,707 --> 00:05:50,722
Otteniamo quell'uno.
Ora che abbiamo lavorato con questi operatori

67
00:05:50,722 --> 00:05:53,772
separatamente, combiniamoli in
espressioni.

68
00:05:53,772 --> 00:05:59,761
Aggiungiamo tre a quattro e sottraiamo cinque.
E le operazioni vengono effettuate, sono

69
00:05:59,761 --> 00:06:04,761
applicate da sinistra a destra.
Tre viene aggiunto a quattro, e poi cinque viene

70
00:06:04,761 --> 00:06:10,772
sottratto da quel risultato.
Poi, aggiungiamo quattro a cinque e moltiplichiamo

71
00:06:10,772 --> 00:06:14,730
per tre.
In questo caso, l'ordine delle operazioni

72
00:06:14,730 --> 00:06:20,705
stabilisce che la moltiplicazione debba essere
applicata per prima, seguita dall'addizione.

73
00:06:20,705 --> 00:06:25,718
Cinque viene moltiplicato per tre e poi quel 
risultato viene aggiunto a quattro.

74
00:06:26,730 --> 00:06:30,779
Nell'espressione successiva, useremo un numero
negativo.

75
00:06:30,779 --> 00:06:37,780
Quindi il segno meno che abbiamo usato per
la sottrazione viene anche usato con un singolo

76
00:06:37,780 --> 00:06:44,763
numero per significare la negazione.
Prenderemo -dieci, moltiplicato per tre, più

77
00:06:44,763 --> 00:06:48,775
cinque, e prendiamo, quello elevato alla
terza.

78
00:06:48,775 --> 00:06:53,706
L'ordine delle operazioni sarà il
seguente.

79
00:06:53,754 --> 00:06:56,776
Cinque.
Prima effettuiamo l'elevamento alla terza,

80
00:06:56,776 --> 00:07:00,733
dato che l'elevamento a potenza ha la
precedenza più elevata.

81
00:07:00,763 --> 00:07:08,757
Poi qui, il segno negativo viene applicato 
a dieci e il risultato, -dieci

82
00:07:08,757 --> 00:07:15,706
viene moltiplicato per tre.
Infine questi valori sono combinati usando

83
00:07:15,706 --> 00:07:21,778
l'addizione.
Proprio come nella matematica normale, possiamo modificare

84
00:07:21,778 --> 00:07:28,701
la precedenza degli operatori usando le parentesi.
Posso avere l'espressione quattro + cinque

85
00:07:28,701 --> 00:07:32,766
valutata prima, prima di moltiplicare il
risultato per tre.

86
00:07:33,751 --> 00:07:41,731
Similmente, posso decidere che
l'addizione avvenga prima nella seconda

87
00:07:41,731 --> 00:07:48,718
espressione che abbiamo visto, usando
le parentesi per valutarla, valutarla

88
00:07:48,718 --> 00:07:53,740
prima.
Fino a questo punto, ogni istruzione che

89
00:07:53,740 --> 00:07:58,792
abbiamo dato a Python ci ha fornito un risultato.
Per esempio, quando abbiamo chiesto a Python di

90
00:07:58,792 --> 00:08:04,704
valutare l'espressione due più tre, ci
ha dato il risultato cinque.

91
00:08:04,704 --> 00:08:09,794
Questo accade perché l'espressione due più,
più tre segue la sintassi del

92
00:08:09,794 --> 00:08:14,721
linguaggio di Python.
Le regole di sintassi che specificano quali

93
00:08:14,721 --> 00:08:20,727
combinazioni di simboli siano legali, e due
più tre è un'espressione valida in

94
00:08:20,727 --> 00:08:24,715
Python.
L'espressione tre più con una

95
00:08:24,715 --> 00:08:28,726
combinazione di simboli, tre +, non è
una sintassi valida.

96
00:08:28,726 --> 00:08:33,761
Quindi quando chiediamo a Python di valutare questa espressione, 
otteniamo un errore.

97
00:08:33,761 --> 00:08:38,764
Questo è il nostro primo errore di sintassi e
ne vedremo molti altri durante il corso.

98
00:08:38,764 --> 00:08:43,767
Quindi Python non capisce cosa fare con
quelli, con quella combinazione di

99
00:08:43,767 --> 00:08:48,757
simboli e non può restituirci un
risultato, quindi ci da invece un errore.

100
00:08:48,757 --> 00:08:53,780
Un'altra combinazione di simboli che
porterà ad un errore di sintassi è

101
00:08:53,780 --> 00:08:59,710
usare solamente l'operatore di elevazione a potenza
da solo senza fornire alcun [incomprensibile].

102
00:08:59,710 --> 00:09:06,741
Possiamo anche scrivere l'espressione come quella
che abbiamo appena visto, solo che invece di avere una

103
00:09:06,741 --> 00:09:12,768
aperta, aperta e chiusa parentesi, inseriamo
solo la parentesi chiusa.

104
00:09:12,768 --> 00:09:19,743
Questo ci restituirà un errore di sintassi.
Questo includerebbe una parentesi aperta

105
00:09:19,743 --> 00:09:23,755
e non chiusa, allora otterremo una
situazione differente.

106
00:09:23,755 --> 00:09:28,732
Quando premo invio, non accade nulla, o 
sembra che non accada nulla.

107
00:09:28,732 --> 00:09:33,723
Questo perché Python permette che le istruzioni
si estendano su più righe.

108
00:09:33,723 --> 00:09:38,715
Quando premiamo invio, sta aspettando,
per la parentesi chiusa.

109
00:09:38,715 --> 00:09:43,778
Finché non gli inserisco la parentesi chiusa, e
premo invio, allora, l'espressione non è

110
00:09:43,778 --> 00:09:48,717
errata.
Oltre agli errori di sintassi, possiamo anche

111
00:09:48,717 --> 00:09:53,752
incontrare degli errori semantici.
Gli errori semantici avvengono quando il significato di

112
00:09:53,752 --> 00:09:59,578
una particolare espressione non è valida.
Quindi per esempio, la sintassi di due più

113
00:09:59,578 --> 00:10:03,769
tre è valida che è sopra la 
combinazione di simboli.

114
00:10:03,769 --> 00:10:09,759
E il significato e la semantica di quella
espressione è che due viene aggiunto a tre.

115
00:10:09,759 --> 00:10:14,785
Quindi va bene.
Quattro diviso per tre è valido

116
00:10:14,785 --> 00:10:18,779
sintatticamente.
Siamo in grado di usare questa combinazione di

117
00:10:18,779 --> 00:10:22,758
simboli.
Ma il significato di questa espressione

118
00:10:22,758 --> 00:10:26,721
non è valido.
Non è possibile dividere un numero per

119
00:10:26,721 --> 00:10:31,729
zero, e quindi otteniamo un errore di divisione per zero,
che è un errore semantico.