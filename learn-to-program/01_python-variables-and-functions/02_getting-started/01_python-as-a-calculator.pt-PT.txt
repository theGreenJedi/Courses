Olá.
Nesta palestra vamos começar a programar. Nos referimos a esta palestra ao Python como uma calculadora, porque nós estaremos nos concentrando em expressões matemáticas. Nesta palestra e ao longo do curso, estaremos usando IDLE, um programa que vem com a instalação do Python. Vamos mudar para IDLE agora e começar a programar. Isso é o IDLE, e a janela que nós estamos olhando agora  é chamada o shell. Isto é onde poderemos experimentar instruções de Python e explorar  as caracteristicas do Python Este símbolo, os símbolos de três setas, é chamado o prompt.
Ao lado do prompt, digitamos instruções. E quando nós teclamos Enter, 
o Python avalia essas instruções. Por exemplo, vamos digitar a instrução dois mais três, e pedir o Python para avaliá-lo. É importante notar que nada acontece até eu apertar a tecla Enter. Vejamos uma outra expressão, seis menos dois e novamente nada acontece até que eu pressione Enter.
Nesse ponto, Python avalia a expressão Outra expressão poderia ser sete vezes três. Até agora nós vimos três operadores, adição, subtração e multiplicação.
Outra operação é exponenciação. E podemos ler esta expressão, como dois elevado a cinco. Em seguida, vamos tomar quatro e divida-o por dois. Quando Python executa sua expressão, o resultado que obtemos parece um pouco diferente do que vimos até agora.
A expressão é avaliada para nos dar como 2,0 opõe-se a apenas dois.
O que estamos vendo aqui é que o Python trabalha com vários tipos numericos e dois de seus tipos numéricos são tipo int, que significa numeros inteiros e float, que representa o ponto flutuante número 
ou numeros reais. Esta operação de divisão nos dá como resultado um ponto flutuante. Vamos explorar mais alguns exemplos de divisão. Cinco dividido por dois dá 2.5.
E esperamos que dois dividido por três daria.666666, com seis como repetição. Isso é o que dá, embora em vez de um número infinito da 6, estamos limitados o número de dígitos significativos disponíveis. Assim, Python tem uma quantidade limitada de memória para trabalhar com. E o número que obtemos, o resultado da divisão de dois por três é uma aproximação o número real.
Os números são aproximações de ponto flutuante para números reais.
Outro exemplo seria dividir cinco por três e podemos ver que o resultado como um resultado aproximado com 1.66666 e o último dígito é realmente um sete.
Da mesma forma, sete dividido por três, há 2.333333 e o último dígito é um de cinco.
7/3 é flutuante ponto de divisão e desde números de ponto flutuante são aproximações de números reais, há alguma imprecisão, e isso é o que estamos vendo aqui.
Python tem um segundo tipo de divisão Divisão de inteiro chamado.
Nós vai dividir quatro por dois usando inteiro divisão.
E quando Python avalia esta expressão, ele irá avaliar para dar um fim em oposição a um flutuador. Quando dividimos dois por três é um número inteiro, divisão de número inteiro, temos também um INT zero. Portanto, a maneira de pensar sobre este resultado é que se reescrever isto, poderíamos reescrever a dois e um terceiro como zero e dois terços, e é o que estamos ficando para trás Esta parte de número inteiro do resultado.
Então vamos considerar cinco dividido por três usando a divisão e, novamente, o resultado é um número inteiro. Então nós poderia reescrever cinco mais três como um e dois terços, e estamos recebendo o que. Divisão de sete por três, com divisão de número inteiro, temos dois. Para que isto poderia ser reescrito como dois e um terço. Estamos apenas recebendo parte do resultado quando fazemos isso, parte do resultado que o divisão.
A outra parte de nós pode obter usando um operador diferente chamado o operador de resto ou o operador mod. Nós usamos o sinal de porcentagem para enviá-lo para, significar esta operação. Mod então quatro dois é a maneira que nós lemos esta expressão, e o resultado é zero. Não há nenhum restante para a divisão de quatro dividido por dois. Quando dividimos dois por três, neste caso o restante é dois. E quando dividimos cinco por três, o restante é dois. Então, novamente, como uma revisão, podemos pensar de cinco dividido por três, reescrevendo como um e dois terços.
Quando fazemos cinco dividido por três, obtemos Esse número inteiro um.
Quando fazemos cinco três mod, vamos conseguir isso. Dois.
O numerador da parte fracionária do o resultado.
Assim quando fazemos sete três MOD, obtemos um um, porque essa expressão poderia ser reescrita como dois terço. Ficamos com aquele.
Agora que temos trabalhado com esses operadores separadamente, vamos combiná-los em expressões. Vamos adicionar três a quatro e cinco subtrair.
E as operações são realizadas, são aplicada da esquerda para a direita.
Três é adicionado a quatro, e, em seguida, cinco é subtraído do resultado.
Em seguida, vamos adicionar a quatro ou cinco e multiplicar por três.
Neste caso, a ordem das operações dita que multiplicação deve ser aplicada primeiro, seguido por adição. Cinco é multiplicado por três e, em seguida, o resultado é adicionado a quatro. A expressão seguinte, vamos usar um número negativo. Assim este sinal que usamos para subtração também é usado com um único número para significar a negação.
Vamos dar - dez, multiplique isso por três, adicionar cinco e tomar, que o poder de três. A ordem das operações serão aplicadas como segue. Cinco.
Bem, primeiro nós levá-lo ao poder de três, porque a exponenciação tem a prioridade mais alta. E aqui, o sinal negativo se aplica para os dez primeiros e o resultado, negativo dez é multiplicado por três.
Finalmente, esses valores são combinados usando a adição.
Assim como em matemática regular, nós pode substituir precedência de operador, usando parênteses.
Eu posso ter a expressão quatro + cinco Avalie, em primeiro lugar, antes de multiplicar o resultado com três. Da mesma forma, pode decidir que gostaria que a adição de acontecer primeiro na segunda expressão que nós olhamos, usando parênteses para avaliar, tê-lo a avaliar primeiro.
Até este ponto, todas as instruções que nós demos ao Python que resultou.
Por exemplo, quando perguntamos a Python avaliar a expressão de dois mais três, ele nos deu o resultado de cinco. Isso é porque a expressão mais dois, mais três segue a sintaxe do Linguagem Python.
A sintaxe é as regras que especificam que as combinações de símbolos são legais, e dois mais três é uma expressão válida em Python.
A expressão mais três, com uma combinação de símbolos, três +, não é sintaxe válida. Então quando eu pergunto Python para avaliar esta expressão, temos um erro. Este é nosso primeiro erro de sintaxe, e vamos ver muitos mais ao longo do curso. Então Python não entendo o que fazer com aqueles que, com essa combinação de símbolos e ele não podem nos dar de volta um resultado, então em vez nos dá um erro. Outro símbolos de combinação que resultarão em um erro de sintaxe seria apenas Use o operador de exponenciação em seu próprio sem fornecer qualquer [indiscernible]. Podemos também escrever uma expressão como a que acabamos de ver, apenas, em vez de ter um aberto, abrindo e fechando parênteses, apenas incluímos um parêntese de fechamento. Que nos dará um erro de sintaxe.
Incluiria um parêntese de abertura mas nenhum fechamento, então vamos acabar com uma situação diferente. Quando eu bati entrar, nada acontece, ou parece que nada acontece. Isso é porque Python permite instruções estender linhas de múltiplos. Quando nós batemos entrar, esperando, na verdade, o parêntese de fechamento. Até que eu dou esse parêntese de fechamento e tecle enter, em seguida, a expressão não é violados.
Além de erros de sintaxe, vamos também encontra erros semânticos.
Erros semânticos ocorrem quando o significado de uma expressão particular é inválida.
Assim, por exemplo, a sintaxe de dois plus três é válido que está acima da combinação de símbolos. E o significado e a semântica desta expressão é que dois é adicionado a três. Então isso é bom.
Quatro dividido por três é válido sintaticamente.
Nós somos capazes de usar essa combinação de símbolos.
No entanto, o significado dessa expressão é Inválido.
Não é possível dividir um número por zero, e então nós começamos um zero erro da divisão, que é um erro de semântico.