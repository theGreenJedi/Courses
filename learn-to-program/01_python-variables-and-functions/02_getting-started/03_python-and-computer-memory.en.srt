1
00:00:01,770 --> 00:00:03,211
Programs keep track of a lot of
information.

2
00:00:03,211 --> 00:00:03,708
Some of it is visible to the user such as values in a spreadsheet but a lot of it is hidden.

3
00:00:03,708 --> 00:00:04,205
Some of it is visible to the user such as values in a spreadsheet but a lot of it is hidden.

4
00:00:04,205 --> 00:00:04,702
Some of it is visible to the user such as values in a spreadsheet but a lot of it is hidden.

5
00:00:04,702 --> 00:00:05,199
Some of it is visible to the user such as values in a spreadsheet but a lot of it is hidden.

6
00:00:05,199 --> 00:00:06,620
Some of it is visable to the user such as

7
00:00:06,620 --> 00:00:09,460
values in a spreadsheet but a lot of it is
hidden.

8
00:00:12,190 --> 00:00:14,950
For example, when a spreadsheet program
calculates the

9
00:00:14,950 --> 00:00:17,360
average of a group of numbers, the program
first

10
00:00:17,360 --> 00:00:19,310
adds up all the numbers then counts how

11
00:00:19,310 --> 00:00:22,190
many there are and then does the
appropriate division.

12
00:00:25,380 --> 00:00:27,725
All of these values are stored in computer
memory.

13
00:00:27,725 --> 00:00:31,860
For the purposes of this course, we'll
think of computer memory as being a very

14
00:00:31,860 --> 00:00:34,450
long list of storage locations, each of
which

15
00:00:34,450 --> 00:00:37,500
has a unique number called the memory
address.

16
00:00:38,920 --> 00:00:42,660
We will usually write memory addresses
with an x prefix so that they look

17
00:00:42,660 --> 00:00:49,640
different from other numbers, x201 is
memory address 201.

18
00:00:49,640 --> 00:00:50,410
You can think of these

19
00:00:50,410 --> 00:00:54,559
memory addresses as being much like house
numbers on a long street.

20
00:00:57,940 --> 00:01:00,940
As we've said, values are stored in
computer memory.

21
00:01:00,940 --> 00:01:04,979
So the number 8.5 might be at memory
address x34,

22
00:01:04,979 --> 00:01:10,450
x34, and the number 44 might be at memory
address x35.

23
00:01:10,450 --> 00:01:13,060
Programs need a way to keep track of all
these values.

24
00:01:13,060 --> 00:01:15,585
They do this using something called
variables.

25
00:01:15,585 --> 00:01:18,900
A variable is a named location in memory.

26
00:01:20,510 --> 00:01:23,130
Python keeps track of variables in a
separate area

27
00:01:23,130 --> 00:01:27,160
of memory from the values.
We might have a variable shoe size that

28
00:01:27,160 --> 00:01:32,510
stores memory address x34 that means that
shoe size refers to

29
00:01:32,510 --> 00:01:37,920
the value 8.5.
In the same way, we might have a

30
00:01:37,920 --> 00:01:43,630
variable paul_age whose value was 44.
We accomplish this

31
00:01:43,630 --> 00:01:49,360
by storing memory address x35 with
variable paul_age.

32
00:01:49,360 --> 00:01:51,150
The nice thing about Python is that you
don't

33
00:01:51,150 --> 00:01:54,330
have to worry about which particular
memory addresses are chosen.

34
00:01:54,330 --> 00:01:56,710
Python will keep track of all these for
you.

35
00:01:56,710 --> 00:02:00,375
In fact, you can't even pick which memory
addresses are used.

36
00:02:00,375 --> 00:02:04,480
However, it really helps to keep this
model in mind when you're programming.

37
00:02:05,790 --> 00:02:09,190
Here is some terminology that we'll use
throughout the course.

38
00:02:09,190 --> 00:02:11,345
A value has a memory address.

39
00:02:11,345 --> 00:02:14,233
A variable contains memory address.

40
00:02:14,233 --> 00:02:20,090
A variable refers or points to a value.
Here are some

41
00:02:20,090 --> 00:02:26,006
examples of how we use this terminology.
Value 8.5 has memory address x34.

42
00:02:26,006 --> 00:02:32,520
Variable shoe_size contains memory address
x34.

43
00:02:32,520 --> 00:02:38,806
The value of shoe_size is 8.5.
Shoe_size refers to value 8.5.

44
00:02:38,806 --> 00:02:42,319
Shoe_size points to value 8.5.