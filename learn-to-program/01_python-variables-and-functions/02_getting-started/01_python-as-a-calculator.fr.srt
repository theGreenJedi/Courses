1
00:00:01,043 --> 00:00:04,019
Bonjour.
Dans ce cours nous commençons à programmer.

2
00:00:04,019 --> 00:00:09,028
Ce cours s'intitule "Python en tant que
calculette" car nous allons nous concentrer sur

3
00:00:09,028 --> 00:00:13,038
des expressions mathématiques.
Dans ce cours comme dans la suite,

4
00:00:13,038 --> 00:00:17,067
Nous utiliserons IDLE, un programme qui
viens avec l'installation de Python.

5
00:00:17,067 --> 00:00:20,085
Basculons maintenant sur IDLE et
commençons à programmer.

6
00:00:18,746 --> 00:00:23,732
Ceci est IDLE, et la fenêtre que nous
avons sous les yeux est appelée le "Shell".

7
00:00:23,732 --> 00:00:27,759
C'est ici qu'on peut essayer les instructions
de Python et explorer

8
00:00:27,759 --> 00:00:32,728
 ses fonctionnalités.
Ce symbole, triple flèche, est 

9
00:00:32,728 --> 00:00:37,776
appelé le "Prompt".
C'est à côté du Prompt que nous allons taper

10
00:00:37,776 --> 00:00:41,722
les instructions Python.
En tapant Entrée, Python va

11
00:00:41,722 --> 00:00:46,714
évaluer ces instructions.
Par exemple, tapons l'instruction

12
00:00:46,714 --> 00:00:49,746
deux plus trois, et demandons à Python
de l'évaluer.

13
00:00:49,797 --> 00:00:55,770
Il est important de remarquer que rien
ne se produit tant que je n'ai pas appuyé sur Entrée.

14
00:00:55,770 --> 00:01:01,792
Observons une autre expression: six moins deux
et encore une fois, rien ne se produit

15
00:01:01,792 --> 00:01:06,726
tant que je n'ai pas appuyé sur Entrée.
À ce moment, Python évalue

16
00:01:06,726 --> 00:01:11,719
l'expression.
Une autre expression pourrait être sept fois trois.

17
00:01:11,719 --> 00:01:15,720
Pour l'instant nous avons vu trois opérateurs :

18
00:01:15,720 --> 00:01:22,721
addition, soustraction, et multiplication.
Une autre opération est l'exponentielle,

19
00:01:22,721 --> 00:01:27,712
et ont lit cette expression comme deux à la
puissance cinq.

20
00:01:28,737 --> 00:01:33,707
Ensuite, prenons quatre et
divisons le par deux.

21
00:01:33,745 --> 00:01:38,709
Quand Python évalue cette expression, le
résultat est un peu différent

22
00:01:38,709 --> 00:01:43,792
de ce qu'on a vu jusqu'à maintenant.
L'expression évaluée nous donne "2.0" et

23
00:01:43,792 --> 00:01:48,743
non pas juste "2".
On voit ici que Python a

24
00:01:48,743 --> 00:01:53,781
plusieurs types, et deux de ses types
numériques sont "int" qui corresponds

25
00:01:53,781 --> 00:01:57,795
à un Entier et "float", qui corresponds à
un nombre à virgule flottante.

26
00:01:58,726 --> 00:02:03,706
Cette opération de division nous
donne un résultat à virgule flottante.

27
00:02:03,765 --> 00:02:07,722
Explorons un peu plus avec
la division.

28
00:02:07,722 --> 00:02:12,509
Cinq divisé par deux donne 2.5
et on peut supposer que deux divisé par trois

29
00:02:12,509 --> 00:02:15,740
donnerais 0.66666 avec les 6 répétant
à l'infinie.

30
00:02:15,740 --> 00:02:21,717
C'est ce qu'on obtiens, bien qu'a la place
d'un nombre infini de six, on est limités

31
00:02:21,717 --> 00:02:24,769
par le nombre de chiffres disponibles.

32
00:02:24,769 --> 00:02:28,750
Python a une quantité limitée de mémoire
avec laquelle travailler,

33
00:02:28,750 --> 00:02:34,734
et le nombre qu'on obtiens, le résultat de
la division de deux par trois est une approximation

34
00:02:34,734 --> 00:02:38,764
du nombre réel.
Les nombres à virgule flottante sont des approximations

35
00:02:38,764 --> 00:02:43,613
de nombres réels.
Un autre exemple serait de diviser cinq par

36
00:02:43,613 --> 00:02:49,782
trois, et on peut voir que le résultat
est approximé à 1.66666... et le

37
00:02:49,782 --> 00:02:57,736
dernier chiffre est en fait un sept.
Dans la même série, sept divisé par trois : 

38
00:02:57,736 --> 00:03:04,757
2.333333... et le dernier chiffre est un cinq.
7/3 est une division à virgule flottante, et puisque

39
00:03:04,757 --> 00:03:10,718
les nombres à virgule flottante sont des
approximations de réels, il y a des imprécisions.

40
00:03:10,718 --> 00:03:15,746
C'est ce que nous voyons ici.
Python a un second type de division

41
00:03:15,746 --> 00:03:19,791
appelé division entière.
Nous allons diviser quatre par deux utilisant cette

42
00:03:19,791 --> 00:03:23,751
division.
Et quand Python évalue cette expression,

43
00:03:23,751 --> 00:03:27,731
il produira un "int", pas un "float".

44
00:03:28,709 --> 00:03:35,759
Quand on divise deux par trois avec cette
division, on obtient aussi un "int" : zéro.

45
00:03:35,761 --> 00:03:43,703
Pensez y de cette manière :
si on devais réécrire cette expression,

46
00:03:43,703 --> 00:03:50,709
on pourrait écrire deux troisièmes comme
zéro et deux troisièmes, et ce qu'on récupère

47
00:03:50,709 --> 00:03:57,736
c'est la partie entière de ce résultat.
Considérons cinq divisé par trois

48
00:03:57,749 --> 00:04:03,723
avec la division entière et encore
une fois le résultat est un nombre entier.

49
00:04:03,723 --> 00:04:10,741
On pourrait réécrire cinq sur trois comme
un et deux tiers, et on récupère le un.

50
00:04:12,724 --> 00:04:19,704
En divisant sept par trois avec la
division entière, on obtiens deux.

51
00:04:19,704 --> 00:04:24,743
Donc ça pourrait être réécrit
comme deux et un tiers.

52
00:04:25,736 --> 00:04:31,757
On obtiens qu'une partie du résultat quand
on fait ça.

53
00:04:31,757 --> 00:04:34,783
L'autre partie peut être récupérée avec

54
00:04:34,783 --> 00:04:40,706
un opérateur différent appelé le "reste",
ou l'opérateur "modulo". 

55
00:04:40,706 --> 00:04:44,792
On utilise le signe pourcent pour
utiliser cette opération.

56
00:04:44,792 --> 00:04:50,752
On lit cette expression quatre modulo deux
et le résultat est zéro.

57
00:04:50,753 --> 00:04:55,746
Il n'y a pas de reste pour la division de
quatre par deux.

58
00:04:55,756 --> 00:05:01,775
Quand on divise deux par trois, le reste
dans ce cas est deux,

59
00:05:02,757 --> 00:05:08,762
et quand on divise cinq par tris, le
reste est deux.

60
00:05:08,762 --> 00:05:15,790
Donc pour réviser encore, on peut penser
à cinq divisé par trois en le réécrivant

61
00:05:15,790 --> 00:05:21,748
un et deux tiers.
Quand on fais cinq divisé par trois on obtient

62
00:05:21,748 --> 00:05:27,716
ce nombre entier un.
Quand on fais cinq modulo trois, on obtiens ce

63
00:05:27,716 --> 00:05:31,732
deux.
Le numérateur de la fraction

64
00:05:31,732 --> 00:05:36,730
du résultat.
Donc quand on fais sept MOD trois, on obtiens un

65
00:05:36,730 --> 00:05:43,699
un, parce que cette expression pourrait
être réécrite comme deux et un tiers.

66
00:05:43,707 --> 00:05:50,722
On obtiens ça.
Maintenant qu'on a travaillé avec ces opérateurs

67
00:05:50,722 --> 00:05:53,772
séparément, combinons les pour former
des expressions.

68
00:05:53,772 --> 00:05:59,761
Nous allons ajouter trois à quatre et
soustraire cinq. Les opérations sont réalisées

69
00:05:59,761 --> 00:06:04,761
de gauche à droite.
Trois est ajouté à quatre, et puis cinq

70
00:06:04,761 --> 00:06:10,772
est soustrait de ce résultat.
Ensuite, ajoutons quatre à cinq et multiplions

71
00:06:10,772 --> 00:06:14,730
par trois.
Dans ce cas, l'ordre des opérations

72
00:06:14,730 --> 00:06:20,705
dicte que la multiplication doit être
appliquée en premier, suivie par l'addition.

73
00:06:20,705 --> 00:06:25,718
Cinq est multiplié par trois et ensuite
quatre est ajouté à ce résultat.

74
00:06:26,730 --> 00:06:30,779
Pour la prochaine expression, on va utiliser
un nombre négatif.

75
00:06:30,779 --> 00:06:37,780
Donc ce signe moins que l'on a utilisé
pour la soustraction peut aussi être utilisé

76
00:06:37,780 --> 00:06:44,763
avec un seul nombre pour signifier négation.
On va prendre moins dix, fois trois,

77
00:06:44,763 --> 00:06:48,775
plus cinq et prendre ça
à la puissance trois.

78
00:06:48,775 --> 00:06:53,706
L'ordre des opérations sera appliqué
ainsi :

79
00:06:53,754 --> 00:06:56,776
Cinq est d'abord passé
à la puissance trois,

80
00:06:56,776 --> 00:07:00,733
car l'exponentiation est l'opération
avec la plus haute précédence.

81
00:07:00,763 --> 00:07:08,757
Ensuite ici, le signe moins s'applique
d'abord au dix et le résultat - moins dix -

82
00:07:08,757 --> 00:07:15,706
est multiplié par trois.
Finallement, ces valeurs sont combinées

83
00:07:15,706 --> 00:07:21,778
 par l'addition.
Comme en math, on peut forcer

84
00:07:21,778 --> 00:07:28,701
la précédence en utilisant des parenthèses.
Je peux faire évaluer quatre + cinq

85
00:07:28,701 --> 00:07:32,766
en premier, avant de multiplier
le résultat par trois.

86
00:07:33,751 --> 00:07:41,731
De la même manière, je peux décider
que l'addition vienne en premier dans la seconde

87
00:07:41,731 --> 00:07:48,718
expression que nous avons vu, en
utilisant des parenthèses pour forcer

88
00:07:48,718 --> 00:07:53,740
l'évaluation.
Jusqu'à là, toutes les expressions

89
00:07:53,740 --> 00:07:58,792
passées à Python ont produit un résultat.
Par exemple, quand on a demandé à Python

90
00:07:58,792 --> 00:08:04,704
d'évaluer l'expression deux plus trois,
il nous a donné le résultat cinq.

91
00:08:04,704 --> 00:08:09,794
C'est parce que l'expression deux plus
trois suit les règles de syntaxe du

92
00:08:09,794 --> 00:08:14,721
language Python.
La syntaxe c'est les règles qui spécifient

93
00:08:14,721 --> 00:08:20,727
quelles combinaisons de symboles sont légales;
et deux plus trois est une expression valide

94
00:08:20,727 --> 00:08:24,715
en Python.
L'expression trois plus, ou la combinaison

95
00:08:24,715 --> 00:08:28,726
de symboles "3" "+" n'est pas
syntaxiquement valide.

96
00:08:28,726 --> 00:08:33,761
Donc quand on demande à Python d'évaluer
cette expression, on obtiens une erreur.

97
00:08:33,761 --> 00:08:38,764
C'est notre première erreur de syntaxe
et on en verra beaucoup pendant cette classe.

98
00:08:38,764 --> 00:08:43,767
Donc Python ne comprends pas quoi faire
avec cette combinaison de

99
00:08:43,767 --> 00:08:48,757
symboles et il ne peut pas nous donner
un résultat, donc à la place il donne une erreur.

100
00:08:48,757 --> 00:08:53,780
Une autre combinaison qui produirait
une erreur serait de juste

101
00:08:53,780 --> 00:08:59,710
utiliser l'opérateur puissance tout seul
sans fournir d'opérandes.

102
00:08:59,710 --> 00:09:06,741
On peut aussi écrire une expression comme
celle qu'on viens de voir sauf qu'à

103
00:09:06,741 --> 00:09:12,768
la place d'une parenthèse ouvrante puis
fermante, on ne met qu'une ouvrante.

104
00:09:12,768 --> 00:09:19,743
Cella nous donnera une erreur de syntaxe.
Si on met une parenthèse ouvrante

105
00:09:19,743 --> 00:09:23,755
mais pas de fermante, on se retrouve
avec une situation différente.

106
00:09:23,755 --> 00:09:28,732
Quand j'appuie sur Entrée, rien ne se
produit, ou en tout cas rien de visible.

107
00:09:28,732 --> 00:09:33,723
C'est parce que Python permet que les
instructions s'étendent sur plusieures lignes.

108
00:09:33,723 --> 00:09:38,715
Quand on appuie sur Entrée, il est en
fait entrain d'attendre la parenthèse fermante.

109
00:09:38,715 --> 00:09:43,778
Tant que je n'aurais pas donné cette parenthèse
et appuyé sur Entrée, l'expression

110
00:09:43,778 --> 00:09:48,717
n'est pas évaluée.
En plus des erreurs de syntaxe, nous allons aussi

111
00:09:48,717 --> 00:09:53,752
voir des erreurs sémantiques.
Ces erreurs se produisent quand le sens

112
00:09:53,752 --> 00:09:59,578
d'une expression est invalide.
Par exemple, la syntaxe de deux plus trois

113
00:09:59,578 --> 00:10:03,769
est valide. C'est une combinaison
valide de symboles.

114
00:10:03,769 --> 00:10:09,759
Le me sens, la sémantique de cette
expression est que deux est ajouté à trois.

115
00:10:09,759 --> 00:10:14,785
Donc c'est bon.
Quatre divisé par zéro est

116
00:10:14,785 --> 00:10:18,779
syntaxiquement valide.
Nous pouvons utiliser cette combinaison de

117
00:10:18,779 --> 00:10:22,758
symboles.
Cependant, le sens de cette expression est

118
00:10:22,758 --> 00:10:26,721
invalide : il n'est pas
possible de diviser un nombre par

119
00:10:26,721 --> 00:10:31,729
zéro, et donc on obtiens une erreur de
division par zéro, qui est une erreur sémantique.