1
00:00:03,130 --> 00:00:04,760
On a vu que Python a plusieurs

2
00:00:04,760 --> 00:00:08,550
opérateurs mathématiques, comme la
multiplication et la soustraction

3
00:00:08,550 --> 00:00:10,800
et on sait que l'opération mathématique

4
00:00:10,800 --> 00:00:13,940
multiplication est associée
à un symbole astérisque.

5
00:00:13,940 --> 00:00:16,190
Il y a beaucoup d'autre opérations que l'on
peut vouloir faire,

6
00:00:16,190 --> 00:00:21,170
avec ou sans math, et pas assez
de symboles pour les représenter.

7
00:00:21,170 --> 00:00:24,330
Par exemple, on peut vouloir
trouver lequel parmis plusieurs

8
00:00:24,330 --> 00:00:28,980
nombres est le plus grand, et il n'y a
pas de symbole associé avec cette opération.

9
00:00:28,980 --> 00:00:31,030
À la place, Python a un jeu de fonctions

10
00:00:31,030 --> 00:00:34,530
de base qui permettent d'effectuer ces opérations.

11
00:00:34,530 --> 00:00:35,960
On va les voir maintenant.

12
00:00:35,960 --> 00:00:40,220
Commençons par cet exemple que j'ai mentionné,

13
00:00:40,220 --> 00:00:43,570
qui est trouver lequel de plusieurs nombres
est le plus grand.

14
00:00:43,570 --> 00:00:47,760
La fonction de base que nous allons
utiliser pour ça est la fonction "max".

15
00:00:47,760 --> 00:00:52,285
Donc le nom de la fonction est "max",
j'utilise une parenthèse ouvrante,

16
00:00:52,285 --> 00:00:54,720
et remarquez le pop up jaune.
C'est 

17
00:00:54,720 --> 00:00:54,990
et…

18
00:00:54,990 --> 00:00:56,610
de IDLE qui est censé rappeler

19
00:00:56,610 --> 00:00:59,175
aux programmeurs professionnels ce que
la fonction fait.

20
00:00:59,175 --> 00:01:01,200
Vous n'allez probablement pas
pouvoir la comprendre,

21
00:01:01,200 --> 00:01:02,494
et c'est normal.

22
00:01:02,494 --> 00:01:04,072
Ensuite je fournis les arguments de
la fonction, donc

23
00:01:04,072 --> 00:01:07,262
dans ce cas, je vais donner deux arguments.

24
00:01:07,262 --> 00:01:10,070
Passer deux arguments à la fonction.

25
00:01:10,070 --> 00:01:19,755
Leur valeurs sont 36.7 et 23.4.
Ceci est donc un appel de fonction,

26
00:01:19,755 --> 00:01:26,310
avec pour arguments 36.7 et 23.4.
Quand j'appuie sur Entrée, Python va évaluer

27
00:01:26,310 --> 00:01:31,250
cet appel de fonction, et me dire que 36.7
est le plus grand des deux nombres.

28
00:01:32,250 --> 00:01:35,989
La forme d'un appel de fonction c'est :
le nom de la fonction,

29
00:01:35,989 --> 00:01:41,150
une parenthèse ouvrante, une liste
d'expressions séparées par des virgules qu'on appelle arguments,

30
00:01:41,150 --> 00:01:44,180
et une parenthèse fermante.
Quand une fonction est appelée, 

31
00:01:44,180 --> 00:01:47,518
Python commence par évaluer les arguments,
puis appelle la fonction.

32
00:01:47,518 --> 00:01:52,750
En plus d'appeler max avec
deux arguements,

33
00:01:52,750 --> 00:01:55,010
on a la possibilité de l'appeler avec
plus d'arguments,

34
00:01:55,010 --> 00:01:58,630
donc ici on va l'appeler avec quatre
arguments.

35
00:02:01,150 --> 00:02:04,840
On peut aussi l'appeler pas seulement
avec des float mais aussi des int,

36
00:02:04,840 --> 00:02:08,420
donc cette fois je vais passer trois
arguments int à la fonction.

37
00:02:08,420 --> 00:02:13,700
Et pour finir il est possible de
passer des arguments de différents types :

38
00:02:13,700 --> 00:02:19,279
on va passer un argument float avec
un argument int cette fois.

39
00:02:22,280 --> 00:02:24,830
Comment pouvais-je savoir que la
fonction "max" existait ?

40
00:02:24,830 --> 00:02:26,680
Et comment ai-je su quels arguments

41
00:02:26,680 --> 00:02:28,720
lui passer, et quelle valeur elle me rendrait ?

42
00:02:29,810 --> 00:02:31,820
On peut trouver quelles fonctions sont

43
00:02:31,820 --> 00:02:35,060
disponibles en utilisant une autre
fonction de base appelée "dir"

44
00:02:35,060 --> 00:02:36,451
Je vais l'appeler maintenant,

45
00:02:36,451 --> 00:02:43,469
et je lui demande une liste des
fonctions de base.

46
00:02:43,469 --> 00:02:47,310
Quand je tape entrée, voilà.
On obtiens une

47
00:02:47,310 --> 00:02:51,110
liste énorme.
Un peu intimidante, en fait.

48
00:02:51,110 --> 00:02:55,475
Le truc c'est que pour le moment, on va
complètement ignorer tout ça,

49
00:02:55,475 --> 00:03:01,122
et on va uniquement se concentrer sur
ces noms qui sont

50
00:03:01,122 --> 00:03:02,046
entièrement en minuscules.

51
00:03:03,120 --> 00:03:05,610
C'est ce qui nous intéresse pour l'instant.

52
00:03:05,610 --> 00:03:10,995
On peut voir que "max" apparaît dans la liste

53
00:03:10,995 --> 00:03:11,020
et…

54
00:03:11,020 --> 00:03:14,200
pour le moment on va explorer une autre
fonction appelée "abs".

55
00:03:14,200 --> 00:03:19,210
La fonction de base "help" peut être
utilisée pour trouver des infos sur "abs".

56
00:03:19,210 --> 00:03:23,750
On va appeler "help", en passant "abs"
comme argument de la fonction.

57
00:03:23,750 --> 00:03:29,780
Et on reçoit une description de "abs".
De cette description, on peut voir que

58
00:03:29,780 --> 00:03:35,440
"abs" prends un argument : un nombre et que

59
00:03:35,440 --> 00:03:40,620
d'après ce symbole qui veut dire
"retourné", renvoie aussi un nombre.

60
00:03:40,620 --> 00:03:44,310
Donc ça va renvoyer la valeur absolue
de l'argument.

61
00:03:46,650 --> 00:03:47,620
Essayons un peu.

62
00:03:47,620 --> 00:03:51,660
Quand on appelle "abs", on doit lui
passer un argumet numérique.

63
00:03:51,660 --> 00:03:55,780
Donc je vais passer un float.

64
00:03:55,780 --> 00:03:58,470
Et pareillement, je pourras passer
un int. Vous pouvez voir

65
00:04:01,580 --> 00:04:04,660
que quand on passe un argument float,
on obtient un résultat à virgule flottante,

66
00:04:04,660 --> 00:04:07,590
et quand on passe un int,
on obtient un résultat entier.

67
00:04:10,450 --> 00:04:16,400
On va maintenant utiliser "help" pour en
apprendre plus sur l'autre fonction de base "pow".

68
00:04:16,400 --> 00:04:17,750
On passe "pow" comme argument

69
00:04:17,750 --> 00:04:18,050
qu'après une stimulation mécanique 

70
00:04:18,050 --> 00:04:20,340
et on obtient la description.

71
00:04:20,340 --> 00:04:25,059
On peut voir par cette description que
"pow" a deux arguments.

72
00:04:26,180 --> 00:04:29,990
Le troisième argument est dans des
crochets,

73
00:04:29,990 --> 00:04:32,460
indiquant qu'il est optionnel.

74
00:04:32,460 --> 00:04:34,610
Donc z est optionnel.

75
00:04:34,610 --> 00:04:36,600
Ça veut dire que quand on appelle pow,
on dois

76
00:04:36,600 --> 00:04:41,590
l'appeler avec au moins deux, et
possiblement trois argiments.

77
00:04:41,590 --> 00:04:43,530
"pow" nous renverra alors

78
00:04:43,530 --> 00:04:45,211
un nombre.

79
00:04:46,300 --> 00:04:49,838
Appelons "pow" avec deux arguments :
deux et cinq.

80
00:04:49,838 --> 00:04:54,890
Ça donne 32 et c'est en fait
équivalent avec le résultat

81
00:04:54,890 --> 00:04:58,675
de l'opérateur d'exponentiation pour
calculer deux à la puissance 5.