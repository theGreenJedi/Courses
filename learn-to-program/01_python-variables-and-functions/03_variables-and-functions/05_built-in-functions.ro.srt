1
00:00:03,130 --> 00:00:04,760
Am văzut că Python are mai mulți

2
00:00:04,760 --> 00:00:08,550
operatori matematici, ca înmulțirea si scăderea

3
00:00:08,550 --> 00:00:10,800
și știm că operația matematică

4
00:00:10,800 --> 00:00:13,940
înmulțire este asociată cu
 un simbol asterisc.

5
00:00:13,940 --> 00:00:16,190
Mai sunt o mulțime de alte operații
 pe care am dori sa le executăm,

6
00:00:16,190 --> 00:00:21,170
cu sau fără matematică, și nu există suficiente
 simboluri semnificative, pentru aceasta.

7
00:00:21,170 --> 00:00:24,330
Deci, de exemplu, poate vrem să vedem
 care dintre mai multe

8
00:00:24,330 --> 00:00:28,980
numere este cel mai mare, și nu există
 niciun simbol asociat cu această operație.

9
00:00:28,980 --> 00:00:31,030
În schimb, Python are un set de funcții 
integrate

10
00:00:31,030 --> 00:00:34,530
care permite, ne permite să efectuăm
 aceste operațiuni.

11
00:00:34,530 --> 00:00:35,960
Deci, sa ne uităm la acestea acum.

12
00:00:35,960 --> 00:00:40,220
Să începem cu exemplul pe care 
l–am menționat,

13
00:00:40,220 --> 00:00:43,570
sa aflăm care dintre mai multe numere
 este cel mai mare.

14
00:00:43,570 --> 00:00:47,760
Funcția Python integrată pe care o vom
 utiliza este funcția max.

15
00:00:47,760 --> 00:00:52,285
Deci, numele funcției este max.
 Eu folosesc o paranteză deschisă.

16
00:00:52,285 --> 00:00:54,720
Și observați caseta pop-up galbenă.
Aceasta

17
00:00:54,720 --> 00:00:54,990
[INAUDIBIL]

18
00:00:54,990 --> 00:00:56,610
este funcția help a lui IDLE care are
 scopul de a reaminti

19
00:00:56,610 --> 00:00:59,175
programatorilor Python profesioniști ce
rol are funcția.

20
00:00:59,175 --> 00:01:01,200
Și, probabil că, încă nu veți înțelege.

21
00:01:01,200 --> 00:01:02,494
Și este de așteptat.

22
00:01:02,494 --> 00:01:04,072
Și apoi voi furniza argumentele 
funcției, astfel,

23
00:01:04,072 --> 00:01:07,262
in acest caz, voi furniza 2 argumente.

24
00:01:07,262 --> 00:01:10,070
Transmitem 2 argumente funcției

25
00:01:10,070 --> 00:01:19,755
Valorile argumentelor sunt 36.7 și 23.4,
 iar aceasta este apelarea funcției,

26
00:01:19,755 --> 00:01:26,310
cu argumentele 36.7 și 23.4. Când apăs
 Enter, Python va evalua

27
00:01:26,310 --> 00:01:31,250
apelarea funcției și îmi va spune dacă 36.7
 este cel mai mare dintre cele 2 numere.

28
00:01:32,250 --> 00:01:35,989
Forma apelării funcției este următoarea: 
numele funcției,

29
00:01:35,989 --> 00:01:41,150
paranteză deschisă, o listă a expresiilor
 numite argumente, separate prin virgulă,

30
00:01:41,150 --> 00:01:44,180
și paranteză închisă. Atunci când
 o funcție este apelată,

31
00:01:44,180 --> 00:01:47,518
Python evaluează mai întâi argumentele,
 apoi apelează funcția.

32
00:01:47,518 --> 00:01:52,750
Pe lângă apelarea funcției max
 cu două argumente,

33
00:01:52,750 --> 00:01:55,010
avem și opțiunea apelării acesteia
 cu mai multe argumente.

34
00:01:55,010 --> 00:01:58,630
Deci, în acest caz, o vom apela
 cu patru argumente.

35
00:02:01,150 --> 00:02:04,840
De asemenea, o putem apela nu doar
 cu floats ci și cu ints, deci,

36
00:02:04,840 --> 00:02:08,420
de această dată, voi transmite
 trei argumente funcției.

37
00:02:08,420 --> 00:02:13,700
Și, în sfârșit, este posibil să transmitem
 argumente de 2 tipuri diferite, astfel,

38
00:02:13,700 --> 00:02:19,279
acum vom transmite un argument de tip
 float, împreună cu un argument de tip int.

39
00:02:22,280 --> 00:02:24,830
Cum de am știut că funcția max există?

40
00:02:24,830 --> 00:02:26,680
Și de unde am știut ce argumente să

41
00:02:26,680 --> 00:02:28,720
furnizez și ce valori va returna funcția?

42
00:02:29,810 --> 00:02:31,820
Putem afla ce funcții integrate sunt

43
00:02:31,820 --> 00:02:35,060
disponibile, utilizând o altă funcție
 integrată, numită "dir".

44
00:02:35,060 --> 00:02:36,451
Deci, acum voi apela dir.

45
00:02:36,451 --> 00:02:43,469
Și voi cere o listare a funcțiilor integrate.

46
00:02:43,469 --> 00:02:47,310
Când apăs Enter, iată. Avem o listă

47
00:02:47,310 --> 00:02:51,110
lungă, uriașă.

48
00:02:51,110 --> 00:02:55,475
Chestia e că, pentru moment, este că am
 de gând să ignor complet toate

49
00:02:55,475 --> 00:03:01,122
acestea și ne vom concentra doar pe
 acele nume care au litere mici.

50
00:03:01,122 --> 00:03:02,046
În totalitate litere mici.

51
00:03:03,120 --> 00:03:05,610
Deci, doar de acestea ne pasă
 în acest moment.

52
00:03:05,610 --> 00:03:10,995
Vedem că max apare în listă și

53
00:03:10,995 --> 00:03:11,020
[INAUDIBIL]

54
00:03:11,020 --> 00:03:14,200
pentru moment să ne uităm la altă funcție,
 numită abs.

55
00:03:14,200 --> 00:03:19,210
Funcția integrată help poate fi utilizată
 pentru a afla mai multe despre abs.

56
00:03:19,210 --> 00:03:23,750
Vom apela help, furnizând abs ca argument
 al funcției.

57
00:03:23,750 --> 00:03:29,780
Și vom primi o descriere a lui abs.
 Din această descriere, putem vedea că

58
00:03:29,780 --> 00:03:35,440
abs acceptă un argument, un număr și ,

59
00:03:35,440 --> 00:03:40,620
conform acestui simbol, care înseamnă
 return, va returna tot un număr.

60
00:03:40,620 --> 00:03:44,310
Deci va returna valoarea absolută
 a argumentului.

61
00:03:46,650 --> 00:03:47,620
Haideți să încercăm.

62
00:03:47,620 --> 00:03:51,660
Când apelăm abs, trebuie să transmitem
 un argument numeric.

63
00:03:51,660 --> 00:03:55,780
Deci voi transmite un număr real (float).

64
00:03:55,780 --> 00:03:58,470
Și, în mod similar, aș putea transmite
 un număr întreg (int). Puteți vedea

65
00:04:01,580 --> 00:04:04,660
că, atunci când transmitem un argument
de tip float, vom obține un rezultat

66
00:04:04,660 --> 00:04:07,590
cu virgulă mobilă, iar atunci când furnizăm
 un int, obținem un rezultat int.

67
00:04:10,450 --> 00:04:16,400
Acum vom utiliza help pentru a afla mai multe
 despre altă funcție integrată, numită pow.

68
00:04:16,400 --> 00:04:17,750
Vom transmite pow ca argument

69
00:04:17,750 --> 00:04:18,050
unghiular

70
00:04:18,050 --> 00:04:20,340
și vom obține descrierea.

71
00:04:20,340 --> 00:04:25,059
Și, putem vedea din această descriere,
 că pow are două argumente.

72
00:04:26,180 --> 00:04:29,990
Cel de-al treilea argument este trecut
 între paranteze pătrate,

73
00:04:29,990 --> 00:04:32,460
care indică faptul că este un argument
 opțional.

74
00:04:32,460 --> 00:04:34,610
Deci, z este opțional.

75
00:04:34,610 --> 00:04:36,600
Aceasta înseamnă că, atunci când
 apelăm funcția pow, este nevoie să

76
00:04:36,600 --> 00:04:41,590
o apelăm cu cel puțin două,
 posibil trei argumente.

77
00:04:41,590 --> 00:04:43,530
Pow va returna atunci

78
00:04:43,530 --> 00:04:45,211
un număr.

79
00:04:46,300 --> 00:04:49,838
Haideți să apelăm pow cu două
 argumente, 2 și 5.

80
00:04:49,838 --> 00:04:54,890
Rezultă 32 și, de fapt, acesta este
 echivalentul

81
00:04:54,890 --> 00:04:58,675
folosirii operatorului exponențial pentru
 a calcula 2 la puterea a 5-a.