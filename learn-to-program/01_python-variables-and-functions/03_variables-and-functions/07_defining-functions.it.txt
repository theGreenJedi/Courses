Ciao! Oltre ad usare le funzioni integrate in
Python, possiamo anche definire le nostre. E questo è ciò che tratta questa lezione. Iniziamo con un esempio matematico.
La funzione f di x, prende x e lo eleva al quadrato.
Ecco come appare la funzione in Python. [SUONO] Def indica a Python che stiamo definendo una funzione.
F è il nome della funzione.
X è il parametro di chiamata della funzione. E' una variabile il cui valore verrà
fornito quando la funzione viene chiamata. Questi due punti indicano a Python che
stiamo per digitare cosa accadrà quando la funzione
viene chiamata. E la parola return indica che stiamo 
ritornando un valore. La forma generica per un'istruzione di return è la parola return, seguita da
un'espressione. E le regole per eseguire un'istruzione di
return sono, primo, valutare l'espressione,
producendo un indirizzo di memoria. E secondo, ritornare quell'indirizzo di memoria
alla chiamata. La forma generale per la definizione di una funzione
è la parola def, seguita dal nome della funzione e poi zero o più
parametri separati da virgole. Poi viene il corpo della funzione, che
è formato da una o più istruzioni che terminano spesso
con un'istruzione di return. Notate che il corpo è indentato. Chiamiamo la funzione f.
Quindi passiamole un argomento 3. Quando la funzione viene chiamata, il
parametro agisce come un link, vedrete un indirizzo di memoria del valore 3. Possiamo pensare a questo, effettivamente,  come
un'istruzione di assegnazione, dove x riceve 3. Premerò Invio, quindi verrà eseguita
la chiamata alla funzione. E il risultato della chiamata alla funzione
è che viene ritornato il valore 9. Le chiamate alle funzioni sono espressioni,
quindi noi possiamo usare una variabile per memorizzare 
il risultato. Creiamo una variabile result che riceve il risultato della chiamata di f di 3. Ricordiamo le regole per eseguire
un'istruzione di assegnazione, che sono per prima cosa che l'espressione
sul lato destro viene valutata, producendo un+indirizzo di memoria. E secondo, che l'indirizzo di memoria viene
memorizzato nella variabile. Il risultato riceve l'indirizzo di memoria della
chiamata di f di 3. Quindi in altre parole, il risultato riceve 9. Definiamo un'altra funzione.
Ricordiamo dalla lezione sulle variabili come calcolare l'area di un triangolo.
Prendiamo la base, la moltiplichiamo per l'altezza, e poi
dividiamo per 2. Ora scriveremo una funzione per calcolare
l'area di un triangolo. Iniziamo con la parola def, e poi viene
il nome della funzione, usiamo il nome area. Dopo il nome della funzione e i parametri
alla funzione, in questo caso avremo due
parametri. la base e l'altezza. Terminiamo questa riga con un due punti, e poi
scriviamo il corpo della funzione. Andremo a ritornare la base moltiplicata
per l'altezza divisa per 2. Chiamiamo la funzione, eseguiremo
area passandole due argomenti. 3 e 4. E base, quel parametro riceve 3, il
parametro height riceve 4. E poi quella espressione viene valutata base
moltiplicata per altezza, diviso per 2 e return.
Quindi viene ritornato 6.0 dalla funzione. Chiamiamola ancora una volta, passandole
un int e un float questa volta.
Le regole estese per eseguire una chiamata ad una funzione sono di valutare prima
gli argomento per produrre indirizzi di memoria, poi, salvare questi indirizzi di memoria nei
parametri corrispondenti. E poi eseguire il corpo della funzione.
Ora, facciamo ripartire la shell di Python. Andiamo nel menu della shell, e clicchiamo
Restart. E abbiamo appena perso tutto il lavoro che abbiamo fatto nella shell, inclusa la
definizione della funzione area. Se cerchiamo di richiamare area, otteniamo un 
name error, dato che area non è definita. La maggior parte dei programmi di Python sono
salvati in files. Creiamo un nuovo file, e salviamo la definizione 
della nostra funzione, area, al suo interno. Andiamo in File > New Window.
Posizioniamo la definizione della nostra funzione lì. E salveremo il file come triangle.py.
Tutti i nostri programmi di Python saranno salvati in file .py.
Ridimensioniamo le finestre, in modo da vedere la shell sul lato sinistro e la nostra triangle.py sul
lato destro. Ora che abbiamo la nostra funzione area definita in Triangle.py, possiamo far girare
questo file. Quindi premiamo Run, e Run Module. Questo rende la definizione della funzione
area disponibile nella shell. Quindi ora possiamo chiamare area dalla shell,
lei sa cos'è area, ed è in grado di eseguire
quella funzione. [MUSICA] Possiamo definire più di una funzione all'interno
del file Triangle.py. Aggiungiamo la definizione di un'altra funzione. Definiremo una funzione che calcola il
perimetro di un triangolo. Passeremo in ingresso i lati 1, 2 e 3. E la funzione ritornerà la somma di
quei lati. [MUSICA] A questo punto ho salvato triangle.py e
se torno nella shell e eseguo la funzione, quello
che vedo è un errore. Questo accade perché, a questo punto, anche se
la funzione è salvata in triangle.py, non abbiamo fatto girare Triangle.py,, e quindi
la shell non sa cosa sia perimeter. Prima di eseguire una funzione nella shell,
dobbiamo far girare quel modulo, quindi ho premuto cmd per far girare il modulo, e
ora posso chiamare perimeter, e viene eseguita.