¡ Hola ! Adicionalmente a usar las funciones de Python,
nosotros podemos definir nuestras propias funciones Y eso es lo que esta clase será Empecemos con un ejemplo de matemáticas
Función f de x, toma x y la eleva al quadrado.
Aquí es como la función se ve en Python [SONIDO]. Def indica a Python que estamos definiendo un función
F es el nombre de la función
X es una parámetro de llamada si la función Es una variable cuyos valores van a ser
suministrados cuando la función es llamada Estos dos puntos indica a Python que estamos
a punto de tipear que es lo que va a pasar cuando la función
es llamada Y la palabra Return indica que estamos
retornando un valor de regreso La forma general de una sentencia return es la palabra return, seguida de la
expresión Y las reglas para ejecutar una
sentencia return son, primero evaluar la expresión
produciendo una dirección de memoria Y segundo pasar la dirección de memoria de regreso
a quién llama La forma general de una definición de función
es la palabra def, seguida por el nombre de la función y de cero o más
parámetros separados por comas A continuaciñon viene el cuerpo de la función que
es una o mas sentencias generalmente terminando con una
sentencia return Tomen nota que el cuerpo tiene identación. Llamemos la función f
Así le pasaremos un argumento 3. Cuando la fucnión es llamada, el perímetro actúa como una [INAUDIBLE] dirección de memoria del valor 3 Podemos pensar de esto, actualmente como una
sentencia de asignación, donde x recibe 3. Voy a presionar la tecla Enter, para que la llamada de la función sea
ejecutada Y el resultado de la llamada de la función es
que el valor 9 es retornado Llamado de funciones actualmente son expresiones
así que podemos usar una variable para almacenar el resultado Vamos a crear una variable de resultado que recibe el resultado de la llamada de f con 3 Recuerda las reglas de ejecución de una
sentencia de asignación Cuales son las primeras, la expresión en
el lado derecho es evaluado, produciendo una
dirección de memoria Y segundo, la dirección de memoria es almacenada
en la variable El resultado tendrá la dirección de memoria de la
llamada de f de 3 Así en otras palabras, el resultado tiene 9. Definamos otra función
Recuerda de la clase de variables cómo calcular el área de un triángulo
Toma la ase multiplicada por la altura
dividido para 2 Escribiremos ahora una función para calcular
el área de un triángulo Empezamos con la palabra def seguida del nombre de la función usemos el nombre area Después del nombre de la función y de los parámetros de la función, en este caso tendremos dos
parámetros La base y la altura. Terminamos esta línea con dos puntos, y luego
escribimos el cuerpo de la función Vamos a retornar la base multiplicada
por la altura dividido para 2 Llamemos la función, ejecutaremos area pasando dos argumentos 3 y 4 Y base, el parámetro recibe 3, el parámetro height recibe 4 Y luego la expresión es evaluada base
por height dividido para 2 y retorna.
Así 6.0 es retornado por la función Lamemosla una vez mas, pasando un
int y un float esta vez
Las reglas extendidas para ejecutar un llamado de función son primero eveluar
los argumentos para producir la dirección de memoria. A continuación, almacenar esas direcciones de memoria en los
correspondientes parámetros Y luego ejecutar el cuepro de la función
Ahora iniciemos el interprete de Python Vamos a menú del shell y clic
Reiniciar. Y nosotros acabamos de perder todo el trabajo que hicimos en la shell, incluyendo la
definición de la función area Si tratamos de llamar area, obtendremos un error de nombre
porque area no esta definida La mayoría de programas de Python son archivos guardados. Vamos a crear un nuevo archivo y guardamos nuestra
definición de función area en el. Anda a File > New Window
Ubica nuestra definición de función allí Y guardaremos este archivo como traingle,py
Todos nuestros programas de Python van a ser guardados en archivos .py
Solo redimensiona la ventana para pode ver la shell en el lado izquierdo y nuestro archivo triangle,py en el
lado derecho Ahora que tenemos nuestra definición de función de area en triángulo.py, podemos correr este
archivo sí que vamos a hacer clic en Run y Run Module. Eso hace la definición de la función area
disponible en la shell. Así ahora, cuando llamemos area desde la shell
ella sabe que es area, y es capaz de ejecutar
esa función para ir a la guerra. Podemos definir mas de una función en
el archivo triangle.py Añadamos otra defiinción de funcíon Definamos una función para calcular el
perímetro de un triángulo Pasaremos sides 1, 2, y 3 Y la funciñon retornará la suma de
esos lados para ir a la guerra. . En este momento, he guardado triange.py y
si regreso a la shell y ejecutamos la función,
lo que veremos será un error Eso es porque a este punto, a pesar que la
función esta guardada en triangle.py no hemos corrido triangle.py y así la shell no sabe que es perímetro Antes de ejecutar la función en la shell,
debemos correr ese módulo así que presioné el cmd para correr el módulo y
ahora puedo llamar perimeter y ejecuta