Ciao a tutti.
Avete visto come valutare le espressioni in Python.
In qeusta lezione, andremo a mostrarvi come ricordare il risultato di quelle
espressioni in modo che possiate usare quei valori più tardi.
Esploreremo questa idea calcolando l'area di alcuni triangoli.
Come promemoria, se conosco l'altezza di un triangolo,
potrei conoscere la lunghezza della base, allora l'area del triangolo
è la lunghezza della base per l'altezza divisa per due. Quindi, per esempio,
se l'altezza è dodici e la lunghezza della base è venti, allora l'area è venti
per dodici su due. Andiamo ad vederlo in Python.
Sai già come inserire quella espressione e farla calcolare in Python.
Ma dal momento che abbiamo deciso di calcolare il valore di una coppia di triangoli,
andremo a mostrarvi come introdurre le parole base e altezza per 
rappresentare dei valori. Questo viene fatto mediante un'istruzione di
assegnazione. Ecco un esempio. Quello che fa questo è valutare il venti e
associare quel valore con una variabile base.
Base viene detta variabile poiché è un valore, può variare, come vedremo.
Faremo qualcosa di simile per una variabile chiamata height, e poi, questi
due nomi potranno essere usati come se i loro valori fossero lì nel controllo di Python.
Quindi, il valore di base è venti, height è associata con il valore dodici.
Nota che il simbolo di uguale ha un significato molto diverso in Python rispetto che in
MAtematica dato che il programma per computer diventa leggermente complicato. Andremo ad
introdurre una notazione per descrivere le variabili e il loro valori.
Quello che andremo a fare è dodici variabile base con una scatola vicina
ad essa. E cosa succede in Python è che venti
non va in quella scatola. Invece, venti, come ogni altro valore,
valore in Python, sta ad un particolare indirizzo di memoria.
Quindi, andrò a prendere un indirizzo di memoria arbitrario che andrò ad indicare con una x
solo per renderlo differente dagli altri unmeri.
E diciamo che all'indirizzo di memoria x3, appare il valore venti.
L'istruzione di assegnazione prende quel x3 e lo posiziona nella scatola associata con base.
Quindi, base in realtà, il valore di base è x3. E in un certo senso, questo significa che
punta all'indirizzo di memoria x3 dove sta il valore venti.
Similmente, c'è una variabile height e Python tiene
traccia del suo valore in quella piccola scatola, E il suo valore è un indirizzo di memoria.
Andrò a prendere x7, questo è arbitrario. E' Python che effettua tale scelta e quindi,
non ho bisogno di preoccuparmi di dove sia esattamente l'indirizzo di memoria, dato che so
che esiste questa relazione fra le variabili e il loro valore.
Tornando al nostro problema di programmazione possiamo usare base e haight in una
espressione. Quindi, se faccio base per height / per due,
ottengo lo stesso risultato che otterrei se avessi scritto venti per dodici / per due.
Possiamo anche assegnare il risultato di questa ultima espressione ad una variabile.
La chiamerò area. Poi, controlliamo il suo valore.
Quello che andremo a fare ora è che andremo ad assegnare a base e height nuovi valori usando
di nuovo l'istruzione di assegnazione. Quindi, assegnamo il valore 2.5 alla variabile
base. Quello che fa nella mia figura è che mi fornisce 
un nuovo valore 2.5, ad un particolare indirizzo di memoria, magari x4.
E rimpiazza, l'istruzione di assegnazione rimpiazza questo x3 con il valore x4, quindi la
base non punta più a venti. Invece, base è associata con 2.5.
Similmente, posso assegnare l'altezza. Quello che andrà a fare, ovviamente, è
mettere sette in un particolare indirizzo di memoria, magari x1, e l'istruzione di assegnazione
andrà a prendere quell'x1 e andrà ad inserirlo in una variabile height,
rompendo questa connessione in modo che height faccia riferimento a sette.
Usando Control+P, tornerò indietro al mio vecchio calcolo dell'area e come
stiamo per vedere, questa nuova area è 8.75,
che è proprio quello che ottieni se prendi 2.5, moltiplichi per sette, e dividi per
due. Ogni istruzione di assegnazione ha la forma
di una variabile è un'espressione con segno. Queste sono le regole per eseguire 
un'istruzione di assegnazione e devi fare del tuo meglio per memorizzarlo dato che
servirà ancora e ancora durante il corso.
Passo uno, valuta l'espressione sul lato destro. Il valore della sua espressione ha un indirizzo
di memoria. Salva quell'indirizzo di memoria nella variabile
sul lato sinistro. Ogni linguaggio di programmazione ha un insieme
di regole per definire quali siano i nomi ammessi. In Python, il nome di una variabile deve iniziare
con una lettera o il carattere underscore e può contenere delle lettere, numeri e
underscores. Sono ammesse sia le lettere maiuscole che
minuscole. I nomi di variabili non amessi causano degli
errori di sintassi. Quindi, per esempio, se proviamo ad far iniziare
il nome di una variabile con un numero, ci dice che non possiamo. Allo stesso modo, 
se includiamo un carattere non alfabetico, non-underscore, non numerico in un 
nome di una variabile, il sistema si lamenterà. Python è anche case sensitive.
Quindi, seconds_in_minute è un nome perfettamente valido.
Ma è diverso da qualsiasi altra combinazione di caratteri maiuscoli e minuscoli
come quello. Il primo, seconds_and_minutes è, ovviamente
più leggibile che il secondo con quelle lettere capitali e scegliere dei
bei nomi è importante perché i programmi possono essere facilmente usati, letti e
migliorati per anni. Ogni linguaggio di programmazione ha un insieme
di convenzioni per scegliere un nome, come i siti web hanno uno stile ed un layout particolare. In Python, la maggior parte dei nomi di varibili
usano solo lettere minuscole con underscore per separare le parole, lo chiamiano UNKNOWN case.