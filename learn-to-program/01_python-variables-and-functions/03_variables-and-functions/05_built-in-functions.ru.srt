1
00:00:03,130 --> 00:00:04,760
Как мы уже узнали, в Python есть несколько

2
00:00:04,760 --> 00:00:08,550
математических операторов, таких как умножение и вычитание, и

3
00:00:08,550 --> 00:00:10,800
нам известно что математический оператор

4
00:00:10,800 --> 00:00:13,940
умножения ассоциирован с символом "звёздочка".

5
00:00:13,940 --> 00:00:16,190
Существует множество других операций которые мы можем захотеть осуществить,

6
00:00:16,190 --> 00:00:21,170
с помощью математики или без, и с минимумом не несущих смысловой нагрузки символов.

7
00:00:21,170 --> 00:00:24,330
Для примера представим ситуацию, в ходе которой мы хотим выяснить, какое из

8
00:00:24,330 --> 00:00:28,980
представленных чисел - наибольшее, и при этом у нас нет символа предназначенного для этой операции.

9
00:00:28,980 --> 00:00:31,030
Вместо этого, в Python есть набор готовых

10
00:00:31,030 --> 00:00:34,530
функций, которые позволяют выполнять подобные операции.

11
00:00:34,530 --> 00:00:35,960
Давайте взглянем на некоторые из них.

12
00:00:35,960 --> 00:00:40,220
Начнём с упомянутого мною ранее примера, в котором

13
00:00:40,220 --> 00:00:43,570
нужно было определить наибольшее из нескольких чисел.

14
00:00:43,570 --> 00:00:47,760
Функция Python которую мы для этого используем - это функция max.

15
00:00:47,760 --> 00:00:52,285
Итак, нашу функцию зовут max. Я ввожу открывающую скобку

16
00:00:52,285 --> 00:00:54,720
и замечаю жёлтое всплывающее окошко. Это

17
00:00:54,720 --> 00:00:54,990
Давайте ненадолго прервемся

18
00:00:54,990 --> 00:00:56,610
подсказка, которая призвана напоминать

19
00:00:56,610 --> 00:00:59,175
программистам Python что эта функция делает.

20
00:00:59,175 --> 00:01:01,200
Скорее-всего, сейчас эта подсказка будет вам непонятна.

21
00:01:01,200 --> 00:01:02,494
И это ожидаемо.

22
00:01:02,494 --> 00:01:04,072
Итак, я указываю аргументы для этой функции, и

23
00:01:04,072 --> 00:01:07,262
в нашем случае мне нужно указать два аргумента.

24
00:01:07,262 --> 00:01:10,070
Передаём функции оба аргумента.

25
00:01:10,070 --> 00:01:19,755
Значения аргументов - 36.7 и 23.4, и это вызов функции

26
00:01:19,755 --> 00:01:26,310
с аргументами 36.7 и 23.4. Когда я нажму Enter, Python начнёт выполнять

27
00:01:26,310 --> 00:01:31,250
этот вызов функции, и скажет мне что 36.7 - большее из двух указанных чисел.

28
00:01:32,250 --> 00:01:35,989
Чтобы вызвать функцию, нужно указать её имя,

29
00:01:35,989 --> 00:01:41,150
открыть скобки, перечислить аргументы через запятую

30
00:01:41,150 --> 00:01:44,180
и закрыть скобки. Когда функция вызывается,

31
00:01:44,180 --> 00:01:47,518
Python сперва проверяет её аргументы и уже потом вызывает функцию.

32
00:01:47,518 --> 00:01:52,750
Функцию max можно вызывать не только с двумя аргументами,

33
00:01:52,750 --> 00:01:55,010
но и с большим их числом.

34
00:01:55,010 --> 00:01:58,630
Сейчас мы вызовем её с четырьмя аргументами. 

35
00:02:01,150 --> 00:02:04,840
Мы можем делать вызов не только с числами с плавающей точкой, но и с целыми, и

36
00:02:04,840 --> 00:02:08,420
в этот раз я передам функции три целых аргумента.

37
00:02:08,420 --> 00:02:13,700
Кроме того, можно передавать аргументы разных типов, поэтому

38
00:02:13,700 --> 00:02:19,279
мы передадим число с плавающей точкой в качестве четвёртого аргумента.

39
00:02:22,280 --> 00:02:24,830
Откуда мне знать, что функция max действительно существует?

40
00:02:24,830 --> 00:02:26,680
И, более того, какие именно аргументы мне ей

41
00:02:26,680 --> 00:02:28,720
передать, и какие значения она мне вернёт?

42
00:02:29,810 --> 00:02:31,820
Мы можем узнать, какие именно встроенные функции

43
00:02:31,820 --> 00:02:35,060
нам доступны, с помощью другой встроенной функции dir.

44
00:02:35,060 --> 00:02:36,451
Сейчас я собираюсь вызвать эту функцию.

45
00:02:36,451 --> 00:02:43,469
И я запрашиваю список встроенных функций.

46
00:02:43,469 --> 00:02:47,310
Как обычно, чтобы что-то выполнить нам нужно нажать Enter. Теперь у нас есть

47
00:02:47,310 --> 00:02:51,110
большой, длинный список. Выглядит довольно-таки внушительно.

48
00:02:51,110 --> 00:02:55,475
В этот раз мы не будем отвлекаться на все эти функции,

49
00:02:55,475 --> 00:03:01,122
и рассмотрим только те, чьи имена написаны в нижнем регистре.

50
00:03:01,122 --> 00:03:02,046
Целиком в нижнем регистре.

51
00:03:03,120 --> 00:03:05,610
Вот и то, что мы искали.

52
00:03:05,610 --> 00:03:10,995
Мы видим в этом списке функцию max, и,

53
00:03:10,995 --> 00:03:11,020
Давайте ненадолго прервемся

54
00:03:11,020 --> 00:03:14,200
спустя секунду исследования, другую функцию с именем abs.

55
00:03:14,200 --> 00:03:19,210
Встроенная функция help поможет узнать больше о функции abs.

56
00:03:19,210 --> 00:03:23,750
Мы вызовем функцию help, передав ей abs в качестве аргументы.

57
00:03:23,750 --> 00:03:29,780
В ответ мы получим описание функции abs. В этом описании сказано, что

58
00:03:29,780 --> 00:03:35,440
функция abs принимает единственный аргумент - число, и она вернёт, 

59
00:03:35,440 --> 00:03:40,620
согласно этому символу, обозначающему return, другое число.

60
00:03:40,620 --> 00:03:44,310
Таким образом, она возвращает абсолютное значение аргумента.

61
00:03:46,650 --> 00:03:47,620
Позвольте привести пример.

62
00:03:47,620 --> 00:03:51,660
Когда мы вызываем abs, мы должны передать числовой аргумент.

63
00:03:51,660 --> 00:03:55,780
Сейчас я передам число с плавающей точкой.

64
00:03:55,780 --> 00:03:58,470
Таким же образом я могла передать целое число. Вы можете видеть,

65
00:04:01,580 --> 00:04:04,660
что передавая аргумент с плавающей точкой, мы получаем результат с плавающей точкой,

66
00:04:04,660 --> 00:04:07,590
а передавая целый аргумент - получаем целый результат.

67
00:04:10,450 --> 00:04:16,400
Давайте используем help чтобы больше узнать о другой встроенной функции - pow.

68
00:04:16,400 --> 00:04:17,750
Мы передаём pow как аргумент

69
00:04:17,750 --> 00:04:18,050
Раджа Сисодиа

70
00:04:18,050 --> 00:04:20,340
И получаем описание.

71
00:04:20,340 --> 00:04:25,059
И мы видим в описании, что pow принимает два аргумента.

72
00:04:26,180 --> 00:04:29,990
Третий аргумент находится в квадратных скобках.

73
00:04:29,990 --> 00:04:32,460
Это указывает на то что этот аргумент - необязательный.

74
00:04:32,460 --> 00:04:34,610
Другими словами, аргумент z - опциональный.

75
00:04:34,610 --> 00:04:36,600
Это значит что когда мы вызываем pow, нам нужно

76
00:04:36,600 --> 00:04:41,590
вызвать его либо с двумя, либо с тремя аргументами.

77
00:04:41,590 --> 00:04:43,530
После чего pow вернёт нам

78
00:04:43,530 --> 00:04:45,211
число.

79
00:04:46,300 --> 00:04:49,838
Давайте вызовем pow с двумя аргументами, 2 и 5.

80
00:04:49,838 --> 00:04:54,890
Функция вернёт 32, что является эквивалентом возведения в степень,

81
00:04:54,890 --> 00:04:58,675
используя соответствующий оператор для вычисления степени равной 5.