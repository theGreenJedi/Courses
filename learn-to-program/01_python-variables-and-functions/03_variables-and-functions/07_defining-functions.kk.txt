Сәлем! Питонда бар программаларды қолданумен қатар, өздігімізден де құрастыра аламыз. Бүгінгі дәрісіміз осы жайында болмақ Математикада қолданылатын мысалдан бастайық. X-тен  F функциясы Х-ті алып, оны квадраттайды. 
Питонда бұл келесідегідей болды. [Дыбыс]. Def Питонға біз функцияны зерттеп жатқандығымызда жеткізеді. F фукцияның атауы. X функцияның параметрі. Бұл айнымалы, оның мәнде қажет болғанда функцияға беріледі. Бұл жолақ Питонға функция шақырылғандығын жеткізіп отырады. Ал Return сөзі біз мәнді қайта орнына жібергенімізді білдіреді. Қайта шақырту тұжырымдамасының жалпы формасы сөзді қайтару, есептен соң жүреді. Қайта шақырту тұжырымдамасын жүзеге асыру  ережелері, біріншіден, арнайы жадыны шығаратын есепті шығару. Екіншіден, сол арнайы жадыны шақырушыға қайтару. Функция сипаттамасының жалпы формасы def сөзі, функция атауы соңынан жүреді, содан кейін нөл немесе үтірмен ажыратылған өзге параметрлер. Содан кейін функцияның негізгі бөлігі келеді, онда әдетте қайта шақырту болатын бір немесе одан да көп тұжырымдамалар бар. Негізгі бөлік тұрақталған екенін естен шығармаңыз. Ал енді, f функциясын шақыртайық. 
Сонымен, 3 аргументіне көшеміз. Функция шақыртылған кезде, [ДАУЫССЫЗ]. периметр 3 мәнінің арнайы жады ретінде рөл атқарады. Біз мұны, меншіктеу тұжырымдамасы ретінде санай аламыз, ондағы х 3 мәніне ие. Мен Енгізу батырмасын басқанда, функцияны шақырту әрекеті жүзеге асады. Осы әрекеттің нәтижесі ретінде 9 мәні қайта оралады. Әдетте, функция ол есеп, сол себепті айнымалыны нәтижеге жету үшін қолдана аламыз. айнымалы нәтижесін жасайық 3-тен f нәтижесін иеленетін Жүзеге асыру ережелерін қайта шақырту жүктеу тұжырымдамасы. Бұл алғашқысы, оң қол жақтағы есеп арнайы жадын жасай отыра шығарылады. Екіншісі, арнайы жады айнымалыда сақталады. Нәтижесі 3-тен f-ті шақыртудағы арнайы жадына қол жеткізеді. Басқаша айтқанда, нәтижесі 9 болады. Үшбұрыш ауданын табу айнымалылар дәрісіндегі қайта шақырту. 
Қабырғаны алып оны биіктікке көбейтіп 2 бөлу керек. Ал енді, үшбұрыш ауданын табу функциясын жазалық. Def сөзінен бастаймыз, сосын функция атауы, оған area сөзін алайық. Функция атауынан соң функция параметрлері біздің жағдайда екі параметр бар. Қабырға мен биіктік. Осы тізімді колоннаға жазып, содан кейін функцияның негізгі бөлігіне көшеміз. Қабырғаның биіктікке көбейтіліп 2 бөлінген формуласына қайта ораламыз. Функцияны шақыртайық, екі аргументтен тұратын ауданды орындаймыз. 3 пен  4. Қабырға, оның параметрі  3ке тең, ал биіктік параметрі  4ке тең. Осыдан кейін берілген есеп шығарылып, яғни қабырғаның биіктікке көбейтіліп 2 бөлініп, қайта оралады. 
Функция арқылы 6.0 қайта оралады. Осыны тағы да бір рет орындап көрейік, бұл жолы бөлшек сан сан мен бүтін сан қолдана отыра. Функцияны шақыртуды жүзеге асырудың жетілдірілген ережелері ол, біріншіден, аргументтерді арнайы жады шығару үшін есептеу. Келесі қадам, сол арнайы жадыларын сәйкесінше параметлерде сақтау керек. Содан кейін, функцияның негізгі бөлігін орындау керек. 
Ал енді, Питонды қайта қосалық. Осы терезешедегі менюді таңдап, Restart батырмасын басайық. Осы кезде, осыған дейінгі терезешедегі іс−әрекеттеріміз оның ішінді ауданды есептеу функциясының сипаттамасы жоқ болды. Осыдан кейін сол ауданшы шақыртатын болсақ, біз қатеге тап боламыз, себебі ол анықталмаған . Питонның басым көпшілік программалары файлдарда сақталады. Жаңа файл ашып, оған біздің функция сипаттамасын, аудан есептеуді сақтайық. New Window файлына көшіңіз. 
Біздің функция сипаттамасын соның ішіне орналастырыңыз. Осы файлды triangle.py деген атпен сақтайық. Питонның барлық программалары .py файлдарында сақталатын болады. Терешененің өлшемін өзгертелік, осы кезде сол қол жақта каңқа, ал оң жақта өзіміздің triangle.py файлын көресіздер. Енді бізде аудан функциясы Triangle.py−да барда , осы файлдв іске қоса аламыз. Енді біз Run және Run Module батырмасын басамыз. Бұл сол жақтағы негіздегі біздің аудан функциямыз қол жетімді болу үшін қажет. Осыдан соң, негізден аудан функциясын шақыртқан кезімізде программа ауданның не екенін және оның қол жетімді екенін білетін болады. [Дыбыс] Triangle.py файлында біз бірнеше функция анықтай аламыз. Келесі бір функция анықтамасын енгізелік. Үшбұрыштың периметрін табу үшін  функцияны анықтау керек. Қабырғаларына 1, 2 және 3 деген мән береміз . Сол кезде, функция бізге осы қабырғалардың қосындысын [Дыбыс] . есептеп береді. 
Ол үшін triangle.py сақтадым, ал егер де сол негізге қайта оралып, функцияны қайта орындайтын болсам, қатеге кезігемін. Оған себеп, тура сол кезеңде функция triangle.py сақталғандығына қарамастан, біз triangle.py іске қоспағандықтан негіз қай параметрлер екендігін біле алмайды. Негізде функцияны орындамас бұрын модульді іске қосуымыз керек, осы әрекетті орындағанда cmd тап болдық, содан кейін периметрлерге мән береміз, ал ол оны есептейді.