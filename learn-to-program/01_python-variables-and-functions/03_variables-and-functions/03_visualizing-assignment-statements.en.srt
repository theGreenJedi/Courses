1
00:00:02,230 --> 00:00:04,860
You've seen variables in assignment
statements.

2
00:00:04,860 --> 00:00:08,130
What we're going to do now is explore a
tool called the visualizer, that

3
00:00:08,130 --> 00:00:12,080
will allow you to see the state of
computer memory, as a program executes.

4
00:00:13,850 --> 00:00:16,309
In the text box are three assignment
statements.

5
00:00:16,309 --> 00:00:19,695
The first assignment statement, assigns
the value one to x.

6
00:00:19,695 --> 00:00:24,940
The second assignment statement evaluates
the expression x plus 2.

7
00:00:24,940 --> 00:00:27,644
And assigns to y the result.

8
00:00:27,644 --> 00:00:32,140
The third statement evaluates 7, and
assigns it to variable x again.

9
00:00:32,140 --> 00:00:35,590
So x will change on line 3.

10
00:00:35,590 --> 00:00:36,955
Let's watch that happen.

11
00:00:36,955 --> 00:00:42,510
This indicates the line that is about to
be executed.

12
00:00:42,510 --> 00:00:44,930
As you can see, we haven't done any
execution

13
00:00:44,930 --> 00:00:47,782
yet, and so there are no variables created
yet.

14
00:00:47,782 --> 00:00:52,318
When I click forward, we're going to take
the one and assign it to x.

15
00:00:52,318 --> 00:00:52,738
And as

16
00:00:52,738 --> 00:00:55,846
we saw, in the variables lecture, we're
going

17
00:00:55,846 --> 00:00:58,534
to end up with the value one inside an

18
00:00:58,534 --> 00:01:01,850
object, in computer memory, and variable x
is going

19
00:01:01,850 --> 00:01:05,200
to contain the memory address of the, that
value.

20
00:01:05,200 --> 00:01:08,410
So when I hover over this box there, we
see that

21
00:01:08,410 --> 00:01:12,800
there's an arrow that points to this chunk
of computer memory.

22
00:01:12,800 --> 00:01:18,070
So now x refers to value 1.

23
00:01:18,070 --> 00:01:19,950
I'm about to execute line 2.

24
00:01:19,950 --> 00:01:23,120
And that is going to evaluate what x plus
2 is.

25
00:01:23,120 --> 00:01:27,330
Well we know that 1 plus 2 is 3, so we
should see the value 3.

26
00:01:27,330 --> 00:01:29,750
Get created and stored somewhere in
computer memory.

27
00:01:29,750 --> 00:01:33,360
And after we execute line two we should
see

28
00:01:33,360 --> 00:01:37,210
a variable y containing the memory address
of that value.

29
00:01:37,210 --> 00:01:41,680
So I'll click Forward here and indeed we
see that happen.

30
00:01:41,680 --> 00:01:43,310
When I hover over y,

31
00:01:43,310 --> 00:01:49,820
I see that there is a link between y and
the value 3.

32
00:01:49,820 --> 00:01:51,030
We also told you that the

33
00:01:51,030 --> 00:01:54,830
assignment statement was quite different
from equality.

34
00:01:54,830 --> 00:01:58,690
We're not saying that y is always equal to
x plus 2.

35
00:01:58,690 --> 00:01:59,831
Remember the two steps.

36
00:01:59,831 --> 00:02:03,870
Evaluate the right-hand side of the
assignment statement.

37
00:02:03,870 --> 00:02:05,400
That gives you back a memory address.

38
00:02:05,400 --> 00:02:09,050
Take that memory address and store it in
variable y.

39
00:02:11,210 --> 00:02:13,120
We're about to demonstrate that here,
because we're

40
00:02:13,120 --> 00:02:15,270
going to assign to x the value 7.

41
00:02:15,270 --> 00:02:21,760
This is going to change this box right
here and not y's box.

42
00:02:21,760 --> 00:02:28,750
So when I click Forward, we see that y
still refers to value 3.

43
00:02:28,750 --> 00:02:32,280
Even though x now refers to value 7.

44
00:02:32,280 --> 00:02:36,660
So the assignment statement changes the
value of the variable.

45
00:02:36,660 --> 00:02:40,449
It's not stating that y is always equal to
x plus

46
00:02:40,449 --> 00:02:43,990
2, it's only doing it for this particular
snapshot in time.