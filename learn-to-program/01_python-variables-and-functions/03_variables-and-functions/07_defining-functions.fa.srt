1
00:00:00,012 --> 00:00:02,210
سلام

2
00:00:02,210 --> 00:00:06,380
علاوه بر توابع فابریک پایتون،خودمان نیز میتوانیم تابع تعریف کنیم.

3
00:00:06,380 --> 00:00:08,290
و همه صحبت ما در این درس همین هست.

4
00:00:08,290 --> 00:00:14,400
با مثالی در ریاضی شروع کنیم.تابع(f(x

5
00:00:14,400 --> 00:00:19,871
xرا به توان دو میرساند.اینجا شکلی که در پایتون نمایانده میشود هست.

6
00:00:19,871 --> 00:00:19,871
[صدا].

7
00:00:19,871 --> 00:00:25,475
Def به پایتون میگوید که

8
00:00:25,475 --> 00:00:30,799
داریم تابعی را تعریف میکنیم.

9
00:00:30,799 --> 00:00:37,246
ّFنام تابع هست.

10
00:00:37,246 --> 00:00:42,880
Xپارامتر تابع هست

11
00:00:42,880 --> 00:00:45,470
که متغیری هست که مقدارش تامین میشود

12
00:00:45,470 --> 00:00:46,818
وقتی که تابع خوانده شود.

13
00:00:46,818 --> 00:00:52,750
این کولون(دو نقطه بالای هم)به پایتون خاطرنشان میکند که داریم

14
00:00:52,750 --> 00:00:55,080
وقتی که تابع خوانده میشود تایپ میکنیم که چه شود.

15
00:00:56,810 --> 00:01:01,720
و کلمهReturn خاطرنشان میکند که داریم مقداری را به عقب برمیگردانیم.

16
00:01:03,770 --> 00:01:05,730
شکل عمومی عبارت return دار

17
00:01:05,730 --> 00:01:08,710
کلمه return هست که بعد از آن عبارتی میاید.

18
00:01:08,710 --> 00:01:10,850
و قوانین پیشبرد عبارت return

19
00:01:10,850 --> 00:01:15,250
اول،ارزیابی عبارت،ایجاد آدرسی در حافظه

20
00:01:15,250 --> 00:01:19,320
و دوم،تحویل آن آدرس حافظه به کسی که آن را خوانده.

21
00:01:19,320 --> 00:01:23,460
شکل عمومی تعریف تابع کلمه def هست که بعد از آن نام

22
00:01:23,460 --> 00:01:29,440
تابع آمده و در آخر یا اصلا پرانتزی نیست یا اگر هست پارامترها در آن با کاما از هم جدا شده اند.

23
00:01:29,440 --> 00:01:32,200
بعد بدنه تابع میاید که

24
00:01:32,200 --> 00:01:35,820
یک یا چند عبارت است که با عبارت returnدار ختم میشود.

25
00:01:35,820 --> 00:01:37,939
توجه داشته باشید که بدنه سر سطر نیست،کمی جلوتر شروع میشود

26
00:01:40,160 --> 00:01:45,390
تابع f را بخوانیم.مولفه3 را میگذرانیم.

27
00:01:45,390 --> 00:01:48,000
وقتی که تابع خوانده میشود،

28
00:01:48,000 --> 00:01:48,400
[INAUDIBLE]

29
00:01:48,400 --> 00:01:51,110
آدرس حافظه مقدار3.

30
00:01:51,110 --> 00:01:57,020
میتوانیم که این موضوع را این طوری ببینیم،در واقع،مثل عبارت تکلیفی ،که در آن x عدد 3 را میگیرد.

31
00:01:57,020 --> 00:02:00,440
Enter را میزنم،که خواندن تابع به جریان بیافتد.

32
00:02:00,440 --> 00:02:06,340
و نتیجه فراخوان تابع تحویل عدد 9هست.

33
00:02:06,340 --> 00:02:08,620
خواندن تابع در واقع در عبارات انجام میشود

34
00:02:08,620 --> 00:02:10,490
بنابراین میتوان از متغیر برای ذخیره نتیجه استفاده کرد.

35
00:02:12,040 --> 00:02:14,290
نتیجه متغیری را بسازیم

36
00:02:14,290 --> 00:02:16,863
که نتیجه خواندن (f(3 را میگیرد.

37
00:02:18,060 --> 00:02:21,150
قوانین در جریان انداختن عبارت تکلیفی را به یاد آورید.

38
00:02:21,150 --> 00:02:23,385
که ابتدا،عبارت سمت 

39
00:02:23,385 --> 00:02:26,592
راست ارزیابی شده،ایجاد آدرس حافظه میکند.

40
00:02:26,592 --> 00:02:30,265
دوم،آدرس حافظه در متغیرثبت میشود.

41
00:02:30,265 --> 00:02:35,330
نتیجه فراخوان آدرس حافظه (f(3 را به خود میگیرد.

42
00:02:35,330 --> 00:02:39,293
به سخنی دیگر ،نتیجه میشود9.

43
00:02:41,530 --> 00:02:47,439
تابع دیگری را تعریف کنیم.از درس مربوط به متغیر به یاد آورید

44
00:02:47,439 --> 00:02:52,782
که چگونه سطح مثلث را محاسبه میکنیم.پایه

45
00:02:52,782 --> 00:02:59,340
را در ارتفاع ضرب کرده،و آنگاه بر2 تقسیم میکنیم.

46
00:02:59,340 --> 00:03:02,610
اکنون تابعی را مینویسیم که سطح مثلث را محاسبه کند.

47
00:03:02,610 --> 00:03:06,400
با کلمهdef شروع کرده،و آنگاه نام تابع مطرح میشود،

48
00:03:06,400 --> 00:03:07,770
از نام area استفاده میکنیم.

49
00:03:09,760 --> 00:03:12,420
بعد از نام تابع و پارامترهای آن،

50
00:03:12,420 --> 00:03:16,327
در این مورد دو پارامتر خواهد داشت.

51
00:03:16,327 --> 00:03:18,415
پایه و ارتفاع.

52
00:03:18,415 --> 00:03:22,880
این خط را با کلون پایان میدهیم،بعد از آن بدنه فاکتور را مینویسیم.

53
00:03:22,880 --> 00:03:32,880
میخواهیم که پایه ضربدر ارتفاع تقسیم بر2 را تحویل دهیم.

54
00:03:36,380 --> 00:03:40,390
تابع را فرامیخوانیم،مساحت را با عبور دو مولفه به جریان میاندازیم.

55
00:03:40,390 --> 00:03:41,223
3و4.

56
00:03:41,223 --> 00:03:47,173
و پایه،آن پارامترعدد3 را میپذیرد،پارامتر ارتفاع عدد4.

57
00:03:47,173 --> 00:03:52,052
و آن گاه عبارت به صورت پایه ضربدر ارتفاع،

58
00:03:52,052 --> 00:03:57,480
تقسیم بر2 ارزیابی وتحویل داده میشود.بنابراین تابع عدد6.0 را تحویل میدهد.

59
00:03:59,080 --> 00:04:02,920
یک بار دیگر فراخوانی داشته باشیم،این بار یک عدد صحیح و

60
00:04:02,920 --> 00:04:09,540
یک عدد اعشاری.قوانین عملگری روی تابع میگوید که

61
00:04:09,540 --> 00:04:15,320
اول تابع را ارزیابی میکند،مولفه ها برای تولید آدرس های حافظه ای هستند.

62
00:04:15,320 --> 00:04:19,630
آنگاه، آن آدرس های حافظه را در پارامترهای مربوطه ثبت میکند.

63
00:04:19,630 --> 00:04:24,230
و آنگاه روی بدنه تابع عمل میکند.اکنون Python shell را دوباره استارت میکنیم.

64
00:04:24,230 --> 00:04:27,420
به منو shell رفته، و دکمه restart را کلیک میکنیم.

65
00:04:29,120 --> 00:04:31,200
و دیگر همه کاری را که در shell انجام دادیم را از دست دادیم،

66
00:04:31,200 --> 00:04:34,200
از جمله تعریف تابع سطح.

67
00:04:34,200 --> 00:04:40,200
اگر بخواهیم که سطح را بخوانیم،ثققخق تحویل میگیریم،چون که سطح تعریف نشده.

68
00:04:42,770 --> 00:04:45,250
بیشتر برنامه های پایتون در فایلها ذخیره شده اند.

69
00:04:45,250 --> 00:04:49,524
فایل جدیدی به وجود آورده و تعریف تابع سطح را در آن ذخیره میکنیم.

70
00:04:49,524 --> 00:04:57,940
به فایل برویم>ویندو جدید.تعریف تابع خود را در آن جا دهیم.

71
00:04:57,940 --> 00:05:03,520
و این فایل رابا عنوان triangle.py ذخیره میکنیم.کلیه برنامه های پایتون ما

72
00:05:03,520 --> 00:05:08,735
در فایلهای مختوم به.pyذخیره خواهند شد.اندازه ویندوز را تغییر دهید،

73
00:05:08,735 --> 00:05:13,760
به طوری که shell را در سمت چپ ببینیم

74
00:05:13,760 --> 00:05:18,624
و فایل triangle.py را در سمت راست.

75
00:05:19,910 --> 00:05:21,700
اکنون که تابع سطح خودمان را 

76
00:05:21,700 --> 00:05:27,210
در triangle.py داریم،میتوانیم که این فایل را به تکاپو بیاندازیم.

77
00:05:27,210 --> 00:05:29,260
پس روی Run و Run Module کلیک میکنیم.

78
00:05:30,730 --> 00:05:33,940
که تعریف تابع سطح را در shell در دسترس قرار میدهد.

79
00:05:33,940 --> 00:05:37,680
پس اکنون ،وقتی که سطح را از shell فرا میخوانیم،

80
00:05:37,680 --> 00:05:40,810
میداند که سطح چیست، و میتواند آن تابع را به جریان بیاندازد.

81
00:05:40,810 --> 00:05:40,810
[SOUND]

82
00:05:40,810 --> 00:05:45,670
در فایلtriangle.py میتوانیم بیش از یک تابع را تعریف کنیم.

83
00:05:45,670 --> 00:05:47,570
 تعریف تابعی دیگر را بیافزاییم.

84
00:05:47,570 --> 00:05:52,820
تابعی را تعریف میکنیم که پیرامون یک مثلث را محاسبه کند.

85
00:05:52,820 --> 00:05:58,810
اضلاع را 1و2و3 در نظر میگیریم.

86
00:05:58,810 --> 00:06:01,530
و تابع مجموع این اضلاع را تحویل میدهد.

87
00:06:01,530 --> 00:06:01,530
[SOUND]

88
00:06:01,530 --> 00:06:02,030
.

89
00:06:07,380 --> 00:06:11,460
تا اینجا ،فایلtriangle.py را ذخیره کرده ام و اگر به shell 

90
00:06:11,460 --> 00:06:16,216
رجوع کنم و تابع را به جریان بیاندازم،error تحویل میگیرم.

91
00:06:16,216 --> 00:06:22,770
زیرا که در این نقطه،گرچه تابع در triangle.py ذخیره شده

92
00:06:22,770 --> 00:06:28,530
triangle.py را به تکاپو نیانداخته ایم،و بنابراین shell نمیداند که پیرامون چیست.

93
00:06:29,580 --> 00:06:32,730
قبل از به جریان انداختن تابع در shell نیاز به تکاپو انداختن module هست.

94
00:06:32,730 --> 00:06:39,820
پس cmd را برای به جریان انداختن module فعال کردم،و اکنون میتوانم پیرامون را فراخوانم،و آن رابه جریان میاندازد.