1
00:00:00,012 --> 00:00:02,210
Ciao!

2
00:00:02,210 --> 00:00:06,380
Oltre ad usare le funzioni integrate in
Python, possiamo anche definire le nostre.

3
00:00:06,380 --> 00:00:08,290
E questo è ciò che tratta questa lezione.

4
00:00:08,290 --> 00:00:14,400
Iniziamo con un esempio matematico.
La funzione f di

5
00:00:14,400 --> 00:00:19,871
x, prende x e lo eleva al quadrato.
Ecco come appare la funzione in Python.

6
00:00:19,871 --> 00:00:19,871
[SUONO]

7
00:00:19,871 --> 00:00:25,475
Def indica a Python

8
00:00:25,475 --> 00:00:30,799
che stiamo definendo una

9
00:00:30,799 --> 00:00:37,246
funzione.
F è il nome della

10
00:00:37,246 --> 00:00:42,880
funzione.
X è il parametro di chiamata della funzione.

11
00:00:42,880 --> 00:00:45,470
E' una variabile il cui valore verrà
fornito

12
00:00:45,470 --> 00:00:46,818
quando la funzione viene chiamata.

13
00:00:46,818 --> 00:00:52,750
Questi due punti indicano a Python che
stiamo per

14
00:00:52,750 --> 00:00:55,080
digitare cosa accadrà quando la funzione
viene chiamata.

15
00:00:56,810 --> 00:01:01,720
E la parola return indica che stiamo 
ritornando un valore.

16
00:01:03,770 --> 00:01:05,730
La forma generica per un'istruzione di return

17
00:01:05,730 --> 00:01:08,710
è la parola return, seguita da
un'espressione.

18
00:01:08,710 --> 00:01:10,850
E le regole per eseguire un'istruzione di
return

19
00:01:10,850 --> 00:01:15,250
sono, primo, valutare l'espressione,
producendo un indirizzo di memoria.

20
00:01:15,250 --> 00:01:19,320
E secondo, ritornare quell'indirizzo di memoria
alla chiamata.

21
00:01:19,320 --> 00:01:23,460
La forma generale per la definizione di una funzione
è la parola def, seguita dal nome della

22
00:01:23,460 --> 00:01:29,440
funzione e poi zero o più
parametri separati da virgole.

23
00:01:29,440 --> 00:01:32,200
Poi viene il corpo della funzione, che
è

24
00:01:32,200 --> 00:01:35,820
formato da una o più istruzioni che terminano spesso
con un'istruzione di return.

25
00:01:35,820 --> 00:01:37,939
Notate che il corpo è indentato.

26
00:01:40,160 --> 00:01:45,390
Chiamiamo la funzione f.
Quindi passiamole un argomento 3.

27
00:01:45,390 --> 00:01:48,000
Quando la funzione viene chiamata, il
parametro agisce come un 

28
00:01:48,000 --> 00:01:48,400
link, vedrete un

29
00:01:48,400 --> 00:01:51,110
indirizzo di memoria del valore 3.

30
00:01:51,110 --> 00:01:57,020
Possiamo pensare a questo, effettivamente,  come
un'istruzione di assegnazione, dove x riceve 3.

31
00:01:57,020 --> 00:02:00,440
Premerò Invio, quindi verrà eseguita
la chiamata alla funzione.

32
00:02:00,440 --> 00:02:06,340
E il risultato della chiamata alla funzione
è che viene ritornato il valore 9.

33
00:02:06,340 --> 00:02:08,620
Le chiamate alle funzioni sono espressioni,
quindi noi

34
00:02:08,620 --> 00:02:10,490
possiamo usare una variabile per memorizzare 
il risultato.

35
00:02:12,040 --> 00:02:14,290
Creiamo una variabile result

36
00:02:14,290 --> 00:02:16,863
che riceve il risultato della chiamata di f di 3.

37
00:02:18,060 --> 00:02:21,150
Ricordiamo le regole per eseguire
un'istruzione di assegnazione,

38
00:02:21,150 --> 00:02:23,385
che sono per prima cosa che l'espressione
sul

39
00:02:23,385 --> 00:02:26,592
lato destro viene valutata, producendo un+indirizzo di memoria.

40
00:02:26,592 --> 00:02:30,265
E secondo, che l'indirizzo di memoria viene
memorizzato nella variabile.

41
00:02:30,265 --> 00:02:35,330
Il risultato riceve l'indirizzo di memoria della
chiamata di f di 3.

42
00:02:35,330 --> 00:02:39,293
Quindi in altre parole, il risultato riceve 9.

43
00:02:41,530 --> 00:02:47,439
Definiamo un'altra funzione.
Ricordiamo dalla lezione sulle variabili

44
00:02:47,439 --> 00:02:52,782
come calcolare l'area di un triangolo.
Prendiamo la

45
00:02:52,782 --> 00:02:59,340
base, la moltiplichiamo per l'altezza, e poi
dividiamo per 2.

46
00:02:59,340 --> 00:03:02,610
Ora scriveremo una funzione per calcolare
l'area di un triangolo.

47
00:03:02,610 --> 00:03:06,400
Iniziamo con la parola def, e poi viene
il nome della funzione,

48
00:03:06,400 --> 00:03:07,770
usiamo il nome area.

49
00:03:09,760 --> 00:03:12,420
Dopo il nome della funzione e i parametri
alla

50
00:03:12,420 --> 00:03:16,327
funzione, in questo caso avremo due
parametri.

51
00:03:16,327 --> 00:03:18,415
la base e l'altezza.

52
00:03:18,415 --> 00:03:22,880
Terminiamo questa riga con un due punti, e poi
scriviamo il corpo della funzione.

53
00:03:22,880 --> 00:03:32,880
Andremo a ritornare la base moltiplicata
per l'altezza divisa per 2.

54
00:03:36,380 --> 00:03:40,390
Chiamiamo la funzione, eseguiremo
area passandole due argomenti.

55
00:03:40,390 --> 00:03:41,223
3 e 4.

56
00:03:41,223 --> 00:03:47,173
E base, quel parametro riceve 3, il
parametro height riceve 4.

57
00:03:47,173 --> 00:03:52,052
E poi quella espressione viene valutata base
moltiplicata per

58
00:03:52,052 --> 00:03:57,480
altezza, diviso per 2 e return.
Quindi viene ritornato 6.0 dalla funzione.

59
00:03:59,080 --> 00:04:02,920
Chiamiamola ancora una volta, passandole
un int e

60
00:04:02,920 --> 00:04:09,540
un float questa volta.
Le regole estese per eseguire

61
00:04:09,540 --> 00:04:15,320
una chiamata ad una funzione sono di valutare prima
gli argomento per produrre indirizzi di memoria,

62
00:04:15,320 --> 00:04:19,630
poi, salvare questi indirizzi di memoria nei
parametri corrispondenti.

63
00:04:19,630 --> 00:04:24,230
E poi eseguire il corpo della funzione.
Ora, facciamo ripartire la shell di Python.

64
00:04:24,230 --> 00:04:27,420
Andiamo nel menu della shell, e clicchiamo
Restart.

65
00:04:29,120 --> 00:04:31,200
E abbiamo appena perso tutto il lavoro che

66
00:04:31,200 --> 00:04:34,200
abbiamo fatto nella shell, inclusa la
definizione della funzione area.

67
00:04:34,200 --> 00:04:40,200
Se cerchiamo di richiamare area, otteniamo un 
name error, dato che area non è definita.

68
00:04:42,770 --> 00:04:45,250
La maggior parte dei programmi di Python sono
salvati in files.

69
00:04:45,250 --> 00:04:49,524
Creiamo un nuovo file, e salviamo la definizione 
della nostra funzione, area, al suo interno.

70
00:04:49,524 --> 00:04:57,940
Andiamo in File > New Window.
Posizioniamo la definizione della nostra funzione lì.

71
00:04:57,940 --> 00:05:03,520
E salveremo il file come triangle.py.
Tutti i nostri programmi di Python

72
00:05:03,520 --> 00:05:08,735
saranno salvati in file .py.
Ridimensioniamo le finestre,

73
00:05:08,735 --> 00:05:13,760
in modo da vedere la shell sul lato sinistro

74
00:05:13,760 --> 00:05:18,624
e la nostra triangle.py sul
lato destro.

75
00:05:19,910 --> 00:05:21,700
Ora che abbiamo la nostra funzione area

76
00:05:21,700 --> 00:05:27,210
definita in Triangle.py, possiamo far girare
questo file.

77
00:05:27,210 --> 00:05:29,260
Quindi premiamo Run, e Run Module.

78
00:05:30,730 --> 00:05:33,940
Questo rende la definizione della funzione
area disponibile nella shell.

79
00:05:33,940 --> 00:05:37,680
Quindi ora possiamo chiamare area dalla shell,
lei

80
00:05:37,680 --> 00:05:40,810
sa cos'è area, ed è in grado di eseguire
quella funzione.

81
00:05:40,810 --> 00:05:40,810
[MUSICA]

82
00:05:40,810 --> 00:05:45,670
Possiamo definire più di una funzione all'interno
del file Triangle.py.

83
00:05:45,670 --> 00:05:47,570
Aggiungiamo la definizione di un'altra funzione.

84
00:05:47,570 --> 00:05:52,820
Definiremo una funzione che calcola il
perimetro di un triangolo.

85
00:05:52,820 --> 00:05:58,810
Passeremo in ingresso i lati 1, 2 e 3.

86
00:05:58,810 --> 00:06:01,530
E la funzione ritornerà la somma di
quei lati.

87
00:06:01,530 --> 00:06:01,530
[MUSICA]

88
00:06:01,530 --> 00:06:02,030

89
00:06:07,380 --> 00:06:11,460
A questo punto ho salvato triangle.py e
se torno nella

90
00:06:11,460 --> 00:06:16,216
shell e eseguo la funzione, quello
che vedo è un errore.

91
00:06:16,216 --> 00:06:22,770
Questo accade perché, a questo punto, anche se
la funzione è salvata in triangle.py,

92
00:06:22,770 --> 00:06:28,530
non abbiamo fatto girare Triangle.py,, e quindi
la shell non sa cosa sia perimeter.

93
00:06:29,580 --> 00:06:32,730
Prima di eseguire una funzione nella shell,
dobbiamo far girare quel modulo,

94
00:06:32,730 --> 00:06:39,820
quindi ho premuto cmd per far girare il modulo, e
ora posso chiamare perimeter, e viene eseguita.