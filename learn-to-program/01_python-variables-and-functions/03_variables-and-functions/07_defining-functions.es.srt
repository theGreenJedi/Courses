1
00:00:00,012 --> 00:00:02,210
¡ Hola !

2
00:00:02,210 --> 00:00:06,380
Adicionalmente a usar las funciones de Python,
nosotros podemos definir nuestras propias funciones

3
00:00:06,380 --> 00:00:08,290
Y eso es lo que esta clase será

4
00:00:08,290 --> 00:00:14,400
Empecemos con un ejemplo de matemáticas
Función f de

5
00:00:14,400 --> 00:00:19,871
x, toma x y la eleva al quadrado.
Aquí es como la función se ve en Python 

6
00:00:19,871 --> 00:00:19,871
[SONIDO].

7
00:00:19,871 --> 00:00:25,475
Def indica a Python

8
00:00:25,475 --> 00:00:30,799
que estamos definiendo un

9
00:00:30,799 --> 00:00:37,246
función
F es el nombre de la

10
00:00:37,246 --> 00:00:42,880
función
X es una parámetro de llamada si la función

11
00:00:42,880 --> 00:00:45,470
Es una variable cuyos valores van a ser
suministrados

12
00:00:45,470 --> 00:00:46,818
cuando la función es llamada

13
00:00:46,818 --> 00:00:52,750
Estos dos puntos indica a Python que estamos
a punto

14
00:00:52,750 --> 00:00:55,080
de tipear que es lo que va a pasar cuando la función
es llamada

15
00:00:56,810 --> 00:01:01,720
Y la palabra Return indica que estamos
retornando un valor de regreso

16
00:01:03,770 --> 00:01:05,730
La forma general de una sentencia return

17
00:01:05,730 --> 00:01:08,710
es la palabra return, seguida de la
expresión

18
00:01:08,710 --> 00:01:10,850
Y las reglas para ejecutar una
sentencia return

19
00:01:10,850 --> 00:01:15,250
son, primero evaluar la expresión
produciendo una dirección de memoria

20
00:01:15,250 --> 00:01:19,320
Y segundo pasar la dirección de memoria de regreso
a quién llama

21
00:01:19,320 --> 00:01:23,460
La forma general de una definición de función
es la palabra def, seguida por el nombre de la

22
00:01:23,460 --> 00:01:29,440
función y de cero o más
parámetros separados por comas

23
00:01:29,440 --> 00:01:32,200
A continuaciñon viene el cuerpo de la función que
es

24
00:01:32,200 --> 00:01:35,820
una o mas sentencias generalmente terminando con una
sentencia return

25
00:01:35,820 --> 00:01:37,939
Tomen nota que el cuerpo tiene identación.

26
00:01:40,160 --> 00:01:45,390
Llamemos la función f
Así le pasaremos un argumento 3.

27
00:01:45,390 --> 00:01:48,000
Cuando la fucnión es llamada, el perímetro actúa como una

28
00:01:48,000 --> 00:01:48,400
[INAUDIBLE]

29
00:01:48,400 --> 00:01:51,110
dirección de memoria del valor 3

30
00:01:51,110 --> 00:01:57,020
Podemos pensar de esto, actualmente como una
sentencia de asignación, donde x recibe 3.

31
00:01:57,020 --> 00:02:00,440
Voy a presionar la tecla Enter, para que la llamada de la función sea
ejecutada

32
00:02:00,440 --> 00:02:06,340
Y el resultado de la llamada de la función es
que el valor 9 es retornado

33
00:02:06,340 --> 00:02:08,620
Llamado de funciones actualmente son expresiones
así que

34
00:02:08,620 --> 00:02:10,490
podemos usar una variable para almacenar el resultado

35
00:02:12,040 --> 00:02:14,290
Vamos a crear una variable de resultado

36
00:02:14,290 --> 00:02:16,863
que recibe el resultado de la llamada de f con 3

37
00:02:18,060 --> 00:02:21,150
Recuerda las reglas de ejecución de una
sentencia de asignación

38
00:02:21,150 --> 00:02:23,385
Cuales son las primeras, la expresión en
el

39
00:02:23,385 --> 00:02:26,592
lado derecho es evaluado, produciendo una
dirección de memoria

40
00:02:26,592 --> 00:02:30,265
Y segundo, la dirección de memoria es almacenada
en la variable

41
00:02:30,265 --> 00:02:35,330
El resultado tendrá la dirección de memoria de la
llamada de f de 3

42
00:02:35,330 --> 00:02:39,293
Así en otras palabras, el resultado tiene 9.

43
00:02:41,530 --> 00:02:47,439
Definamos otra función
Recuerda de la clase de variables

44
00:02:47,439 --> 00:02:52,782
cómo calcular el área de un triángulo
Toma la

45
00:02:52,782 --> 00:02:59,340
ase multiplicada por la altura
dividido para 2

46
00:02:59,340 --> 00:03:02,610
Escribiremos ahora una función para calcular
el área de un triángulo

47
00:03:02,610 --> 00:03:06,400
Empezamos con la palabra def seguida del nombre de la función

48
00:03:06,400 --> 00:03:07,770
usemos el nombre area

49
00:03:09,760 --> 00:03:12,420
Después del nombre de la función y de los parámetros de la

50
00:03:12,420 --> 00:03:16,327
función, en este caso tendremos dos
parámetros

51
00:03:16,327 --> 00:03:18,415
La base y la altura.

52
00:03:18,415 --> 00:03:22,880
Terminamos esta línea con dos puntos, y luego
escribimos el cuerpo de la función

53
00:03:22,880 --> 00:03:32,880
Vamos a retornar la base multiplicada
por la altura dividido para 2

54
00:03:36,380 --> 00:03:40,390
Llamemos la función, ejecutaremos area pasando dos argumentos

55
00:03:40,390 --> 00:03:41,223
3 y 4

56
00:03:41,223 --> 00:03:47,173
Y base, el parámetro recibe 3, el parámetro height recibe 4

57
00:03:47,173 --> 00:03:52,052
Y luego la expresión es evaluada base
por

58
00:03:52,052 --> 00:03:57,480
height dividido para 2 y retorna.
Así 6.0 es retornado por la función

59
00:03:59,080 --> 00:04:02,920
Lamemosla una vez mas, pasando un
int y 

60
00:04:02,920 --> 00:04:09,540
un float esta vez
Las reglas extendidas para ejecutar

61
00:04:09,540 --> 00:04:15,320
un llamado de función son primero eveluar
los argumentos para producir la dirección de memoria.

62
00:04:15,320 --> 00:04:19,630
A continuación, almacenar esas direcciones de memoria en los
correspondientes parámetros

63
00:04:19,630 --> 00:04:24,230
Y luego ejecutar el cuepro de la función
Ahora iniciemos el interprete de Python

64
00:04:24,230 --> 00:04:27,420
Vamos a menú del shell y clic
Reiniciar.

65
00:04:29,120 --> 00:04:31,200
Y nosotros acabamos de perder todo el trabajo que hicimos

66
00:04:31,200 --> 00:04:34,200
en la shell, incluyendo la
definición de la función area

67
00:04:34,200 --> 00:04:40,200
Si tratamos de llamar area, obtendremos un error de nombre
porque area no esta definida

68
00:04:42,770 --> 00:04:45,250
La mayoría de programas de Python son archivos guardados.

69
00:04:45,250 --> 00:04:49,524
Vamos a crear un nuevo archivo y guardamos nuestra
definición de función area en el.

70
00:04:49,524 --> 00:04:57,940
Anda a File > New Window
Ubica nuestra definición de función allí

71
00:04:57,940 --> 00:05:03,520
Y guardaremos este archivo como traingle,py
Todos nuestros programas de Python

72
00:05:03,520 --> 00:05:08,735
van a ser guardados en archivos .py
Solo redimensiona la ventana

73
00:05:08,735 --> 00:05:13,760
para pode ver la shell en el lado izquierdo

74
00:05:13,760 --> 00:05:18,624
y nuestro archivo triangle,py en el
lado derecho 

75
00:05:19,910 --> 00:05:21,700
Ahora que tenemos nuestra definición de función de area

76
00:05:21,700 --> 00:05:27,210
en triángulo.py, podemos correr este
archivo

77
00:05:27,210 --> 00:05:29,260
sí que vamos a hacer clic en Run y Run Module.

78
00:05:30,730 --> 00:05:33,940
Eso hace la definición de la función area
disponible en la shell.

79
00:05:33,940 --> 00:05:37,680
Así ahora, cuando llamemos area desde la shell
ella

80
00:05:37,680 --> 00:05:40,810
sabe que es area, y es capaz de ejecutar
esa función

81
00:05:40,810 --> 00:05:40,810
para ir a la guerra.

82
00:05:40,810 --> 00:05:45,670
Podemos definir mas de una función en
el archivo triangle.py

83
00:05:45,670 --> 00:05:47,570
Añadamos otra defiinción de funcíon

84
00:05:47,570 --> 00:05:52,820
Definamos una función para calcular el
perímetro de un triángulo

85
00:05:52,820 --> 00:05:58,810
Pasaremos sides 1, 2, y 3

86
00:05:58,810 --> 00:06:01,530
Y la funciñon retornará la suma de
esos lados

87
00:06:01,530 --> 00:06:01,530
para ir a la guerra.

88
00:06:01,530 --> 00:06:02,030
.

89
00:06:07,380 --> 00:06:11,460
En este momento, he guardado triange.py y
si regreso a

90
00:06:11,460 --> 00:06:16,216
la shell y ejecutamos la función,
lo que veremos será un error

91
00:06:16,216 --> 00:06:22,770
Eso es porque a este punto, a pesar que la
función esta guardada en triangle.py

92
00:06:22,770 --> 00:06:28,530
no hemos corrido triangle.py y así la shell no sabe que es perímetro

93
00:06:29,580 --> 00:06:32,730
Antes de ejecutar la función en la shell,
debemos correr ese módulo

94
00:06:32,730 --> 00:06:39,820
así que presioné el cmd para correr el módulo y
ahora puedo llamar perimeter y ejecuta