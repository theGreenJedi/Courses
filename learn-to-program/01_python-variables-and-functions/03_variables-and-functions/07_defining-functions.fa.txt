سلام علاوه بر توابع فابریک پایتون،خودمان نیز میتوانیم تابع تعریف کنیم. و همه صحبت ما در این درس همین هست. با مثالی در ریاضی شروع کنیم.تابع(f(x xرا به توان دو میرساند.اینجا شکلی که در پایتون نمایانده میشود هست. [صدا]. Def به پایتون میگوید که داریم تابعی را تعریف میکنیم. ّFنام تابع هست. Xپارامتر تابع هست که متغیری هست که مقدارش تامین میشود وقتی که تابع خوانده شود. این کولون(دو نقطه بالای هم)به پایتون خاطرنشان میکند که داریم وقتی که تابع خوانده میشود تایپ میکنیم که چه شود. و کلمهReturn خاطرنشان میکند که داریم مقداری را به عقب برمیگردانیم. شکل عمومی عبارت return دار کلمه return هست که بعد از آن عبارتی میاید. و قوانین پیشبرد عبارت return اول،ارزیابی عبارت،ایجاد آدرسی در حافظه و دوم،تحویل آن آدرس حافظه به کسی که آن را خوانده. شکل عمومی تعریف تابع کلمه def هست که بعد از آن نام تابع آمده و در آخر یا اصلا پرانتزی نیست یا اگر هست پارامترها در آن با کاما از هم جدا شده اند. بعد بدنه تابع میاید که یک یا چند عبارت است که با عبارت returnدار ختم میشود. توجه داشته باشید که بدنه سر سطر نیست،کمی جلوتر شروع میشود تابع f را بخوانیم.مولفه3 را میگذرانیم. وقتی که تابع خوانده میشود، [INAUDIBLE] آدرس حافظه مقدار3. میتوانیم که این موضوع را این طوری ببینیم،در واقع،مثل عبارت تکلیفی ،که در آن x عدد 3 را میگیرد. Enter را میزنم،که خواندن تابع به جریان بیافتد. و نتیجه فراخوان تابع تحویل عدد 9هست. خواندن تابع در واقع در عبارات انجام میشود بنابراین میتوان از متغیر برای ذخیره نتیجه استفاده کرد. نتیجه متغیری را بسازیم که نتیجه خواندن (f(3 را میگیرد. قوانین در جریان انداختن عبارت تکلیفی را به یاد آورید. که ابتدا،عبارت سمت راست ارزیابی شده،ایجاد آدرس حافظه میکند. دوم،آدرس حافظه در متغیرثبت میشود. نتیجه فراخوان آدرس حافظه (f(3 را به خود میگیرد. به سخنی دیگر ،نتیجه میشود9. تابع دیگری را تعریف کنیم.از درس مربوط به متغیر به یاد آورید که چگونه سطح مثلث را محاسبه میکنیم.پایه را در ارتفاع ضرب کرده،و آنگاه بر2 تقسیم میکنیم. اکنون تابعی را مینویسیم که سطح مثلث را محاسبه کند. با کلمهdef شروع کرده،و آنگاه نام تابع مطرح میشود، از نام area استفاده میکنیم. بعد از نام تابع و پارامترهای آن، در این مورد دو پارامتر خواهد داشت. پایه و ارتفاع. این خط را با کلون پایان میدهیم،بعد از آن بدنه فاکتور را مینویسیم. میخواهیم که پایه ضربدر ارتفاع تقسیم بر2 را تحویل دهیم. تابع را فرامیخوانیم،مساحت را با عبور دو مولفه به جریان میاندازیم. 3و4. و پایه،آن پارامترعدد3 را میپذیرد،پارامتر ارتفاع عدد4. و آن گاه عبارت به صورت پایه ضربدر ارتفاع، تقسیم بر2 ارزیابی وتحویل داده میشود.بنابراین تابع عدد6.0 را تحویل میدهد. یک بار دیگر فراخوانی داشته باشیم،این بار یک عدد صحیح و یک عدد اعشاری.قوانین عملگری روی تابع میگوید که اول تابع را ارزیابی میکند،مولفه ها برای تولید آدرس های حافظه ای هستند. آنگاه، آن آدرس های حافظه را در پارامترهای مربوطه ثبت میکند. و آنگاه روی بدنه تابع عمل میکند.اکنون Python shell را دوباره استارت میکنیم. به منو shell رفته، و دکمه restart را کلیک میکنیم. و دیگر همه کاری را که در shell انجام دادیم را از دست دادیم، از جمله تعریف تابع سطح. اگر بخواهیم که سطح را بخوانیم،ثققخق تحویل میگیریم،چون که سطح تعریف نشده. بیشتر برنامه های پایتون در فایلها ذخیره شده اند. فایل جدیدی به وجود آورده و تعریف تابع سطح را در آن ذخیره میکنیم. به فایل برویم>ویندو جدید.تعریف تابع خود را در آن جا دهیم. و این فایل رابا عنوان triangle.py ذخیره میکنیم.کلیه برنامه های پایتون ما در فایلهای مختوم به.pyذخیره خواهند شد.اندازه ویندوز را تغییر دهید، به طوری که shell را در سمت چپ ببینیم و فایل triangle.py را در سمت راست. اکنون که تابع سطح خودمان را در triangle.py داریم،میتوانیم که این فایل را به تکاپو بیاندازیم. پس روی Run و Run Module کلیک میکنیم. که تعریف تابع سطح را در shell در دسترس قرار میدهد. پس اکنون ،وقتی که سطح را از shell فرا میخوانیم، میداند که سطح چیست، و میتواند آن تابع را به جریان بیاندازد. [SOUND] در فایلtriangle.py میتوانیم بیش از یک تابع را تعریف کنیم. تعریف تابعی دیگر را بیافزاییم. تابعی را تعریف میکنیم که پیرامون یک مثلث را محاسبه کند. اضلاع را 1و2و3 در نظر میگیریم. و تابع مجموع این اضلاع را تحویل میدهد. [SOUND] . تا اینجا ،فایلtriangle.py را ذخیره کرده ام و اگر به shell رجوع کنم و تابع را به جریان بیاندازم،error تحویل میگیرم. زیرا که در این نقطه،گرچه تابع در triangle.py ذخیره شده triangle.py را به تکاپو نیانداخته ایم،و بنابراین shell نمیداند که پیرامون چیست. قبل از به جریان انداختن تابع در shell نیاز به تکاپو انداختن module هست. پس cmd را برای به جریان انداختن module فعال کردم،و اکنون میتوانم پیرامون را فراخوانم،و آن رابه جریان میاندازد.