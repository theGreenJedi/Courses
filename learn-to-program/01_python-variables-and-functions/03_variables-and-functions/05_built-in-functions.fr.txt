On a vu que Python a plusieurs opérateurs mathématiques, comme la
multiplication et la soustraction et on sait que l'opération mathématique multiplication est associée
à un symbole astérisque. Il y a beaucoup d'autre opérations que l'on
peut vouloir faire, avec ou sans math, et pas assez
de symboles pour les représenter. Par exemple, on peut vouloir
trouver lequel parmis plusieurs nombres est le plus grand, et il n'y a
pas de symbole associé avec cette opération. À la place, Python a un jeu de fonctions de base qui permettent d'effectuer ces opérations. On va les voir maintenant. Commençons par cet exemple que j'ai mentionné, qui est trouver lequel de plusieurs nombres
est le plus grand. La fonction de base que nous allons
utiliser pour ça est la fonction "max". Donc le nom de la fonction est "max",
j'utilise une parenthèse ouvrante, et remarquez le pop up jaune.
C'est et… de IDLE qui est censé rappeler aux programmeurs professionnels ce que
la fonction fait. Vous n'allez probablement pas
pouvoir la comprendre, et c'est normal. Ensuite je fournis les arguments de
la fonction, donc dans ce cas, je vais donner deux arguments. Passer deux arguments à la fonction. Leur valeurs sont 36.7 et 23.4.
Ceci est donc un appel de fonction, avec pour arguments 36.7 et 23.4.
Quand j'appuie sur Entrée, Python va évaluer cet appel de fonction, et me dire que 36.7
est le plus grand des deux nombres. La forme d'un appel de fonction c'est :
le nom de la fonction, une parenthèse ouvrante, une liste
d'expressions séparées par des virgules qu'on appelle arguments, et une parenthèse fermante.
Quand une fonction est appelée, Python commence par évaluer les arguments,
puis appelle la fonction. En plus d'appeler max avec
deux arguements, on a la possibilité de l'appeler avec
plus d'arguments, donc ici on va l'appeler avec quatre
arguments. On peut aussi l'appeler pas seulement
avec des float mais aussi des int, donc cette fois je vais passer trois
arguments int à la fonction. Et pour finir il est possible de
passer des arguments de différents types : on va passer un argument float avec
un argument int cette fois. Comment pouvais-je savoir que la
fonction "max" existait ? Et comment ai-je su quels arguments lui passer, et quelle valeur elle me rendrait ? On peut trouver quelles fonctions sont disponibles en utilisant une autre
fonction de base appelée "dir" Je vais l'appeler maintenant, et je lui demande une liste des
fonctions de base. Quand je tape entrée, voilà.
On obtiens une liste énorme.
Un peu intimidante, en fait. Le truc c'est que pour le moment, on va
complètement ignorer tout ça, et on va uniquement se concentrer sur
ces noms qui sont entièrement en minuscules. C'est ce qui nous intéresse pour l'instant. On peut voir que "max" apparaît dans la liste et… pour le moment on va explorer une autre
fonction appelée "abs". La fonction de base "help" peut être
utilisée pour trouver des infos sur "abs". On va appeler "help", en passant "abs"
comme argument de la fonction. Et on reçoit une description de "abs".
De cette description, on peut voir que "abs" prends un argument : un nombre et que d'après ce symbole qui veut dire
"retourné", renvoie aussi un nombre. Donc ça va renvoyer la valeur absolue
de l'argument. Essayons un peu. Quand on appelle "abs", on doit lui
passer un argumet numérique. Donc je vais passer un float. Et pareillement, je pourras passer
un int. Vous pouvez voir que quand on passe un argument float,
on obtient un résultat à virgule flottante, et quand on passe un int,
on obtient un résultat entier. On va maintenant utiliser "help" pour en
apprendre plus sur l'autre fonction de base "pow". On passe "pow" comme argument qu'après une stimulation mécanique et on obtient la description. On peut voir par cette description que
"pow" a deux arguments. Le troisième argument est dans des
crochets, indiquant qu'il est optionnel. Donc z est optionnel. Ça veut dire que quand on appelle pow,
on dois l'appeler avec au moins deux, et
possiblement trois argiments. "pow" nous renverra alors un nombre. Appelons "pow" avec deux arguments :
deux et cinq. Ça donne 32 et c'est en fait
équivalent avec le résultat de l'opérateur d'exponentiation pour
calculer deux à la puissance 5.