Salutări tuturor, ați văzut cum 
evaluăm expresiile în Python. În această lecție, vă vom arăta cum să
 memorați rezultatul acestor expresii, astfel încât să utilizați
 aceste valori mai târziu. Vom explora această idee, calculând
 suprafețele unor triunghiuri. Ca să vă reamintiți, dacă știu
 înălțimea unui triunghi, și știu lățimea bazei, atunci, suprafața triunghiului este lungimea bazei, înmulțită cu înălțimea, împărțit la 2. Deci, dacă înălțimea este 12 iar lungimea
 bazei este 20, atunci suprafața este 20 ori 12, împărțit la 2. Haideți să încercăm asta în Python. Știți deja cum să scrieți
 această expresie. și cum să fie evaluată în Python dar,
 din moment ce ne-am decis să calculăm valorile câtorva triunghiuri, vă vom arăta cum să introduceți cuvintele "base"
 și "height", pentru a reprezenta valorile. Aceasta se realizează cu ajutorul
 instrucțiunilor de atribuire. Iată un exemplu. Ce face aceasta este să evalueze
 numărul 20, și să asocieze acea valoare cu variabila x. Acesta se numește o variabilă, deoarece
 este o valoare care poate varia,
 după cum veți vedea. Vom face ceva similar pentru o variabilă
 pe care o vom numi height și apoi, aceste două nume
 vor putea fi utilizate ca și cum valorile lor ar apărea
 acolo, în interpretorul Python. Deci, valoarea base este 20,
 height este asociată valorii 12. Observați că simbolul egal are un înțeles foarte diferit în programare
 față de matematică. Deoarece programele de calculator
 devin foarte complicate, vom introduce o notație pentru a descrie
 variabilele și valorile lor. Ceea ce vom face este să desenăm
 o variabilă, baza, cu o casetă lângă ea. Și ce se întâmplă în Python este că,
 20 nu intră acea casetă, în schimb, 20, ca orice altă valoare în Python,
 rezidă la o anumită locație de memorie. Deci voi alege, la întâmplare,
 o locație de memorie. Și, o voi nota cu un x, doar pentru
 a o diferenția de alte numere. Să spunem că la locația de
 memorie x3, apare valoarea 20. Instrucțiunea de atribuire ia acest x3 și îl pune în caseta asociată cu base. Astfel base conține x3 și, într-un fel, aceasta înseamnă că indică locația de memorie,
 x3 unde rezidă valoarea 20. În mod similar, există o variabilă, înălțimea, și Python păstrează valoarea acesteia
 în acea casetă mică, iar valoarea acesteia este o locație
 de memorie. Voi alege x7. Acestea sunt arbitrare, Python este
 responsabil de această alegere, așa că nu trebuie să-mi fac griji care este exact
 locația de memorie, atâta vreme cât știu că există această relație între
 variabile și valorile lor. Revenind la problema noastră de programare,
putem, de fapt, să folosim base și height, într-o expresie. Deci, dacă înmulțesc base cu height
 și împart la 2, obțin același rezultat ca în cazul în care
 aș fi scris 20 ori 12, împărțit la 2. De asemenea, putem atribui unei variabile,
 rezultatul ultimei expresii, să o numim area (suprafață), și haideți
 să verificăm valoarea ei. Ceea ce vom face acum este să dăm
 noi valori bazei și înălțimii, folosind, din nou, instrucțiuni de atribuire. Haideți să atribuim variabilei base,
 valoarea 2.5. Ceea ce se întâmplă în desenul meu,
 este că îmi dă o nouă valoare 2.5 și probabil, o anumită locație de memorie, x4 și înlocuiește, instrucțiunea de atribuire
 înlocuiește această x3 cu valoarea x4. Deci, base nu mai indică valoarea 20
, în schimb, base este asociată cu 2.5. În mod similar, pot atribui înălțimea. Ceea ce va face acest lucru,
 desigur, este că va pune 7 la o anumită locație de memorie,
 poate x1, iar instrucțiunea de atribuire va lua acest x1 și îl va pune
 în variabila height, realizând această legătură, astfel încât,
 acum, height se referă la 7. Folosind Ctrl + p, mă voi întoarce
 la vechiul meu calcul al suprafeței. Și, după cum vom vedea imediat,
 această nouă suprafață este 8.75, care este într-adevăr ceea ce veți obține,
 dacă înmulțiți 2.5 cu 7 și împărtiți la 2. Fiecare instrucțiune de atribuire are
 forma: variabila = expresia atribuită. Acestea sunt regulile de executate a unei
 instrucțiuni de atribuire Și ar trebui să vă străduiți
 să le memorați, deoarece vă veți întâlni cu ele în mod
 repetat în acest curs. Pasul unu, se evaluează expresia
 din partea dreaptă. Valoarea expresiei are o locație
 de memorie. Stocați aceasta locație de memorie
 în variabila din partea stângă. Fiecare limbaj de programare are un set
 de reguli care definește un nume valabil. În Python, numele de variabile trebuie să
 înceapă cu o literă sau cu underscore și poate conține litere, numere și caractere
 underscore. Atât literele mari cât și literele mici sunt permise, numele de variabile
 formate incorect duc la erori de sintaxă. De exemplu, dacă încercăm să începem un nume de
 variabilă cu un număr, ni se spune că nu putem. În mod similar, dacă includem un caracter
 care nu este din alfabet, underscore, sau numeric, în numele variabilei,
 Python va protesta. Python este de asemenea, sensibil la
 majuscule (case-sensitive). seconds_in_minute este un nume de
 variabilă, perfect valabil. Dar este diferit de orice altă combinație de litere
 mari și litere mici. Primul seconds_in_minute este, desigur,
 mai ușor de citit decât cel de-al doilea cu acele majuscule, și este importantă
 alegerea unor nume bune, deoarece programele pot fi ușor de utilizat,
 citit si îmbunătățit, timp de ani de zile. Fiecare limbaj de programare are un set
 de convenții care definește cum să alegi un nume, așa cum
 site-urile web au un anumit stil si aspect. În Python, majoritatea numelor de variabile
 utilizează doar litere mici și caractere underscore pentru a separa
 cuvintele, ceea ce noi numim 'pothole case'.