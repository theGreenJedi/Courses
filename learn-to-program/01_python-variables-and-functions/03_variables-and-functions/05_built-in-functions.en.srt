1
00:00:03,130 --> 00:00:04,760
We've seen that Python has several

2
00:00:04,760 --> 00:00:08,550
mathematical operators, like
multiplication and subtraction, and

3
00:00:08,550 --> 00:00:10,800
we know that the mathematical operation

4
00:00:10,800 --> 00:00:13,940
multiplication is associated with an
asterisk symbol.

5
00:00:13,940 --> 00:00:16,190
There are lots of other operations that we
might want to do,

6
00:00:16,190 --> 00:00:21,170
with or without math, and not enough
meaningful symbols to go around.

7
00:00:21,170 --> 00:00:24,330
So, for example, we may want to figure
out, which of several

8
00:00:24,330 --> 00:00:28,980
numbers is the largest one, and there's no
symbol associated with that operation.

9
00:00:28,980 --> 00:00:31,030
Instead, Python has a set of built of

10
00:00:31,030 --> 00:00:34,530
functions that allows, allows us to
perform these operations.

11
00:00:34,530 --> 00:00:35,960
So take a look at those now.

12
00:00:35,960 --> 00:00:40,220
So let's start with that example that I
mentioned, which

13
00:00:40,220 --> 00:00:43,570
is to find out which of several numbers is
the largest.

14
00:00:43,570 --> 00:00:47,760
The Python built in function that we'll
use for that is the Max function.

15
00:00:47,760 --> 00:00:52,285
So, the name of the function is Max.
I use an open parenthesis.

16
00:00:52,285 --> 00:00:54,720
And notice the yellow pop up box.
That's

17
00:00:54,720 --> 00:00:54,990
[INAUDIBLE]

18
00:00:54,990 --> 00:00:56,610
help that is intended to remind

19
00:00:56,610 --> 00:00:59,175
professional Python programmers what the
function does.

20
00:00:59,175 --> 00:01:01,200
And you probably won't understand it yet.

21
00:01:01,200 --> 00:01:02,494
And that's to be expected.

22
00:01:02,494 --> 00:01:04,072
And then I provide the arguments to
function, so

23
00:01:04,072 --> 00:01:07,262
in this case, I'm going to provide two
arguments.

24
00:01:07,262 --> 00:01:10,070
Pass two arguments to the function.

25
00:01:10,070 --> 00:01:19,755
The arguments values are 36.7 and 23.4, so
this is function call.

26
00:01:19,755 --> 00:01:26,310
With arguments 36.7 and 23.4.
When I hit Enter, Python will evaluate

27
00:01:26,310 --> 00:01:31,250
that function call, and tell me that 36.7
is the bigger of the two numbers.

28
00:01:32,250 --> 00:01:35,989
The form of a function call is, the name
of the function,

29
00:01:35,989 --> 00:01:41,150
and open parenthesis, a comma separated
list of expressions known as arguments.

30
00:01:41,150 --> 00:01:44,180
And a closing parenthesis.
When a function is called,

31
00:01:44,180 --> 00:01:47,518
Python first evaluates the arguments then
calls the function.

32
00:01:47,518 --> 00:01:52,750
In a additon to call max with two
arguments

33
00:01:52,750 --> 00:01:55,010
we have the option of calling it with
several.

34
00:01:55,010 --> 00:01:58,630
So in this case we will call it with four
arguments.

35
00:02:01,150 --> 00:02:04,840
We can also call not only with floats but
with ints, so

36
00:02:04,840 --> 00:02:08,420
this time I'm going to pass three int
arguments to the function.

37
00:02:08,420 --> 00:02:13,700
And finally it's possible to pass in
arguments of two different types, so

38
00:02:13,700 --> 00:02:19,279
we'll pass in a float argument along with
an int argument this time.

39
00:02:22,280 --> 00:02:24,830
How do I even know that Max existed?

40
00:02:24,830 --> 00:02:26,680
And how did I know what arguments to

41
00:02:26,680 --> 00:02:28,720
provide, and what values it would give
back?

42
00:02:29,810 --> 00:02:31,820
We can find out which built-in functions
are

43
00:02:31,820 --> 00:02:35,060
available by using another built-in
function named dir.

44
00:02:35,060 --> 00:02:36,451
So I'm going to call dir now.

45
00:02:36,451 --> 00:02:43,469
And I'm asking for a listing of the
built-in functions.

46
00:02:43,469 --> 00:02:47,310
When I hit Enter, there we go.
We got a

47
00:02:47,310 --> 00:02:51,110
huge, long list.
Kind of an overwhelming list, actually.

48
00:02:51,110 --> 00:02:55,475
The thing is, for the moment, is that we
are going to completely ignore all of

49
00:02:55,475 --> 00:03:01,122
this, and we're only going to focus on
those names that have lowercase letters.

50
00:03:01,122 --> 00:03:02,046
Entirely lowercase.

51
00:03:03,120 --> 00:03:05,610
So this is what we care about for the
moment.

52
00:03:05,610 --> 00:03:10,995
We can see that Max appears in the list,
and,

53
00:03:10,995 --> 00:03:11,020
[INAUDIBLE]

54
00:03:11,020 --> 00:03:14,200
for the moment explore another function
named ABS.

55
00:03:14,200 --> 00:03:19,210
The built-in function help can be used to
find out more about ABS.

56
00:03:19,210 --> 00:03:23,750
We'll call help, passing ABS as an
argument to the function.

57
00:03:23,750 --> 00:03:29,780
And we get back a description of ABS.
From this description, we can see that

58
00:03:29,780 --> 00:03:35,440
ABS had takes one argument.
A number and that it will,

59
00:03:35,440 --> 00:03:40,620
according to this symbol, which means
return; also return a number.

60
00:03:40,620 --> 00:03:44,310
So it's going to return the absolute value
of the argument.

61
00:03:46,650 --> 00:03:47,620
Let's give it a try.

62
00:03:47,620 --> 00:03:51,660
When we call ABS, we need to pass a
numeric argument.

63
00:03:51,660 --> 00:03:55,780
So I will pass a float.

64
00:03:55,780 --> 00:03:58,470
And similarly, I could pass an int.
You can see

65
00:04:01,580 --> 00:04:04,660
that when we pass a float argument, we get
a floating point

66
00:04:04,660 --> 00:04:07,590
result, and when we pass an int, we get an
int result.

67
00:04:10,450 --> 00:04:16,400
We'll now use Help to learn more about one
of the other builtin functions named Pow.

68
00:04:16,400 --> 00:04:17,750
We'll pass Pow as the argument

69
00:04:17,750 --> 00:04:18,050
[UNKNOWN]

70
00:04:18,050 --> 00:04:20,340
and get the description.

71
00:04:20,340 --> 00:04:25,059
And we can see from this description that
Pow has two arguments.

72
00:04:26,180 --> 00:04:29,990
The third argument is inside square
brackets.

73
00:04:29,990 --> 00:04:32,460
Indicating that is an optional argument.

74
00:04:32,460 --> 00:04:34,610
So z is optional.

75
00:04:34,610 --> 00:04:36,600
That means that when we call pow, we need
to

76
00:04:36,600 --> 00:04:41,590
call it with at least two, or possibly
three arguments.

77
00:04:41,590 --> 00:04:43,530
Pow will then return

78
00:04:43,530 --> 00:04:45,211
a number.

79
00:04:46,300 --> 00:04:49,838
Let's call pow with two arguments, two and
five.

80
00:04:49,838 --> 00:04:54,890
This gives 32 and actually this is
equivalent to the exponent,

81
00:04:54,890 --> 00:04:58,675
using the exponentiation operator to
calculate to the power of 5.