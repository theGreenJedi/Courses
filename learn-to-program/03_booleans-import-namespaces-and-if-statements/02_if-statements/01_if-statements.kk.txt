Осыған дейін жазған программаларымыз нұсқауламаның бірдей ретімен орындалады, әрбір іске қосылған кезде. Осы дәрісте біз, тұтас есептерді қайсы нұсқаулама қолданылып отырғанын бақылау үшін қолданғалы отырмыз. Ал енді осы мәселені қарастыралық. Ұшақ рейсі белгілі бір уақытта келіп қонады деп есептелген, ал енді ол өзге уақатта қонады деп болжаммен есептелініп отыр. Екі уақытты беретін функцияны жазыңыз, ол рейстің уақытын, яғни уақытылы ма, ерте ме, әлде кешігіп қонады ма. Осы функция үшін уақыт бөлшек сандармен жазылады. Мысалы, күндізгі үш 3.0 деген түрде болса, екі:3030 кешкі он төрт:30 уақыты 14.5 деп беріледі. 14.5.  Байқап отырғаныңыздай, біз қолданғалы отырған әрбір сағат көрсеткіші 0.0 пен 24 арасында болмақ.
 0.0 қамтылған, 24 кірмеген. Бұл шарт алды деп аталады. Функциямызда жазған кезде біз қолданған уақытымыз осы аралықта болуыкерек деп білеміз. Енді осы функцияны анықтауды бастайық, біз алғашымен бірқатар функцияны шақырту мысалдарынан бастаймыз. Мен осы функция қорытындысы дәрежесімен атамақшымын. Онда екі аргумен болады, екі аргумент алыңыз. Біріншісі ұшық қону уақытысының кесте бойыншасы, ал екіншісі жаңа болжаммен есептеліп отырған уақыты болады. Осы екі мән бірдей болған кезде, ол хабарламаны дәл уақытысымен қайтарады. Кесте бойынша уақыт 12.5 болса, ал жаңа болжаммен есептелген уақыт 11.5 немесе одан да ертерек, онда бұл функция ерте қайтады. Және, соңғы мүскін жағдай үшін егер де уақыт 9.0 болса, ол кесет бойынша уақыт және сіздің есептеп отырған уақытыңыз кешірек, бұл функция сізге ұшақ кешігіп қонады деген хабарлама беруі керек. Енді осының басындағы бөлігін жазайық. Функцияда екі параметр бар, екеуі де сандар, барлық жағдайларда, мен бөлшек сандар қолдандым. Алайда біз һте оңай бүтін мәндер берсек болар еді. Сонымен біз осы екі параметр үшін сан қолдана аламыз, нәтижесінде ол бізге тізбек тәрізді жауап шығарып бермек. Жоғарғы бөлігі үшін уақыт. Функцияны ЕсептемеДәрежесі деп атағанымыз белгілі және енді біз параметрлер үшін екі жақсы атау беруіміз керек. Бірінші параметрді мен кесте бойынша уақыт деп атай аламын. Ал екіншісін, болжаммен есептелген уақыт деп атаймын. Соңғы бөлігі doc тізбегі, ол функция анықтамасында қосылуы қажет.
Функция ұшақ рейсінің статусын шығарыды, яғни ол үш тізбектің бірі болады. Уақытылы, ерте немесе кешіктірілген. Рейстің қонатын кесе бойынша уақыты статусын шығарып береді, кесте бойынша, бірінші параметрі. Екінші параметрі, келіп қонатын болжаммен есептелген уақыты.
Осы doc тізбегіне қсылу қажет бір ғана қосымша ақпарат, шарт алды, яғни уақыт 0.0 мен 24 арасында. Болжаммен есептелген уақыт үшін де тура осылай.
Бұл да осы аралықта болуы қажет .
. Енді функцияның негізгі бөлігін жазатын уақыт келді. Біз осы функцияның негізін бірнеше түрлі сатымен жазбақпыз. Ал соңына қарай, толығымен әрекет ете алатын функцияға қол жеткіземіз. Осымен бастаумыз үшін біз, бірінші кей бір амалдырды қалай жасайтынымызды анықтап алуымыз керек. Мысалы, бізге тізбекті уақытылы қайтару қажет. Алайда осы функцияны қолданған сайын біз ол тізбекті қайтарғымыз келмейді. Тек қана кесте бойынша уақыт болжаммен есептелген уақытқа тек болған кезінде ғана. Біз осыны білдіру үшін егер тіркесін қолданбақпыз. Осы егер тіркесі булев шартын иеленеді, ол дегеніміз кесте бойынша уақыт, болжаммен есептелген уақытқа тең дегеннің белгісі. Енді біз осы қайтару тіркесін егер тіркесінің негізінің ішіне орналастырмақпыз. Мұнда егер тіркесінің ішінде болатын білдіретін әдеттенген екеніне назар аударыңыз. Осы коды оқу, яғни ол егер де сол кете бойынша уақыт болжанған уақытқа тең болса, егер сол булев тіркесі дұрыс болса, онда уақаталы келу тіркесі жүзеге асқан болады. Теріс жағдайда, ол жүзеге асырылмайды және біз нәтижесіз қаламыз. Енді осын сақтап, іске қосайық. Сонымен мен осы функцияны шақырғанымда, қорапта, тең уақытта ол статуста уақытылы деп шығарып береді. Егер мен осы функцияны уақыттырдың бірі кезінде шақыртқан болсам, не болмаса уақыттар жұбында, олай болса ешнәрсе қайта шықпайды. Нақтырақ айтсақ, бұл шығарып берер нәтиже жоқ деген сөз. Себебі осы функция арқылы бір нәрсе қайта шығады тіптен ешқандай қайту тіркесі орындалмаған болса да. Осы функция шақыртуын басып шығарайық. 
Сонымен, функция шақыртылды, қандай мән шықса да, ол шықты Енді сол мән басып шығарылғалы тұр. Енді біз ештеңенің басылып шықпағанын көріп тұрмыз. Функцияны шақырту орындалып, ешқандай қайта шығу тіркесі орындалмаған нәтижесіз мәні функция арқылы қайта шығады.
Боссыздық типі ол бос-тип, тізбек емес. Сонымен, бұл шарттар типін бұзады, біз алдында өзіміздің нәтиже статусы үшін бергеніміз. Біз функцияның қалған бөлігін, тип шартын толығымен орындайтындай тәртіпте. Анықтаушы функцияға қайта оралайық. Дәл қазір, бізде жалғыз егер тіркесі бар, осы булев шарты дұрыс болған кезде, уақытылы деген жауап қайта беріледі. Ал бұрыс болып шықса, біз өзге амал жасауымыз қажет. for Сонымен біз осының дұрыс бұрыстығын тексерейік, содан соң біз L қолданбақшымыз, L егер, екінші шартты тексеру үшін. Бұл жолы біз кесте бойынша уақыт болжаммен есептелген уақыттан көп пе, әлде аз ба дегенді тексермекшіміз. Және ол солай болса, онда ерте деген жауап аламыз. Яғни уақыты кесте бойынша. 
Сонымен, осы кезеңде іске қосайық. Егер біз бірдей уақыттармен функцияны қоссақ, ол уақытылы деген жауап шығарып береді. Егер де ертерек уақыттарды енгізсек, жауап ерте болады. Алайда, осы сатыда, біз кешірек уақыт енгізген болсақ. Бос жауап шығады.
Сонымен, біз әлі аяқтаған жоқпыз. Енді біз егер тіркесіне үшінші бөлім қоспақшымыз, ол олай болса шартты бөлігі. Олай болсаның міндеті, шарттырдың ешқайсысы немес амалдар дұрыс болмаса, онла осыны орында дегенді білдіреді. Сонымен, біз олар тең немесе үлкен, және және тек қалғаны кесте бойынша уақыт болжам уақытынан аз екенін тексердік. Бұл жағдайда, функция кешігіп келеді деген жауап шығарады. Сонымен, біз оны тағы да іске қоса аламыз, өзіміздің барлық шарттарымызды тексеріп барып, олардың бәрі тең кезде.
Ол ерте және болжаныо тырған уақыттың кешірек болған кезінде. Енді бізде сәкес қорындылар бар. Мен егер тіркесінің бірнеше жалпы сипаттамаларын атап өткіп келіп отыр. Бізде нөл немесе одан да көп L егер шарттары егермен байланысты болуы мүмкін. Және де бізде нөль немес бір өзге шарт болуы мүмкін, олай болса шарты  кемінде ең соңғы егер тіркесі үшін болуы керек. Бізде осы түрлі есептермен генр тіркесі болса, біз әрбір есепті кезекпен шығарамыз. Дұрысты есептеуші біріншісі үшін, егер деген бөлігі жүзеге асырылады. Содан соң негізі орындалып, егер тіркесі аяқталады. Сонымен ол жабылып, соңынан келетін программада жалғасады, онда ешқандай өзе шарттар тексерілмейді.