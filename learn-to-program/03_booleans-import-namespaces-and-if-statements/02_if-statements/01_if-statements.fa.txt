برنامه هایی را که تاکنون نگاشته ایم به همان ترتیبی که نوشته شده توسط کامپیوتر پردازش میشود هر باری که آنها به جریان میافتند. در این مبحث،میخواهیم که از عبارات Boolean برای این که کنترل شود که کدام دستور کار پردازش شده استفاده کرد. به این مساله توجه کنیم.پروازی برنامه ریزی شده که در زمان معینی برسد،و اکنون تخمین زده میشود که در زمان دیگری برسد. تابعی بنویسد که،با در دست داشتن این دو زمان،وضعیت پروازی را تحویل دهد که،یا سر موقع، زود هنگام یا با تاخیرباشد.برای این تابع،زمان با عدد اعشاری نشان داده میشود.مثلا،زمان سه صبح به صورت 3.0 و زمان دوم چهارده ونیم بعداز ظهر با14.5 بنابراین،هر کدام از این زمانها که با آن کار میکنیم بین0.0 و 24.0 را شامل میشود نه 24. این را پیش شرط مینامیم.وقتی که تابع خود را مینویسیم انتظار میرود که زمان هایی که مطرح میشود در این فاصله باشند. تابع را تعریف میکنیم،با چند فراخوان مثالی تابع. میخواهم که این تابع را report status بنامم. و دو مولفه خواهد داشت،دو مولفه را بگیرید. اولی زمان برنامه ریزی شده رسیدن،و دومی زمان جدید تخمینی رسیدن.وقتی هر دو زمان یکی باشد،پیام سر وقت راتحویل میدهد.وقتی که زمان برنامه ریزی شده12.5 و زمان جدید تخمینی 11.5 یا زودتر باشد،این تابع زود تحویل میدهد. و،سرانجام برای آخرین وضع ممکن، وقتی که زمان 9.0 است،زمان برنامه ریزی شده و آنگاه تخمین میزنید که دیر شده، این تابع باید پیامی تحویل دهد که پرواز تاخیر دارد. اکنون،عنوان تابع را بنویسیم. تابع در همه موارد دو پارامتر عددی دارد، که اعداد اعشاری باشند.ولی میشد اعداد درست را داشت. پس میتوانیم که از دو پارامتر عددی استفاده کرد و چیزی که تحویل میدهد از نوع string باشد. زمان برای عنوان.میدانیم که تابع را Report status خوانده ایم و اکنون باید دو تا نام مناسب برای پارامترها انتخاب کنیم. اولی را ،scheduled time> و دومی راestimated time.آخرین قسمت doc string است که نیاز است اضافه شود تشریح تابع است.این تابع وضعیت پرواز را تحویل میدهد، و آن یکی از سه string خواهد بود.سروموقع،زود و با تاخیر. وضعیت پرواز را تحویل میدهد که اولین پارامتر رسیدن طبق برنامه بود. اما اکنون در زمان تخمینی میرسد، که پارامتر دوم باشد. اطلاعاتی اضافی که نیاز است که به doc string افزوده شود آن است که پیش شرط آن است کهزمان برنامه ریزی شده بین 0.0و.24باشد. همین مطلب در مورد زمان تخمینی صحیح است.نیاز است که آن نیز در این دامنه قرار گیرد. .24و0.0 اکنون زمان نوشتن بدنه تابع است. میخواهیم که بدنه این تابع را در دو مرحله مختلف بنویسیم. و سر انجام،کل ماجرا عمل میکند. برای شروع،باید بدانیم که چگونه بعضی از عبارات گاهی پردازش شده،ولی بعضی دیگر نشود. مثلا،میخواهیم که string سرموقع را تحویل دهیم. ولی نمیخواهیم که همیشه این طور شود تنها وقتی که زمان برنامه ریزی شده برابر با زمان تخمینی باشد. از عبارت if دار برای بیان مطلب استفاده میکنیم. این عبارت if دار شرط boolean را دارد که زمان برنامه ریزی شده برابر با زمان تخمینی باشد. و قصد داریم که این عبارت return را داخل بدنه چرخه if قرار دهیم. پس توجه داشته باشید که جلوآمدگی دارد،که این مطلب را نشان میدهد که،داخل عبارت if واقع میشود. روشی که این برنامه را میخوانیم این است که در صورتی که این زمان برنامه ریزی شده برابر با زمان تخمین زده شده باشد،در صورتی که آن عبارت منطقی درست باشد،آنگاه return در عبارت زمان پردازش میشود. در غیر این صورت،پردازش نمیشود،و ما با هر چه که این if را دنبال میکند ادامه میدهیم. این را ذخیره کرده و به جریان میاندازیم.پس وقتی که این تابع را فرامیخوانم،در shell با زمان های برابر وضعیت سر موقع را گزارش میکند. در صورتی که میتوانستم این تابع را در لحظه با یک زمان فراخوانم،جفت زمانها که برابر نیستند،هیچ چیزی تحویل نمیدهد. بخواهیم که دقیق تر باشیم،در واقع باید بگویم که شبیه به این است که چیزی تحویل نمیدهد. زیرا چیزی که توسط این تابع تحویل داده میشود،با اینکه هیچ عبارت return پردازش نشده است.این فراخوان تابع را چاپ کنیم. پس تابع فراخوانده میشود،هر مقداری که تحویل شود. و آن مقدار چاپ میشود.و میتوان دید که none چاپ میشود. وقتی که فراخوان تابعی پردازش میشود و هیچ عبارت return پردازش نشود،مقدار none  توسط تابع تحویل داده میشود.نوع none منحصر به خود none است نه string. بنابراین قرار تایپ را که برای گزارش وضع تابع تصریح کردیم ملغی میکند نیاز داریم که بقیه تابع را تکمیل کنیم تا اطمینان بدهد که قرار تایپ برقرار است. برگردیم به تعریف تابع. هم اکنون،یک عبارت if داریم و وقتی که این شرایط منطقی برقرار باشد، سر موقع تحویل میدهد.وقتی که شرط غلط در بیاید کار دیگری میخواهیم بکنیم. بنابراین کنترل میکنیم که اگر درست باشد،و میخواهیم که L را به جای else،و L if را برای کنترل شرط دومی. این بار قصد داریم که کنترل کنیم که آیا زمان برنامه ریزی شده بیش از زمان برنامه ریزی شده است یا نه. و وقتی که هست،زود را تحویل دهیم. و باید که دیکته آن مطابق با برنامه باشد.پس در این مرحله آن را به جریان اندازیم. و وقتی که این تابع را با زمانهای برابر فرامیخوانیم میگوید سر موقع. وقتی که آن را با زمان زودتری فرامیخوانیم،زود را گزارش میکند. اما هنوز،در این نقطه وقتی که آن را با زمانی دیرتر فرامیخوانیم none تحویل داده میشود.پس کارمان هنوز تمام نشده است. قصد داریم که قسمت سومی به عبارت if اضافه کنیم که عبارت else باشد. ٍElse بیان میدارد که اگر هیچ یک از شرایط یا عبارات مطرح شده درست نباشند،آنگاه این کار را بکن.بنابراین کنترل کرده ایم که آیا برابرند، بزرگتر است یا نه،و تنها چیزی که باقی میماند این است که زمان برنامه ریزی شده کمتر از زمان تخمینی است. در این موقعیت ،این تابع تاخیر را تحویل میدهد. پس میتوانیم که دوباره آن را به جریان اندازیم، همه شرایطمان را کنترل کنیم،وقتی که برابرند،وقتی که زودتر است،و وقتی که زمان تخمینی دیرتر است. اکنون گزارشهای مقتضی را داریم. میخواهم که چند جنبه عمومی عبارات if را توضیح بدهم. میتوانیم صفر یا بیشترL از عبارات if مرتبط با if داشته باشم و میتوانیم صفر یا بیشتر از عبارات else داشته باشیم،و else باید آخرین عبارت برای if باشد. وقتی که ما عبارت if با این عبارات متنوع را داریم،هر عبارتی را به ترتیب ارزیابی میکنیم. و برای اولین که درست ارزیابی یشود، بدنه آن،آن قسمت عبارت if پردازش میشود. بعد از آن که آن بدنه پردازش شود،عبارت if خاتمه مییابد. بنابراین خارج شده و روی برنامه ادامه مییابد که پایین آن میاید،بدون کنترل هیچ شرایط بیشتر.