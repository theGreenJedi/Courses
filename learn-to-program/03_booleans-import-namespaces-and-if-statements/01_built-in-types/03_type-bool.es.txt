Hola, esta clase es sobre valores
verdaderos y falsos. Conocidos como valores Booleans En esta clase exploraremos el
tipo Python bool y los operadores que podemos aplicar a
valores Booleans Anteriormente usamos operadores de aritmética de Python como multiplicación y substracción Y ahora usaremos algunos de los
operadores de comparación de Python Por ejemplo, comparemos los valores tres
y cuatro usando el operador menor que. Cuando esta expresión es evaluada nosotros
vamos a obtener un valor verdadero o falso. El tipo del valor que obtengamos es tipo
bool Ese es un buen par de tres con ocho.
Pregunstando sí tres es mayor que ocho. Y no lo es, así que el valor de esta
expresión evalúa a falso Cuando evalúas ocho mayor que
tres, obtenemos verdadero. Y si evalúamos tres punto cinco mayor o igual que tres punto cuatro. También es verdadero. Comparemos dos ints, siete, siete punto. Tome en cuenta que la operación que estamos
realizando es ahora una operación de igualdad Y, tenemos que usar dos símbolos igual, no
uno para indicar igualdad Eso es porque el símbolo sencillo de igualdad ya se
lo usa para la operación de asignación Siete es igual a siete.
Qué hay de siete y siete punto cero. Un oprando tipo int con un operando tipo float Esto es también verdadero. 
Asignemos unos cuantos valores de variables X recibe siete, Y recibe ocho, y ahora podemos aplicar el mismo operador de igualdad a
las dos operandos de variable. Primero, vemos el valor que hace referencia X, el cual es siete. y Y se refiere a ocho, y luego siete
es comparado con ocho. Otro operador es el
operador de desigualdad Puedes comprobar si tres no es igual a
cuatro y eso es verdadero Python también tiene tres operadores lógicos
que son operadores que aplican a los valores Booleans, y
dan resultados Booleans El primer operador lógico que vamos a usar
es un operador de negación, y vamos a empezar creando una variable grade, y le asignamos el valor de 80 Así la gradese refiere a 80. Ahora, escribamos una expresión que compruebe
para ver si grade es una nota para pasar Es grade igual que o mayor que 50? Y eso es verdadero. Aplicaremos el operador de negación a esa
expresión ahora. Así que vamos a comprobar para ver si grade no es mayor
que o igual a 50 El orden que esta expresión se evalúa
trabaja de adentro para afuera, así que grade es mayor que
o igual a 50 parte de la espresión es evaluada primero, y luego le da el valor
de verdadero Y luego el operador de negación es aplicado a
verdadero. Algo que no es verdadero es falso, y
ese es el resultado que obtenemos. Y puedes aplicar esto al operador de negación dos
veces en una línea. Diciendo que esto es preguntar si esto es
negado negado veradero, que es equivalente a solo decir, es la nota
mayor que o igual que 50 A continuación usaremos el operador and Primero, haremos otra variable llamada grade2, que se refiere al valor 70. Y, ahora escribiremos la expresión
involucrando ambas variables grade y grade2 Esta expresión comprobará para ver si
ambas son notas para pasar. Así es grade mayor que o igual a 50, grade2 también mayor que o igual a 50 y es grade2 también mayor que o igual
a 50 Y evalúa a verdadero si ambos operandos son
verdadero Así entonces, esta expresión se evalúa y
es también verdadero, haciendo este resultado entero un
verdadero resultado. Cambiemos el valor de la variable
grade por un momento y le asignamos 40 Volvermos a correr esta expresión Boolean
involucrando la y, y comprobando lo que obtenemos. Porque este primer operando es falso, la
expresiñon Boolean es falsa Y ni siquiera comprobaremos el
valor del segundo operando Ahora volvamos a asignar el valor 80 a grade, y 
esta vez cambiamos grade2 a una nota que no pasa Cuando esta expresión es evaluada, primero
esta parte de la expresión es evaluada Y esto es verdadero, así que proseguimos a evaluar esta parte de la expresión,
que es falsa Y así la expresión evalúa a falsa Para resumir, y de nuevo, solo evaluar
verdadero si ambos operandos son verdaderos De otra forma evaluará a falso Finalmente usemos el operador lógico
for el cual también aplica a los operandos do Empezaremos por asignar a grade en
grade2, dos grados que pasan Y ahora escribiremos la misma exprsión como
antes, reemplazando el and con un or Esta expresión evaluara a verdadera si
al menos uno de los operandos es verdadero Así en este caso obtenemos verdadero Ahora asignemos a grade una nota que no pase
y revaluemos la expresión Como yo evalúo la primera parte de esta expresión y determinamos que es
falsa Así que vamos a evaluar la segunda
parte de la expresión que es verdadera y porque al menos un operando es verdadero La expresión evalúa verdadera Si asignamos grade una nota que pase rade2 una nota que no pase, entonces cuando la expresión es evaluada trabajará
como sigue Porque grade es una nota que pasa, la
expresión es evaluada a verdadera en este punto, sin tener que ir a ver
el segundo operando Así para resumir un boo, el operador Boolean o evaluar verdaderos si al menos uno de estos operandos es verdadera y
evalúa como falsa de lo contrario Ahora combinemos los operadores en una expresión sencilla He asignado grade y gade2 notas que pasan 80 y 90 Y me gustaría evaluar esta expresión Y luego aplicar negación a grade mayor que
o igual a 50, o grade2 mayor que o igual a
50 Y hay un par de diferentes formas
que podemos interpretar esta expresión
dependiendo en la orden de precedencia Lo primero será tener el operador or aplicado Primero y usaré paréntesis para señalar
que, seguido del operador de negación. Lo segundo sería tener el operador
de negación aplicado primero a la primera parte de la expresión y luego el
operador or aplicarlo de segundo Así negación primero, seguido de or, o or primero seguido de negación Evaluemos la expresión y veamos
que pasa El valor que la expresión evalúa a
es veradadero Usemos paréntesis para ver cual de
los dos operadores aplica primero Empezaremos poniendo el paréntesis
alrededor de la parte or de la expresión Asegurando que or aplica antes que la negación.
Y cuando hagamos esto el resultado es falso. Así, eso no es lo que pasaba cuando dejamos fuera el paréntesis y eso significa que
ese no es no es el orden de precedencia En cambio, el orden de precedencia es que
la negación se aplica primero como lo puedo mostrar aquí. Seguido por or El orden de precedencia para los operadores lógicos
es negacíon o not y luego or. Y cuando trabajemos con operadores lógicos
múlitples dentro de una expresión, podemos usar paréntesis para
asegurar que las operaciones apliquen en el orden que queramos Sin tener que preocuparse sobre cual es el
orden de precedencia Así que usa paréntesis para hacer que el orden de operaciones ocurra en el orden que tu
quieres. A veces usaremos paréntesis para hacer una
expresión mas entendible Por ejemplo, en esta expresión, el
operador aritmético tiene mayor precedencia que el
operador Boolean o operadores lógicos Así estos paréntesis no son necesarios Pero los incluimos para [DESCONOCIDO] En cambio podíamos haber dejado fuera del
 paréntesis y tener lo siguiente Pero algunos de ustedes lo encontrarán un poco más difícil para
leer y entender