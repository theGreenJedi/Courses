1
00:00:02,310 --> 00:00:06,290
Hola, esta clase es sobre valores
verdaderos y falsos.

2
00:00:06,290 --> 00:00:08,900
Conocidos como valores Booleans

3
00:00:08,900 --> 00:00:11,700
En esta clase exploraremos el
tipo Python

4
00:00:11,700 --> 00:00:15,040
bool y los operadores que podemos aplicar a
valores Booleans

5
00:00:17,770 --> 00:00:19,810
Anteriormente usamos operadores de aritmética de Python 

6
00:00:19,810 --> 00:00:23,350
como multiplicación y substracción

7
00:00:23,350 --> 00:00:26,390
Y ahora usaremos algunos de los
operadores de comparación de Python

8
00:00:27,400 --> 00:00:32,830
Por ejemplo, comparemos los valores tres
y cuatro usando el operador menor que.

9
00:00:32,830 --> 00:00:35,560
Cuando esta expresión es evaluada nosotros
vamos

10
00:00:35,560 --> 00:00:37,720
a obtener un valor verdadero o falso.

11
00:00:38,810 --> 00:00:41,500
El tipo del valor que obtengamos es tipo
bool

12
00:00:42,700 --> 00:00:46,750
Ese es un buen par de tres con ocho.
Pregunstando sí tres es mayor que ocho.

13
00:00:46,750 --> 00:00:51,950
Y no lo es, así que el valor de esta
expresión evalúa a falso

14
00:00:51,950 --> 00:00:54,770
Cuando evalúas ocho mayor que
tres, obtenemos verdadero.

15
00:00:54,770 --> 00:00:57,343
Y si evalúamos tres punto

16
00:00:57,343 --> 00:01:01,400
cinco mayor o igual que tres punto cuatro.

17
00:01:01,400 --> 00:01:02,050
También es verdadero.

18
00:01:03,910 --> 00:01:07,560
Comparemos dos ints, siete, siete punto.

19
00:01:07,560 --> 00:01:13,100
Tome en cuenta que la operación que estamos
realizando es ahora una operación de igualdad

20
00:01:13,100 --> 00:01:18,440
Y, tenemos que usar dos símbolos igual, no
uno para indicar igualdad

21
00:01:18,440 --> 00:01:22,535
Eso es porque el símbolo sencillo de igualdad ya se
lo usa para la operación de asignación

22
00:01:22,535 --> 00:01:26,750
Siete es igual a siete.
Qué hay de siete y siete punto cero.

23
00:01:26,750 --> 00:01:31,730
Un oprando tipo int con un operando tipo float

24
00:01:32,880 --> 00:01:38,973
Esto es también verdadero. 
Asignemos unos cuantos valores de variables

25
00:01:38,973 --> 00:01:41,885
X recibe siete, Y recibe ocho, y ahora podemos

26
00:01:41,885 --> 00:01:47,530
aplicar el mismo operador de igualdad a
las dos operandos de variable.

27
00:01:47,530 --> 00:01:52,574
Primero, vemos el valor que hace referencia X, el cual es siete.

28
00:01:52,574 --> 00:01:57,710
 y Y se refiere a ocho, y luego siete
es comparado con ocho.

29
00:01:57,710 --> 00:02:00,310
Otro operador es el
operador de desigualdad

30
00:02:00,310 --> 00:02:04,490
Puedes comprobar si tres no es igual a
cuatro y eso es verdadero

31
00:02:08,550 --> 00:02:11,942
Python también tiene tres operadores lógicos
que son operadores

32
00:02:11,942 --> 00:02:16,400
que aplican a los valores Booleans, y
dan resultados Booleans

33
00:02:16,400 --> 00:02:20,140
El primer operador lógico que vamos a usar
es un operador de negación, y

34
00:02:20,140 --> 00:02:24,560
vamos a empezar creando una variable grade, y le asignamos el valor de 80

35
00:02:24,560 --> 00:02:26,460
Así la gradese refiere a 80.

36
00:02:26,460 --> 00:02:29,260
Ahora, escribamos una expresión que compruebe
para

37
00:02:29,260 --> 00:02:32,180
ver si grade es una nota para pasar

38
00:02:32,180 --> 00:02:33,767
Es grade igual que o mayor

39
00:02:33,767 --> 00:02:35,630
que 50? Y eso es verdadero.

40
00:02:36,710 --> 00:02:40,665
Aplicaremos el operador de negación a esa
expresión ahora. Así que vamos

41
00:02:40,665 --> 00:02:44,240
a comprobar para ver si grade no es mayor
que o igual a 50

42
00:02:44,240 --> 00:02:47,807
El orden que esta expresión se evalúa
trabaja

43
00:02:47,807 --> 00:02:51,113
de adentro para afuera, así que grade es mayor que
o

44
00:02:51,113 --> 00:02:53,897
igual a 50 parte de la espresión es

45
00:02:53,897 --> 00:02:58,650
evaluada primero, y luego le da el valor
de verdadero

46
00:02:58,650 --> 00:03:01,580
Y luego el operador de negación es aplicado a
verdadero.

47
00:03:01,580 --> 00:03:05,520
Algo que no es verdadero es falso, y
ese es el resultado que obtenemos.

48
00:03:05,520 --> 00:03:11,200
Y puedes aplicar esto al operador de negación dos
veces en una línea.

49
00:03:12,410 --> 00:03:16,258
Diciendo que esto es preguntar si esto es
negado negado veradero, que

50
00:03:16,258 --> 00:03:20,725
es equivalente a solo decir, es la nota
mayor que o igual que 50

51
00:03:23,710 --> 00:03:26,490
A continuación usaremos el operador and

52
00:03:26,490 --> 00:03:31,530
Primero, haremos otra variable llamada grade2, que se refiere al valor 70.

53
00:03:31,530 --> 00:03:35,520
Y, ahora escribiremos la expresión
involucrando ambas variables grade y grade2 

54
00:03:35,520 --> 00:03:41,000
Esta expresión comprobará para ver si
ambas son notas para pasar.

55
00:03:41,000 --> 00:03:44,745
Así es grade mayor que o igual a 50,

56
00:03:44,745 --> 00:03:49,290
 grade2 también mayor que o igual a 50

57
00:03:49,290 --> 00:03:54,750
y es grade2 también mayor que o igual
a 50

58
00:03:54,750 --> 00:04:00,720
Y evalúa a verdadero si ambos operandos son
verdadero

59
00:04:00,720 --> 00:04:04,400
Así entonces, esta expresión se evalúa y
es

60
00:04:04,400 --> 00:04:08,570
también verdadero, haciendo este resultado entero un
verdadero resultado.

61
00:04:08,570 --> 00:04:14,450
Cambiemos el valor de la variable
grade por un momento y le asignamos

62
00:04:14,450 --> 00:04:15,346
40

63
00:04:15,346 --> 00:04:19,350
Volvermos a correr esta expresión Boolean
involucrando la

64
00:04:19,350 --> 00:04:21,990
y, y comprobando lo que obtenemos.

65
00:04:23,160 --> 00:04:29,660
Porque este primer operando es falso, la
expresiñon Boolean es falsa

66
00:04:29,660 --> 00:04:32,340
Y ni siquiera comprobaremos el
valor del segundo operando

67
00:04:33,660 --> 00:04:39,900
Ahora volvamos a asignar el valor 80 a grade, y 
esta vez cambiamos grade2 a una nota que no pasa

68
00:04:41,130 --> 00:04:46,950
Cuando esta expresión es evaluada, primero
esta parte de la expresión es evaluada

69
00:04:46,950 --> 00:04:48,882
Y esto es verdadero, así que proseguimos a

70
00:04:48,882 --> 00:04:52,560
evaluar esta parte de la expresión,
que es falsa

71
00:04:52,560 --> 00:04:54,350
Y así la expresión evalúa a falsa

72
00:04:56,990 --> 00:05:03,980
Para resumir, y de nuevo, solo evaluar
verdadero si ambos operandos son verdaderos

73
00:05:03,980 --> 00:05:05,230
De otra forma evaluará a falso

74
00:05:07,860 --> 00:05:14,180
Finalmente usemos el operador lógico
for el cual también aplica a los operandos do

75
00:05:14,180 --> 00:05:20,090
Empezaremos por asignar a grade en
grade2, dos grados que pasan

76
00:05:20,090 --> 00:05:25,400
Y ahora escribiremos la misma exprsión como
antes, reemplazando el and con un or

77
00:05:26,550 --> 00:05:31,400
Esta expresión evaluara a verdadera si
al menos uno de los operandos es verdadero

78
00:05:32,540 --> 00:05:33,116
Así en este

79
00:05:33,116 --> 00:05:35,220
caso obtenemos verdadero

80
00:05:35,220 --> 00:05:40,300
Ahora asignemos a grade una nota que no pase
y revaluemos la expresión

81
00:05:40,300 --> 00:05:42,444
Como yo evalúo la primera parte

82
00:05:42,444 --> 00:05:46,180
de esta expresión y determinamos que es
falsa

83
00:05:46,180 --> 00:05:49,100
Así que vamos a evaluar la segunda
parte de la

84
00:05:49,100 --> 00:05:53,670
expresión que es verdadera y porque al menos un operando es verdadero

85
00:05:53,670 --> 00:05:55,190
La expresión evalúa verdadera

86
00:05:56,210 --> 00:05:58,366
Si asignamos grade una nota que pase

87
00:05:58,366 --> 00:06:01,894
rade2 una nota que no pase, entonces

88
00:06:01,894 --> 00:06:06,490
cuando la expresión es evaluada trabajará
como sigue

89
00:06:06,490 --> 00:06:11,248
Porque grade es una nota que pasa, la
expresión es evaluada a verdadera en

90
00:06:11,248 --> 00:06:16,010
este punto, sin tener que ir a ver
el segundo operando

91
00:06:18,110 --> 00:06:23,390
Así para resumir un boo, el operador Boolean o evaluar verdaderos si al   

92
00:06:23,390 --> 00:06:28,600
menos uno de estos operandos es verdadera y
evalúa como falsa de lo contrario

93
00:06:31,740 --> 00:06:35,470
Ahora combinemos los operadores en una expresión sencilla

94
00:06:35,470 --> 00:06:40,130
He asignado grade y gade2 notas que pasan 80 y 90

95
00:06:40,130 --> 00:06:42,615
Y me gustaría evaluar esta expresión

96
00:06:42,615 --> 00:06:46,185
Y luego aplicar negación a grade mayor que
o igual

97
00:06:46,185 --> 00:06:49,915
a 50, o grade2 mayor que o igual a
50

98
00:06:49,915 --> 00:06:51,839
Y hay un par de diferentes formas
que

99
00:06:51,839 --> 00:06:54,962
podemos interpretar esta expresión
dependiendo en la orden de precedencia

100
00:06:54,962 --> 00:06:56,860
Lo primero será tener el

101
00:06:56,860 --> 00:06:58,134
operador or aplicado

102
00:06:58,134 --> 00:07:03,280
Primero y usaré paréntesis para señalar
que, seguido del operador de negación.

103
00:07:03,280 --> 00:07:07,592
Lo segundo sería tener el operador
de negación aplicado primero a la primera

104
00:07:07,592 --> 00:07:12,160
parte de la expresión y luego el
operador or aplicarlo de segundo

105
00:07:12,160 --> 00:07:18,330
Así negación primero, seguido de or, o or primero seguido de negación

106
00:07:21,090 --> 00:07:23,640
Evaluemos la expresión y veamos
que pasa

107
00:07:28,450 --> 00:07:32,220
El valor que la expresión evalúa a
es veradadero

108
00:07:32,220 --> 00:07:36,470
Usemos paréntesis para ver cual de
los dos operadores aplica primero

109
00:07:38,040 --> 00:07:43,360
Empezaremos poniendo el paréntesis
alrededor de la parte or de la expresión

110
00:07:43,360 --> 00:07:48,990
Asegurando que or aplica antes que la negación.
Y cuando hagamos esto el resultado es falso.

111
00:07:48,990 --> 00:07:51,150
Así, eso no es lo que pasaba cuando dejamos

112
00:07:51,150 --> 00:07:53,550
fuera el paréntesis y eso significa que
ese no es

113
00:07:53,550 --> 00:07:55,610
no es el orden de precedencia

114
00:07:55,610 --> 00:08:02,060
En cambio, el orden de precedencia es que
la negación se aplica primero como lo puedo mostrar aquí.

115
00:08:02,060 --> 00:08:03,120
Seguido por or

116
00:08:03,120 --> 00:08:10,460
El orden de precedencia para los operadores lógicos
es negacíon o not y luego or.

117
00:08:10,460 --> 00:08:14,604
Y cuando trabajemos con operadores lógicos
múlitples dentro de una

118
00:08:14,604 --> 00:08:18,748
expresión, podemos usar paréntesis para
asegurar que las operaciones

119
00:08:18,748 --> 00:08:21,480
apliquen en el orden que queramos

120
00:08:21,480 --> 00:08:24,480
Sin tener que preocuparse sobre cual es el
orden de precedencia 

121
00:08:24,480 --> 00:08:26,368
Así que usa paréntesis para hacer que el orden de

122
00:08:26,368 --> 00:08:28,620
operaciones ocurra en el orden que tu
quieres.

123
00:08:30,310 --> 00:08:33,910
A veces usaremos paréntesis para hacer una
expresión mas entendible

124
00:08:33,910 --> 00:08:37,886
Por ejemplo, en esta expresión, el
operador aritmético tiene

125
00:08:37,886 --> 00:08:42,480
mayor precedencia que el
operador Boolean o operadores lógicos

126
00:08:42,480 --> 00:08:45,560
Así estos paréntesis no son necesarios

127
00:08:45,560 --> 00:08:46,548
Pero los incluimos para

128
00:08:46,548 --> 00:08:47,030
[DESCONOCIDO] 

129
00:08:47,030 --> 00:08:52,950
En cambio podíamos haber dejado fuera del
 paréntesis y tener lo siguiente

130
00:08:52,950 --> 00:08:55,480
Pero algunos de ustedes lo encontrarán un poco más difícil para
leer y entender