1
00:00:01,360 --> 00:00:03,432
در این ویدئو میخواهیم تحقیق کنیم که

2
00:00:03,432 --> 00:00:05,616
متغیرها درست میشوند،چه مدت در

3
00:00:05,616 --> 00:00:08,192
در حافظه کامپیوتر باقی میمانند،و وقتی که دو متغیر

4
00:00:08,192 --> 00:00:10,580
یک نام دارند و دو تابع مختلف.

5
00:00:13,020 --> 00:00:15,026
اینجا توابع convert to minutes

6
00:00:15,026 --> 00:00:18,910
که در درس تجسم تابع در موردش تحقیق کردیم.

7
00:00:18,910 --> 00:00:21,694
تابع convert to seconds که 

8
00:00:21,694 --> 00:00:24,310
تعداد ساعات را به ثانیه تبدیل میکند.

9
00:00:25,480 --> 00:00:28,146
برای تبدیل به ثانیه با فراخوانی convert to minutes  

10
00:00:28,146 --> 00:00:30,960
و آنگاه ضرب کردن نتیجه در 60 عمل میکنیم.

11
00:00:30,960 --> 00:00:33,330
برای تحقیق از مجسم ساز استفاده میکنیم.

12
00:00:35,190 --> 00:00:38,115
به سرعت به تعاریف تابع رجوع میکنیم که

13
00:00:38,115 --> 00:00:41,534
سوژه های تابع به وجود آیند.convert to minutes برای

14
00:00:41,534 --> 00:00:41,926
[معلوم نشد]

15
00:00:41,926 --> 00:00:45,590
یکی از این سوژه های تابع،و برای اولین تبدیل ثانیه به دیگر.

16
00:00:46,960 --> 00:00:49,990
اکنون در مرحله پردازش عبارت تکلیفی هستیم.

17
00:00:49,990 --> 00:00:54,310
اولین قدم ارزیابی سمت راست که فراخوان تابع هست میباشد.

18
00:00:54,310 --> 00:00:58,570
پایتون اول کار مولفه را ارزیابی کرده و برای آن مقدار سوژه ای را به وجود میاورد.

19
00:00:58,570 --> 00:01:00,793
آنگاه،ifound چارچوبی را در call stack به وجود میاورد

20
00:01:00,793 --> 00:01:03,415
و آدرس های حافظه دو پارامتر را ذخیره میکند،

21
00:01:03,415 --> 00:01:04,480
[قابل شنیدن نیست]

22
00:01:04,480 --> 00:01:10,830
محض یادآوری،این ناحیه call stack خوانده میشود.

23
00:01:10,830 --> 00:01:14,140
به صورت دسته چارچوب های واژگون نشان داده شده است.

24
00:01:14,140 --> 00:01:18,340
در جریان پردازش فراخوانی تابع stack frame ایجاد میشود.

25
00:01:18,340 --> 00:01:21,690
وقتی که تابع خارج میشود stack frame جاری حذف میشود.

26
00:01:21,690 --> 00:01:24,310
و پردازش تابع قبلی ادامه مییابد.

27
00:01:25,960 --> 00:01:26,968
اولین سطر در بدنه

28
00:01:26,968 --> 00:01:30,190
convert_to_seconds عبارت تکلیفی دیگری است.

29
00:01:30,190 --> 00:01:32,580
سمت راست فراخوان تابع است.

30
00:01:32,580 --> 00:01:35,532
قوانین همیشگی را دنبال کرده،

31
00:01:35,532 --> 00:01:40,140
مولفه را ارزیابی کنید،nun_hours که آدرس حافظه مقدار دو را دارد.

32
00:01:40,140 --> 00:01:43,444
آنگاه،شکل stack برای فراخوان convert_to_minutes ایجاد میشود،

33
00:01:43,444 --> 00:01:47,250
و پارامتر آن،mem_hours،آدرس حافظه آن مقدار را دارد.

34
00:01:48,800 --> 00:01:51,750
دو متغیر به نام mem_hours هست.

35
00:01:51,750 --> 00:01:55,234
یکی از آنها برای فراخوان convert_to_minutes در چارچوب است،و یکی از آنها

36
00:01:55,234 --> 00:01:58,310
برای فراخوان convert_to_secondدر چارچوب است.

37
00:01:58,310 --> 00:02:01,848
پایتون این دو تابع در جریان را در مناطق جداگانه ای از حافظه نگه میدارد

38
00:02:01,848 --> 00:02:04,810
بنابراین دودل نمیشود که از کدام متغیر استفاده کند.

39
00:02:06,890 --> 00:02:09,330
برگردیم به ردیابی پردازش.

40
00:02:09,330 --> 00:02:13,250
اولین سطر در بدنه convert the minutes یک وضعیت تکلیفی است.

41
00:02:13,250 --> 00:02:17,210
سمت راست عبارت x 60 است.

42
00:02:17,210 --> 00:02:18,840
از کدام num_hours استفاده میکنیم؟

43
00:02:19,840 --> 00:02:22,434
جواب این است که پایتون در stack frame جاری نظر میکند.

44
00:02:22,434 --> 00:02:27,890
num_hours به دو عدد 60و120 برمیگردد

45
00:02:27,890 --> 00:02:32,378
دومین قدم تکلیف تعیین120 است برای

46
00:02:32,378 --> 00:02:35,320
متغیر minuites.

47
00:02:35,320 --> 00:02:40,100
اگر minutes در stack frame جاری وجود نداشته باشد آنگاه ایجاد میشود.

48
00:02:43,530 --> 00:02:46,670
هر stack frame مجموعه متغیرهای خودش را دارد.

49
00:02:46,670 --> 00:02:51,150
در چارچوب convert to minutes متغیرهای num hoursو minutes وجود دارند.

50
00:02:51,150 --> 00:02:54,860
چارچوب برای convert to seconds در حال حاضر تنها متغیر num hours را دارد.

51
00:02:54,860 --> 00:03:00,090
گرچه، بعد از پایان پردازش،هم minutes و هم seconds را خواهد داشت.

52
00:03:00,090 --> 00:03:01,516
stack frame برای برنامه اصلی

53
00:03:01,516 --> 00:03:05,520
در حال حاضر دارای convert_to_minutes وconvert_to_seconds است.

54
00:03:05,520 --> 00:03:08,640
گر چه با عبارت تکلیفی سطر 20 پردازش انجام یافته است،

55
00:03:08,640 --> 00:03:11,410
متغیر seconds آنجا وجود دارد.

56
00:03:13,090 --> 00:03:14,740
اکنون در مرحله ای قرار داریم که مقدار 

57
00:03:14,740 --> 00:03:17,780
متغیر minutes را تحویل داده و از تابع جاری خارج شویم.

58
00:03:17,780 --> 00:03:20,160
ولی به کجا برمیگردیم؟

59
00:03:20,160 --> 00:03:23,730
پاسخ همیشه این است که،به چارچوب بعدی در call stack.

60
00:03:23,730 --> 00:03:28,120
stack frame جاری در جریان فراخوانی convert_to_minutes ایجاد میشود.

61
00:03:28,120 --> 00:03:30,892
وقتی این فراخوانی کامل شود،stack frame جاری

62
00:03:30,892 --> 00:03:33,790
پاک میشود و پایتون مقدار تحویلیش 

63
00:03:33,790 --> 00:03:36,010
مقدار این تابع عبارت فراخوان شده است.

64
00:03:37,670 --> 00:03:40,270
این فراخوان در سمت راست عبارت تکلیفی است.

65
00:03:40,270 --> 00:03:43,966
برای تکمیل متغیر تکلیفی  minutes ایجاد میشود،و

66
00:03:43,966 --> 00:03:47,280
پایتون آدرس حافظه مقدار تحویلی را ذخیره خواهد کرد.

67
00:03:49,090 --> 00:03:50,090
تماشا کنیم که چگونه پیش میرود.

68
00:03:52,160 --> 00:03:53,900
توجه کنید که چارچوب convert to minutes

69
00:03:53,900 --> 00:03:56,394
حذف شده است،و متغیر minutes 

70
00:03:56,394 --> 00:03:58,192
در چارچوب برای convert to seconds ایجاد شده است.

71
00:03:58,192 --> 00:04:02,420
اینجا عبارت تکلیفی دیگری داریم.

72
00:04:02,420 --> 00:04:08,500
سمت راست،minutes ضربدر 60،میشود120 ضربدر 60.

73
00:04:08,500 --> 00:04:10,757
و متغیر جدید seconds درست میشود،

74
00:04:10,757 --> 00:04:13,330
و آدرس حافظه مقدار جدید را دارد.

75
00:04:14,850 --> 00:04:17,137
بعد seconds را تحویل میدهیم،

76
00:04:17,137 --> 00:04:20,837
seconds 7200 است و این مقداری است که

77
00:04:20,837 --> 00:04:24,328
با فراخواندن convert to seconds در سطر 20 درست میشود.

78
00:04:24,328 --> 00:04:30,944
[BLANK_AUDIO]