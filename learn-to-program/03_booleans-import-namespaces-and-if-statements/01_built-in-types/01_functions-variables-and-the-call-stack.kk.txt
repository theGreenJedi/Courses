Осы видеода біз айнымалы пайда болған кезде, олар қанша уақыт компьютер жадында сақталатынын, сонымен қатар екі айнымалы бірдей аталып, әртүрлі . функция болса калай болатынын көреміз Мұнда біз минутқа ауыстыру функцияларын көріп отырмыз, оны біз функцияны бақылау дәрісінде зерттеген едік. Біз секундқа айналдыру функциясын қостық, ол сағаттар санын сәйкесінше секундқа айналдырады. Секундқа айналдыру өз жұмысын минутқа айналдыруды шақырту арқылы жүзеге асырады да нәтижесін 60қа көбейтеді. Осыны зерттеу үшін көрінітеушіні қолданалық. Біз жылдам функцияны анықтаудан өтіп, функция объектісін құрамыз. [Белгісіз] Минутқа айналдыру 
сол объектіліердің бірі үшін, және
секундтарды бірінші үшін қалғандарын. Енді біз айнымалы операторын жүзеге асырмақпыз. Ең біріншіден, оң қол жақты, яғни ол бізде функцияны шақырту, есептейміз. Питон ең алғашқыда аргументті есептеп, сол мән үшін объект жасайды. Содан соң шақырту тізбегінде аймақ жасайды, және параметрдегі екінің жады ұяшығын сақтайды [ДАУЫССЫЗ]. Еске салу үшін, бұл аймақ шақырту тізбегі деп аталады. Ол ұзартылған тізбек аймағы ретінде көрсетілген. Функцияны шақыртуды  жүзеге асыру барысында жаңа тізбек аймағы пайда болады. Функция жабылған сәтте, сол тізбек аймағы жойылады. Ал алдынғы функцияның орындалуы жүзеге аса береді. convert_to_seconds функциясының негізіндегі бірінші жолақ келесі бір меншіктеу операторы. Оң қол жағы функцияны шақырту. Біз әдеттегідей бірдей ережені ұстанамыз, аргументті есептеу, ол екі мәнінің жады ұяшығынан тұрады. Содан соң, ізбек пішіні шақырту үшін пайда болып, оның параметрі сол мәннің жады ұяшығын сақтайды. mem_hours деп аталатын екә айнымалы бар. Солардың бірі convert_to_minutes шақыртуы аймағында, ал екіншісі convert_to_seconds шақыртуының аймағында. Питон осы екі қоланылып отырған функцияларды жадынынң түрлі аймақтарында сақтап, оның қайсы айнымалымен жұмыс істеп отырғанын шатастырмауын қамтамассыз етеді. Орындалуды бақылауға қайта оралайық. Минуттарды айналдыру негізінің бірінші жолағы меншіктеуші оператор болып табылады. Оң қол жақта бізде x 60 көбейтілуші бар. Қайсы num_hours біз қолданамыз? Жауабын python ағымдағы тізбек аймағынан іздейді. Сан_сағаты екіге қатыста, яғни сан_сағаты түрі 60 есептеледі 120. Меншіктеудің екінші қадамы 120ны айнымалы минутына меншіктеу. Егер сол ағымдағы тізбек аймағында минуттар жоқ болса, ол оны құрады. Әрбір тізбек аймағы өзінің айнымалылар қатарыннан тұрады. Минуттарға айналдыру аймағында айнымалылар, сан сағаттар және минуттар бар. Секундтарға айналдыру аймағында қазір тек сан сағаттар айнымалысы ғана бар. Осы үрдістің соғына қарай ол минуттар мен секундтарды ды иеленеді. Басты программа .шін тізбек айнымалысында минутқа ауыстыру мен секундқа ауыстыру бар. Осы үрдістің со4ына қарай ол 20 минуттар мен секундтардыды иеленеді. секундтар айнымалысы осында болады. Енді біз минут айнымалысының мәніне қайта оралмақпыз, және қолданыстағы фукнциядан шығамыз. Ал олай болса біз қайда ораламыз? Мұнда әрдайым бір ғана жауап – шақыру тізбегіндегі келесі аймаққа ораламыз. Қолданыстағы тізбек аймағы осы минутқа ауыстыру кезінде пайда болды, Осы шақырту аяқталған кезде, ағымдағы тізбек аймағы жойылады да, Python қайта оралу мәнін осы функцияшақырту мәні ретінде құрады. Бұл шақырту меншіктеу операторының оң қол жағында. Осы меншіктеу операторын аяқтау үшін минуттар пайда болады, және Питон қайта оралу мәнінің жады ұяшығын сақтайды. Ал енді не боларын байқайық. Минутқа айыстыру аймағын жойып жібергенімізді естен шығармаңыз, минуттар айнымалысы секундқа ауыстыру аймағында пайда болды. Осы жерде бізе келесі бір меншіктеу операторы бар. Осы жерде бізе келесі бір меншіктеу операторы бар. Оң қол жақта минуттар 60қа көбейтіледі, 
ол 120ны 60қа көбейту мәнін есептейді. Жаңа айнымалы секундтары пайда болады, сәйкесінше сол жаңа жады ұяшығын құрайды. Келесіде біз секундтарды қайтарамыз. Секундтар 7,200 қатысты,  сонымен ол мән секундқа айналдыру 20ша жолақтағы шақыртуы пайда болады. [БОС_ДАУЫС]