1
00:00:00,000 --> 00:00:06,069
The three types you've seen so far are
interster and float, turns out you can

2
00:00:06,069 --> 00:00:14,037
convert between them as follows.
I'm going to take the number three and I'm

3
00:00:14,037 --> 00:00:20,091
going to call something called sturd, that
gives me back a string of length one

4
00:00:20,091 --> 00:00:26,004
contained in the letter three, I can
assign this to a variable.

5
00:00:26,004 --> 00:00:30,017
Three is the string contained in the
letter three.

6
00:00:31,001 --> 00:00:35,092
Since it's a string, I can multiply it by
whatever I like.

7
00:00:35,092 --> 00:00:42,072
Let's make 77 3's, just for the fun of it.
As you might guess, I can go the other

8
00:00:42,072 --> 00:00:46,077
direction.
If I have five copies of this string

9
00:00:46,077 --> 00:00:50,047
three.
In other words, a string of link five

10
00:00:50,047 --> 00:00:56,015
containing five letter 3's.
Then, I can take that and I can turn it

11
00:00:56,015 --> 00:00:58,081
into an int.
There we go, 33,333.

12
00:00:58,081 --> 00:01:04,050
I can even use the result of that and
convert it back to a string.

13
00:01:04,050 --> 00:01:11,081
Giving me what I would have gotten if I
had just multiplied three by five.

14
00:01:11,081 --> 00:01:18,067
I can also convert floats to strings.
If I use INT on a string containing

15
00:01:18,067 --> 00:01:26,025
several digits, then I can get back that
integer by extracting that value from the

16
00:01:26,025 --> 00:01:27,085
string.
I can also.

17
00:01:28,012 --> 00:01:33,038
Do the same thing with a float.
Notice that I gave float a string

18
00:01:33,038 --> 00:01:40,018
containing letters that form an int and it
turned that into a floating point number.

19
00:01:41,048 --> 00:01:47,044
I have to be a little bit careful if I
call int on a string that has things other

20
00:01:47,044 --> 00:01:51,030
than digits in it, I'm actually going to
get an error.

21
00:01:51,030 --> 00:01:57,005
Here, forever all I'm going to get is a
value ever, invalid literal for int with

22
00:01:57,005 --> 00:02:02,000
base ten, I have seven apples.
That's just announcing that Python was

23
00:02:02,000 --> 00:02:09,436
unable to do the conversion.
A motivation for one thing is, this is

24
00:02:09,436 --> 00:02:15,060
that, if I call input, say, tell me the
number of shoes.

25
00:02:15,060 --> 00:02:22,025
And the user types, say, 863 shoes is the
number they want.

26
00:02:22,025 --> 00:02:33,073
I get back a string if my shoe store has
only 627 shoes left then I can't right now

27
00:02:33,073 --> 00:02:46,306
compare the string 863 to the number 627.
The solution here is to take the result of

28
00:02:46,306 --> 00:02:52,006
what the user types and turn it into an
int.

29
00:02:55,063 --> 00:03:02,097
Save it in a variable and now I can do my
comparison.

30
00:03:02,097 --> 00:03:11,028
Are there enough shoes left in order to
satisfy my customer?

31
00:03:12,027 --> 00:03:13,082
And the answer is no.