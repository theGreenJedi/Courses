1
00:00:02,310 --> 00:00:06,290
Hi, this lecture is all about true and
false values.

2
00:00:06,290 --> 00:00:08,900
Also known as Boolean values.

3
00:00:08,900 --> 00:00:11,700
In this lecture we will explore the
Pythons type

4
00:00:11,700 --> 00:00:15,040
bool and operators that we can apply to
Boolean values.

5
00:00:17,770 --> 00:00:19,810
Earlier we used Pythons arithmetic

6
00:00:19,810 --> 00:00:23,350
operators like multiplication and
subtraction

7
00:00:23,350 --> 00:00:26,390
And now we're going to use some of
Python's comparison operators.

8
00:00:27,400 --> 00:00:32,830
For example, let's compare values three
and four using the less than operator.

9
00:00:32,830 --> 00:00:35,560
When this expression is evaluated we're
going to

10
00:00:35,560 --> 00:00:37,720
get our true value or false value back.

11
00:00:38,810 --> 00:00:41,500
The type of value that we get is type
bool.

12
00:00:42,700 --> 00:00:46,750
That's a good pair of three with eight.
Asking you if three is greater then eight.

13
00:00:46,750 --> 00:00:51,950
And it's not so the value that this
expression evaluates to is false.

14
00:00:51,950 --> 00:00:54,770
When you evaluate eight greater then
three, we get true.

15
00:00:54,770 --> 00:00:57,343
And if we were to evaluate three point

16
00:00:57,343 --> 00:01:01,400
five greater then or equal to three point
four.

17
00:01:01,400 --> 00:01:02,050
It's also true.

18
00:01:03,910 --> 00:01:07,560
Let's compare two ints, seven, seven.

19
00:01:07,560 --> 00:01:13,100
Notice that the operation that we're
performing now is the equality operation.

20
00:01:13,100 --> 00:01:18,440
And, we need to use two equal signs, not
one to signify equality.

21
00:01:18,440 --> 00:01:22,535
That's because the single equals sign is
already used for the assignment operation.

22
00:01:22,535 --> 00:01:26,750
Seven is equal to seven.
How about seven and seven point zero.

23
00:01:26,750 --> 00:01:31,730
A type int operand with a type float
operand.

24
00:01:32,880 --> 00:01:38,973
This is also true.
Let's assign a couple of variable values.

25
00:01:38,973 --> 00:01:41,885
X gets seven, Y gets eight, and now we

26
00:01:41,885 --> 00:01:47,530
can apply the same equality operator to
two variable operands.

27
00:01:47,530 --> 00:01:52,574
First, we look up the value that X refers
to, which is seven,

28
00:01:52,574 --> 00:01:57,710
and Y refers to eight, and then seven is
compared with eight.

29
00:01:57,710 --> 00:02:00,310
Another operator's the inequality
operator.

30
00:02:00,310 --> 00:02:04,490
You can check whether three is not equal
to four, and that's True.

31
00:02:08,550 --> 00:02:11,942
Python also has three logical operators,
which are operators

32
00:02:11,942 --> 00:02:16,400
that are applied to Boolean values, and
yield Boolean results.

33
00:02:16,400 --> 00:02:20,140
The first logical operator that we'll use
is a not operator, and

34
00:02:20,140 --> 00:02:24,560
we'll begin by creating a variable grade,
and assigning it the value 80.

35
00:02:24,560 --> 00:02:26,460
So grade refers to 80.

36
00:02:26,460 --> 00:02:29,260
Now, let's write an expression that checks
to

37
00:02:29,260 --> 00:02:32,180
see whether the grade is a passing grade.

38
00:02:32,180 --> 00:02:33,767
Is grade equal to or greater

39
00:02:33,767 --> 00:02:35,630
than 50?
And that's true.

40
00:02:36,710 --> 00:02:40,665
We'll apply the not operator to that
expression now So we're going to

41
00:02:40,665 --> 00:02:44,240
check to see whether grade is not greater
than or equal to 50.

42
00:02:44,240 --> 00:02:47,807
The order that this expression is valuated
works

43
00:02:47,807 --> 00:02:51,113
from inside out, so the grade greater than
or

44
00:02:51,113 --> 00:02:53,897
equal to 50 part of the expression is

45
00:02:53,897 --> 00:02:58,650
evaluated first, and that gives the value
of true.

46
00:02:58,650 --> 00:03:01,580
And then the not operator is applied to
True.

47
00:03:01,580 --> 00:03:05,520
Something that is not True is False, and
that's the result that we get back.

48
00:03:05,520 --> 00:03:11,200
And you can apply this not operator two
times in a row.

49
00:03:12,410 --> 00:03:16,258
Saying that this is asking whether this is
not not true, which

50
00:03:16,258 --> 00:03:20,725
is equivalent to just saying, is grade
greater than or equal to 50.

51
00:03:23,710 --> 00:03:26,490
Next let's use the and operator.

52
00:03:26,490 --> 00:03:31,530
First, we'll make another variable named
grade2 that refers to the value 70.

53
00:03:31,530 --> 00:03:35,520
And, now we'll write an expression
involving both variables grade and grade2.

54
00:03:35,520 --> 00:03:41,000
This expression will check to see whether
both of these are passing grades.

55
00:03:41,000 --> 00:03:44,745
So is grade greater than or equal to 50,

56
00:03:44,745 --> 00:03:49,290
and is grade2 also greater than or equal
to 50.

57
00:03:49,290 --> 00:03:54,750
And evaluates to true if both operands are
true.

58
00:03:54,750 --> 00:04:00,720
So first, this expression is evaluated,
and it is true.

59
00:04:00,720 --> 00:04:04,400
So then, this expression is evaluated and
it is

60
00:04:04,400 --> 00:04:08,570
also true, making this entire result a
true result.

61
00:04:08,570 --> 00:04:14,450
Let's change the value of the variable
grade for a moment and set it

62
00:04:14,450 --> 00:04:15,346
to 40.

63
00:04:15,346 --> 00:04:19,350
We'll rerun this Boolean expression
involving the

64
00:04:19,350 --> 00:04:21,990
and, and check to see what we get.

65
00:04:23,160 --> 00:04:29,660
Because this first operand is false, the
Boolean expression is false.

66
00:04:29,660 --> 00:04:32,340
And we don't even go on to check the
second operands value.

67
00:04:33,660 --> 00:04:39,900
Now let's set grade back to 80, and this
time change grade2 to be a failing grade.

68
00:04:41,130 --> 00:04:46,950
When this expression is evaluated, first
this part of the expression is evaluated.

69
00:04:46,950 --> 00:04:48,882
And that's true, so we move on to

70
00:04:48,882 --> 00:04:52,560
evaluate this part of the expression,
which is false.

71
00:04:52,560 --> 00:04:54,350
And so the expression evaluates to false.

72
00:04:56,990 --> 00:05:03,980
To summarize, and again, only evaluates
true if both of its operands are true.

73
00:05:03,980 --> 00:05:05,230
Otherwise it evaluates to false.

74
00:05:07,860 --> 00:05:14,180
Finally, let's use the logical operator
four which also applies to do operands.

75
00:05:14,180 --> 00:05:20,090
We'll start by assigning to the grade in
grade2, two passing grades.

76
00:05:20,090 --> 00:05:25,400
And now we'll write the same expression as
before, replacing the and with an or.

77
00:05:26,550 --> 00:05:31,400
This expression will evaluate to true if
at least one of the operands in true.

78
00:05:32,540 --> 00:05:33,116
So in this

79
00:05:33,116 --> 00:05:35,220
case, we get true.

80
00:05:35,220 --> 00:05:40,300
Now let's assign to grade a failing grade
and reevaluate the expression.

81
00:05:40,300 --> 00:05:42,444
As I will first evaluate the first part

82
00:05:42,444 --> 00:05:46,180
of this expression and determine that it
is false.

83
00:05:46,180 --> 00:05:49,100
So we will go on to evaluate the second
part of the

84
00:05:49,100 --> 00:05:53,670
expression which is true and because at
least one operand is true.

85
00:05:53,670 --> 00:05:55,190
The expression evaluates to true.

86
00:05:56,210 --> 00:05:58,366
If we set grade to a passing

87
00:05:58,366 --> 00:06:01,894
grade and grade2 to a failing grade, then

88
00:06:01,894 --> 00:06:06,490
when the expression is evaluated it works
as follows.

89
00:06:06,490 --> 00:06:11,248
Because grade is a passing grading the
expression is evaluated to true at

90
00:06:11,248 --> 00:06:16,010
this point, without even having to go on
to look at the second operand.

91
00:06:18,110 --> 00:06:23,390
So to summarize a boo, the Boolean
operator or evaluates to true If it at

92
00:06:23,390 --> 00:06:28,600
least one of its operands is true and it
evaluates to false otherwise.

93
00:06:31,740 --> 00:06:35,470
Now let's combine the operators into
single expressions.

94
00:06:35,470 --> 00:06:40,130
I've assigned grade and grade2 passing
grades of 80 and 90.

95
00:06:40,130 --> 00:06:42,615
And I'd like to evaluate this expression.

96
00:06:42,615 --> 00:06:46,185
And then applied not to grade greater then
or equal

97
00:06:46,185 --> 00:06:49,915
to 50, or grade2 greater than or equal to
50.

98
00:06:49,915 --> 00:06:51,839
And there are a couple of different ways
that

99
00:06:51,839 --> 00:06:54,962
we can interpret this expression,
depending on order of presidence.

100
00:06:54,962 --> 00:06:56,860
The first would be to have the or

101
00:06:56,860 --> 00:06:58,134
operator applied.

102
00:06:58,134 --> 00:07:03,280
First and I'll use parentheses to signal
that, followed by the not operator.

103
00:07:03,280 --> 00:07:07,592
The second would be to have the not
operator apply first to the first

104
00:07:07,592 --> 00:07:12,160
part of the expression and then the or
operator apply second.

105
00:07:12,160 --> 00:07:18,330
So not first, followed by or, or first
followed by not.

106
00:07:21,090 --> 00:07:23,640
Let's evaluate the expression, and see
what happens.

107
00:07:28,450 --> 00:07:32,220
The value that the expression evaluates to
is true.

108
00:07:32,220 --> 00:07:36,470
Let's use the parentheses to see which of
the two operators applied first.

109
00:07:38,040 --> 00:07:43,360
We'll begin by putting the parentheses
around the or part of the expression.

110
00:07:43,360 --> 00:07:48,990
Ensuring that or applies before not.
And when we do that the result is false.

111
00:07:48,990 --> 00:07:51,150
So, that's not what happened when we left

112
00:07:51,150 --> 00:07:53,550
out the parenthesis and that means that
that's

113
00:07:53,550 --> 00:07:55,610
not the order of precedence.

114
00:07:55,610 --> 00:08:02,060
Instead the order of precedence is that
not is applied first as I can show here.

115
00:08:02,060 --> 00:08:03,120
Followed by or.

116
00:08:03,120 --> 00:08:10,460
The order of presence for logical
operators is not and and then or.

117
00:08:10,460 --> 00:08:14,604
And when we're working with multiple
logical operators within an

118
00:08:14,604 --> 00:08:18,748
expression, we can use parentheses to
ensure that the operations

119
00:08:18,748 --> 00:08:21,480
apply in the order we'd like.

120
00:08:21,480 --> 00:08:24,480
Without having to worry about what the
order of precedence is.

121
00:08:24,480 --> 00:08:26,368
So use parentheses to make the order of

122
00:08:26,368 --> 00:08:28,620
operations occur in the order that you
want.

123
00:08:30,310 --> 00:08:33,910
Sometimes we'll use parentheses to make an
expression more readable.

124
00:08:33,910 --> 00:08:37,886
For example, in this expression, the
arithmetic operators have

125
00:08:37,886 --> 00:08:42,480
higher precedence than the Boolean
operators, or logical operators.

126
00:08:42,480 --> 00:08:45,560
So these parentheses are unnecessary.

127
00:08:45,560 --> 00:08:46,548
But we include them for

128
00:08:46,548 --> 00:08:47,030
[UNKNOWN].

129
00:08:47,030 --> 00:08:52,950
Instead we could have left off the
parentheses and had the following.

130
00:08:52,950 --> 00:08:55,480
But some might find a little harder to
read and understand.