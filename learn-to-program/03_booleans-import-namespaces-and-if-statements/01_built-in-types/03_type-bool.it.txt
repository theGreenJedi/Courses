Ciao, questa lezione riguarda totalmente
i valori vero e falso, anche detti valori Booleani. In questa lezione esploriamo il
tipo bool di Python e gli operatori che possiamo applicare
ai valori Booleani. Prima abbiamo usato gli operatori aritmetici di Python come la moltiplicazione e
la sottrazione E ora andremo a usare qualcuno degli
operatori di paragone di Python. Ad esempio, confrontiamo i valori tre
e quattro usando l'operatore minore. Quando questa espressione viene valutata
otteniamo il valore vero o falso come ritorno. Il tipo del valore che otteniamo è il
tipo bool. Questa è una buona coppia di tre e otto.
Chiedendoti se tre sia maggiore di otto. E non è cos', quindi il valore a cui viene 
valutata questa espressione è falso. Quando valutate otto maggiore di tre,
si ottiene vero. E se dovessimo valutare tre punto cinque maggiore o uguale a tre punto
quattro. Anche questo è vero. Confrontiamo due interi, sette, sette. Notiamo che l'operazione che stiamo 
effettuando ora è l'uguaglianza. E, dobbiamo usare due segni di uguale, non
solo uno per significare l'uguaglianza. Questo perché l'uguale singolo viene già
usato per l'operazione di assegnazione. Sette è uguale a sette.
Cosa diciamo di sette e sette punto zero. Un tipo di operando int con un tipo di
operando float. Questo è anche vero.
Assegniamo una coppia di valori variabili. X riceve sette, Y riceve 8, e ora possiamo applicare lo stesso operatore di uguaglianza
ai due operandi variabili. Per prima cosa, controlliamo il valore a cui si
riferisce X, che è sette, e Y che si riferisce ad otto, e poi sette viene
confrontato con otto. Un altro operatore è quello di 
disuguaglianza. Puoi Controllare se tre è diverso da
quattro, ed è vero. Python possiede anche tre operatori logici,
che sono operatori che vengono applicati ai valori Booleani, e
restituiscono valori Booleani. Il primo operatore logico che useremo
è l'operatore not, e inizieremo a creare una variabile grade,
e assegnarle il valore 80. Quindi grade fa riferimento ad 80. Ora, scriviamo un'espressione che controlli
per verificare se grade è un voto sufficiente per passare. grade è maggiore o uguale di 50?
Ed è vero. Applichiamo l'operatore not a quell'espressione
ora. Quindi andremo a verificare per vedere se grade non è maggiore
o uguale a 50. L'ordine con cui questa espressione viene
valutata funzione da dentro a fuori, quindi la parte dell'espressione grade maggiore o uguale a 50 viene valutata prima, e restituisce il valore
vero. E poi l'operatore not viene applicato a
True. Qualcosa che non è True è False, e questo
è il risultato che otteniamo. E si può applicare questo operatore not due
volte contemporaneamente. Dicendo quello ci si chiede se questo è
vero o no, che è semplicemente equivalente a dire, grade
è più grande o uguale a 50. Poi usiamo l'operatore and. Per prima cosa creiamo un'altra variabile
chiamata grade2 che fa riferimento al valore 70. E, ora scriveremo l'espressione che 
coinvolge entrambe le variabili grade e grade2. Questa espressione controllerà se entrambi
sono voti che permettono di passare. Quindi grado è maggiore o uguale a 50, ed è grade 2 anche maggiore o uguale a
50. E sarà vera se entrambi gli operandi sono
veri. Quindi per prima cosa, l'espressione viene
valutata ed è vero. Quindi, questa espressione viene valutata
ed è anche vero, rendendo l'intero risultato
un risultato vero. Cambiamo il valore della variabile grade
per un momento e impostiamolo a 40. Faremo girare di nuovo questa espressione
Booleana che coinvolge il grado e, e controlleremo per vedere cosa otteniamo. Dato che il primo operando è falso,
l'espressione Booleana è falsa. E non andiamo neanche a controllare il
valore del secondo operando. Ora impostiamo di nuovo grade ad 80, e questa
volta cambiamo grade2 ad un voto negativo. Quando questa espressione viene valutata, viene
valutata prima questa parte dell'espressione. Ed è vera, quindi andiamo avanti a valutare questa parte dell'espressione,
che è falsa. E quindi questa espressione risulta falsa. Per riassumere, e di nuovo, viene valutata
vera se entrambi gli operandi sono veri. Altrimenti viene valutata a falso. Infine, usiamo l'operatore logiro or che
si applica anch'esso a due operandi. Inizieremo assegnando a grade e grade 2,
due voti positivi. E ora scriveremo la stessa espressione di
prima, rimpiazzando l'and con l'or. Questa espressione viene valutata a vera se
almeno uno dei due operandi è vero. Quindi in questo caso, otteniamo vero. Ora assegniamo a grade un voto negativo
e valutiamo nuovamente l'espressione. Dato che valuterò prima la prima parte di questa espressione e vedrò che è falsa. Quindi andiamo a valutare la seconda parte dell'espressione che è vera e dato che almeno 
uno dei due operandi è vero, l'espressione viene valutata a vera. Se impostiamo grade ad un voto positivo e grade 2 ad un voto negativo, allora quando l'espressione viene valutata funzione
come segue. Dato che grade è un grado positivo
l'espressione viene valutata a vera a questo punto, senza nemmeno andare a
controllare il secondo operando. Quindi riassumendo velocemente, l'operatore
Booleano or risulta vero se almeno uno dei suoi operandi è vero e risulta
falso altrimenti. Ora combiniamo gli operatori in 
espressioni singole. Ho assegnato a grade e grade2 dei gradi
sufficienti di 80 e 90. E vorrei valutare questa espressione e poi applicare not a grade maggiore o
uguale a 50, o grade2 maggiore o uguale a
50. E c'è un paio di modi differenti in cui possiamo interpretare questa espressione,
a seconda dell'ordine di precedenza. Il primo operatore applicato deve essere l'or. E userò delle parentesi per segnalarlo,
seguito dall'operatore not. Il secondo operatore ad essere applicato
dovrebbe essere il not alla prima parte dell'espressione e poi l'operatore
or applicato alla seconda. Quindi not per primo, seguito dall'or, l'or
primo seguito dal not. Valutiamo l'espressione, e vediamo
cosa accade. Il valore dell'espressione viene valutato a
vero. Usiamo le parentesi per vedere quale
dei due operatori viene applicato per primo. Inizieremo posizionando le parentesi
attorno alla parte dell'espressione con l'or, assicurandoci che la parte con l'or venga applicata 
prima del not, e otteniamo un risultato falso. Quindi, non è ciò che è successo quando l'abbiamo lasciata senza parentesi, il che significa
che che non è l'ordine di precedenza. Invece l'ordine di precedenza è che il not venga 
applicato prima come posso mostrare qui. Seguito dall'or. L'ordine di precedenza per gli
operatori logici è not e and poi or. E quando stiamo lavorando con degli
operatori logici multipli all'interno di un'espressione, possiamo usare le parentesi per
assicurarci che le operazioni vengano effettuate nell'ordine che vogliamo, Senza doverci preoccupare di quale sia
l'ordine di precedenza. Quindi usate le parentesi per stabilire l'ordine in cui vengono svolte le operazioni secondo
cosa volete fare. In alcuni casi useremo le parentesi per rendere 
un'espressione più leggibile. Per esempio, nell'espressione,
gli operatori aritmetici hanno una precedenza più alta degli operatori
Booleani, o degli operatori logici. Quindi le parentesi non sono necessarie. Ma le includiamo per [SCONOSCIUTO]. Invece avremmo potuto lasciare senza le
parentesi e avremmo avuto la seguente. Ma qualcuno può trovare un po' difficile
leggerlo e capirlo.