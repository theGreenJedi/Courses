1
00:00:00,025 --> 00:00:02,160
Salve.

2
00:00:02,160 --> 00:00:03,820
In questa lezione, andremo a fare un po'

3
00:00:03,820 --> 00:00:05,840
di lavoro in più con la formattazione delle
stringhe.

4
00:00:05,840 --> 00:00:09,950
Andremo anche a scrivere qualche programma
interattivo dove mostreremo

5
00:00:09,950 --> 00:00:13,948
messaggi all'utente e otterremo degli input
dall'utente.

6
00:00:13,948 --> 00:00:17,060
Iniziamo.

7
00:00:17,060 --> 00:00:19,500
Richiameremo la funzione integrata di Python
print

8
00:00:19,500 --> 00:00:22,780
passando un singolo argomento alla chiamata
della funzione.

9
00:00:22,780 --> 00:00:25,630
In questo caso passeremo la stringa Hello
e Hello

10
00:00:25,630 --> 00:00:26,975
verrà mostrato sullo schermo.

11
00:00:26,975 --> 00:00:32,020
Notate che quando hello viene mostrato, hello

12
00:00:32,020 --> 00:00:33,840
viene mostrato senza gli apici.

13
00:00:33,840 --> 00:00:37,540
Gli apici servono solo una rappresentazione
delle stringhe interna a Python,

14
00:00:37,540 --> 00:00:40,449
e non vengono viste dagli utenti.

15
00:00:41,510 --> 00:00:44,210
Richiamiamo nuovamente print,
passando un'espressione

16
00:00:44,210 --> 00:00:46,490
matematica come argomento della funzione.

17
00:00:47,580 --> 00:00:51,250
In questo caso l'espressione è 3 più 7
meno 3.

18
00:00:51,250 --> 00:00:55,800
E quell'espressione sarà prima
valutata e poi stampata sullo schermo.

19
00:00:57,040 --> 00:00:59,910
Richiameremo print una terza volta passandole

20
00:00:59,910 --> 00:01:03,740
due argomenti questa volta, due stringhe:
hello e there.

21
00:01:03,740 --> 00:01:05,840
E quando le stringhe vengono mostrate,
sono

22
00:01:05,840 --> 00:01:09,200
mostrate con uno spazio fra loro per
default.

23
00:01:09,200 --> 00:01:12,140
Quindi hello spazio there è ciò che viene stampato
sullo schermo.

24
00:01:15,080 --> 00:01:16,973
Ora definiremo due funzioni.

25
00:01:16,973 --> 00:01:19,119
Definiremo una funzione in un file

26
00:01:19,119 --> 00:01:23,040
chiamata calc.pi che ho già creato 
e salvato.

27
00:01:23,040 --> 00:01:25,820
Entrambe le funzioni calcoleranno il quadrato di
un numero.

28
00:01:25,820 --> 00:01:30,180
Una funzione ritornerà quel risultato e
l'altra lo stamperà.

29
00:01:31,600 --> 00:01:34,620
Iniziamo la definizione della funzione con
la parola def

30
00:01:34,620 --> 00:01:37,830
e il nome della funzione è square
return.

31
00:01:37,830 --> 00:01:39,180
Riceverà un singolo parametro.

32
00:01:39,180 --> 00:01:40,220
Sto chiamando

33
00:01:40,220 --> 00:01:41,310
questo num.

34
00:01:41,310 --> 00:01:45,390
E il lavoro di questa funzione è di ritornare
num elevato alla seconda.

35
00:01:48,450 --> 00:01:52,350
La seconda funzione, il suo nome sarà
square print.

36
00:01:52,350 --> 00:01:55,046
Avrà anche lei un solo parametro, num, e

37
00:01:55,046 --> 00:01:58,810
andrà a calcolare il quadrato di
num

38
00:01:58,810 --> 00:02:03,680
Ma invece di ritornare quel valore, questa
funzione lo stamperà.

39
00:02:03,680 --> 00:02:07,160
Fra un momento richiameremo queste due
funzioni dalla shell.

40
00:02:07,160 --> 00:02:09,730
Vorrei che l'output della chiamata che stampa

41
00:02:09,730 --> 00:02:13,170
appaia diverso dal valore ritornato
da square print.

42
00:02:13,170 --> 00:02:13,480
Per fare

43
00:02:13,480 --> 00:02:17,390
questo, sto aggiungendo una stringa alla lista degli
argomenti per la chiamata della funzione print

44
00:02:17,390 --> 00:02:22,221
in modo da stampare il quadrato di num
sia prima del numero al quadrato.

45
00:02:22,221 --> 00:02:25,199
Lo step successivo è far girare il modilo.

46
00:02:25,199 --> 00:02:29,740
Andremo nel menu Run e sceglieremo Run
Module.

47
00:02:29,740 --> 00:02:32,330
E ora abbiamo accesso alle due funzioni
nella shell.

48
00:02:33,530 --> 00:02:36,060
Andremo a chiamare queste due funzioni
e

49
00:02:36,060 --> 00:02:38,550
salveremo il risultato delle chiamate a quelle
funzioni

50
00:02:38,550 --> 00:02:40,020
in una varibile.

51
00:02:40,020 --> 00:02:42,500
Quindi la variabile answer_return riceverà

52
00:02:42,500 --> 00:02:44,500
il risultato della chiamata della funzione
square_return.

53
00:02:44,500 --> 00:02:50,150
Passeremo un argomento a 
square_return e prenderò il valore 4.

54
00:02:50,150 --> 00:02:51,555
Potrei prendere qualsiasi valore qui.

55
00:02:51,555 --> 00:02:54,835
Sto usando quattro solo come esempio
di chiamata della funzione.

56
00:02:54,835 --> 00:02:57,570
E' ora di far girare la funzione.

57
00:02:57,570 --> 00:03:02,350
Quando la funzione viene eseguita, vogliamo
vedere se qualcosa viene stampato.

58
00:03:02,350 --> 00:03:03,650
E noi pensiamo

59
00:03:03,650 --> 00:03:06,940
possiamo vedere che quando la eseguiamo, che
otteniamo immediatamente

60
00:03:06,940 --> 00:03:10,870
il prompt, quindi non è stato stampato nulla
sullo schermo da square return.

61
00:03:10,870 --> 00:03:15,000
Poi vogliamo verificare il valore della
variabile answer

62
00:03:15,000 --> 00:03:18,950
e possiamo vedere che answer return ha
il valore 16.

63
00:03:18,950 --> 00:03:22,840
Quindi, square return ha ritornato l'indirizzo
di memoria di 16 e

64
00:03:22,840 --> 00:03:26,439
quell'indirizzo di memoria è stato salvato nella
variabile answer return.

65
00:03:28,060 --> 00:03:28,790
Adesso è ora

66
00:03:28,790 --> 00:03:31,850
di chiamare la funzione square print,
passeremo anche

67
00:03:31,850 --> 00:03:34,010
il valore quattro come argomento, potremmo
aver preso

68
00:03:34,010 --> 00:03:37,060
qualunque cosa, e vediamo che questa volta
qualcosa viene

69
00:03:37,060 --> 00:03:41,090
mostrato sullo schermo, il quadrato di num
è 16.

70
00:03:41,090 --> 00:03:43,470
Poi, esamineremo il contenuto della
variabile

71
00:03:43,470 --> 00:03:46,820
answer print e questa volta non vediamo
nulla.

72
00:03:47,910 --> 00:03:50,200
Quando una funzione non ha un'istruzione
di return che

73
00:03:50,200 --> 00:03:53,830
viene eseguita, Python ritorna None,
e questo è quello che accade

74
00:03:53,830 --> 00:03:54,520
in questo caso.

75
00:03:55,870 --> 00:04:00,180
Dato che answer_return si riferisce ad un valore
numerico, siamo in grado di usarlo

76
00:04:00,180 --> 00:04:03,920
in un'espressione matematica, come
moltiplicarlo per cinque.

77
00:04:03,920 --> 00:04:08,570
Invece, answer_print non fa riferimento ad
un valore numerico.

78
00:04:08,570 --> 00:04:12,940
Si ottiene un messaggio d'errore in questo caso
perché fa riferimento al valore None, o solo

79
00:04:12,940 --> 00:04:18,840
di tipo None Type.
Ora sappiano come usare

80
00:04:18,840 --> 00:04:22,480
la funzione di Python integrata print per
mostrare messaggi agli utenti.

81
00:04:22,480 --> 00:04:25,460
Il prossimo step è usare la funzione integrata

82
00:04:25,460 --> 00:04:28,959
input per ottenere delle informazioni 
dall'utente.

83
00:04:30,120 --> 00:04:34,650
Chiameremo input passando una singola stringa
come argomento.

84
00:04:34,650 --> 00:04:38,850
In questo caso andremo a chiedere all'utente
qual è il tuo nome?

85
00:04:38,850 --> 00:04:41,310
Quando la funzione esegue quella stringa
sarà

86
00:04:41,310 --> 00:04:43,900
scritta sullo schermo, e aspetteremo che

87
00:04:43,900 --> 00:04:47,580
l'utente inserisca qualche input al prompt.

88
00:04:47,580 --> 00:04:51,040
Quindi nota che il cursore lampeggia
aspettando che inseriamo qualcosa.

89
00:04:53,089 --> 00:04:56,833
Ora inserirò il mio nome come utente di
questo programma, ho detto

90
00:04:56,833 --> 00:05:02,530
il mio nome è Jen, quando premo invio la
funzione è, completa l'esecuzione.

91
00:05:02,530 --> 00:05:07,760
La stringa che ho digitato, Jen, viene ritornata 
come stringa dalla funzione.

92
00:05:07,760 --> 00:05:09,720
Vediamo che ci sono apici singoli attorno ad

93
00:05:09,720 --> 00:05:12,690
essa che indicano che il valore è di
tipo stringa.

94
00:05:12,690 --> 00:05:18,333
Chiameremo la funzione input un'altra
volta, questa volta però

95
00:05:18,333 --> 00:05:23,196
salveremo il risultato ritornato da input in
una variabile chiamata name.

96
00:05:23,196 --> 00:05:25,580
Quando eseguiamo la funzione l'utente

97
00:05:25,580 --> 00:05:28,500
digita il suo nome e quel valore viene
ritornato

98
00:05:28,500 --> 00:05:34,280
come stringa, quindi l'indirizzo di memoria del
valore viene salvato nella variabile name.

99
00:05:34,280 --> 00:05:36,350
E quando esaminiamo il contenuto di name,
noi

100
00:05:36,350 --> 00:05:39,400
vedremo che fa riferimento alla stringa
Jen.

101
00:05:39,400 --> 00:05:43,250
Ora useremo input per par inserire all'utente
la sua locazione.

102
00:05:43,250 --> 00:05:43,810
La stringa,

103
00:05:43,810 --> 00:05:50,116
what is your location viene stampata e
inserisco la mia posizione: Toronto.

104
00:05:51,220 --> 00:05:53,300
Quel valore viene restituito dalla funzione.

105
00:05:53,300 --> 00:05:57,580
Quindi location fa riferimento al valore Toronto
e name fa riferimento a Jen.

106
00:05:58,670 --> 00:06:01,465
Usiamo ora le due variabili, name e

107
00:06:01,465 --> 00:06:04,960
location, per mostrare un messaggio
all'utente.

108
00:06:04,960 --> 00:06:08,000
Andremo a richiamare print passando in ingresso
tre parametri.

109
00:06:08,000 --> 00:06:08,970
Il primo è

110
00:06:08,970 --> 00:06:15,990
name, il secondo sarà una stringa che dice
lives e il terzo è la posizione.

111
00:06:15,990 --> 00:06:18,760
Quindi il modo in cui interpretiamo questa chiamata
per stampare è

112
00:06:18,760 --> 00:06:22,450
che prima usiamo il valore a cui name
fa riferimento.

113
00:06:22,450 --> 00:06:26,370
collegandola con uno spazio fra lei e la
stringa lives in.

114
00:06:28,550 --> 00:06:31,540
E poi useremo uno spazio e il valore

115
00:06:31,540 --> 00:06:36,050
a cui location fa riferimento, per stampare
Jen lives in Toronto.

116
00:06:36,050 --> 00:06:39,450
Prima, ho accennato che name e
location fanno entrambe riferimento ad una stringa.

117
00:06:39,450 --> 00:06:42,660
Infatti, tutti i valori, il tipo di tutti

118
00:06:42,660 --> 00:06:45,690
i valori ritornati da input, sarà di tipo
stringa.

119
00:06:45,690 --> 00:06:50,120
Chiamiamo nuovamente input, chiedendo quante
tazze di caffè ho bevuto oggi.

120
00:06:51,460 --> 00:06:53,590
Quando inserisco un valore

121
00:06:53,590 --> 00:06:57,200
come utente, inserisco 2, e questo valore

122
00:06:57,200 --> 00:07:00,190
viene ritornato dalla funzione input come
stringa.

123
00:07:00,190 --> 00:07:06,210
Quindi possiamo vedere che num_coffee fa riferimento
alla stringa 2, non all'intero.

124
00:07:07,310 --> 00:07:08,790
Avete già visto che possiamo usare

125
00:07:08,790 --> 00:07:11,750
gli apici singoli e doppi per rappresentare 
le stringhe.

126
00:07:11,750 --> 00:07:16,900
E ora voglio mostrarvi un terzo tipo di formato
di stringa, che è quella con tre apici.

127
00:07:21,230 --> 00:07:24,780
Le stringhe con tre apici sono in grado
di contenere più righe.

128
00:07:24,780 --> 00:07:29,360
Per esempio, stampiamo una stringa con apici
tripli con how sulla

129
00:07:29,360 --> 00:07:33,920
prima riga, are sulla seconda e you sulla
terza riga.

130
00:07:33,920 --> 00:07:33,920
[MUSICA]

131
00:07:33,920 --> 00:07:33,922

132
00:07:33,922 --> 00:07:42,150
Quindi sembra che questo, una parola per
riga.

133
00:07:42,150 --> 00:07:43,790
Andrò ad usare la stessa stringa.

134
00:07:43,790 --> 00:07:46,639
Solo che invece di stamparla, la salverò
in una variabile.

135
00:07:51,770 --> 00:07:54,580
E quando esaminiamo il contenuto della
variabile s

136
00:07:55,610 --> 00:07:58,480
sembra diversa da come l'abbiamo 
inserita.

137
00:07:58,480 --> 00:08:00,910
Prima di tutti non ha più gli
apici tripli.

138
00:08:00,910 --> 00:08:02,352
Ha gli apici semplici.

139
00:08:02,352 --> 00:08:07,988
E secondo, nel punto in cui ho premuto invio
oppure il tasto

140
00:08:07,988 --> 00:08:12,940
A capo, vediamo questo backslash n in 
due posti.

141
00:08:12,940 --> 00:08:16,940
Questo carattere viene detto carattere
newline, ed è un carattere

142
00:08:16,940 --> 00:08:18,370
speciale in Python.

143
00:08:18,370 --> 00:08:23,510
Il simbolo backslash è il carattere di
escape.

144
00:08:23,510 --> 00:08:28,150
E questa combinazione di backslash e n
è la sequenza escape per nuova riga

145
00:08:28,150 --> 00:08:28,650
Ci

146
00:08:31,860 --> 00:08:34,530
sono moltissimi altri caratteri speciali.

147
00:08:34,530 --> 00:08:40,950
Ad esempio, stampiamo i numeri tre
quattro e cinque, separati da tab.

148
00:08:40,950 --> 00:08:44,220
Usiamo tre e poi per il simbolo tab,
usiamo

149
00:08:44,220 --> 00:08:49,930
la sequenza escape backslash t, quattro,
backslash t, e cinque.

150
00:08:49,930 --> 00:08:55,060
Quindi tre tab quattro tab cinque, ed ecco
come appare.

151
00:08:55,060 --> 00:08:57,180
Oltre a newline e

152
00:08:57,180 --> 00:09:00,460
tab, ci sono moltissime altre sequenze di
escape.

153
00:09:00,460 --> 00:09:05,850
Un paio di queste che ci saranno utili, sono
la sequenza escape backslash, backslash .

154
00:09:05,850 --> 00:09:08,190
che usiamo, ogni volta che vogliamo stampare un

155
00:09:08,190 --> 00:09:11,200
singolo backslash , o includere un singolo
backslash in una stringa.

156
00:09:12,800 --> 00:09:16,760
Questo perché il carattere backslash , è
il carattere di escape e quando

157
00:09:16,760 --> 00:09:20,990
lo usiamo da solo, otteniamo un messaggio
d'errore.

158
00:09:20,990 --> 00:09:22,040
Dato che ci si aspetta

159
00:09:22,040 --> 00:09:29,020
che qualcosa lo segua.
Un'altra sequenza utile, è la sequenza per

160
00:09:29,020 --> 00:09:33,800
l'apice semplice, quando vogliamo
includere un apice semplice all'interno della nostra stringa.

161
00:09:33,800 --> 00:09:40,540
Ad esempio, se vogliamo dire, don\'t,
allora usiamo un backslash,

162
00:09:40,540 --> 00:09:46,310
apice, nel punto in cui si desidera inserire
l'apice singolo e similmente,

163
00:09:46,310 --> 00:09:51,200
quando voglio usare il simbolo di citazione,
simbolo di citazione doppio 

164
00:09:51,200 --> 00:09:56,200
in una stringa, posso usare la sequenza
escape, backslash, apice doppio.

165
00:09:56,200 --> 00:10:02,819
Quindi, immaginate di voler fare questo, dice,
egli dice.

166
00:10:02,819 --> 00:10:02,822
[MUSICA]

167
00:10:02,822 --> 00:10:09,030
e uso backslash e apici doppi per indicare che

168
00:10:09,030 --> 00:10:11,200
mi piacerebbe usare gli apici doppi nella 
stringa