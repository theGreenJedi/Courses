وقتی که تابعی تعریف شده،میتوانیم بارها و بارها آن را دوباره فراخوانیم. در این مبحث،تمرکز توجه ما روی دوباره استفاده کردن از توابع با فراخوانی آنها در جای دیگر و بنا بر اقتضا است. مثلا،توابع خود را از درون سایر توابع تعریف شده و نیز از بین سایر فراخوانی از توابع فرامیخوانیم در مبحث تعریف توابع، triangle.pie را نوشتیم که دو تابع را شامل میشد. این برنامه نسخه تجدید نظر شده ای است که با دنبال کردن آن مراحل دستور عمل طراحی درست کردم. برای اصلاح دستور طراحی،با یک یا دو مثال شروع میکنیم، بعد آن قرارداد تایپ،عنوان تابع،تشریح تابع و آنگاه نوشتن بدنه و آزمدن تابع. اکنون تابع دیگری به triangle.pie میافزاییم. این تابع نیم محیط ملث را محاسبه میکند. نیم محیط نصف پیرامون است. با دنبال کردن دقیق برنامه طراحی،اولین قدم مثال است. تابع را semiperimeter مینامیم. نیاز است که تابع طول سه ضلع را داشته باشد تا تابع محاسبه را انجام دهد. پس در فراخوانی تابع عبور دادن سه طول را در نظر میگیریم. و آنگاه جوابی که میگیریم نیم محیط است. فراخوانی دیگری از تابع داشته باشیم، این بار به جای اعداد صحیح اعداد اعشاری را عبور دهیم. و نتیجه ای که به دست میاوریم12.9 خواهد بود. قدم بعدی در طراحی دستور کار نحوه تایپ است. برای تابع semiperimeter، انواع اعداد cuz خواهند بود که امکان دارد عدد درست یا اعشاری باشند. و این تابع عددی اعشاری تحویل دهد. بعد از آن عنوان تابع را نقل میکنیم. با کلمه کلیدی def که بعد از آن نام تابع که از قبل نامش را انتخاب کردیم در فراخوان مثالی ما جا میگیرد. و در این مورد سه پارامتر را عبور میدهیم. آن ها را side1,side2,side3 میخوانم. بعد تشریح تابع است. لازم است که گفته شود که تابع چه تحویل میدهد،و توضیح دهم که چگونه پارامترها مورد استفاده قرار میگیرند. میخواهیم که نیم محیط مثلث را تحویل دهیم که اضلاع آن در پارامترها داده شده است. اکنون آماده ایم که بدنه تابع را بنویسیم. این تابع میخواهد که نیم محیط را تحویل دهد،به این معنی که با جمع کردن طول سه ضلع محیط را به دست آورده و آن بر دو تقسیم میکنیم. به بخشی از بدنه تابع semiperimeter توجه کنید که عینا بدنه perimeter هست. به جای این که دوبار محیط را محاسبه کنیم، میتوانیم که تابع perimeter را از داخل تابع semiperimeter فرا میخوانیم. با دوباره استفاده کردن از تابع محیط،ریسک خطا در محاسبه محیط را کاهش میدهیم،چون که تابع از قبل آزموده شده است. اکنون موقع آزمودن تابع semiperimeter است. با به جریان انداختن برنامه کار را شروع میکنیم. و آنگاه آن تابع را با فراخواندنش در shell پردازش میکنیم. میخواهم که از همان مثالی استفاده کنم که در تابع doc string از آن استفاده کردم. و 6 تحویل میگیریم. و آنگاه در صورتی که آن رابا اعداد اعشاریdoc string فراخوانم ، خوب،مخلوطی از اعداد اعشاری و اعداد صحیح ،12.9 را تحویل میگیریم. بنابراین آن چه که از تابع انتطار میرود را انجام میدهد. اینجا به مساله ی دیگری توجه کنید. در این مساله میخواهیم که از تابع سطح بهره گیریم که قبلا نوشتیم. به خاطر داشته باشید که سطح دو پارامتر دارد،پایه و ارتفاع. و آنگاه سطح مثلث را تحویل میدهد. این مساله به دو برش پیزا مربوط میشود. در یک میهمانی این دو برش پیزا باقی ماند. یک آدم گشنه ای میخواهد بفهمد که کدام تکه بزرگتر است. چون که برش ها شکل مثلث هستند، او پایه و ارتفاع هر برشی را اندازه میگیرد. اکنون که پایه و ارتفاع هر کدام از پیزا ها را میدانیم، میتوانیم که از برنامه خود برای تعیین اینکه کدامیک بزرگتر است استفاده کنیم. یکی از برنامه های فابریک پایتون را به کار میبریم، از تابع max برای این کار استفاده میکنیم. بنابراین با فراخواندن max کارمان را شروع میکنیم. و اولین مولفه ای را که از آن میگذرانیم سطح اولین برش پیزا است، برشی که پایه اش 3.8 و ارتفاعش7.0 است. و آنگاه دومین مولفه برای تابع max سطح دومین تکه پیزا است،مثلثی با پایه 3.5 و ارتفاع6.8. وقتی تابع را پردازش میکنیم،میفهمیم که کدامیک بزرگتر است. و اکنون میتوانیم که کنترل کنیم که کدام برش پیزا مربوط به کدامش میشود.13.29  میشود. پس از فراخواندن تابع درمییابیم که سطح اولین برش بیشترین است. و معنی اش آن است که برش برنده اولی است. پس آن چه که این مثال نشان میدهد این است که نه تنها میتوانیم که توابع را از داخل تعریف هایشان فراخواند،مثل آن چه که در مثال نیم محیط انجام دادیم، بلکه فراخوان تابع را به عنوان مولفه برای توابع قرار داد زیرا فراخوان توابع خودشان عبارت هستند.