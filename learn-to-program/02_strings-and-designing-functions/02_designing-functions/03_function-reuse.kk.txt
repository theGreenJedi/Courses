Функция анықталған соң, біз оны қайта қайта шақырта бере аламыз. Бұл сабақта функцияларды сәйкесінше өзге жерлерде қайта қолдануды үйренбекпіз. Мысалы біз функциямызда өзге функция анықтамасынан, қолдануынан алып қолданамыз. Функцияларды анықтау сабағында үшбұрышты қолданған етінбіз. Онда екі функция бар. Дизайн рецептісін жасау сатыларына сәйкес жасалған версияны код қайта қарастырып шықты. Сол рецептіні қайта қалпына келтіру үшін бер немесе екі мысалдан бастаймыз. Соның келесісі функция басы, анықтамасы. Содан соң негізгі бөлігін кодтап, функцияны сынақтан өткіземіз. triangle.py келесі бір функцияны енгіземіз. Бұл функция үшбұрыштың жартылай периметрін есептейді. Семи периметр дегеніміз перимертдің жартысы. Белгілі бір дизайн нұсқаулығына сәйкесінше. Келесі қадам мысалға алып келеді. Функцияны қолданамыз, семипериметр. 
Есептеуді жүзеге асыру үшін функция үш қабырғаның ұзындықтарын қажет етеді. Функция үшін үш ұзындық береміз. Содан соң біз периметрдің жартысына тең болатын нәтиже аламыз. Тағы да бір функцияны қолдануды жүзеге асырайық, бұл жолы аргумент ретінде бүтін сан орнына бөлшек сан қолданайық. Нәтижесінде 12.9 деген жауап аламыз. Дизайн нұсқаулығының келесі сатысы контракт типі. Семи периметр функциясы үшін типтер сандар болады, болады, себебі бізде бөлшек те бүтін де сандар болу мүмкін, ал бұл функция бөлшек сан шығарып береді. Келесіде функцияға жоғарғы бөлікті береміз. Мысалымызда қарастырған орташа функция соңынан ерген def негізгі сөзінен бастаймыз, бұл жола үш параметр қолданамыз. Біз оларды бірінші жақ, екінші жақ және үшінші жақ деп атаймыз. Келесі қадам функцияның сипаттамасы. Қандай функция шығатынын және параметрлер қалай қолданылғанын айтуымыз керек. Енді біз үшбұрыштың семипериметрін қайтармақпыз. Атау өлшемі берілген ұзындық, бірақ параметрде. Енді функцияның негізгі бөлігін жазуға дайынбыз. Функция бізге семипериметрді қайтарғалы тұр ол дегеніміз үш қабырғаның қосындысы болатын периметрді екіге бөлгендегі нәтиже. Семипериметр функциясының негізгі бөлігі периметр функциясымен бірдей екендігіне назар аударыңыз. Оны дубликаттағаннан гөрі семипериметр функциясы ішінде периметр функциясын шақырта аламыз. Параметр функциясын қолдану арқыты қыте жіберуден алшақ боламыз, себебі ол функция алдында сынақтан өтіліп қойған. Ендігі кезек семипериметр функциясын сынау. Модульді іске қосуды бастаймыз. Негіз ішінде оны шақырта отыра сол функцияны орындаймыз. Мен doc функциясында қолданған мысалды қайта қолданбақпын. Біз алты деген жауап аламыз, егер мен doc тізбегіндегі бөлшек сандардан алсам, оның ішінде бөлшектерді араластырып, 12.9 деген нәтиже аламыз. Яғни функция біз күткендей іс әрекет жасайды. Бізге қарастыру қажет басқа мәселе бар. Оны шешу үшін алдында жасаған аудан функциясын қолданбақпыз. Ол аудан функциясында екі параметр, қабырға мен биіктік, бар және сол арқылы үшбұрыш ауданын есептеп береді. Мәселе пиццаның екі кесіндісі жайында. Отырыстан соң екі кесінді пицца қалып қойды. 
Қарны ашқан кісі сол екеуінің қайсысы үлкенірек екенін анықтамақшы. Кесінділер үшбұрыш формасында болғандықтан бұл кісі олардың биіктіктері мен қабырғаларын салыстырды. Сол кесінділердің, яғни үшбұрыштардың биіктіктері мен қабырғаларының ұзындықтарын білген соң, программамызды қолдана отыра қайсысы ең үлкені екенін анықтай аламыз. Сонымен бірге Питонның программаларының бірін, Мах программасын, көмекке шақыра аламыз. Сонымен мах қолданамыз, махка беретін бірінші аргумент пиццаның бірінші кесіндісінң ауданы. Бұл кесіндінің қабырғасы 3.8ге, ал биіктігі 7.0ге тең. Ал екінші беретін аргумент екінші кесіндінің ауданы болады. Оның қабырғасы 3.5, ал биіктігі 6.8ге тең. Осы функцияны орындалған кезде екі кесіндінің қайсысының ауданы үлкен екедігін анықтаймыз. Енді біз қай кесінді үлкен екенін тексерсек болады. 
13.29 Осы функцияға нәтижесіне сүйене отыра бірінші кесіндінің ауданы екіншіге ұзарғанда үлкен екенін білеміз. Бұл дегеніміз жеңімпаз пицца кесіндісі, міне мынау. Қорыта келгенде, бұл мысалдан көргеніміз семипериметр функциясындағылай тек бір функция ішінен екіншісі шақыртып қана қоймаймыз. Алайда біз функцияға аргумент ретінде де қолдансақ болады