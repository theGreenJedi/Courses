1
00:00:01,530 --> 00:00:05,760
وقتی که تابعی تعریف شده،میتوانیم بارها و بارها آن را دوباره فراخوانیم.

2
00:00:05,760 --> 00:00:08,970
در این مبحث،تمرکز توجه ما روی دوباره استفاده کردن از توابع 

3
00:00:08,970 --> 00:00:11,890
با فراخوانی آنها در جای دیگر و بنا بر اقتضا است.

4
00:00:11,890 --> 00:00:16,470
مثلا،توابع خود را از درون سایر توابع تعریف شده و

5
00:00:16,470 --> 00:00:18,149
نیز از بین سایر فراخوانی از توابع فرامیخوانیم

6
00:00:20,480 --> 00:00:22,430
در مبحث تعریف توابع،

7
00:00:22,430 --> 00:00:25,271
triangle.pie را نوشتیم که دو تابع را شامل میشد.

8
00:00:27,395 --> 00:00:30,849
این برنامه نسخه تجدید نظر شده ای است که با دنبال کردن آن مراحل

9
00:00:30,849 --> 00:00:32,680
دستور عمل طراحی درست کردم.

10
00:00:32,680 --> 00:00:38,390
برای اصلاح دستور طراحی،با یک یا دو مثال شروع میکنیم،

11
00:00:38,390 --> 00:00:44,260
بعد آن قرارداد تایپ،عنوان تابع،تشریح تابع

12
00:00:44,260 --> 00:00:47,950
و آنگاه نوشتن بدنه و آزمدن تابع.

13
00:00:47,950 --> 00:00:51,160
اکنون تابع دیگری به triangle.pie میافزاییم.

14
00:00:51,160 --> 00:00:55,110
این تابع نیم محیط ملث را محاسبه میکند.

15
00:00:55,110 --> 00:00:57,700
نیم محیط نصف پیرامون است.

16
00:00:58,770 --> 00:01:04,011
با دنبال کردن دقیق برنامه طراحی،اولین قدم مثال است.

17
00:01:06,647 --> 00:01:09,631
تابع را semiperimeter مینامیم.

18
00:01:13,323 --> 00:01:17,435
نیاز است که تابع طول سه ضلع را داشته باشد 

19
00:01:17,435 --> 00:01:19,520
تا تابع محاسبه را انجام دهد.

20
00:01:19,520 --> 00:01:24,100
پس در فراخوانی تابع عبور دادن سه طول را در نظر میگیریم.

21
00:01:25,550 --> 00:01:29,412
و آنگاه جوابی که میگیریم نیم محیط است.

22
00:01:32,014 --> 00:01:34,436
فراخوانی دیگری از تابع داشته باشیم،

23
00:01:34,436 --> 00:01:38,370
این بار به جای اعداد صحیح اعداد اعشاری را عبور دهیم.

24
00:01:42,479 --> 00:01:47,100
و نتیجه ای که به دست میاوریم12.9 خواهد بود.

25
00:01:47,100 --> 00:01:51,345
قدم بعدی در طراحی دستور کار نحوه تایپ است.

26
00:01:52,640 --> 00:01:55,590
برای تابع semiperimeter،

27
00:01:55,590 --> 00:02:01,090
انواع اعداد cuz خواهند بود که امکان دارد عدد درست یا اعشاری باشند.

28
00:02:01,090 --> 00:02:03,267
و این تابع عددی اعشاری تحویل دهد.

29
00:02:05,595 --> 00:02:08,520
بعد از آن عنوان تابع را نقل میکنیم.

30
00:02:08,520 --> 00:02:12,650
با کلمه کلیدی def که بعد از آن نام تابع که 

31
00:02:12,650 --> 00:02:15,790
از قبل نامش را انتخاب کردیم در فراخوان مثالی ما جا میگیرد.

32
00:02:15,790 --> 00:02:18,780
و در این مورد سه پارامتر را عبور میدهیم.

33
00:02:18,780 --> 00:02:23,362
آن ها را side1,side2,side3 میخوانم.

34
00:02:26,706 --> 00:02:28,607
بعد تشریح تابع است.

35
00:02:30,419 --> 00:02:32,844
لازم است که گفته شود که تابع چه تحویل میدهد،و

36
00:02:32,844 --> 00:02:35,340
توضیح دهم که چگونه پارامترها مورد استفاده قرار میگیرند.

37
00:02:35,340 --> 00:02:40,127
میخواهیم که نیم محیط مثلث را تحویل دهیم

38
00:02:40,127 --> 00:02:44,625
که اضلاع آن در پارامترها داده شده است.

39
00:02:53,077 --> 00:02:55,400
اکنون آماده ایم که بدنه تابع را بنویسیم.

40
00:02:56,730 --> 00:03:01,780
این تابع میخواهد که نیم محیط را تحویل دهد،به این معنی که

41
00:03:01,780 --> 00:03:08,880
با جمع کردن طول سه ضلع محیط را به دست آورده و آن بر دو تقسیم میکنیم.

42
00:03:08,880 --> 00:03:12,610
به بخشی از بدنه تابع semiperimeter توجه کنید

43
00:03:12,610 --> 00:03:16,490
که عینا بدنه perimeter هست.

44
00:03:17,830 --> 00:03:20,964
به جای این که دوبار محیط را محاسبه کنیم،

45
00:03:20,964 --> 00:03:24,821
میتوانیم که تابع perimeter را از داخل تابع semiperimeter فرا میخوانیم.

46
00:03:27,121 --> 00:03:31,767
با دوباره استفاده کردن از تابع محیط،ریسک خطا 

47
00:03:31,767 --> 00:03:36,352
در محاسبه محیط را کاهش میدهیم،چون که تابع از قبل آزموده شده است.

48
00:03:43,217 --> 00:03:47,090
اکنون موقع آزمودن تابع semiperimeter است.

49
00:03:47,090 --> 00:03:49,398
با به جریان انداختن برنامه کار را شروع میکنیم.

50
00:03:52,427 --> 00:03:57,099
و آنگاه آن تابع را با فراخواندنش در shell پردازش میکنیم.

51
00:04:01,526 --> 00:04:07,000
میخواهم که از همان مثالی استفاده کنم که در تابع doc string از آن استفاده کردم.

52
00:04:08,500 --> 00:04:09,685
و 6 تحویل میگیریم.

53
00:04:12,544 --> 00:04:16,964
و آنگاه در صورتی که آن رابا اعداد اعشاریdoc string فراخوانم ،

54
00:04:16,964 --> 00:04:21,315
خوب،مخلوطی از اعداد اعشاری و اعداد صحیح ،12.9 را تحویل میگیریم.

55
00:04:21,315 --> 00:04:24,019
بنابراین آن چه که از تابع انتطار میرود را انجام میدهد.

56
00:04:28,637 --> 00:04:31,390
اینجا به مساله ی دیگری توجه کنید.

57
00:04:31,390 --> 00:04:34,700
در این مساله میخواهیم که از تابع سطح بهره گیریم

58
00:04:34,700 --> 00:04:36,240
که قبلا نوشتیم.

59
00:04:36,240 --> 00:04:39,660
به خاطر داشته باشید که سطح دو پارامتر دارد،پایه و ارتفاع.

60
00:04:39,660 --> 00:04:41,470
و آنگاه سطح مثلث را تحویل میدهد.

61
00:04:43,210 --> 00:04:45,303
این مساله به دو برش پیزا مربوط میشود.

62
00:04:52,783 --> 00:04:57,120
در یک میهمانی این دو برش پیزا باقی ماند.

63
00:04:57,120 --> 00:05:01,460
یک آدم گشنه ای میخواهد بفهمد که کدام تکه بزرگتر است.

64
00:05:01,460 --> 00:05:04,210
چون که برش ها شکل مثلث هستند،

65
00:05:04,210 --> 00:05:07,080
او پایه و ارتفاع هر برشی را اندازه میگیرد.

66
00:05:08,350 --> 00:05:11,390
اکنون که پایه و ارتفاع هر کدام از پیزا ها را میدانیم،

67
00:05:11,390 --> 00:05:14,650
میتوانیم که از برنامه خود برای تعیین اینکه کدامیک بزرگتر است استفاده کنیم.

68
00:05:15,750 --> 00:05:18,220
یکی از برنامه های فابریک پایتون را به کار میبریم،

69
00:05:18,220 --> 00:05:20,370
از تابع max برای این کار استفاده میکنیم.

70
00:05:21,420 --> 00:05:23,650
بنابراین با فراخواندن max کارمان را شروع میکنیم.

71
00:05:23,650 --> 00:05:29,890
و اولین مولفه ای را که از آن میگذرانیم سطح اولین برش پیزا است،

72
00:05:29,890 --> 00:05:36,250
برشی که پایه اش 3.8 و ارتفاعش7.0 است.

73
00:05:36,250 --> 00:05:41,730
و آنگاه دومین مولفه برای تابع max سطح

74
00:05:41,730 --> 00:05:49,200
دومین تکه پیزا است،مثلثی با پایه 3.5 و ارتفاع6.8.

75
00:05:49,200 --> 00:05:54,300
وقتی تابع را پردازش میکنیم،میفهمیم که کدامیک بزرگتر است.

76
00:05:55,640 --> 00:06:02,166
و اکنون میتوانیم که کنترل کنیم که کدام برش پیزا

77
00:06:02,166 --> 00:06:06,860
مربوط به کدامش میشود.13.29  میشود.

78
00:06:06,860 --> 00:06:11,577
پس از فراخواندن تابع درمییابیم که سطح اولین برش

79
00:06:11,577 --> 00:06:14,470
بیشترین است.

80
00:06:14,470 --> 00:06:19,250
و معنی اش آن است که برش برنده اولی است.

81
00:06:21,410 --> 00:06:25,430
پس آن چه که این مثال نشان میدهد این است که نه تنها میتوانیم که توابع را

82
00:06:25,430 --> 00:06:29,910
از داخل تعریف هایشان فراخواند،مثل آن چه که در مثال نیم محیط انجام دادیم،

83
00:06:29,910 --> 00:06:32,608
بلکه فراخوان تابع را به عنوان مولفه 

84
00:06:32,608 --> 00:06:36,325
برای توابع قرار داد زیرا فراخوان توابع خودشان عبارت هستند.