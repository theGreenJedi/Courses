In [1]: from __future__ import print_function
In [2]: import datetime
In [3]: import numpy as np
In [4]: import matplotlib.pyplot as plt
In [5]: from matplotlib.finance import quotes_historical_yahoo
In [6]: from matplotlib.dates import YearLocator, MonthLocator,
DateFormatter
In [7]: from hmmlearn.hmm import GaussianHMM
# Downloading the data
In [8]: date1 = datetime.date(1995, 1, 1)
In [9]: date2 = datetime.date(2012, 1, 6)
# start date
# end date
# get quotes from yahoo finance
In [10]: quotes = quotes_historical_yahoo("INTC", date1, date2)
# unpack
In [11]:
In [12]:
In [13]:
quotes
dates = np.array([q[0] for q in quotes], dtype=int)
close_v = np.array([q[2] for q in quotes])
volume = np.array([q[5] for q in quotes])[1:]
# take diff of close value
# this makes len(diff) = len(close_t) - 1
# therefore, others quantity also need to be shifted
In [14]: diff = close_v[1:] - close_v[:-1]
In [15]: dates = dates[1:]
In [16]: close_v = close_v[1:]
# pack diff and volume for training
In [17]: X = np.column_stack([diff, volume])
# Run Gaussian HMM
In [18]: n_components = 5
# make an HMM instance and execute fit
In [19]: model = GaussianHMM(n_components, covariance_type="diag",
n_iter=1000)
In [20]: model.fit([X])
# predict the optimal sequence of internal hidden state
In [21]: hidden_states = model.predict(X)
# print trained parameters and plot
In [22]: print("Transition matrix")
In [23]: print(model.transmat_)
In [24]: for i in range(n_components):
print("%dth hidden state" % i)
print("mean = ", model.means_[i])
print("var = ", np.diag(model.covars_[i]))
In
In
In
In
In
[25]:
[26]:
[27]:
[28]:
[29]:
years = YearLocator()
# every year
months = MonthLocator() # every month
yearsFmt = DateFormatter('%Y')
fig = plt.figure()
ax = fig.add_subplot(111)
In [30]: for i in range(n_components):
# use fancy indexing to plot data in each state
idx = (hidden_states == i)
ax.plot_date(dates[idx], close_v[idx], 'o',
label="%dth hidden state" % i)
ax.legend()
# format
In [31]:
In [32]:
In [33]:
In [34]:
the ticks
ax.xaxis.set_major_locator(years)
ax.xaxis.set_major_formatter(yearsFmt)
ax.xaxis.set_minor_locator(months)
ax.autoscale_view()
# format the coords message box
In [35]: ax.fmt_xdata = DateFormatter('%Y-%m-%d')
