Здравствуйте, и добро пожаловать на занятие, 
посвященное задаче о сортировке. Как обычно, я начну с обзора задачи. Сортировка - фундаментальная вычислительная задача. Входные данные в этой задаче представляют
собой последовательность элементов, и ваша задача - отобразить эти элементы,
например, в невозрастающем порядке. Формальная постановка задачи следующая. Вам дана последовательность конечных элементов Здесь мы будем обозначать её как A. Ваша задача - напечатать те же элементы
в неубывающем порядке. Еще раз, сортировка - это важная вычислительная задача,
решение которой используется во многих эффективных алгоритмах. Для некоторых алгоритмов
важно просто представить данные элементы в неубывающем порядке,
от наименьшего к наибольшему В некоторых других алгоритмах,
просто сортируя входные данные, вы получаете возможность выполнять 
ваши запросы намного эффективнее Стандартный пример такой 
ситуации - задача о поиске В данной задаче нам дана последовательность 
из конечного числа элементов. Ваша задача здесь - проверить,
находится ли данный элемент в вашей последовательности. Конечно, эту задачу можно решить,
просто сканируя эту последовательность слева направо и проверять,
находится ли необходимый элемент в этой последовательности. Это даёт вам работающий за линейное время алгоритм. И, как вы уже знаете,
если вы подаёте на вход данные, в виде отсортированной последовательности,
вы сможете сделать это намного быстрее. На самом деле, это можно сделать
за логарифмическое время от размера входной последовательности. Сначала вы сравниваете ваш элемент 
с элементом посередине. Если это нужный элемент, то 
мы закончили, если нет, вы продолжаете искать элемент в левой
или правой части вашего массива. В худшем случае за логарифмическое
число сравнений вы сможете сказать, находится ли ваш элемент
в этой последовательности или нет Итак, вам дана последовательность
и вы ожидаете большое количество таких запросов. Вас будут спрашивать о том, 
находится ли заданный объект в массиве или нет. Часто бывает крайне полезным
сначала отсортировать ваши входные данные и только затем производить все эти запросы. Это даст вам в целом намного
более эффективный алгоритм. действий, побуждающих большое число
людей к взаимодействию, И это лишь небольшой пример. Мы увидим много других ситуаций, когда изначальная сортировка входных данных
помогает обрабатывать запросы намного эффективнее Итак, в следующих видео
данного урока мы изучим множество эффективных алгоритмов сортировки.