Hola bienvenidos a la lección del
 problema de ordenamiento. Como siempre, empezamos con una 
revisión del problema. El ordenamiento es un problema 
computacional fundamental. La entrada en este problema consiste
 de una secuencia de n elementos y tu objetivo es devolver estos elementos en,
 por ejemplo, un orden no decreciente. El enunciado formal de este problema es como sigue. Te dan una secuencia finita de n elementos, y usualmente denotaremos la secuencia
 como A, en esta lección. Y tu propósito es devolver estos mismos
 elementos en orden no decreciente. De nuevo, el ordenamiento es una tarea computacional importante
 usada en muchos algoritmos eficientes. Para algunos algoritmos es importante procesar los elementos dados en orden no decreciente, 
del más chico al más grande. En algunos otros algoritmos, sólo 
por ordenar tus datos de entrada, ganas la posibilidad de llevar a cabo consultas 
de manera mucho más eficiente. Un ejemplo canónico de tal situación
 es un problema de búsqueda. En este problema, nos dan una 
secuencia de n elementos y el objetivo es checar si un 
elemento particular está presente en la secuencia. Una forma simple de resolver este problema es,
 por supuesto, explorar tu secuencia de entrada de izquierda a derecha, y checar si tu
 elemento se encuentra en la secuencia. Esto te da un algoritmo de tiempo lineal, y ya sabes ahora que si tus datos de entrada, si tu secuencia de entrada está ordenada, entonces
 puedes hacerlo mucho más rápido. Básicamente en tiempo logarítmico 
del tamaño de la entrada. Entonces, primero comparas tu
 elemento con el elemento a la mitad. si son iguales entonces ya
 terminaste, si no, continúas con el lado izquierdo de la secuencia o con el derecho. Así, en un número logarítmico de 
comparaciones en el peor de los casos, serás capaz de decir si tu elemento 
está presente en la secuencia o no. Entonces, si te dan una secuencia y 
esperar tener muchas consultas, esto es, esperas que te pidan checar
 si un objeto está presente o no, muchas veces, entonces tiene sentido 
que ordenes primero tus datos de entrada y sólo entonces llevar a cabo las consultas. Esto te dará un algoritmo mucho más eficiente en general. su tiempo.
Muy bien. Y esto es sólo un pequeño ejemplo. Veremos otras muchas situaciones, donde ordenar primero tus datos ayuda a
 llevar a cabo consultas de manera más eficiente. En los videos posteriores a esta lección, estudiaremos muchos algoritmos 
que son eficientes para ordenar.