1
00:00:05,247 --> 00:00:10,950
Cystic Fibrosis is one of the most
common genetic diseases in humans.

2
00:00:10,950 --> 00:00:17,050
Approximately one in 25 people
carries a cystic fibrosis gene.

3
00:00:17,050 --> 00:00:22,100
And when both parents carry a faulty gene,
there is a 25% chance

4
00:00:23,340 --> 00:00:26,560
that their child will
have cystic fibrosis.

5
00:00:27,680 --> 00:00:34,630
In the early 1980s biologists started
the hunt for cystic fibrosis genes,

6
00:00:34,630 --> 00:00:41,490
one of the first gene hunting projects in
the framework of the human genome project.

7
00:00:41,490 --> 00:00:46,230
30 years ago biologists
narrowed the search for

8
00:00:46,230 --> 00:00:52,490
the cystic fibrosis gene to a million
nucleotide-long region on chromosome 7.

9
00:00:52,490 --> 00:00:56,820
However, this region contained many genes,
and

10
00:00:56,820 --> 00:01:01,800
it was not clear which of them is
responsible for cystic fibrosis.

11
00:01:01,800 --> 00:01:07,620
How would you find which of these
genes is the cause of cystic fibrosis?

12
00:01:08,620 --> 00:01:09,290
I'll give you a hint.

13
00:01:10,370 --> 00:01:13,650
Cystic fibrosis in
involves sweat secretion

14
00:01:13,650 --> 00:01:16,900
with abnormally high sodium levels.

15
00:01:18,060 --> 00:01:21,940
Well, this is a biological
hint that does not

16
00:01:21,940 --> 00:01:26,710
help us to solve the challenge
of finding something

17
00:01:26,710 --> 00:01:32,500
in this one million nucleotide area that
is responsible for cystic fibrosis.

18
00:01:32,500 --> 00:01:34,820
Let me give you hint number two.

19
00:01:34,820 --> 00:01:39,590
By that time when cystic
fibrosis hunt was on,

20
00:01:39,590 --> 00:01:44,900
biologists already knew the sequences of
some genes responsible for secretions.

21
00:01:44,900 --> 00:01:48,050
For example, ATP binding proteins

22
00:01:48,050 --> 00:01:52,129
act as transport channels responsible for
secretion.

23
00:01:53,370 --> 00:01:58,240
You still may be wondering
how these two hints may help

24
00:01:58,240 --> 00:02:03,230
you to find the cystic
fibrosis gene in the found

25
00:02:03,230 --> 00:02:07,450
one million nucleotide-long
region on chromosome 7.

26
00:02:07,450 --> 00:02:08,800
But here's my third hint.

27
00:02:09,900 --> 00:02:15,150
Should we search for
genes in this region that are similar

28
00:02:15,150 --> 00:02:17,983
to known genes responsible for secretion?

29
00:02:17,983 --> 00:02:23,910
Biologists used this third hint and bingo,

30
00:02:23,910 --> 00:02:29,820
they found that one of genes in
this region was similar to the ATP

31
00:02:29,820 --> 00:02:36,830
binding proteins that act as transport
channels responsible for secretion.

32
00:02:36,830 --> 00:02:41,820
To learn how biologists find
similarities between chance,

33
00:02:41,820 --> 00:02:46,900
we will first learn how to play a simple
game called the alignment game.

34
00:02:47,910 --> 00:02:51,310
The alignment game is
a single person game.

35
00:02:51,310 --> 00:02:56,430
I give you two strings, and
your goal is to remove symbol

36
00:02:56,430 --> 00:03:02,090
from the strings in such a way that
the number of points is maximized.

37
00:03:02,090 --> 00:03:06,810
I have to explain to you how you can get
points for playing the alignment game.

38
00:03:06,810 --> 00:03:11,710
You can either remove the first
symbol from both strings.

39
00:03:11,710 --> 00:03:16,250
And in this case, you get one
point if they're the same symbol,

40
00:03:16,250 --> 00:03:20,030
you don't get any points if
they are different symbol.

41
00:03:20,030 --> 00:03:25,440
Or you can remove first symbol
from one of the strings and

42
00:03:25,440 --> 00:03:28,390
in this case you also
don't get any points.

43
00:03:28,390 --> 00:03:30,240
So let's try to play this game.

44
00:03:30,240 --> 00:03:33,970
In the beginning it makes sense to remove
the first symbol from both strings,

45
00:03:33,970 --> 00:03:35,999
we'll get plus one.

46
00:03:35,999 --> 00:03:41,770
Then another pair of identical symbols,
another plus one.

47
00:03:41,770 --> 00:03:43,220
And now symbols are different so

48
00:03:43,220 --> 00:03:48,430
it doesn't make sense to remove them
both because we'll get zero point.

49
00:03:48,430 --> 00:03:54,300
Maybe we should only remove C from
the second string and after we've

50
00:03:54,300 --> 00:03:59,540
done this there is a possibility
to remove two Gs from both string.

51
00:03:59,540 --> 00:04:04,332
We get another point we continue,
continue, continue, and

52
00:04:04,332 --> 00:04:08,860
finally after playing this game
we get score of plus four.

53
00:04:08,860 --> 00:04:14,120
Do you think you can get score
of plus five playing this game?

54
00:04:15,400 --> 00:04:18,570
We also after playing this
game have

55
00:04:18,570 --> 00:04:22,660
constructed something that is
called alignment of two strings.

56
00:04:22,660 --> 00:04:26,960
Alignment of two strings is
a two row matrix such that,

57
00:04:26,960 --> 00:04:33,360
that first row consist of symbols
of the first string in order,

58
00:04:33,360 --> 00:04:37,530
possibly interspaced
with the space symbol.

59
00:04:37,530 --> 00:04:42,630
And the second row consists of the
symbols of the second string once again,

60
00:04:42,630 --> 00:04:46,038
possibly interspersed
with the space symbol.

61
00:04:46,038 --> 00:04:50,840
After we constructed the alignment,
we can classify

62
00:04:50,840 --> 00:04:56,180
different columns in the alignment
matrix as matches or

63
00:04:56,180 --> 00:04:59,860
mismatches or insertions.

64
00:04:59,860 --> 00:05:04,200
Insertions corresponds to the case
when we selected the symbol

65
00:05:04,200 --> 00:05:06,630
from the second string and

66
00:05:06,630 --> 00:05:12,100
deletions that correspond to the case when we
selected the symbol from the first string.

67
00:05:12,100 --> 00:05:17,510
And more over we can score this
alignment by giving premium for

68
00:05:17,510 --> 00:05:23,510
every match, we'll give premium plus
one and penalty for every mismatch and

69
00:05:23,510 --> 00:05:28,590
every insertion and
deletion that we denote as indel.

70
00:05:28,590 --> 00:05:34,125
In our case we will use penalty
minus mu for mismatches and

71
00:05:34,125 --> 00:05:40,137
penalty minus sigma for
insertions and deletions or indels.

72
00:05:40,137 --> 00:05:44,375
For example in our case
if mu equals zero and

73
00:05:44,375 --> 00:05:51,440
sigma equal to one,
then we get alignment score equal to one.

74
00:05:51,440 --> 00:05:56,450
So we define the alignment score
as number of matches minus mu

75
00:05:56,450 --> 00:06:00,780
number of mismatches and
minus sigma number of indels.

76
00:06:00,780 --> 00:06:06,810
And the optimal alignment problem is
given two strings mismatch penalty mu,

77
00:06:06,810 --> 00:06:13,530
and indel penalty sigma find an alignment
of two strings maximizing the score.

78
00:06:13,530 --> 00:06:18,720
We will be particularly interested in
one particular score of alignment.

79
00:06:18,720 --> 00:06:21,550
We will define common subsequence

80
00:06:21,550 --> 00:06:25,520
as simply matches in
an alignment of two strands.

81
00:06:25,520 --> 00:06:30,500
In this case,
common subsequence is represented by ATGT,

82
00:06:30,500 --> 00:06:35,470
and the longest common subsequence
problems that we will be

83
00:06:35,470 --> 00:06:37,510
interested in is the following.

84
00:06:37,510 --> 00:06:40,390
Given two strings we want to find

85
00:06:40,390 --> 00:06:42,990
the longest common
subsequence of these strings.

86
00:06:44,050 --> 00:06:49,230
And of course,
you have already recognized that to find

87
00:06:49,230 --> 00:06:54,830
longest common subsequence we simply
need to find maximum score alignment

88
00:06:54,830 --> 00:06:59,550
with the parameters mu equals zero and
sigma equals zero.

89
00:07:00,960 --> 00:07:05,790
Another classical problem in computer
science is the edit distance problem.

90
00:07:05,790 --> 00:07:11,270
Given two strings, find the minimum
number of elementary operations,

91
00:07:11,270 --> 00:07:15,500
insertions, deletions, or
substitutions of symbols.

92
00:07:15,500 --> 00:07:19,520
That transform one string into another.

93
00:07:19,520 --> 00:07:22,480
And of course the minimum number
of insertions, deletions, and

94
00:07:22,480 --> 00:07:28,530
mismatches in an alignment of two strings,
represents the edit distance.

95
00:07:28,530 --> 00:07:34,320
For example, if you want to find
the editing distance between the strings,

96
00:07:34,320 --> 00:07:39,040
editing and distance, they can construct

97
00:07:39,040 --> 00:07:43,650
optimal alignment of the string
with appropriate scores.

98
00:07:43,650 --> 00:07:47,320
Here I show matches,
mismatches,insertions, deletions.

99
00:07:47,320 --> 00:07:51,660
And to see that the edit distance problem
is equivalent to the alignment problem

100
00:07:51,660 --> 00:07:55,542
let's consider this alignment
between editing and distance.

101
00:07:55,542 --> 00:07:58,830
And let's compute the total
number of symbols in the two strings.

102
00:08:00,120 --> 00:08:04,240
Obviously the total number of
symbol in two strings is equal to

103
00:08:04,240 --> 00:08:08,040
twice number of matches,
plus twice number of mismatches

104
00:08:08,040 --> 00:08:11,410
plus number of insertions
plus number of deletions.

105
00:08:11,410 --> 00:08:16,454
I will take the liberty to derive this
expression and after I rewrote it you

106
00:08:16,454 --> 00:08:21,336
will see that the first three terms
corresponds to the alignment score,

107
00:08:21,336 --> 00:08:25,490
and the last three terms
corresponds to the edit distance.

108
00:08:26,670 --> 00:08:33,003
Therefore, minimizing edit distance is the
same as maximizing the alignment score.

109
00:08:33,003 --> 00:08:37,327
Which means the edit distance problem
is just one particular version of

110
00:08:37,327 --> 00:08:38,850
the alignment problem.