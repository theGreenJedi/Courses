1
00:00:00,640 --> 00:00:06,057
In this last video of this lesson, we
show a method of reconstructing an actual

2
00:00:06,057 --> 00:00:11,240
solution from two tables computed by
our dynamic programming algorithm.

3
00:00:13,100 --> 00:00:17,300
Okay, here on this slide we see
two tables, m and capital M.

4
00:00:17,300 --> 00:00:20,080
Computed by our dynamic program and

5
00:00:20,080 --> 00:00:25,600
algorithm which contain minimal and
maximal values respectively for

6
00:00:25,600 --> 00:00:29,400
all possible subexpressions
of our initial expression.

7
00:00:30,460 --> 00:00:35,830
Let me first put in this for

8
00:00:35,830 --> 00:00:40,890
all the rows and
columns of these two matrices,

9
00:00:40,890 --> 00:00:47,190
as well as numbers for our initial digits.

10
00:00:49,200 --> 00:00:54,205
Well, in particular, we see by
reading the contents of this cell

11
00:00:54,205 --> 00:01:01,303
capital M of (1,6) that the maximal value
of our initial expression is equal to 200,

12
00:01:01,303 --> 00:01:05,398
and our goal is to unwind
the whole solution, I mean,

13
00:01:05,398 --> 00:01:10,940
parenthesizing of the initial expression,
from these two tables.

14
00:01:10,940 --> 00:01:15,705
So our first goal on this way
is to understand from which two

15
00:01:15,705 --> 00:01:21,360
subexpressions of the initial
expression the value 200 was computed.

16
00:01:22,500 --> 00:01:28,308
Well, let's see, when computing
the value for the maximal value for

17
00:01:28,308 --> 00:01:33,528
subexpression (1,6),
we tried all possible splittings

18
00:01:33,528 --> 00:01:38,910
of the expression (1,6)
into two subexpressions.

19
00:01:38,910 --> 00:01:41,333
Well, let's just go through all of them.

20
00:01:41,333 --> 00:01:49,259
The first possibility is to split
it into two subexpressions (1,1),

21
00:01:49,259 --> 00:01:54,291
which corresponds just
to the first digit which

22
00:01:54,291 --> 00:01:59,071
is just 5, and subexpression (2,6),

23
00:01:59,071 --> 00:02:03,377
with a minus sign between them, right.

24
00:02:03,377 --> 00:02:08,038
So for both these two subexpressions
we already know minimal values and

25
00:02:08,038 --> 00:02:09,510
maximal values.

26
00:02:09,510 --> 00:02:10,970
Well, let me mark them.

27
00:02:10,970 --> 00:02:13,970
So this is the minimal value for
the subexpression (1,1).

28
00:02:13,970 --> 00:02:17,019
This is the maximal value for
subexpression (1,1).

29
00:02:17,019 --> 00:02:21,912
For (2,6), this is the minimal value,

30
00:02:21,912 --> 00:02:27,080
-195, and this is a maximal value, 75.

31
00:02:27,080 --> 00:02:33,600
So we would like to
maximize this subexpression

32
00:02:33,600 --> 00:02:38,480
one minus subexpression two, which means
that we would like the first subexpression

33
00:02:38,480 --> 00:02:42,705
to be as large as possible and the second
subexpression to be as small as possible.

34
00:02:42,705 --> 00:02:45,510
Well, this means that we need to

35
00:02:45,510 --> 00:02:49,350
try to take the maximal value of
the first subexpression which is five and

36
00:02:49,350 --> 00:02:53,230
the minimal value of the second
subexpression which is -195.

37
00:02:53,230 --> 00:02:57,001
Well, we see that in this case,

38
00:02:57,001 --> 00:03:02,590
5 minus -195 is the same as 5 plus 195,

39
00:03:02,590 --> 00:03:07,203
which equals exactly 200, right,

40
00:03:07,203 --> 00:03:12,095
which allows us to conclude, actually,

41
00:03:12,095 --> 00:03:18,790
that the value 200 can
be obtained as follows.

42
00:03:18,790 --> 00:03:23,524
So, we subtract the minimum
value which is -195

43
00:03:23,524 --> 00:03:27,943
over the second subexpression from 5,
right.

44
00:03:27,943 --> 00:03:31,984
So we restored the last
operation in an optimal

45
00:03:31,984 --> 00:03:36,350
parenthesizing of the initial expression.

46
00:03:36,350 --> 00:03:40,977
However, we still need to
find out how to obtain

47
00:03:40,977 --> 00:03:45,268
-195 out of the second subexpression.

48
00:03:45,268 --> 00:03:47,545
Well, let's do this.

49
00:03:52,929 --> 00:03:56,975
Okay, so
we need to find how the minimum value

50
00:03:56,975 --> 00:04:01,349
of the subexpression (2,6) was obtained.

51
00:04:02,570 --> 00:04:05,673
Well, there are several possible
splittings, once again,

52
00:04:05,673 --> 00:04:09,444
of the subexpression (2,6) into
two smaller sub-subexpressions.

53
00:04:09,444 --> 00:04:16,560
The first of them is to
split (2,6) into (2,2),

54
00:04:16,560 --> 00:04:23,544
which just corresponds to
the digit 8 plus (3,6).

55
00:04:23,544 --> 00:04:28,256
Well, in this case, we would like
the value to be as small as possible and

56
00:04:28,256 --> 00:04:32,892
our sign is plus in this case, which
means that we would like the value of

57
00:04:32,892 --> 00:04:36,526
subexpression (2,2) to be
as small as possible and

58
00:04:36,526 --> 00:04:41,530
the value of subexpression (3,6)
also to be as small as possible.

59
00:04:41,530 --> 00:04:46,386
And you already know these values,
they are in our tables,

60
00:04:46,386 --> 00:04:51,049
so the minimal value of
subexpression (2,2) is 8,

61
00:04:51,049 --> 00:04:57,384
while the minimum value of subexpression
(3, 6) is minus 91, right.

62
00:04:57,384 --> 00:05:03,736
So we see that the sum of these
two values is not equal to -195,

63
00:05:03,736 --> 00:05:09,050
right, which means that plus
is not the last operation

64
00:05:09,050 --> 00:05:14,250
in the optimal parenthesizing
that gives the minimum

65
00:05:14,250 --> 00:05:18,780
value of subexpression (2, 6), right.

66
00:05:18,780 --> 00:05:20,898
So let's check the next one.

67
00:05:20,898 --> 00:05:26,282
Another possibility to split
the subexpression (2, 6) is the following.

68
00:05:26,282 --> 00:05:29,741
We split it into subexpression (2,

69
00:05:29,741 --> 00:05:34,182
3) times subexpression (4, 6), right.

70
00:05:34,182 --> 00:05:42,630
So once again, we would like to find
the minimum value of subexpression (2, 6).

71
00:05:42,630 --> 00:05:45,280
Well, let's see just all possibilities.

72
00:05:45,280 --> 00:05:50,061
The minimum value of subexpression (2,
3) is 15.

73
00:05:52,011 --> 00:05:54,700
It's maximal value is also 15.

74
00:05:54,700 --> 00:06:00,490
As to subexpression (4,6),
its minimum value is -13.

75
00:06:00,490 --> 00:06:03,395
It's maximal value is 5.

76
00:06:04,670 --> 00:06:09,630
And we would like the product of these
two values to be as small as possible.

77
00:06:09,630 --> 00:06:13,765
Well, it is not difficult to
see that if we take just 15 and

78
00:06:13,765 --> 00:06:18,648
multiply it, which is a minimum
value of subexpression (2,3),

79
00:06:18,648 --> 00:06:23,614
and multiply it by the minimum
value of the subexpression (4,6),

80
00:06:23,614 --> 00:06:27,046
which is -13, then we get exactly -195.

81
00:06:27,046 --> 00:06:32,540
And this, in turn, allows us to get -195

82
00:06:32,540 --> 00:06:37,200
from the subexpression (2,6).

83
00:06:37,200 --> 00:06:40,520
We can do as follows.

84
00:06:40,520 --> 00:06:43,481
We can first compute the sum of 8 and 7.

85
00:06:43,481 --> 00:06:44,740
This gives us 15.

86
00:06:44,740 --> 00:06:49,115
And then to multiply it by the result
of the second subexpression.

87
00:06:50,570 --> 00:06:57,211
Well, now it remains to find out how to
get -13 out of this subexpression for

88
00:06:57,211 --> 00:07:02,760
6, but in this small example,
it is already easy to get -13.

89
00:07:02,760 --> 00:07:07,473
Well, we just first compute
the sum of 8 and 9 and

90
00:07:07,473 --> 00:07:10,738
then subtract it from 4, right.

91
00:07:10,738 --> 00:07:15,254
So this way we reconstructed
the whole solution, I mean,

92
00:07:15,254 --> 00:07:21,986
an optimal parenthesizing, or an optimal
ordering, of our arithmetic operations,

93
00:07:21,986 --> 00:07:26,430
leading to this value,
to this maximal value, 200.

94
00:07:26,430 --> 00:07:31,997
Let's just check it once again that our
parenthesizing leads to the value 200,

95
00:07:31,997 --> 00:07:33,610
indeed.

96
00:07:33,610 --> 00:07:37,628
So we first compute the sum of 8 and 9.

97
00:07:37,628 --> 00:07:39,380
This gives us 17.

98
00:07:39,380 --> 00:07:46,280
We then subtract 17 from 4.

99
00:07:46,280 --> 00:07:49,140
And this gives us -13.

100
00:07:49,140 --> 00:07:52,820
We then compute the sum of 8 and 7.

101
00:07:52,820 --> 00:07:54,192
This gives us 15.

102
00:07:54,192 --> 00:07:57,650
We multiply 15 by -13.

103
00:07:57,650 --> 00:08:01,090
It gives us -195, and, finally,

104
00:08:01,090 --> 00:08:06,720
we subtract this number from 5,
and we get 200, indeed.

105
00:08:06,720 --> 00:08:08,900
So we reconstructed the whole solution.

106
00:08:08,900 --> 00:08:14,840
In general, I mean for
an expression consisting of n digits and

107
00:08:14,840 --> 00:08:20,750
n minus 1 operations they can respond, an
algorithm makes roughly quadratic number

108
00:08:20,750 --> 00:08:26,315
of steps, because it needs to reconstruct
n minus one operations, I mean,

109
00:08:26,315 --> 00:08:31,110
an order of n minus one operations,
going from last one to the first one.

110
00:08:31,110 --> 00:08:35,796
And for each operation, it potentially
needs to go through all possible

111
00:08:35,796 --> 00:08:40,470
splittings into two subexpressions,
and this number is at most M.

112
00:08:40,470 --> 00:08:45,880
So the running time is bigger of ten
times M, which is bigger of M squared.

113
00:08:45,880 --> 00:08:47,810
And this technique is quite general.

114
00:08:47,810 --> 00:08:53,656
It applies in many cases in
the dynamic problem in algorithms.