1
00:00:00,570 --> 00:00:04,740
Hello, and welcome to the next lesson
in the dynamic programming module.

2
00:00:04,740 --> 00:00:09,270
In this lesson, we will be applying the
dynamic programming technique for solving

3
00:00:09,270 --> 00:00:13,730
a wide range of problems where your goal
is to find an optimal order of something.

4
00:00:13,730 --> 00:00:16,500
We will illustrate this
technique by solving

5
00:00:16,500 --> 00:00:19,730
the so-called placing parentheses problem.

6
00:00:19,730 --> 00:00:25,380
In this problem, your input is
an arithmetic expression consisting of

7
00:00:25,380 --> 00:00:30,252
numbers or digits and arithmetic
operations, and your goal is to find

8
00:00:30,252 --> 00:00:36,210
an order of applying these arithmetic
operations that maximizes the radian.

9
00:00:36,210 --> 00:00:39,690
You specify this order by
placing parentheses, and

10
00:00:39,690 --> 00:00:42,814
that's why the problem is
called placing parentheses.

11
00:00:43,880 --> 00:00:46,480
As usual we start with problem overview.

12
00:00:47,930 --> 00:00:51,230
Consider the following toy
arithmetic expression.

13
00:00:51,230 --> 00:00:55,315
1 + 2- 3 x 4- 5.

14
00:00:55,315 --> 00:00:59,135
In this case we have five digits and
four arithmetic operations.

15
00:00:59,135 --> 00:01:03,820
And we would like to find an order
of applying these four arithmetic

16
00:01:03,820 --> 00:01:07,679
operations to maximize
the value of this expression.

17
00:01:07,679 --> 00:01:11,850
So when the order of operation is fixed,
you do the following.

18
00:01:11,850 --> 00:01:13,880
You take the first operation.

19
00:01:13,880 --> 00:01:17,500
You take two adjusting digits,
and you apply these operations.

20
00:01:17,500 --> 00:01:21,445
For example, if the operation is
multiplication, in this case, so

21
00:01:21,445 --> 00:01:23,152
then two digits are 3 and 4.

22
00:01:23,152 --> 00:01:29,815
So you multiply 3 and 4, you get 12,
and you just replace 3 times 4 by 12.

23
00:01:29,815 --> 00:01:35,892
You then take the next operation,
apply it also, and replace two numbers and

24
00:01:35,892 --> 00:01:41,882
the arithmetic sign by this result,
until you proceed in a similar fashion.

25
00:01:41,882 --> 00:01:44,950
In the end here, you get a single number.

26
00:01:44,950 --> 00:01:49,943
And your goal is to find an order
that guarantees that this

27
00:01:49,943 --> 00:01:52,760
number is as large as possible.

28
00:01:53,990 --> 00:02:00,740
You can specify an order just by placing
a set of parentheses in your expression.

29
00:02:00,740 --> 00:02:05,647
For example, if you would like to
apply all your four operations just

30
00:02:05,647 --> 00:02:09,900
from left to right,
you place the parentheses as follows.

31
00:02:09,900 --> 00:02:13,390
In this particular case,
we compute the results as follows.

32
00:02:13,390 --> 00:02:16,320
So we first compute 1 + 2, this is 3.

33
00:02:16,320 --> 00:02:19,960
We then subtract 3 from the results.

34
00:02:19,960 --> 00:02:21,360
This gives us 0.

35
00:02:21,360 --> 00:02:24,130
We then multiply the result by 4.

36
00:02:24,130 --> 00:02:25,530
This is still 0.

37
00:02:25,530 --> 00:02:27,267
And finally, we subtract 5.

38
00:02:27,267 --> 00:02:29,601
So this gives us -5.

39
00:02:29,601 --> 00:02:37,090
And this is actually non-optimal, because
for example, there is a better order.

40
00:02:37,090 --> 00:02:42,410
In this case, we first multiply 3 and
4, this gives us 12.

41
00:02:42,410 --> 00:02:45,040
We then subtract 5, this gives us 7.

42
00:02:45,040 --> 00:02:49,634
Then we go to compute the sum of 1 and
2, this gives us 3.

43
00:02:49,634 --> 00:02:54,200
So when the final operation is
subtraction, we subtract 7 from 3.

44
00:02:54,200 --> 00:02:56,380
This gives us -4.

45
00:02:56,380 --> 00:03:00,880
So in this case the order of applying
operations was the following.

46
00:03:00,880 --> 00:03:06,100
So we first compute the product of 3 and
4, so this is the first operation.

47
00:03:06,100 --> 00:03:07,775
We then subtract 5.

48
00:03:07,775 --> 00:03:09,239
This is the second operation.

49
00:03:09,239 --> 00:03:13,210
We then compute the result of 1 + 2.

50
00:03:13,210 --> 00:03:15,700
So this plus is the third operation, and

51
00:03:15,700 --> 00:03:19,240
this minus is the fourth operation,
the last one.

52
00:03:20,720 --> 00:03:24,890
It is not difficult to see that the
optimal value in this case is equal to 6.

53
00:03:24,890 --> 00:03:27,230
And it can be obtained as follows.

54
00:03:27,230 --> 00:03:29,275
You first subtract 5 from 4.

55
00:03:29,275 --> 00:03:30,517
This gives you -1.

56
00:03:30,517 --> 00:03:35,294
You then multiply it by 3, and you get -3.

57
00:03:35,294 --> 00:03:37,976
You then compute the sum
of the first two digits.

58
00:03:37,976 --> 00:03:40,321
This is 1 + 2, and that is equal to 3.

59
00:03:40,321 --> 00:03:43,999
Finally you subtract -3 from 3.

60
00:03:43,999 --> 00:03:47,413
This is the same as 3 + 3,
it is equal to 6.

61
00:03:47,413 --> 00:03:50,481
Well, you might find
the result as follows,

62
00:03:50,481 --> 00:03:53,317
you just go through all possible orders.

63
00:03:53,317 --> 00:03:58,906
Let's see how many
different orders are there.

64
00:03:58,906 --> 00:04:03,195
Well, there are four arithmetic
operations in this case, so

65
00:04:03,195 --> 00:04:08,889
you can choose any of the four possible
arithmetic operations to be the first one.

66
00:04:08,889 --> 00:04:14,169
You can choose any of these three
remaining operations to be the second one,

67
00:04:14,169 --> 00:04:19,303
and you can select any of the two
remaining operations to be the third one.

68
00:04:19,303 --> 00:04:23,690
And the last one is unique,
it is the only remaining operations.

69
00:04:23,690 --> 00:04:30,550
So, in total, there are 4 by
3 by 2 by 1 different orders.

70
00:04:30,550 --> 00:04:35,480
This is equal to 24, and you can just
enumerate all of them, write them down,

71
00:04:35,480 --> 00:04:42,700
compute an answer for each of these
orderings and select the maximal value.

72
00:04:42,700 --> 00:04:48,420
However, our method of going through all
possible orderings does not scale well.

73
00:04:48,420 --> 00:04:49,622
And this is why.

74
00:04:49,622 --> 00:04:52,744
Consider the toy example
shown on the slide.

75
00:04:52,744 --> 00:04:57,320
In this case we have six digits and
five arithmetic operations.

76
00:04:57,320 --> 00:05:03,320
This example will require us to go
through all possible 120 orderings.

77
00:05:05,140 --> 00:05:10,590
So just because there are five iterations,
so any of five of them can be

78
00:05:10,590 --> 00:05:14,660
the first one, any of the remaining four
of them can be the second one, and so on.

79
00:05:14,660 --> 00:05:21,000
So this is 5 by 4 by 3 by 2 by 1,
which is equal to 120.

80
00:05:21,000 --> 00:05:23,960
This is already not so
easy to do this by hand.

81
00:05:23,960 --> 00:05:25,988
I mean,
to go through all possible such orderings.

82
00:05:25,988 --> 00:05:30,434
Well, this is not easy, but
we can teach a computer to do this, right?

83
00:05:30,434 --> 00:05:34,490
So we can implement an algorithm that
goes through all possible orderings.

84
00:05:34,490 --> 00:05:41,000
However, in general, this algorithm
will perform roughly n factorial steps,

85
00:05:41,000 --> 00:05:45,750
where n is the number of arithmetic
operations, for exactly the same reason.

86
00:05:45,750 --> 00:05:52,530
If you have n arithmetic operations,
then any of them can be the first one.

87
00:05:52,530 --> 00:05:57,050
Any of the remaining n minus 1 operations
can be the second one, and so on.

88
00:05:57,050 --> 00:06:01,244
So this is n times n minus 1,
times n minus 2, and so on.

89
00:06:01,244 --> 00:06:08,313
This is equal n factorial, and n factorial
is an extremely fastly growing function.

90
00:06:08,313 --> 00:06:16,440
For example, 20 factorial already
equals roughly 2 times 10 to the 18.

91
00:06:16,440 --> 00:06:21,456
This means that if you implement such
an algorithm, it will not be able to

92
00:06:21,456 --> 00:06:26,556
compute the maximum value of an expression
consisting of just 20 digits

93
00:06:26,556 --> 00:06:31,352
in a reasonable time, even in one year,
not to say about one second.

94
00:06:31,352 --> 00:06:35,392
Which means, as usual,
that we need another algorithm,

95
00:06:35,392 --> 00:06:37,626
as you might well have guessed.

96
00:06:37,626 --> 00:06:44,453
We will use dynamic programming to find,
to design a more efficient algorithm.

97
00:06:44,453 --> 00:06:49,979
In the meantime, you might want
to check your intuition by trying

98
00:06:49,979 --> 00:06:55,305
a few possible orderings to
perform in this small expression,

99
00:06:55,305 --> 00:06:57,930
and by using our in video quiz.