1
00:00:00,480 --> 00:00:04,230
Hi, in this short video,
we will solve a code problem together.

2
00:00:04,230 --> 00:00:06,620
The problem itself is quite elementary.

3
00:00:06,620 --> 00:00:10,560
So the main purpose of this video is
to show you the general pipeline

4
00:00:10,560 --> 00:00:12,730
of solving code problems in this class.

5
00:00:15,170 --> 00:00:17,250
The problem is called A plus B.

6
00:00:17,250 --> 00:00:21,250
In this problem, we are given two
digits on the standard input and

7
00:00:21,250 --> 00:00:25,230
our goal is to output their
sum on the standard output.

8
00:00:26,840 --> 00:00:31,380
You can see two sample
tests here on the page.

9
00:00:31,380 --> 00:00:36,840
For example, if the input for your
program consists of the integers 3 and

10
00:00:36,840 --> 00:00:39,760
2, then your program should output 5.

11
00:00:39,760 --> 00:00:43,776
If, on the other hand, the input 
consists of two integers 7 and

12
00:00:43,776 --> 00:00:48,750
9, then your program is supposed
to output 16, of course.

13
00:00:48,750 --> 00:00:54,480
The next section consists
of three Starter files.

14
00:00:54,480 --> 00:00:59,330
Which in this particular case are actually
solutions, not just starter files.

15
00:00:59,330 --> 00:01:05,300
So the files are for programming
languages Python, Java, and C++.

16
00:01:05,300 --> 00:01:09,850
Finally the last section
contains an instruction

17
00:01:09,850 --> 00:01:13,540
consisting of four steps on
how to solve this problem.

18
00:01:13,540 --> 00:01:16,260
So let's go through these
four steps together.

19
00:01:17,640 --> 00:01:21,540
The first step is to download
one of the starter files.

20
00:01:21,540 --> 00:01:26,929
For this, let's select the C++
starter file, and let's download it.

21
00:01:31,297 --> 00:01:31,800
Okay.

22
00:01:37,740 --> 00:01:41,971
Now the file is here and
let's take a look inside.

23
00:01:41,971 --> 00:01:48,690
So, this is a very simple solution which,
first, creates three variables.

24
00:01:48,690 --> 00:01:52,570
Then it reads a and
b from the standard input.

25
00:01:52,570 --> 00:01:54,850
Then it computes the sum.

26
00:01:54,850 --> 00:02:00,090
And then finally it outputs
the sum on the standard output.

27
00:02:03,030 --> 00:02:06,110
So to run this program we
first need to compile it.

28
00:02:06,110 --> 00:02:09,490
So this is the second
step of our instruction.

29
00:02:09,490 --> 00:02:12,898
For this we highly
recommend to use the same

30
00:02:12,898 --> 00:02:17,850
compiler flags that are shown on this page.

31
00:02:18,920 --> 00:02:22,850
This will ensure that your
program behaves in the same way

32
00:02:23,920 --> 00:02:26,620
on the testing system and
on your local machine.

33
00:02:26,620 --> 00:02:33,198
So in this case let's
just copy the flags and

34
00:02:33,198 --> 00:02:37,970
use it to compile our program.

35
00:02:37,970 --> 00:02:43,250
So this produced an executable
file a.out and we can now run it.

36
00:02:46,750 --> 00:02:49,990
Let's give this program for
example 2 and 3.

37
00:02:49,990 --> 00:02:51,710
So the output is 5.

38
00:02:51,710 --> 00:02:54,910
Well, one more test.

39
00:02:54,910 --> 00:03:00,250
9 and 4, the output is 13 as expected.

40
00:03:00,250 --> 00:03:02,040
So far, so good.

41
00:03:02,040 --> 00:03:10,550
And now the next step is to actually
submit this solution to this problem.

42
00:03:10,550 --> 00:03:12,030
Let's go to my submission tab.

43
00:03:14,680 --> 00:03:20,360
Press create submission,
then replace a file by this .cpp file

44
00:03:25,368 --> 00:03:27,240
And press the Submit button.

45
00:03:29,160 --> 00:03:33,360
So after a while, the testing system shows

46
00:03:33,360 --> 00:03:38,110
that our solution passed all the tests,
which is quite satisfactory.

47
00:03:38,110 --> 00:03:41,122
In this particular case,
the grader output is empty,

48
00:03:41,122 --> 00:03:45,590
meaning that there is no
error message in this case.

49
00:03:46,730 --> 00:03:50,800
To illustrate it one more time, let me
repeat the whole procedure quickly for

50
00:03:50,800 --> 00:03:53,090
the Python programming language.

51
00:03:53,090 --> 00:03:57,640
So we first download
the starter Python file.

52
00:04:08,902 --> 00:04:10,570
Let's take a look at what is inside.

53
00:04:14,053 --> 00:04:16,890
So the program is again
very simple as expected.

54
00:04:16,890 --> 00:04:22,600
So we just take a and be from the standard
input and we output the sum of a and b.

55
00:04:22,600 --> 00:04:26,640
Now we need to run this program for

56
00:04:26,640 --> 00:04:32,510
this you might want to go to this
available programming languages page.

57
00:04:32,510 --> 00:04:37,780
Again just to check how we
run Python scripts so

58
00:04:37,780 --> 00:04:39,690
we just use Python, Python 3.

59
00:04:39,690 --> 00:04:41,800
So let's do this.

60
00:04:45,420 --> 00:04:53,060
For example 4, 4 and
the output is 8 which is as expected.

61
00:04:53,060 --> 00:05:00,510
So let's just go ahead and
submit this solution.

62
00:05:00,510 --> 00:05:05,870
So you go to the my submission tab,
you press the Create Submission button and

63
00:05:05,870 --> 00:05:13,319
then you replace this file by APlusB.py.

64
00:05:19,004 --> 00:05:23,850
So when the file is uploaded,
you finally press the Submit button.

65
00:05:26,875 --> 00:05:33,330
So in a few seconds, this solution will
be accepted by the testing system.

66
00:05:33,330 --> 00:05:36,060
Well this wasn't very challenging, right?

67
00:05:36,060 --> 00:05:38,790
In the next video we will see a much more

68
00:05:38,790 --> 00:05:41,190
interesting example of
a computational problem.

69
00:05:41,190 --> 00:05:44,610
For this problem we will
start with a naive solution.

70
00:05:44,610 --> 00:05:48,260
We will submit this solution to a testing
system to figure out that it is buggy

71
00:05:48,260 --> 00:05:49,230
actually.

72
00:05:49,230 --> 00:05:50,380
That there is a bug.

73
00:05:50,380 --> 00:05:56,200
So we will fix this bug, submit it again,
to find out that our solution is slow.

74
00:05:56,200 --> 00:06:00,900
We will get a time limit exceeded
feedback message from the testing system.

75
00:06:00,900 --> 00:06:06,610
Meaning that for large data sets it works
in more than one second, for example.

76
00:06:06,610 --> 00:06:11,270
So this will require us to come up
with a much, more faster solution.

77
00:06:11,270 --> 00:06:13,860
We will implement it,
submit it to the system,

78
00:06:13,860 --> 00:06:16,940
again, to find out that it is still buggy.

79
00:06:16,940 --> 00:06:21,150
We will use stress testing to
locate the bug, to fix it, and

80
00:06:21,150 --> 00:06:27,144
to finally submit a correct solution to
the system which will pass all the tests.