Hola, en este video, revisaremos brevemente los ingredientes
 principales de los algoritmos voraces. Y el primero de ellos es la reducción a un subproblema. Básicamente, cuando tienes algún problema, 
haces un primero movimiento que reduce tu problema a uno similar pero más pequeño. Por ejemplo, tienes menos dígitos o 
menos estaciones que tienes que manejar, y este problema similar, que es menor, 
es llamado subproblema. Otro ingrediente clave es un movimiento seguro y el movimiento es llamado seguro si es
 consistente con una solución óptima. En otras palabras, si existe alguna solución 
óptima en la cual el primer movimiento es el mismo conforme te mueves.
 entonces se llama un movimiento seguro. Pero no todas las primeras movidas son seguras, de hecho. Por ejemplo, viajar hasta que no haya combustible no es un movimiento
 seguro en el problema sobre el combustible del carro. Y seguido, movidas voraces no son 
seguras tampoco. Por ejemplo, llegar a la estación más cercana y
 recargar no es una movida segura, mientras que llegar a la estación más
 lejana alcanzable es una movida segura. Ahora, la estrategia general de 
resolver un problema es como sigue: Primero, analizas el problema e ideas alguna elección voraz. Y entonces, la clave es mostrar que
 esta elección voraz es una movida segura, y realmente tienes que probarlo, porque, de otra manera, puedes proponer una eleción voraz y de ahí proponer un algoritmo voraz, 
implementarlo, probarlo e intentar enviarlo al sistema sólo para enterarte que el algoritmo es incorrecto, porque el primer movimiento no es
 realmente seguro y hay casos en que esta primer movimiento no es 
consistente con una solución óptima. Y en ese caso, tendremos que inventar una nueva solución e implementarla desde el inicio. Todo el trabajo que hayas hecho antes será inútil. Así que, por favor, prueba tus algoritmos 
y prueba que el primer movimiento es seguro. Cuando pruebes eso, reduces un problema a un subproblema, y, con suerte, es un problema similar, 
un problema del mismo tipo, y entonces empiezas a resolver este
 subproblema de la misma forma. Haces tu elección voraz y lo reduces a un subproblema, e iteras hasta que ya no hay problemas 
o hasta que tu problema sea tan simple que puedes resolverlo en el acto. Y en las siguientes lecciones, aplicaremos algoritmos voraces para 
resolver problemas más difíciles.