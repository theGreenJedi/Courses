大家好 这节课，你将要学习一个算法来决定，在一次非常久的徒步旅行中
你应该带哪些食物 及其数量 可以使得食物的能量值最大。 所以，你正在计划一个时间很久的徒步旅行。 这将会花费好多天或者好几周时间，但是 你不知道这到底会花费多长时间。 所以，为了安全，你需要带充足的食物。 你有一个可以装下最多15千克的食物 你已经买了一些起司，一些火腿，一些坚果 可能还有一些其他食物 你想把它们全部装进背包， 使得你可以从中获取最大量的卡路里。 当然，你可以把起司切成块。 也可以切火腿。 你可以只选择其中一些坚果。 然后，把它们刚好装进你的背包里。 为了解决这个最大化问题， 我们首先又要用数学语言表示这个问题。 然后，它变成了一个经典的fractional knapsack（部分背包问题）问题， 然后，它变成了一个经典的fractional knapsack问题， 我们有n项，它们的重量从w1到wn，值从v1到vn 和一个容量为W的背包。 我们想要最大化刚好能够装进背包的部分食物项的总价值。 这个情景下，weights还是实际生活中你买的食物项的重量， values是能量值。 所以，这是一个例子，
我们将使用 美元值和重量的数值来表示每一项的价值和重量。 所以，举个例子，
第一项的价值是20美元, 重量值是4，
第二项价值是18美元 重量值是3，
第三项价值是14美元，重量是2 我们有个容量为7的背包。 有一些方法可以装满背包。 例如，
其中之一就是，放入全部的第一项 和全部第二项到背包中。 然后，全部价值就是第一项和第二项的价值之和， 是38美元 我们基于此改善。 例如，选择全部的第一项，
全部的第三项 和仅仅三分之一的第二项，这个总的价值是
40美元 我们甚至可以更好，通过选择全部的
第三项，全部的第二项， 和仅仅第一项的一半，
这会给我们价值42美元 而且，实际上，已经证明了
这就是最优的选择方式 所以，我们想创造
一个贪婪算法。 这个算法将会解决这个最大化问题
而且 我们需要得到一些贪婪选择，和
制造一个安全的移动。 为了做到这样，我们需要看
每单位重量的价值。 所以，例如，第一项，
每单位重量的价值是5美元。 第二项，每单位是6美元
第三项，每单位是7美元。 所以，虽然第一项是价值最高的 但是第三项每单位的价值是最大的。 而且，当然，有一个直觉告诉我们
应该最先装进 每单位价值最大的项。 而且，实际上， 安全移动就是首先尽量装进每单位价值最大的项。 有一个定理，说道： 对于我们的问题总存在一些优化的办法 尽可能多的使用每单位重量价值最大的项。 “尽可能多“
是什么意思呢？ 额，在背包能装下的情况下，就使用全部 如果背包容量小于该项的总量， 然后，背包就仅仅只装这一项。 让我们证明这确实是一个安全的移动。 我们将会证明通过看这个例子。 所以，首先，让我们假设我们有一些优化的方法， 假设在这个优化的方法中，我们没有尽可能多的 使用每单位重量价值最大的项。 然后，选择这个方法中我们使用的项 把使用到的它们分成两个部分
一部分和 我们有的最好的项的大小相同
第二部分使用其他的任意项 然后，我们使用最好的项替换第一部分。 所以，例如，在这个情况下， 我们使用第二项替换第一项的一半。 当然，这部分中，全部的价值
将会增加，因为 最好项的每单位重量的价值是比现在正在用的要大的。 在一般情况下，
这也是成立的。 所以，不是我们可以使用最好的项替换
部分我们正在使用的项 就是
我们可以替换整个 使用最好想的一部分。 而且，在任何情况下，
如果我们可以做出这样的替换。 当然，整体的价值就会增加， 因为，最好项就是
有大的每单位重量的价值， 所以，对于每单位重量，
我们会有更多的价值。 所以，这给我们一个贪婪
算法来解决我们的问题。 我们需要做的就是在背包仍然
没有满的时候，我们做一个贪婪选择。 我们将要选择vi/wi值
最大的第i项 vi/wi就是每单位重量的价值。 然后，如果这一项刚刚好装满背包
，就带上全部的这一项。 否则，如果只剩下
一点点空间。 就带上这么多空间的这一项
来装满背包，知道结束。 然后，在最后，我们将返回
我们带的所有项的总价值 和每一项我们带了多少。