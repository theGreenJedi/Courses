こんにちは皆さん、データ構造とアルゴリズム専門科目の次の講義です。 ここではこれから2つのレクチャでお話をする内容についての ちょっとした注意点について話そうと思います。 これからすぐに入っていくことになる次の2つのレクチャでは、 いくつかのアルゴリズム問題を見ていきます。特に、 フィボナッチ数を計算するアルゴリズムと、最大公約数を計算する アルゴリズムを見ていきます。 これらの問題は、現時点では、この講義で最初にお話しするアルゴリズムとしては 少し奇妙なようにも見えます。 これらの問題は数論的、数値的なもので、実は これから先の講義で学習する予定のアルゴリズムとあまり似ていません。 だからなんでこんな問題を見るのか、また何に注目をすればいいのかを 疑問に思うかもしれません。 そこが、今日これから私が本当に話をしておきたいところなのです。 特にこの2つのテーマが選ばれたのは、なぜアルゴリズムがきわめて重要なのか ということをもっとも明らかにしてくれる例だからです。 なぜよいアルゴリズムを見つけることがさまざまな問題に対してそんなに重要なのか。 そしてさらに、 この二つの問題は、両方とも次のような非常に興味深い特性を持っています。 まずは、これらの問題は両方ともとてもストレートなアルゴリズムが解法として存在するということです。 あなたが解こうとしている問題の定義自体からそのまま取り出せるような ものです。 その定義からそれなりに直接アルゴリズムを取り出すことが出来るのです。 与えられている問題文から取り出して、 その取り出したものをアルゴリズムとして実装するのです。 そして、それなりに素早く、ちゃんと動くコードを手に入れることが出来ます。 そのコードはちゃんとあなたが計算したいことを計算してくれます。 残念ながらどちらのケースも、 これらの非常にストレートなアルゴリズムでは、まったく遅すぎます。 実行に何千年もかかってしまうようなアルゴリズムしか得られないのです。 それほど多くない入力に対してもです。 実践的な目的にはこのような事態は受け入れられません。 計算が完了するのに何千年も待つ時間なんてないんですから。 なので、もっとよい解法が必要です。ここで、 両方のケースでもっとよい解法があるということを明らかにしていきます。 もう少し複雑なアルゴリズムがあり、 それがちゃんと動かすのに、いくらかの妙案が必要となるようなものであるということを見ていきます。 このもう少し複雑なアルゴリズムは、ちゃんと動きますし、 実はものすごく速いのです。 これらの問題の妥当な入力量の例については、瞬きする間に 解くことが出来ます。 つまり、この具体例で本当に説明したいポイントは、 少なくともこの実例、そして このコース全体で見るほかのさまざまな実例を通して伝えたいのは、 アルゴリズムを発見するということは大きな違いを生むのだということです。 その違いとは、生きているうちに終わらないくらい 時間のかかるアルゴリズムと、 始まったかどうかわからないうちに終わってしまうアルゴリズムの差から出てきます。 つまり、これはあなたが注意を注がなければならないものなのです。 なぜよいアルゴリズムを探すということがそんなに大事なのか。 それが次に出てくる話題です。次のレクチャーをお楽しみに。