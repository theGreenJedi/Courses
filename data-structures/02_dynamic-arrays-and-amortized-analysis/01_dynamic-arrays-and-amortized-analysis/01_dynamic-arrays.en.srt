1
00:00:01,350 --> 00:00:02,080
So in this lecture,

2
00:00:02,080 --> 00:00:06,040
we're going to talk about dynamic
arrays and amortized analysis.

3
00:00:08,050 --> 00:00:10,330
In this video we're going to
talk about dynamic arrays.

4
00:00:12,170 --> 00:00:15,920
So the problem with static arrays is,
well, they're static.

5
00:00:17,220 --> 00:00:21,431
Once you declare them,
they don't change size,

6
00:00:21,431 --> 00:00:25,854
and you have to determine
that size at compile time.

7
00:00:28,919 --> 00:00:34,030
So one solution is what are called
dynamically-allocated arrays.

8
00:00:34,030 --> 00:00:37,460
There you can actually allocate the array,

9
00:00:37,460 --> 00:00:40,140
determining the size of
that array at runtime.

10
00:00:40,140 --> 00:00:43,130
So that gets allocated
from dynamic memory.

11
00:00:43,130 --> 00:00:44,208
So that's an advantage.

12
00:00:44,208 --> 00:00:46,930
The problem is,

13
00:00:46,930 --> 00:00:50,340
what if you don't know the maximum size
at the time you're allocating the array?

14
00:00:51,460 --> 00:00:54,290
A simple example,
you're reading a bunch of numbers.

15
00:00:54,290 --> 00:00:55,318
You need to put them in an array.

16
00:00:55,318 --> 00:00:57,420
But you don't know how
many numbers there'll be.

17
00:00:57,420 --> 00:01:00,300
You just know there'll be some mark at the
end that says we're done with the numbers.

18
00:01:01,620 --> 00:01:03,330
So, how big do you make it?

19
00:01:03,330 --> 00:01:04,100
Do you make it 1,000 big?

20
00:01:04,100 --> 00:01:06,159
But then what if there are 2,000 elements?

21
00:01:06,159 --> 00:01:07,270
Make it 10,000 big?

22
00:01:07,270 --> 00:01:09,576
But what if there are 20,000 elements?

23
00:01:09,576 --> 00:01:12,740
So, a solution to this.

24
00:01:12,740 --> 00:01:16,170
There's a saying that says all
problems in computer science can

25
00:01:16,170 --> 00:01:18,980
be solved by another level of indirection.

26
00:01:18,980 --> 00:01:19,810
And that's the idea here.

27
00:01:19,810 --> 00:01:21,660
We use a level of indirection.

28
00:01:21,660 --> 00:01:26,410
Rather than directly storing
a reference to the either static or

29
00:01:26,410 --> 00:01:28,360
dynamically allocated array,

30
00:01:28,360 --> 00:01:32,010
we're going to store a pointer to
our dynamically allocated array.

31
00:01:32,010 --> 00:01:34,235
And that allows us then
to update that pointer.

32
00:01:34,235 --> 00:01:38,859
So if we start adding more and
more elements, when we add too many,

33
00:01:38,859 --> 00:01:43,649
we can go ahead and allocate a new array,
copy over the old elements,

34
00:01:43,649 --> 00:01:48,620
get rid of the old array, and
then update our pointer to that new array.

35
00:01:48,620 --> 00:01:53,800
So these are called dynamic arrays or
sometimes they're called resizable arrays.

36
00:01:53,800 --> 00:01:58,170
And this is distinct from
dynamically allocated arrays.

37
00:01:58,170 --> 00:02:01,390
Where we allocate an array, but once it's
allocated it doesn't change size.

38
00:02:02,800 --> 00:02:06,130
So a dynamic array is
an abstract data type, and

39
00:02:06,130 --> 00:02:08,520
basically you want it to
look kind of like an array.

40
00:02:08,520 --> 00:02:10,700
So it has the following operations,
at a minimum.

41
00:02:10,700 --> 00:02:13,900
It has a Get operation,
that takes an index and

42
00:02:13,900 --> 00:02:15,890
returns you the element at that index, and

43
00:02:15,890 --> 00:02:20,000
a Set operation, that sets an element at
a particular index to a particular value.

44
00:02:21,100 --> 00:02:23,590
Both of those operations
have to be constant time.

45
00:02:23,590 --> 00:02:26,448
Because that kind of what
it means to be an array,

46
00:02:26,448 --> 00:02:30,297
is that we have random access with
constant time to the elements.

47
00:02:30,297 --> 00:02:36,400
We can PushBack so that adds a new element
to the array at the end of the array.

48
00:02:37,470 --> 00:02:40,830
We can remove an element
at a particular index.

49
00:02:40,830 --> 00:02:43,240
And that'll shuffle down
all the succeeding ones.

50
00:02:43,240 --> 00:02:47,321
And finally, we can find out how
many elements are in the array.

51
00:02:47,321 --> 00:02:48,761
How do we implement this?

52
00:02:48,761 --> 00:02:54,867
Well, we're going to store arr,
which is our dynamically-allocated array.

53
00:02:54,867 --> 00:02:56,391
We're going to store capacity,

54
00:02:56,391 --> 00:03:00,150
which is the size of that
dynamically-allocated array,

55
00:03:00,150 --> 00:03:01,410
how large it is.

56
00:03:01,410 --> 00:03:06,700
And then size is the number of elements
that we're currently using in the array.

57
00:03:06,700 --> 00:03:07,820
Let's look at an example.

58
00:03:07,820 --> 00:03:11,414
So let's say our dynamically
allocated array has a capacity of 2.

59
00:03:11,414 --> 00:03:14,640
But we're not using any elements
in it yet, so it's of size 0.

60
00:03:14,640 --> 00:03:17,300
And arr then points to that
dynamically allocated array.

61
00:03:18,840 --> 00:03:22,000
If we do a PushBack of a,
that's going to go ahead and

62
00:03:22,000 --> 00:03:24,660
put a into the array and update the size.

63
00:03:26,690 --> 00:03:30,370
We now push b, it's going to put b
into the array and update the size.

64
00:03:31,390 --> 00:03:34,470
Notice now the size is equal to
the capacity which means this

65
00:03:34,470 --> 00:03:37,470
dynamically allocated array is full.

66
00:03:37,470 --> 00:03:40,189
So if we get asked to do another PushBack,

67
00:03:40,189 --> 00:03:44,400
we've got to go allocate a new
dynamically-allocated array.

68
00:03:44,400 --> 00:03:47,530
We're going to make that larger,
in this case it's of size 4.

69
00:03:47,530 --> 00:03:52,090
And then we copy over each of the elements
from the old array to the new array.

70
00:03:53,670 --> 00:03:57,830
Once we've copied them over, we can go
ahead and update our array pointer to

71
00:03:57,830 --> 00:04:01,420
point to this new dynamically allocated
array, and then dispose of the old array.

72
00:04:02,490 --> 00:04:05,990
At this point now we finally have
our new dynamically allocated array,

73
00:04:05,990 --> 00:04:09,244
that has room to push another element,
so we push in c.

74
00:04:10,950 --> 00:04:15,060
We push in d, if there is room
we put it in, update the size.

75
00:04:15,060 --> 00:04:15,670
And now if we try and

76
00:04:15,670 --> 00:04:18,460
push another element,
again we have a problem, we're too big.

77
00:04:18,460 --> 00:04:20,130
We can allocate a new array.

78
00:04:20,130 --> 00:04:21,988
In this case,
we're going to make it of size 8.

79
00:04:21,988 --> 00:04:24,190
We'll talk about how you determine
that size somewhat later.

80
00:04:25,210 --> 00:04:30,068
And then copy over a, b, c, and
d, update the array pointer,

81
00:04:30,068 --> 00:04:35,147
de-allocate the old array, and
now we have room we can push in e.

82
00:04:35,147 --> 00:04:39,860
So that's how dynamic arrays work.

83
00:04:39,860 --> 00:04:43,520
Let's look at some of the implementations
of the particular API methods.

84
00:04:44,530 --> 00:04:45,950
Get is fairly simple.

85
00:04:45,950 --> 00:04:49,690
So we just check and see, we're going to
assume for the sake of argument,

86
00:04:51,080 --> 00:04:54,510
that we are doing 0-based indexing here.

87
00:04:54,510 --> 00:04:58,690
So if we want to Get(i), we first
check and make sure, is i in a range?

88
00:04:58,690 --> 00:05:01,570
That is, is it non-negative, and

89
00:05:01,570 --> 00:05:06,580
is it within the range
from 0 to size i minus 1?

90
00:05:06,580 --> 00:05:09,280
Because if it's less than 0 or
it's greater or equal to size,

91
00:05:09,280 --> 00:05:11,190
it's out of range, that will be an error.

92
00:05:12,470 --> 00:05:15,170
If we're in range then
we just return index

93
00:05:15,170 --> 00:05:17,800
i from the dynamically allocated array.

94
00:05:18,950 --> 00:05:20,410
Set is very similar.

95
00:05:20,410 --> 00:05:24,883
Check to make sure out index is in bounds,
and then if it is,

96
00:05:24,883 --> 00:05:27,481
update index i of the array to val.

97
00:05:27,481 --> 00:05:29,960
PushBack is a little more complicated.

98
00:05:29,960 --> 00:05:32,420
So, let's actually skip the if
statement for now and just say,

99
00:05:32,420 --> 00:05:38,160
let's say that there is empty
space in our dynamic array.

100
00:05:38,160 --> 00:05:42,470
In that case, we just set array at
size to val and then increment size.

101
00:05:43,900 --> 00:05:46,820
If, however, we're full,
we're not going to do that yet,

102
00:05:46,820 --> 00:05:50,670
if size is equal to capacity,
then we go ahead and allocate a new array.

103
00:05:50,670 --> 00:05:54,450
We're going to make it twice the capacity,
and then we go through a for loop,

104
00:05:54,450 --> 00:05:58,900
copying over every one of the elements
from the existing array to the new array.

105
00:06:00,040 --> 00:06:02,530
We free up the old array and
then set array to the new one.

106
00:06:03,530 --> 00:06:06,470
At that point then,
we've got space and we go ahead and

107
00:06:06,470 --> 00:06:08,590
set the size element and
then increment size.

108
00:06:10,750 --> 00:06:12,020
Remove's fairly simple.

109
00:06:12,020 --> 00:06:15,460
Check that our index is in bounds and
then go ahead through a loop,

110
00:06:15,460 --> 00:06:19,530
basically copying over successive
elements and then decrementing the size.

111
00:06:20,630 --> 00:06:22,629
Size is simple, will just return size.

112
00:06:25,392 --> 00:06:28,767
There are common implementations for
these dynamic arrays and

113
00:06:28,767 --> 00:06:32,390
C++'s vector class is
an example of a dynamic array.

114
00:06:32,390 --> 00:06:35,880
And there, notice it uses
C++ operator overloading, so

115
00:06:35,880 --> 00:06:40,040
you can use the standard array
syntax of left brackets,

116
00:06:40,040 --> 00:06:44,650
to either read from or
write to an element.

117
00:06:44,650 --> 00:06:46,150
Java has an ArrayList.

118
00:06:46,150 --> 00:06:47,389
Python has the list.

119
00:06:47,389 --> 00:06:51,321
And there is no static arrays in Python.

120
00:06:51,321 --> 00:06:54,421
All of them are dynamic.

121
00:06:54,421 --> 00:06:55,460
What's the runtime?

122
00:06:55,460 --> 00:06:59,240
We saw Get and Set are O(1),
as they should be.

123
00:06:59,240 --> 00:07:01,210
PushBack is O(n).

124
00:07:01,210 --> 00:07:04,530
Although we're going to see
that's only the worst case.

125
00:07:04,530 --> 00:07:09,670
And most of the time actually,
when you call PushBack, it's not

126
00:07:09,670 --> 00:07:14,450
having to do the expensive operation, that
is, the size is not equal to capacity.

127
00:07:14,450 --> 00:07:16,700
For now, though,
we're just going to say that it's O(n).

128
00:07:16,700 --> 00:07:21,126
We'll look at a more detailed
analysis when we get into aggregate

129
00:07:21,126 --> 00:07:23,060
analysis in our next video.

130
00:07:24,110 --> 00:07:27,240
Removing is O(n), because we've
gotta move all those elements.

131
00:07:27,240 --> 00:07:28,360
Size is O(1).

132
00:07:30,580 --> 00:07:34,290
So in summary, unlike static arrays,
dynamic arrays are dynamic.

133
00:07:34,290 --> 00:07:35,490
That is, they can be resized.

134
00:07:37,290 --> 00:07:40,800
Appending a new element to a dynamic
array is often constant time, but

135
00:07:40,800 --> 00:07:41,840
it can take O(n).

136
00:07:41,840 --> 00:07:45,510
We're going to look at a more
nuanced analysis in the next video.

137
00:07:45,510 --> 00:07:47,070
And some space is wasted.

138
00:07:47,070 --> 00:07:52,350
In our case, if we're resizing by a factor
of two, at most half the space is wasted.

139
00:07:52,350 --> 00:07:54,690
If we were making our new
array three times as big,

140
00:07:54,690 --> 00:07:56,772
then we can waste two-thirds of our space.

141
00:07:56,772 --> 00:08:00,378
If we're only making it 1.5 as big,
then we would waste less space.

142
00:08:00,378 --> 00:08:06,973
It's worth noting dynamic array can also
be resized smaller, that's possible too.

143
00:08:06,973 --> 00:08:11,888
It's worth thinking about what if
we resized our array to a smaller

144
00:08:11,888 --> 00:08:17,010
dynamic array as soon as we got
under one-half utilization?

145
00:08:17,010 --> 00:08:20,910
And it turns out we can come up
with a sequence of operations that

146
00:08:22,030 --> 00:08:23,069
gets to be quite expensive.

147
00:08:25,430 --> 00:08:28,390
In the next video, we're going to
talk about amortized analysis.

148
00:08:28,390 --> 00:08:31,910
And in particular, we're going to look at
one method called the aggregate method.