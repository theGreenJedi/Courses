1
00:00:00,610 --> 00:00:04,830
In this video, we're going to talk about
a second way to do Amortized Analysis,

2
00:00:04,830 --> 00:00:06,470
what we call the Banker's Method.

3
00:00:08,160 --> 00:00:13,180
The idea here is that we're going to
charge extra for each cheap operation.

4
00:00:13,180 --> 00:00:16,220
So it's sort of like we're taking
the example where we looked

5
00:00:16,220 --> 00:00:17,810
at saving money for a car.

6
00:00:17,810 --> 00:00:21,130
We're going to actually take that $100 and
put it in the bank.

7
00:00:21,130 --> 00:00:24,330
And then we save those charges somewhere,

8
00:00:24,330 --> 00:00:25,910
in the case of the bank
we put it in the bank.

9
00:00:25,910 --> 00:00:30,040
In our case we're going to conceptually
save it in our data structure.

10
00:00:30,040 --> 00:00:35,270
We're not actually changing our code,
this is strictly an analysis.

11
00:00:35,270 --> 00:00:39,710
But we're conceptually thinking
about putting our saved

12
00:00:41,710 --> 00:00:45,120
extra cost as sort of tokens
in our data structure

13
00:00:45,120 --> 00:00:48,515
that later on we'll be able to use to
pay for the expensive operations.

14
00:00:48,515 --> 00:00:50,570
To make more sense as we see an example.

15
00:00:52,110 --> 00:00:54,667
So it's kind of like an amortizing loan or

16
00:00:54,667 --> 00:01:00,236
this case I talked about where we're
saving $100 a month towards a $6000 car,

17
00:01:00,236 --> 00:01:03,034
because we know our current
car is going to run out.

18
00:01:04,753 --> 00:01:08,280
Let's look at this same example
where we have a dynamic array and

19
00:01:08,280 --> 00:01:11,840
n calls to PushBack starting
with an empty array.

20
00:01:11,840 --> 00:01:15,740
The idea is we're going to charge 3 for
every insertion.

21
00:01:15,740 --> 00:01:18,320
So every PushBack,
we're going to charge 3.

22
00:01:18,320 --> 00:01:21,210
One is the raw cost for actually

23
00:01:22,360 --> 00:01:26,910
moving in this new item into the array,
and the other two are going to be saved.

24
00:01:28,520 --> 00:01:33,050
So if we need to do a resize in order
to pay for moving the elements,

25
00:01:33,050 --> 00:01:37,100
we're going to use tokens we've already
saved in order to pay for the moving.

26
00:01:37,100 --> 00:01:41,652
And then, we're going to place 1 token,
once we've actually added our item.

27
00:01:41,652 --> 00:01:47,149
1 token on the item we added and
then 1 token

28
00:01:47,149 --> 00:01:52,654
on an item prior to this in the array.

29
00:01:52,654 --> 00:01:55,210
It'll be easier when we look
at a particular example.

30
00:01:57,160 --> 00:01:58,430
Let's look at an example
we have an empty array.

31
00:01:58,430 --> 00:02:01,580
And we're going to start with size 0,
capacity 0.

32
00:02:01,580 --> 00:02:03,650
We PushBack(a), what happens?

33
00:02:03,650 --> 00:02:06,970
Well we have to allocate our array
of size one, point to it, and

34
00:02:06,970 --> 00:02:09,060
then we put a into the array.

35
00:02:09,060 --> 00:02:13,510
And now we're going to put
a little token on a and

36
00:02:13,510 --> 00:02:17,010
this token is what we use to
pay later on to moving a.

37
00:02:17,010 --> 00:02:18,520
In this particular example for

38
00:02:18,520 --> 00:02:22,390
the very first element there's no
other element to put a token on.

39
00:02:22,390 --> 00:02:26,370
So we're just going to waste that other,
that third token.

40
00:02:26,370 --> 00:02:29,030
We push in b.

41
00:02:29,030 --> 00:02:32,940
There's no space for b so we've got to
allocate a larger array and then move a.

42
00:02:32,940 --> 00:02:35,240
How are we going to pay for that moving a?

43
00:02:35,240 --> 00:02:37,630
Well with the token
the token that's already on it.

44
00:02:37,630 --> 00:02:40,800
So we prepaid this moving a.

45
00:02:40,800 --> 00:02:43,720
When we actually initially
put a into the array,

46
00:02:43,720 --> 00:02:47,930
we put a token on it that would pay for
moving it into a new array.

47
00:02:47,930 --> 00:02:50,850
So that's how we pay for moving a and

48
00:02:50,850 --> 00:02:55,980
then we update the array, delete the old
one, and now we actually put b in.

49
00:02:55,980 --> 00:02:59,804
So we put b in at the cost of one,
we still have two more tokens to pay.

50
00:02:59,804 --> 00:03:04,740
So we're going to put one on b and
we're going to put one capacity over two

51
00:03:04,740 --> 00:03:09,230
that is one element earlier, so
we're going to put one on a. So

52
00:03:09,230 --> 00:03:11,270
we've spent three now.

53
00:03:11,270 --> 00:03:12,570
One for real and

54
00:03:12,570 --> 00:03:18,050
two as deferred payment that we're going
to use later in the form of these tokens.

55
00:03:19,260 --> 00:03:22,560
Remember these tokens are not actually
stored in the data structure.

56
00:03:22,560 --> 00:03:24,750
There's nothing actually in the array.

57
00:03:24,750 --> 00:03:26,580
This is just something we're using for

58
00:03:26,580 --> 00:03:29,590
mental accounting in
order to do our analysis.

59
00:03:30,920 --> 00:03:33,790
When we push in c,
we're going to allocate a new array.

60
00:03:33,790 --> 00:03:37,310
We copy over a and we pay for
that with our pre-paid token.

61
00:03:37,310 --> 00:03:40,560
We copy over b, paying for
that with our pre-paid token.

62
00:03:40,560 --> 00:03:43,080
And now we push in c.

63
00:03:44,540 --> 00:03:47,560
That's one,
the second payment we have to make is,

64
00:03:47,560 --> 00:03:50,270
we put a token on c and
we then we put token on a.

65
00:03:50,270 --> 00:03:55,010
Four divided by two, that is the capacity
divided by two, or two elements prior.

66
00:03:57,070 --> 00:04:00,850
We push in d,
we don't have to do any resizing, finally.

67
00:04:00,850 --> 00:04:03,750
Okay, so we just put in d and
that's the cost of one.

68
00:04:03,750 --> 00:04:05,180
Second, put a token on d.

69
00:04:05,180 --> 00:04:09,790
Third, put a token capacity over two or
two elements prior to that.

70
00:04:09,790 --> 00:04:16,000
So notice what we've got now is a full
array and everything has tokens on it

71
00:04:16,000 --> 00:04:20,970
which means when we need to resize,
we have prepaid for all of that movement.

72
00:04:20,970 --> 00:04:23,305
So we push in e, allocate a new array.

73
00:04:23,305 --> 00:04:26,610
And now we use those prepaid tokens
to pay for moving a, b, c, and d.

74
00:04:26,610 --> 00:04:31,400
Get rid of the old array,
and now push in e.

75
00:04:31,400 --> 00:04:34,540
And again, put a token on e,
and a token on a.

76
00:04:36,600 --> 00:04:41,750
So, what we've got here then is O(1)
amortized cost for each PushBack.

77
00:04:41,750 --> 00:04:44,730
And in particular,
we have a cost of three, right?

78
00:04:45,980 --> 00:04:46,820
So we have clearly seen.

79
00:04:48,710 --> 00:04:51,600
So lets look back at how we did this.

80
00:04:52,790 --> 00:04:57,330
For this dynamic array we decided we
had to charge three, and other data

81
00:04:57,330 --> 00:05:00,880
structures with other operations we
not did have to charge a different amount.

82
00:05:00,880 --> 00:05:03,380
We have to figure out
what will be sufficient,

83
00:05:03,380 --> 00:05:08,450
in our case three was sufficient, and
we decided that we would go ahead and

84
00:05:09,790 --> 00:05:13,540
store these tokens on
the elements that needed to be moved.

85
00:05:13,540 --> 00:05:20,605
So it's a very physical way to keep track
of the saved work that we have done,

86
00:05:20,605 --> 00:05:22,930
or the prepaid work that we have done.

87
00:05:22,930 --> 00:05:27,170
So we charge 3, 1 is 
the raw cost of insertion.

88
00:05:27,170 --> 00:05:31,120
If we need to resize, we've arranged
things such that whenever the array

89
00:05:31,120 --> 00:05:35,840
gets full, we've actually, in order for
the array to have been full,

90
00:05:35,840 --> 00:05:41,030
we had to have done enough PushBacks such
that every element got a token on it.

91
00:05:41,030 --> 00:05:45,911
All the new ones that we added since
the previous resize, plus every time

92
00:05:45,911 --> 00:05:50,649
we added one of those new ones,
we prepaid for a prior element as well.

93
00:05:52,622 --> 00:05:58,038
So, we pay our one insertion, we pay
one for the element we're adding now and

94
00:05:58,038 --> 00:06:01,569
we pay one for
sort of a buddy element earlier.

95
00:06:04,448 --> 00:06:08,427
In the next video we're going to look at
a third way of doing Amortized Analysis,

96
00:06:08,427 --> 00:06:10,300
which is the Physicist's Method.