1
00:00:02,370 --> 00:00:08,260
एक तरीका है जिससे कि पीछे पॉप करना और पहले ऐड करना / जोड़ना चीप / आसान हो जाता है॰

2
00:00:08,260 --> 00:00:13,060
हमारी समस्या थी कि यद्यपि हमारे पास था एक तरीका जाने का 

3
00:00:13,060 --> 00:00:16,230
एक पिछले एलिमेंट से अगले एलीमेंट तक, हमारे पास कोई तरीका नहीं था वापिस / पीछे जाने का॰

4
00:00:16,230 --> 00:00:18,740
और एक डबली-लिंक्ड लिस्ट कहती है कि, अच्छा, आओ चलें आगे और 

5
00:00:18,740 --> 00:00:19,890
डालें / जोड़े एक तरीका पीछे जाने का॰

6
00:00:19,890 --> 00:00:23,110
इसलिए हमारे पास होंगे दो पॉइंटर्स, फॉरवर्ड / अगला और बैकवर्ड / पिछला पोइन्टर्ज॰

7
00:00:23,110 --> 00:00:25,974
वह है दो तरफा ऐरो जिसे हम दिखा रहें हैं यहाँ सिद्धांतिक रूप में॰

8
00:00:25,974 --> 00:00:29,119
और तरीका जैसे हम असल में इसे लागू करेंगे वह है,

9
00:00:29,119 --> 00:00:32,050
एक नोड के साथ जो ऐड करता / जोड़ता है एक अतिरिक्त पॉइंटर॰

10
00:00:32,050 --> 00:00:35,920
तो हमारे पास है न केवल एक नेक्स्ट पॉइंटर, हमारे पास है एक प्रीवियस पॉइंटर भी॰

11
00:00:35,920 --> 00:00:41,137
तो उदाहरणता यह दर्शाता है कि एलिमेंट 10 का है एक नेक्स्ट 

12
00:00:41,137 --> 00:00:47,139
पॉइंटर जो पॉइंट करता है 4 की तरफ परंतु एक प्रीवियस पॉइंटर जो पॉइंट करता है 7 की तरफ॰

13
00:00:47,139 --> 00:00:51,240
तो किसी भी नोड पर हम जा सकते हैं आगे या जा सकते है पीछे॰

14
00:00:53,900 --> 00:00:58,560
तो इसका मतलब है कि अगर हम लिस्ट के पीछे पॉप करना चाहे, तो वह बहुत आसान हो जायेगा॰

15
00:00:58,560 --> 00:01:02,277
हम क्या करेंगे कि अपडेट करेंगे टेल पॉइंटर को पॉइंट करने के लिए पिछले एलिमेंट पर 

16
00:01:02,277 --> 00:01:04,994
क्योंकि फिर हम पहुँच सकते हैं वहाँ एक O(1) ऑपरेशन में॰

17
00:01:04,994 --> 00:01:09,426
और उसके बाद अपडेट करें उसका नेक्स्ट पॉइंटर निल पर और फिर अंत में नोड को हटा देंगे॰

18
00:01:09,426 --> 00:01:13,409
तो यह एक O(1) है॰

19
00:01:13,409 --> 00:01:17,663
तो अगर हमारे पास है एक डबली लिंक्ड लिस्ट यह (हमारा कोड) थोड़ा अधिक मुश्किल होगा क्योंकि

20
00:01:17,663 --> 00:01:22,610
हमें सुनिश्चित करना होगा मैनेज करना दोनों प्रीवियस पॉइंटर्स और नेक्स्ट पॉइंटर्स॰

21
00:01:22,610 --> 00:01:25,768
इसलिए अगर हम पुश कर रहें हैं कुछ आखिर में, हम एलोकेट करेंगे एक नया नोड॰

22
00:01:25,768 --> 00:01:30,440
अगर टेल निल है, जिसका मतलब है वो खाली है, तब हमारे पास है एक अकेला नोड

23
00:01:30,440 --> 00:01:35,422
जिसके प्रीवियस और नेक्स्ट पॉइंटरज़ दोनों निल हैं और तब हेड और टेल दोनों उसी की तरफ इशारा करेंगे॰

24
00:01:35,422 --> 00:01:41,607
नहीं तो, हमे अपडेट करना होगा टेल के नेक्स्ट पॉइंटर को

25
00:01:41,607 --> 00:01:44,517
इस नए नोड के लिए, क्योंकि हम आखिर में पुश कर रहे है और

26
00:01:44,517 --> 00:01:49,702
तब हम अपडेट करते है इस नए नोड के प्रीवियस पॉइंटर को पॉइंट करने के लिए पुराने टेल को और

27
00:01:49,702 --> 00:01:52,940
तब आखिर मे अपडेट करते हैं टेल पॉइंटर को ही॰

28
00:01:55,030 --> 00:01:58,690
पोपिंग दी बैक, भी काफी सरल / आसान है॰

29
00:01:58,690 --> 00:02:02,944
हम फिर चेक करेंगे देखने के लिए कि क्या पहले यह एक खाली लिस्ट है,

30
00:02:02,944 --> 00:02:04,566
 ऐसे होने पर यह एक एरर है॰

31
00:02:04,566 --> 00:02:07,970
एक लिस्ट सिर्फ एक एलिमेंट के साथ, इस केस में यह आसान है॰

32
00:02:07,970 --> 00:02:10,983
नहीं तो हमे आगे जाना होगा और

33
00:02:10,983 --> 00:02:16,918
अपडेट करना होगा हमारी टेल को प्रीवियस टेल में, और उस नोड के नेक्स्ट को निल में॰

34
00:02:16,918 --> 00:02:22,229
ऐडिंग आफ्टर, काफी आसान फिर हमे सिर्फ मेनटेन करना होगा प्रिवियस पॉइंटर लेकिन

35
00:02:22,229 --> 00:02:26,826
ऐडिंग बिफोर भी अब काम करता है इस सेंस में कि हम कर सकते हैं एलोकेट अपना नोड, 

36
00:02:26,826 --> 00:02:27,857
हमारा नया नोड और

37
00:02:27,857 --> 00:02:33,670
इसका प्रीवियस पॉइंटर होगा प्रीवियस पॉइंटर मौजूदा नोड का जिसके पहले हम जोड़ रहे है॰

38
00:02:33,670 --> 00:02:35,242
हम इसे इसी तरह जोड़ते है और

39
00:02:35,242 --> 00:02:40,180
उसके बाद हम अपडेट करेंगे उस पिछले नोड के नेक्स्ट पॉइंटर को पॉइंट करने के लिए हमारे नए नोड की तरफ॰

40
00:02:42,410 --> 00:02:45,300
और अंत में, अगर हम हेड के पहले जोड़ रहे है तो,

41
00:02:45,300 --> 00:02:48,760
 हमें हेड को अपडेट करना होगा॰

42
00:02:48,760 --> 00:02:53,045
तो एक सिंगली-लिंक्ड लिस्ट में, हमने देखा चीजो की कोस्ट / मूल्य को॰

43
00:02:53,045 --> 00:02:55,467
लिस्ट के फ्रंट / आगे वाले भाग में काम करना आसान था,

44
00:02:55,467 --> 00:02:59,310
लिस्ट के बैक / पिछले हिस्से में काम करना बिना टेल के, था सब लिनियर टाईम / अनुपात में समय लेता था॰

45
00:02:59,310 --> 00:03:02,220
अगर हमने टेल जोड़ा, तब कुछ आखिर में पुश करना आसान था,

46
00:03:02,220 --> 00:03:06,160
आसान था आखिरी हिस्से से कुछ निकालना, लेकिन मुश्किल था एंड / वहाँ से कुछ हटाना॰

47
00:03:06,160 --> 00:03:08,020
डबली लिंक्ड लिस्ट में जाते ही,

48
00:03:08,020 --> 00:03:11,540
एंड / पीछे से हटाना ( एक पॉपबैक) बन जाता है अब एक O(1) आपरेशन,

49
00:03:11,540 --> 00:03:15,270
जैसा कि बनता है ऐडिग बिफोर जो होता था एक लिनियर टाईम ऑपरेशन॰

50
00:03:18,130 --> 00:03:23,450
एक बात बताना ज़रूरी है जब हम कंटरास्ट / तुलना करते है ऐरेज़ और लिंक्ड लिस्टस में॰

51
00:03:23,450 --> 00:03:25,230
तो ऐरेज़ में, हमें मिलता है रैंडम एक्सेस,

52
00:03:25,230 --> 00:03:28,620
उस नजरिये से कि बराबर समय लगता है किसी भी एलिमेंट को एक्सेस करने में॰

53
00:03:28,620 --> 00:03:31,540
उससे बाइनरी सर्च जैसी चीजें बहुत आसान हो जाती है,

54
00:03:31,540 --> 00:03:36,880
जहां हम बीच से खोजना शुरू करते है, और फिर बताते है (अगर सोरटिड / एक क्रम में ऐरे है),

55
00:03:36,880 --> 00:03:39,990
और तब तय कर सकते हैं कि ऐरे के किस साइड में हम हैं॰

56
00:03:39,990 --> 00:03:42,846
और फिर, एक साइड या दूसरे साइड जा सकते हैं॰

57
00:03:42,846 --> 00:03:43,900
लिंक्ड लिस्ट के लिए, यह काम नहीं करता॰

58
00:03:43,900 --> 00:03:46,725
बीच का एलिमेंट ढूँढना एक खर्चीला / मुश्किल ऑपरेशन है,

59
00:03:46,725 --> 00:03:49,340
क्योंकि आपको या तो हेड से शुरू करना होगा या टेल से और 

60
00:03:49,340 --> 00:03:50,580
वहाँ से बीच में पहुंचना होगा॰

61
00:03:50,580 --> 00:03:54,910
इसलिए वह एक O(n) आपरेशन है किसी विशेष एलीमेंट तक पहुँचना॰

62
00:03:54,910 --> 00:03:56,150
उसमे और एक ऐरे में बड़ा अंतर है॰

63
00:03:57,516 --> 00:04:01,804
फिर भी, लिंक्ड लिस्टस समान समय लेते है फ्रंट / आगे से एलिमेंट जोड़ने में या हटाने में,

64
00:04:01,804 --> 00:04:02,638
ऐरे की तरह नहीं / ऐरे से भिन्न॰

65
00:04:02,638 --> 00:04:05,000
ऐरे में हमने देखा कि, अगर आप फ्रंट / आगे से जोड़ना चाहते है, या

66
00:04:05,000 --> 00:04:08,169
हटाना चाहते है फ्रंट से, तो आपको O(n) टाइम लगेगा क्योंकि आपको हिलाना होगा

67
00:04:08,169 --> 00:04:09,040
एलिमेंटस के एक समूह को॰

68
00:04:10,990 --> 00:04:13,080
अगर आपके पास है एक टेल और डबली लिंक्ड लिस्ट,

69
00:04:13,080 --> 00:04:15,600
वो भी एक समान समय लेता है लिस्ट के अंत में काम करना॰

70
00:04:15,600 --> 00:04:17,950
तो आप वहाँ जा सकते हो या वहाँ से हटा सकते हो॰

71
00:04:19,550 --> 00:04:22,450
लीनियर टाइम लगता है किसी भी / आर्बिट्रेरी एलिमेंट को ढूंढने में॰

72
00:04:22,450 --> 00:04:24,790
लिस्ट के एलिमेंट कंटिगुअस / लगातार नहीं होते जैसे कि वे ऐरे में होते हैं॰

73
00:04:25,860 --> 00:04:30,660
आपके पास होते हैं अलग अलग एलोकेटिड / निर्धारित लोकेशञ्ज मेमोरी के और

74
00:04:30,660 --> 00:04:32,680
फिर उनके बीच में पॉइंटरज़ होते है॰

75
00:04:32,680 --> 00:04:36,390
और तब, हमारे पास है डबली लिंक्ड लिस्ट इसमें भी जोड़ना एक समान समय का ऑपरेशन है

76
00:04:36,390 --> 00:04:38,110
नोडज़ के बीच में या फिर एक नोड हटाने में॰