अब बात करते हैं लिंक्ड लिस्टस की॰ तो, लिंक्ड लिस्टस , जैसा नाम से लगता है एक चेन में लिंक्स कैसे हैं, सही, तो हमारे पास एक हेड पोयंटर होता है जो पाइंट करता है एक नोड की तरफ जिसमे तब कुछ डाटा होता है और जो पाइंट करता है अन्य नोड की तरफ, पाइंट करता है अन्य नोड की तरफ और अंत में पाइंट करता है एक नोड की तरफ जो आगे पाइंट नहीं करता॰ तो यहाँ हमारी टॉप तस्वीर में हम दिखाते हैं कि हेड पाइंट करता है एक नोड की तरफ जिसमें 7 है, पाइंट करता है एक नोड की तरफ जिसमें 10 है, पाइंट करता है एक नोड की तरफ जिसमें 4 है, पाइंट करता है एक नोड की तरफ जिसमें 13 है जो कहीं पाइंट नहीं करता॰ यह ऐसे काम करता है कि एक नोड में एक कुंजी होती है जो इस केस में है ये इंटीजर्ज, और एक नेक्स्ट पॉइंटर॰ नीचे दी हुई तस्वीर दिखाती है और विस्तार से कि क्या हो रहा है॰ तो हेड एक पॉइंटर है जो पॉइंट करता है एक नोड को, और उस नोड में होते हैं दो एलिमेंटस, वेलयु 7 और तब एक पॉइंटर जो अगले नोड को पॉइंट करता है जिसमे कीई / कुंजी 10 है, और एक पॉइंटर जो पॉइंट करता है उससे अगले नोड 4 को, पॉइंट करता है उससे अगले नोड 13 को, 13 का अगला पॉइंटर सिर्फ निल /  शून्य है॰ क्या ओपरेशञ्ज हैं जो किए जा सकते हैं एक लिंक्ड लिस्ट पर? बहुत से हैं, और इनके नाम कभी कभी भिन्न होते हैं, भिन्न एनवायरनमेंटस / माहौल में और भिन्न लाइब्रेरीज़ में॰ लेकिन आमतौर पर ऑपरेशन्स दिये हुए ये हैं॰ तो हम जोड़ सकते है एक एलिमेंट लिस्ट के फ्रंट / शुरू में, और उसे हम कह रहे है पुशफ्रंट॰ तो यह लेता है एक कीई / कुंजी, जमा करता है इसे लिस्ट के फ्रंट / शुरुआत में॰ हम लिस्ट का फ्रंट एलिमेंट रिटर्न कर सकते है॰ हम उसे कह रहे हैं  टॉप-फ्रंट॰ या हम फ्रंट एलीमेंट हटा सकते हैं लिस्ट का, नामक पॉपफ्रंट॰ वो वही चीज़ें जो हम कर सकते हैं लिस्ट के फ्रंट पर, हम कर सकते हैं लिस्ट के एन्ड / अंत पर भी॰ पुशबैक के साथ, बाद में एक बाद के मॉड्यूल में, हम वास्तव में इस्तेमाल करेंगे शब्द एपेंड उसके लिए, या टॉपबैक, या पॉपबैक॰ ये सारे एक जैसे लगते हैं वहाँ, परंतु एक अंतर है कि रनटाईंमज अलग होंगे इनके बीच में, और हम उसके बारे में बात करेंगे॰ आप पता लगा सकते हैं कि क्या कोई एलिमेंट लिस्ट में है और यह उतना ही आसान है,जितना रन डाउन / ढूडना लिस्ट में मैचिंग कीई को॰ आप एक एलिमेंट को मिटा सकते हो और फिर लिस्ट में रन डाउन कर सकते हो जब तक आपको मैचिन्ग कीई नहीं मिल जाती और फिर उस एलिमंट को हटा दो॰ तो ये बाद के हैं दोनों ओ(एन) टाईम॰ क्या लिस्ट खाली है या नहीं? यह उतना ही आसान है जितना चेक करना कि क्या हेड बराबर निल है॰ हम एक विशेष कीई जोड़ सकते है--यदि हम चाहते हैं स्प्लाईस इन / जोड़ना एक कीई एक लिस्ट में  हम कर सकते हैं वास्तव में ऐड / जोड़ना एक कीई एक दिये हुए नोड से पहले या एक दिये हुए नोड से बाद में॰ तो आओ देखें समयों पर कुछ कॉमन आपरेशनज़ के लिए॰ यहाँ है हमारी लिस्ट इसमें चार एलिमेंट्स के साथ॰ 7, 10, 4 और 13॰ अब हम आगे बढ़ेंगे और पुश करेंगे एक एलिमेंट को फ्रंट में / आगे॰ तो हम 26 को पुश करते है लिस्ट के फ्रंट को॰ तो पहला काम हम करते हैं, बनाते हैं एक नोड जिसमे हो 26 उसकी कीई के तौर पर॰ और तब हम अपडेट करते हैं हमारा अगला पोइटर उस नोड का हेड की तरफ पॉइंट करने के लिए, जो है एलिमंट 7, और तब अपडेट करें हेड पॉइंटर को हमारे नए नोड को पॉइंट करने के लिए, और बस हो गया॰ तो, यह O(1) है॰ एलोकेट करो, एक पॉइंटर अपडेट करो, दूसरा पॉइंटर अपडेट करो, कोंस्टेंट / बराबर समय॰ अगर हम फ्रंट एलिमेंट को पॉप करना / हटाना चाहते हैं, स्पष्टता फ्रंट एलीमेंट को ढूंडना बहुत चीप / किफ़ाईती है यहाँ, ठीक? आप  बस पहले एलिमेंट को देखते है और उसे रिटर्न कर देते हैं॰ तो टॉप-फ्रंट है O(1)॰ पॉपफ्रंट लगता है कि होने जा रहा है O(1)॰ पहला काम जो हम करेंगे वह है हेड पॉइंटर को अपडेट करना॰ तब, नोड को हटा देना॰ वह एक O(1) ऑपरेशन है॰ अगर हम बैक पर पुश करना चाहें, और हमारे पास टेल पॉइंटर नहीं है, हम कुछ देर में बात करेंगे एक टेल पॉइंटर के बारे में, तब यह एक बहुत ही एक्सपेनसिव / महँगा आपरेशन होगा॰ हमे हेड से शुरू करना होगा और लिस्ट के नीचे तक जाना होगा जब तक हम अंत तक न पहुँच जायेँ, और वहाँ एक नोड ऐड करें / जोड़े, तो वह होगा O(n) टाईम॰ इसी तरह अगर हम चाहते है करना टॉपबैक या पॉपबैक, तब भी हम करेंगे शुरू हेड से, जाएँगे नीचे अंतिम एलिमेंट तक॰ वो सभी होंगे ओ(एन) टाइम॰ यदि हमारे पास हो एक टेल पॉइंटर, इनमें से कुछ आसान हो जाएंगे॰ ओके, तो, हमारे पास होगा दोनों एक हेड पॉइंटर जो पॉइंट करता है हेड एलिमेंट को और एक टेल पॉइंटर जो पॉइंट करता है टेल एलीमेंट को॰ तब, उस तरह से, पहला एलिमेंट पाना चीप / आसान है॰ आखिरी एलिमेंट पाना भी चीप / आसान है॰ चलिये देखते है क्या होता है जब हम ट्राई करते हैं एक इन्सर्ट जब हमारे पास है एक टेल॰ हम एलोकेट करते हैं एक नोड, डालते हैं हमारी नई कीई, और तब अपडेट करते हैं अगला पॉइंटर करेंट / चालू टेल का, इस नई टेल को पॉइंट करने के लिए॰ और तब अपडेट करें टेल पॉइंटर को ही॰ O(1) आपरेशन॰ अंत का एलिमेंट निकाल लेना, अतः एक पॉपबैक, माफ़ कीजिएगा एक टॉपबैक, भी है एक O(1) आपरेशन॰ हम आखिर तक जाते हैं, एलिमेंट खोजते है और कीई रिटर्न कर देते है॰ अगर हम करना चाहें पॉप बैक ओवर / पीछे से हटाना तो वह एक खर्चीला आपरेशन है॰ ठीक है. हमें टेल को अपडेट करना होगा पॉइंट करने के लिए 8 से 13 को इसलिए हम हैं अभी 8 पर हम चाहते हैं जाना 13 पर, समस्या है कि हम कैसे पहुंचे 13 पर? ठीक है. हमारे पास नहीं है पॉइंटर 8 से 13 के लिए हमारे पास है पॉइंटर 13 से 8 के लिए॰ और वह पॉइंटर हमे पीछे जाने में मदद नहीं करता॰ तो हमें क्या करना है कि, फिर, शुरू करें हेड से, जाते रहें नीचे तब तक जब हमें मिले 13 वाला नोड जो तब पॉइंट करता है करेंट / वर्तमान टेल को, और तब अपडेट करें अपना पॉइंटर उसे पॉइंट करने के लिए, और तब अपडेट करें अगला पॉइंटर निल पर॰ और तब हम हटा सकते हैं वह पुराने वाला॰ तो वह एक O(n) आपरेशन होगा क्योंकि हमें सारा रास्ता नीचे अंत तक वहाँ जाना होगा॰ ठीक है, क्योकि यद्यपि हमारे पास है एक टेल पॉइंटर लेकिन हमारे पास नहीं है नेक्स्ट टु दी टेल पॉइंटर, हमारे पास नहीं है नेक्स्ट टु लास्ट एलीमेंट / अंतिम एलिमेंट का
अगला॰ हेड अलग है क्योकि हमारे पॉइंटरज़ पॉइंट करते है इस तरफ, अगर हमारे पास होता हेड तो यह चीप / आसान भी है दूसरा एलिमेंट पाना, ठीक, और एक और पाने के लिये तीसरा एलिमंट लेकिन टेल पॉइंटर हमें मदद नहीं करता पहुँचने में नेक्स्ट टु दी लास्ट एलिमंट / लास्ट एलिमेंट से अगले पर॰ आओ देखें इसके लिए कुछ कोड्स पर, तो पुश-फ्रंट के लिए हमारे पास है एक सिंगली लिंक्ड लिस्ट : हम करने जा रहें हैं एलोकेट एक नया कोड, सेट करेंगे इसकी कीई, सेट करेंगे इसका नेक्स्ट पॉइंट करने के लिए पुराने हेड पर और उसके बाद, हम अपडेट करेंगे करेंट / वर्तमान हेड पॉइंटर को॰ अगर टेल है बराबर निल, इसका मतलब था कि इंसर्शन से पहले, हेड और टेल थे निल, तो यह थी एक एम्पटी / खाली लिस्ट॰ तो हमें अपडेट करना होगा टेल को पॉइंट करने के लिए उसी चीज़ को जिसे हेड पॉइंट करता है॰ पोपिंग दी फ्रंट, अच्छा, अगर हमें कहा जाए फ्रंट पॉप करने के लिए एक खाली लिस्ट पर, तो वह एक एरर होगी॰ तो वह पहला चेक है जो हम करते हैं यहाँ और तब हम केवल हेड को अपडेट करते हैं अब पॉइंट करने के लिए हेड के नेक्स्ट पर॰ और उस केस में कि अगर लिस्ट में सिर्फ एक ही एलिमेंट हो और अब नहीं हैं कोई एलिमेंटस, हम चेक करते हैं कि क्या हमारा नया हेड निल है और अगर ऐसा तो अपडेट करते हैं हमारी टेल को भी निल पर॰ पुशिंग इन दी बैक : एलोकेट करे नया कोड, सेट करें उसकी कीई, सेट करें इसका नेक्स्ट पॉइंटर, और तब चेक करें इसकी करेंट / वर्तमान टेल॰ अगर वर्तमान टेल निल है फिर से, यह एक खाली लिस्ट है॰ अपडेट करें हेड को और टेल को पॉइंट करने के लिए उस नोड को॰ या फिर अपडेट करें पहले वाले टेल के नेक्स्ट को पॉइंट करने के लिए हमारे नए नोड पर, और तब अपडेट करें टेल पॉइंट करने के लिए हमारे नए नोड पर॰ पोपिंग दी बैक॰ और भी मुश्किल, सही॰ अगर वह एक खाली लिस्ट है और हम कोशिश कर रहें है पॉप करने की / एलिमेंट हटाना, तो वह एक एरर है॰ अगर हेड बराबर है टेल, तो उसका मतलब है हमारे पास एक एलिमेंट है॰ तो हमे सिर्फ करना होगा अपडेट हेड और टेल को निल पर॰ नहीं तो हमें हेड से शुरू करना होगा, और शुरू करके नीचे जाना होगा, ढूंढते हुए नेक्स्ट टु दी लास्ट एलीमेंट / आखरी एलिमेंट के अगले एलिमेंट को॰ जब हम व्हाइल लूप से निकलेगे, पी होगा नेक्स्ट टु लास्ट / आखरी से आगे वाला एलिमेंट, और तब हम अपडेट करेंगे इसके नेक्स्ट पॉइंटर को निल पर॰ और सेट करते हैं हमारी टेल बराबर उस एलिमेंट के॰ ऐडिंग आफ्टर ए नोड? बहुत आसान है एक सिंगली लिंक्ड लिस्ट में॰ एलोकेट करें एक नया नोड, सेट करें उसका नेक्स्ट पॉइंटर उस नोड पर जहाँ जोड़ना है उसके आगे, टु इट्स नेक्स्ट / इसके आगे॰ तो हम एक तरह से रस्से के जोड़ने की तरह जोड़ते है, और उसके बाद हमें करना होगा अपडेट नोड पॉइंटर को॰ वो जिसके बाद हम जोड़ रहे है, ताकि वह अब हमारे नए नोड के तरफ पॉइंट करे॰ और अगर ऐसा हो कि जिस नोड के बाद हम जोड़ रहे है वो टेल था तो हमे करना होगा अब अपडेट टेल को उस नए नोड पर॰ ऐडिंग बिफोर / पहले जोड़ने में, हमे वही प्रॉब्लम होगी जो हमे पॉपबैक / पीछे से हटाने में हुई थी कि हमारे पास नहीं होता एक लिंक पीछे पिछले एलिमेंट के लिए॰ तो इसलिए हमारे पास नहीं होता कोई तरीका अपडेट करने का इसके नेक्स्ट पॉइंटर को इसके अलावा कि जाएँ पीछे हेड के शुरु में और नीचे चलते जाएँ जब तब कि हम उसे ढूंढ न लें॰ तो ऐडबिफोर होगा एक O(n) आपरेशन॰ तो आओ सम्मेराईज़ / सार करें कि कोस्ट क्या है चीजों की / कीमत क्या चुकानी है॰ पुशफ्रंट, O(1)॰ टॉपफ्रंट, पॉपफ्रंट सभी O(1)॰ पुशिंग दी बैक है O(n) जब तक नहीं है हमारे पास एक टेल पॉइंटर जिसके होने पर यह है O(1) ऑपरेशन॰ टॉपबैक O(n), फिर से जब तक कि नहीं है हमारे पास टेल पॉइंटर जिसके होने पर यह O(1) आपरेशन है॰ पोपिंग दी बैक : O(n) ऑपरेशन, टेल के साथ या बिना टेल के॰ कीई ढूँढना है एक O(n)  हम केवल जाते हैं पूरी लिस्ट से होते हुए ढूँढते या खास एलिमेंट को इरेज़िंग / मिटाना भी O(n) है॰ चेक करना कि यह खाली है या नहीं यह है इतना आसान जैसे चेक करना कि क्या हेड निल है॰ एडिंग बिफोर / पहले जोड़ना : o(n) क्योंकि पिछला एलिमेंट ढूँढना लेता है O(n) क्योंकि हम जाते हैं सारे रास्ते हेड से इसे ढूढ़ने के लिए॰ ऐडआफ्टर : कोंस्टेंट टाईम॰