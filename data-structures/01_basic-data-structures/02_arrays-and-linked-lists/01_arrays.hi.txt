तो इस लेक्चर मे हम बात कर रहे हैं ऐरेज़ और लिंक्ड-लिस्टस के बार में॰ इस  विडियो मे हम ऐरेज़ के  बार में चर्चा करेंगे॰ तो यहाँ कुछ उदाहरण हैं डेक्लेरेशञ्ज के ऐरेज के अलग-अलग लैंगवेजिज में॰ साथ में, हम देख सकते हैं एक एक डाईमेन्शनल ऐरे जिसमें पाँच एलिमेंन्टस हैं, और तब एक दो डाइमेन्सनल ऐरे जिसमें एक रो, नहीं दो रोज़ और पाँच 
 कॉलम हैं॰ तो ऐरे की परिभाषा क्या है ? अच्छा, हमारे पास मूलता एक दूसरे से लगा हुआ ऐरे है ममोरी का॰ वह मेमोरी का एक चंक / टुकड़ा हैं॰ जो एक स्टैक पर हो सकता है या एक हीप / ढेर पर, इससे फर्क नहीं पड़ता कि यह कहाँ हैं॰ यह बँटा होता हैं बराबर साईज़ के एलीमेंट्स में, और उन एलिमेंटस में से प्रत्येक इंडेक्स्ड होता है सन्निहित पूर्णांक / क्रम-सह नम्बर से॰ ये तीनों बातें महत्वपूर्ण हैं एक ऐरे को परिभाषित करने के लिए॰ यहाँ, इस उदाहरण में, हमारे पास है एक ऐरे जिसके इंडिसिज 1 से 7 तक हैं॰ बहुत सी लैंग्वेजिज में, वही इंडिसिज इस ऐरे के लिए होंगे ज़ीरो से छः तक॰ तो यह ज़ीरो आधारित इंडेक्सिंग होगा, परंतु एक आधारित इंडेक्सिंग भी संभव है कुछ लैंगवेजिज में॰ और अन्य लैंगवेंजिज आपको अनुमति देती हैं वास्तव में बताने / स्पेसिफ़ाई करने की कि इनिशियल इंडेक्स क्या है॰ तो ऐरेज़ कि खासियत क्या हैं? अच्छा, मुख्य बिंदु ऐरे का हैं कि हम रैन्डम ऐक्सेस कर सकते हैं इसका मतलब है, ऐरे के किसी भी एलिमेंट को ऐक्सेस करने के लिए बराबर समय लगता हैं / कोंस्टेंट टाईम एकसेस है॰ बराबर समय ऐक्सेस रीड करने के लिए और बराबर समय ऐक्सेस राइट करने के लिए॰ सवाल ये हैं कि ये काम कैसे करता हैं ? अर्थात ये कि अंकगणित करके हम पता कर सकते हैं ऐड्रेस एक एलिमेंट ऐरे का॰ तो पहली चीज जो हमें करनी है वो है शुरू करना ऐरे के एड्रेस से॰ तो हम लेते हैं एड्रेस ऐरे का और तब हम उसे गुणा करते हैं पहले एलिमेंट साइज से॰ तो यहाँ जहां मुद्दे की बात है कि हर एलिमेंट एक ही साइज का है महत्वपूर्ण है, इसीलिए इससे हम एक साधारण गुणा कर सकते हैं॰ बजाय इसके अगर हर एलिमेंट ऐरे का होता अलग अलग साइज का, हमें उन्हे एक साथ सम करना पडता, और अगर हमें सम करना पड़ता इकट्ठा एन आईटमज़, तो वह ऑडर एन टाईम होता॰ इसलिए हम हमारा ऐरे ऐड्रेस लेते है, उसमें एलिमेंट साईज़ टाईम्ज़ आई ज़ोड़ते हैं जो है इंडेक्स जो है इन्टरेस्ट माईनस फर्स्ट-इंडेक्स॰ अगर हम ज़ीरो बेस्ड इंडेक्सिंग कर रहे है, तो वह पहला इ्डेक्स असल में जरूरी नहीं है॰ मुझे यह उदाहरण पसंद हैं क्योकि यह वास्तव में दिखाता है एक अधिक साधारण केस जहां हमारे पास नहीं है एक पहला इन्डेक्स॰ उदाहरण के रूप में कहें कि हम चौथे इन्डेक्स के ऐड्रेस को देख रहे है॰ हम लेंगे चार माईनस पहला इन्डेक्स, जो है एक, जो हमें देगा तीन॰ उसको गुना करें उससे जो भी हमारा एलिमेंट साइज है, और तब उसे जोड़ें हमारे ऐरे ऐड्रेस में॰ और निश्चय, हमे यह सारा काम नहीं करना, कम्पाइलर या इंटरप्रेटर करता है यह काम हमारे लिए, लेकिन हम देख सकते हैं कि कैसे यह काम करता है कोंस्टेंट टाईम में॰ बहुत सी लैंगवेज मल्टी डाइमेंशनल ऐरेज़ भी सपोर्ट करती हैं, अगर नहीं तो आप एक तरह से अपनी खुद ही बना सकते हैं एक उदाहरण द्वारा जो मैं आपको यहाँ दिखाऊँगा, जहा आप अपना गणित खुद से कर सकते हो॰ तो यहाँ, आओ देखें॰ मान लो कि ऊपर बायाँ एलिमेंट है इंडेक्स (1, 1) पर,  और यहाँ हैं इंडेक्स (3,4)॰ तो इसका मतलब है कि हम रो 3, कॉलम 4 में हैं॰ हम उस एलिमेंट का एड्रेस कैसे जान पाते हैं? तो, सबसे पहले जो हम करते हैं कि हम उन रोज़ को छोड़ देंगे जो, पूरी रोज़, जो हम इस्तेमाल नहीं कर रहे॰ तो वह है कि, हमें दो रोज़ छोडना है, या फिर 3, जो है रो इंडेक्स माईनस 1, जो हैं शुरू का / इनिशियल रो इंडेक्स॰ तो इससे हमें मिलता है 2 गुना 6 या 12 एलिमेंट्स जिसे हम छोड़ रहे है उन रोज़ के लिए ताकि हम रो 3 में पहुँच सके. उसके बाद हमे एलिमेंट्स छोड़ने है (3,4) से पहले उसी रो के॰ तो यहाँ तीन हैं. हम उन तक कैसे पहुँचे हम कॉलम इंडेक्स लेते है, जो 4 है और उसको इनिशियल कॉलम इंडेक्स से घटाते है, जो है 1॰ तो बुनियादी तौर पर इससे हमें 15 मिलता है॰ छः पहले रो के लिए, छः दूसरे रो के लिए और फिर तीन तीसरे रो के लिए उस ख़ास एलिमेंट से पहले॰ हम उस 15 को लेते हैं और हमारे एलिमेंट साइज से गुणा करते है और फिर उसको हमारे ऐरे एड्रेस में जोड़ते है॰ और उससे हमे एलिमेंट (3,4) का एड्रेस मिल जायेगा॰ अब हमने यहाँ एक तरह का सपोजीशन /  परिकल्पना की॰ और वह थी कि जिस रारह से इसे दर्शाया गया कि हमने सभी एलिमेंट्स दर्शाये पहली रो के, उसके बाद सभी एलिमेंटस दूसरी रो के और इसी तरह आगे॰ उसे कहते हैं रो-मेजर ऑर्डरिंग या फिर रो-मेजर इंडेक्सिंग॰ और हम बुनियादी तौर पर क्या करते है कि, हम ले आउट करते / बिछाते हैं, (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1,6)॰ और उसके बिलकुल बाद मेमोरी में (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2,6)॰ तो कॉलम इंडेक्स बहुत तेजी से बदल रहा है जैसे जैसे हम देख रहे हैं आगे के एलिमेंट्स॰ और यह प्रमाण है इसके रो-मेजर इंडेक्सिंग का॰ हम ऐरेज़ को अलग अलग रूप में दर्शा सकते है और कुछ लैंग्वेजेज या कम्पाइलर ऐसा करते है, जब वे हर एक कॉलम को ऑर्डर में ले आउट करते हैं, ऐसे कि आपके पा होगा पहला कॉलम, उसके बाद दूसरा, उसके बाद तीसरा॰ और ऐसे कि, तब, क्रमशः एलिमेंटस होंगे, (1, 1), (2, 1), (3, 1), उसके बाद (1, 2), (2, 2), (3, 2) इत्यादि॰ तो वहाँ हम देखते हैं कि रो इंडेक्सिंग अधिकतम तेजी से बदलता है, और इसे कहते हैं  कॉलम-मेजर ओरडरिंग॰ तो ओपरेशञ्ज / संचालन करने में कितना समय लगता है? हम पहले कहा कि किसी एलिमेंट को पढ़ना है O(1), और किसी एलिमेंट को लिखना है O(1)॰ वह ऐरेज़ का स्टैंडर्ड / मानक फीचर है॰ क्या होता है अगर हम एक एलिमेंट जोड़ना चाहते है एक ऐरे के अंत में? मान लो कि हमने एलोकेट किए हैं सात एलिमेंट्स एक ऐरे के लिए॰ हम उनमे से सिर्फ चार इस्तेमाल कर रहे है, ठीक? तो हमें याद रखना है कि हम चार एलिमेंट इस्तेमाल कर रहे है और हमे पांचवा एलिमेंट जोड़ना है॰ और फिर यहाँ सात के लिए जगह है॰ हम सब ये जानते है कि हमने सिर्फ उसे जोड़ दिया॰ तब अपडेट करें संख्या एलिमेंट्स की जो इस्तेमाल में हैं॰ वह एक O(1) ऑपरेशन है॰ अगर हम आखरी एलिमेंट भी हटाना चाहते है, तो वह एक O(1) आपरेशन है क्योंकि हम सिर्फ अपडेट करते हैं नंबर ऑफ एलिमेंट्स को जो हम इस्तेमाल कर रहे है, और इसलिए वह एक O(1) आपरेशन है॰ यह वहाँ महँगा साबित होता है, जहा अगर हम चाहे, उदाहरणता, पहला एलिमेंट हटाना॰ तो यहाँ हम पाँच हटाते है, और तब हमे क्या करना है कि, हम इसमें खाली जगह / होल्ज़ नहीं छोड़ना चाहते॰ इसलिए हमें 8 को नीचे ले जाना होगा, 3 को नीचे ले जाओ, 12 को नीचे ले जाओ॰ वह एक O(n) आपरेशन है॰ ऐसा ही होगा अगर हम शुरुआत में कोई एलिमेंट जोड़ना चाहे तो॰ इसलिए हमें 12 को ले जाना होगा,  3 को और 8 को हटाना होगा जगह बनाने के लिए हमारे नये एलिमेंट के लिए॰ तब वह भी होगा O(n)॰ और अगर हम जोड़ना या निकालना चाहे कही बीच से, तब भी वो O(n) आपरेशन ही होगा॰ अगर हम एकदम बीच में जोड़ना चाहे तो, हमे n/2 आईटंज हटाना होगा, जो O(n) है॰ यही बात हटाने के लिए भी लागू है॰ तो, ऐरेज महान / महत्वपूर्ण हैं अगर आप चाहते हैं या अंत से हटाएँ तो॰ लेकिन यह खर्चीला है / समय ज्यादा लेता है, अगर आप शुरू में या अंत में जोड़ना या हटाना चाहे॰ फिर भी, याद रखिए, ऐरेज़ के लिए बहुत से फायदे है कि हमारे पास यह कोंस्टेंट / समान टाईम एक्सेस है सभी एलिमेंट्स के लिए, रीड करे या लिखें, संक्षेप में तब, एक ऐरे होता है एक कंटिगुयस / संस्पर्शी एरिया मेमोरी का॰ क्योकि अगर यह नहीं होता कंटिगुयस / संस्पर्शी, तब हम नहीं कर पाते यह आसान अंकगणित वहाँ पहुँचने के लिए जहां  हम जा रहे हैं॰ हमें फिर एक बराबर साईज़ के एलिमेंट्स लेने पड़ेंगे ताकि हमारा गणित काम कर पाये॰ और फिर इंडेक्स किए हुए कंटिगुयस / संस्पर्शी इंटिजर्ज / अंको से ताकि हमारा गणित काम कर सके॰ हमे बराबर समय लगता है किसी एलिमेंट तक पहुँचने में, एलिमेंट जोड़ने में या या अंत में हटाने मे और लिनियर समय किसी भी जगह पर जोड़ने या हटाने में॰ अपने अगले विडियो में हम लिंक्ड लिस्ट के बारे में बात करेंगे॰