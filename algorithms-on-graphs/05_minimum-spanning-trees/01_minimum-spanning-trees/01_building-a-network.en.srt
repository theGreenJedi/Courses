1
00:00:00,290 --> 00:00:02,110
Hello and welcome to the next module,

2
00:00:02,110 --> 00:00:04,664
in which we will be talking
about minimum spin entries.

3
00:00:04,664 --> 00:00:09,260
To [INAUDIBLE] this title, this problem
considers the following toy example.

4
00:00:09,260 --> 00:00:13,650
Assumes that we have six machines in our
office and we would like to join them.

5
00:00:13,650 --> 00:00:16,910
In doing that whereby putting
wires between some pairs of them

6
00:00:16,910 --> 00:00:20,890
such that each machine, each machine
is reachable from any other machine.

7
00:00:20,890 --> 00:00:27,380
I assume further that we can put wires
only between some pairs of our machines.

8
00:00:27,380 --> 00:00:31,030
And for each [INAUDIBLE] we're now
[INAUDIBLE] responding [INAUDIBLE] why

9
00:00:31,030 --> 00:00:32,060
between them.

10
00:00:32,060 --> 00:00:36,080
For example in this case we are allowed

11
00:00:36,080 --> 00:00:40,000
to put a Y between these two machines and
of course this five.

12
00:00:40,000 --> 00:00:44,254
And we are not allowed to join
these two machines by wire.

13
00:00:45,946 --> 00:00:47,690
Okay.

14
00:00:47,690 --> 00:00:53,040
Wire of the optimal solutions in this
case is shown here on the slide.

15
00:00:53,040 --> 00:00:56,470
It is not difficult to check
that in this case indeed

16
00:00:56,470 --> 00:00:59,850
any machine is reachable
from [INAUDIBLE] machine.

17
00:00:59,850 --> 00:01:03,740
For example to reach the right
machine from the left machine

18
00:01:03,740 --> 00:01:05,510
we would go as follows.

19
00:01:05,510 --> 00:01:10,300
First by this edge, then by this edge,
and then by this edge.

20
00:01:10,300 --> 00:01:14,945
The total cost of the shown solution
is equal to two plus one which

21
00:01:14,945 --> 00:01:18,500
is three plus three
which is six plus four.

22
00:01:18,500 --> 00:01:21,600
Which gives us ten plus
two which gives us 12.

23
00:01:21,600 --> 00:01:27,330
So the total cost is 12, and
this is actually not the only solution

24
00:01:27,330 --> 00:01:33,620
in this case because instead of using
this wire, we may use this wire.

25
00:01:35,260 --> 00:01:39,500
The result in solution is shown for
you on the slide and it is not.

26
00:01:39,500 --> 00:01:44,150
Again, difficult to check that, in this
case, any machine is reachable from any

27
00:01:44,150 --> 00:01:47,070
other machine and
that the total cost is equal to 12.

28
00:01:47,070 --> 00:01:52,500
We will soon learn read the algorithms
that will allow us to justify

29
00:01:52,500 --> 00:01:56,780
that in this, for example,
the optimal total cost is indeed 12.

30
00:01:56,780 --> 00:02:01,550
These two algorithms will also allow
us to solve very efficiently in

31
00:02:01,550 --> 00:02:07,300
practice instances consisting
of thousands of machines.

32
00:02:07,300 --> 00:02:12,020
In our second example we have a collection
cities and we would like to build roads

33
00:02:12,020 --> 00:02:17,720
between some pairs of them such that
there is a path between any two cities.

34
00:02:17,720 --> 00:02:21,250
And such that the sum
of the lengths of all

35
00:02:21,250 --> 00:02:25,557
the roads that we are going to
build is as small as possible.

36
00:02:25,557 --> 00:02:26,260
Okay?

37
00:02:26,260 --> 00:02:29,160
In this case the solution looks like this.

38
00:02:29,160 --> 00:02:33,960
And again we will soon learn how
to find the solution efficiently.

39
00:02:35,010 --> 00:02:37,756
Formally the problem is stated as follows.

40
00:02:37,756 --> 00:02:44,770
[INAUDIBLE] graph H [INAUDIBLE] and
we assume that this graph is connected.

41
00:02:46,400 --> 00:02:51,640
Okay and it is given together
with positive edge weight.

42
00:02:53,610 --> 00:02:56,880
What we're looking for
is that subset of edges,

43
00:02:56,880 --> 00:03:01,330
e prime, such that if we leave
only these edges in the graph.

44
00:03:01,330 --> 00:03:06,250
Then the resulting graph Is connected and
also the total cost of folds and

45
00:03:06,250 --> 00:03:11,710
edges at E prime is as small as possible,
okay?

46
00:03:11,710 --> 00:03:14,760
So why is the problem is
called minimum spending tree?

47
00:03:14,760 --> 00:03:19,580
Well minimum corresponds to
the fact that we are looking for

48
00:03:19,580 --> 00:03:23,980
a subset of edges or minimum total cost or
minimum total weight.

49
00:03:23,980 --> 00:03:27,150
Okay.
It is called spanning because we're

50
00:03:27,150 --> 00:03:32,653
looking for a subset of edges such that
if we leave only these edges, then

51
00:03:32,653 --> 00:03:38,724
the result in graph is still connected so
it spans all the vertices in our graph.

52
00:03:38,724 --> 00:03:44,490
And finally, the word tree corresponds
those effect that in each solution,

53
00:03:44,490 --> 00:03:47,160
the set E prime is going to be.

54
00:03:47,160 --> 00:03:48,860
Is going to form a tree.

55
00:03:50,880 --> 00:03:53,830
We will prove this fact on the next slide.

56
00:03:55,070 --> 00:03:58,380
Before proving that any
optimal solution for

57
00:03:58,380 --> 00:04:03,590
minimum spanning tree problem any
optimal solution in prime forms a tree.

58
00:04:03,590 --> 00:04:07,260
Let me remind you a few
useful properties of trees.

59
00:04:07,260 --> 00:04:12,030
First of all, just by definition,
a tree is an undirected graph

60
00:04:12,030 --> 00:04:16,370
that is connected and is acyclic,
that is it contains no cycles.

61
00:04:17,960 --> 00:04:22,140
Recall that we usually
draw trees as follows.

62
00:04:23,630 --> 00:04:28,170
So we draw them level by level and
look like this.

63
00:04:28,170 --> 00:04:29,880
In this case, we actually.

64
00:04:31,560 --> 00:04:33,640
We're actually talk about rooted trees.

65
00:04:33,640 --> 00:04:39,200
This is a rooted tree and in particular,
this is a root of this tree.

66
00:04:39,200 --> 00:04:42,740
At the same time, this graph

67
00:04:46,420 --> 00:04:52,840
is also a tree with only
difference that there is no root

68
00:04:52,840 --> 00:04:57,790
In this tree and
it is not drawn level by level.

69
00:04:57,790 --> 00:05:00,340
So once again,
this graph is also connected and

70
00:05:00,340 --> 00:05:04,240
there are no cycle in this graph so
it is a tree.

71
00:05:04,240 --> 00:05:08,220
There is no root in this tree,
however we can take a vertex,

72
00:05:08,220 --> 00:05:12,470
declare this vertex as a tree and
then hang by this vertex.

73
00:05:12,470 --> 00:05:18,090
And then this will allow us to draw
this graph level by level,okay?

74
00:05:18,090 --> 00:05:21,110
the next property is
that if we have a tree

75
00:05:21,110 --> 00:05:25,560
with n vertices than it
necessarily has n minus one edges.

76
00:05:25,560 --> 00:05:27,080
Why is that?

77
00:05:27,080 --> 00:05:30,600
Well let me illustrate this
by drawling something.

78
00:05:30,600 --> 00:05:34,690
Initially we have just one vertices and
zero edges.

79
00:05:34,690 --> 00:05:37,930
So initially the property has
satisfied the number of edges.

80
00:05:37,930 --> 00:05:40,820
Is equal to the number
of vertices minus one.

81
00:05:40,820 --> 00:05:43,400
Let then introduce some new vertex.

82
00:05:43,400 --> 00:05:47,020
So we'll attach it by
an edge to a previous vertex.

83
00:05:47,020 --> 00:05:51,130
Then we introduce another vertex,
probably another one, and another one.

84
00:05:51,130 --> 00:05:54,968
And so on.
So each time when we introduce a new edge

85
00:05:54,968 --> 00:06:00,550
Introducing new [INAUDIBLE]
We also have a new edge.

86
00:06:00,550 --> 00:06:06,160
So initially we had one vertex, and
zero edges [INAUDIBLE] vertices and now we

87
00:06:06,160 --> 00:06:11,740
have, I'm sorry five vertices, now we have
six vertices and [INAUDIBLE] five edges.

88
00:06:11,740 --> 00:06:14,420
So still the property is satisfied.

89
00:06:14,420 --> 00:06:20,170
Note that we cannot introduce a new
edge without introducing a new vertex.

90
00:06:20,170 --> 00:06:24,660
Because if we introduce a new edge
that would mean that we are connecting

91
00:06:24,660 --> 00:06:26,900
two existing vertices by edge.

92
00:06:26,900 --> 00:06:31,490
For example like this, but
this will necessarily produce a cycle

93
00:06:31,490 --> 00:06:35,710
which means that this will give
us a graph which is not at three.

94
00:06:35,710 --> 00:06:36,210
Okay?

95
00:06:37,270 --> 00:06:42,880
The next property is that,
actually any connected graph with

96
00:06:43,950 --> 00:06:49,540
the number of edges equal to the number of
vertices minus one, is necessarily a tree.

97
00:06:51,420 --> 00:06:55,850
Well, let me emphasize that it is
important that here we are talking about

98
00:06:55,850 --> 00:06:57,200
connected graphs.

99
00:06:58,280 --> 00:07:01,430
Because for
example if a graph has the property

100
00:07:01,430 --> 00:07:04,290
that the number of edges is equal to
the number of vertices minus one but

101
00:07:04,290 --> 00:07:08,490
it is not connected,
that it is not necessarily a tree.

102
00:07:08,490 --> 00:07:10,700
A counterexample is the following.

103
00:07:10,700 --> 00:07:14,300
Assume that we have four vertices and
there is a [INAUDIBLE] and

104
00:07:14,300 --> 00:07:16,940
three vertices and there is one isolated.

105
00:07:16,940 --> 00:07:18,340
One isolated vertex.

106
00:07:18,340 --> 00:07:25,280
In this case, we have four vertices,
and three edges, right?

107
00:07:25,280 --> 00:07:30,600
So this is not a tree, but at the same
time this graph is not connected.

108
00:07:30,600 --> 00:07:35,200
There is no pass for example from this
vertex to this isolated vertex, okay?

109
00:07:36,300 --> 00:07:42,140
And the last property says that
an undirected graph is a tree if and

110
00:07:42,140 --> 00:07:46,150
only if there is a unique path
between any two vertices.

111
00:07:46,150 --> 00:07:50,980
And this is also not difficult to see
first of all if we have a tree then of

112
00:07:50,980 --> 00:07:56,440
course there is a unique path
between two its vertices.

113
00:07:56,440 --> 00:08:00,810
On the other hand If we have to vertacise,
and

114
00:08:00,810 --> 00:08:05,030
there are at least parts between them,

115
00:08:05,030 --> 00:08:09,300
then this gives us a cycle,
which means that this is not a three.

116
00:08:09,300 --> 00:08:13,800
Okay, now let me get back
to proving that any optimal

117
00:08:13,800 --> 00:08:18,670
solution [INAUDIBLE] problem
is indeed a three, for this,

118
00:08:18,670 --> 00:08:23,420
consider some [INAUDIBLE]
solution.

119
00:08:23,420 --> 00:08:28,780
So in this case we have six vertices,
and we consider some way of joining

120
00:08:28,780 --> 00:08:33,310
them into some way of connecting them.

121
00:08:33,310 --> 00:08:36,280
I assume that our
solution looks like this.

122
00:08:36,280 --> 00:08:39,510
So you see that this is not
a tree because there is a cycle.

123
00:08:39,510 --> 00:08:41,360
On these four vertices.

124
00:08:43,240 --> 00:08:46,160
Well, in this cycle for

125
00:08:46,160 --> 00:08:51,730
any two vertices in this cycle,
there are two paths.

126
00:08:51,730 --> 00:08:54,270
Right?
For example, for this vertex and for

127
00:08:54,270 --> 00:08:58,500
this vertex we can go either this way or
this way.

128
00:08:58,500 --> 00:09:01,390
And this is true for any cycle,
if we have a cycle and

129
00:09:01,390 --> 00:09:06,350
two vertices on this cycle we can
either go this way or this way.

130
00:09:06,350 --> 00:09:10,090
And this means that there
is some redundancy here.

131
00:09:10,090 --> 00:09:15,900
In this particular case, we can remove,
for example, this edge from this cycle.

132
00:09:15,900 --> 00:09:17,770
Or from this solution.

133
00:09:17,770 --> 00:09:21,290
This will only decrease the total
weight of this solution and

134
00:09:21,290 --> 00:09:24,640
the resulting set of fedres
will still be connected.

135
00:09:24,640 --> 00:09:29,736
Great this proves that any
optimal solution must be acyclic,

136
00:09:29,736 --> 00:09:34,048
and since any solution is
required to be connected,

137
00:09:34,048 --> 00:09:38,659
this proves that any optimal
solution is in fact a tree.