1
00:00:00,220 --> 00:00:03,953
Hi, in this video you will learn to
deal with negative cycles in the graphs.

2
00:00:03,953 --> 00:00:08,660
You will learn to detect whether there
is a negative cycle in the graph and

3
00:00:08,660 --> 00:00:11,994
to find the negative cycle
if you know there is one.

4
00:00:11,994 --> 00:00:17,130
And you will use that in the next
video to achieve infinite arbitrage.

5
00:00:17,130 --> 00:00:22,240
But before that, you really need to learn
to detect negative cycles in the graphs,

6
00:00:22,240 --> 00:00:23,440
and this lemma will help you.

7
00:00:24,580 --> 00:00:29,460
So, it says basically that there is a
negative weight cycle in the graph if and

8
00:00:29,460 --> 00:00:33,070
only if you make one additional
iteration of relaxation

9
00:00:33,070 --> 00:00:36,570
in the Bellman-Ford's algorithm,
and some edge is relaxed.

10
00:00:38,800 --> 00:00:42,660
First, let's prove that
if there is some change

11
00:00:42,660 --> 00:00:48,360
in the last step of Bellman-Ford's
algorithm, then there is a negative cycle.

12
00:00:48,360 --> 00:00:53,450
Assume for the sake of contradiction
that there are no negative cycles.

13
00:00:54,640 --> 00:00:57,691
Then it means that all
shortest paths from S

14
00:00:57,691 --> 00:01:01,680
to any node in the graph contain at most,
V- 1 edges.

15
00:01:01,680 --> 00:01:02,840
We've already discussed that.

16
00:01:02,840 --> 00:01:06,140
If they contain at least V edges,
then there is a cycle.

17
00:01:06,140 --> 00:01:09,944
And this cycle is non-negative so
it can be removed, and

18
00:01:09,944 --> 00:01:14,000
the path will be either improved or
just stay shortest path.

19
00:01:14,000 --> 00:01:19,726
So, know this value can actually
be updated on iteration number V.

20
00:01:19,726 --> 00:01:24,147
Because we already found
the optimal shortest path

21
00:01:24,147 --> 00:01:29,077
length with paths that contain,
at most, V- 1 edges,

22
00:01:29,077 --> 00:01:33,590
and we cannot improve anything after that.

23
00:01:33,590 --> 00:01:38,440
So this is a contradiction with
the fact that the last iteration

24
00:01:38,440 --> 00:01:40,760
actually relaxes some edge.

25
00:01:40,760 --> 00:01:44,220
And so if it does, then there is
a negative cycle in the graph.

26
00:01:45,410 --> 00:01:51,060
Now let's prove, in another side,
that if there is a negative weight cycle,

27
00:01:51,060 --> 00:01:55,860
then there will be a relaxation
on the iteration number V.

28
00:01:55,860 --> 00:01:57,794
Suppose again, for
the sake of contradiction,

29
00:01:57,794 --> 00:01:59,360
that there is a negative weight cycle.

30
00:01:59,360 --> 00:02:04,350
For example,
a cycle of length three a b c a, but

31
00:02:04,350 --> 00:02:06,880
there are no relaxations
on the iteration number V.

32
00:02:08,160 --> 00:02:11,010
Now let's look at the following
three inequalities.

33
00:02:11,010 --> 00:02:15,387
These inequalities basically
state that edges (a, b),

34
00:02:15,387 --> 00:02:21,050
(b,c), and (c,a) cannot be
relaxed on the V-th iteration.

35
00:02:21,050 --> 00:02:24,550
But if we sum these inequalities,
on the left side,

36
00:02:24,550 --> 00:02:27,240
you will have sum of these values for
a, b, and c.

37
00:02:28,350 --> 00:02:33,090
And on the right part,
we will have sum of these values of a, b,

38
00:02:33,090 --> 00:02:36,857
and c plus sum of weights
of the edges of the cycle.

39
00:02:36,857 --> 00:02:40,742
And from this sum of
inequalities that follows,

40
00:02:40,742 --> 00:02:45,110
that the sum of the weights
of edges is non-negative.

41
00:02:45,110 --> 00:02:48,451
But we know that the cycle is
a negative weight cycle, so

42
00:02:48,451 --> 00:02:50,228
this is a contradiction and so

43
00:02:50,228 --> 00:02:55,295
we prove by contradiction that there will
be some relaxation on iteration number V.

44
00:02:55,295 --> 00:02:57,151
So we proved our lemma, and

45
00:02:57,151 --> 00:03:01,360
now we know how to detect negative
weight cycles in the graph.

46
00:03:01,360 --> 00:03:06,208
We just do one additional duration
of Bellman-Ford's algorithm, and

47
00:03:06,208 --> 00:03:10,980
it doesn't increase its asymptotic
complexity, its training time.

48
00:03:12,210 --> 00:03:15,990
And now we can determine whether
the graph is good or bad,

49
00:03:15,990 --> 00:03:19,050
whether it contains negative cycles or
not.

50
00:03:20,460 --> 00:03:25,717
Now, not only to detect what
are the reason negative cycle or

51
00:03:25,717 --> 00:03:31,504
not, also want to find some negative
cycle itself, at least one.

52
00:03:31,504 --> 00:03:35,540
Maybe they are many of them, but
we want some negative cycle.

53
00:03:35,540 --> 00:03:41,120
So first, we still need to run executive V
iterations of Bellman-Ford's relaxation.

54
00:03:41,120 --> 00:03:44,180
And as we know,
if there is negative cycle, then for

55
00:03:44,180 --> 00:03:48,225
some node v, it will be relaxed.

56
00:03:48,225 --> 00:03:53,820
This value will be decreased on
the last iteration, so save this node.

57
00:03:53,820 --> 00:03:58,650
And I state that this node is definitely
reachable from a negative cycle.

58
00:03:58,650 --> 00:04:02,698
Because if it was not reachable
from the negative cycle,

59
00:04:02,698 --> 00:04:07,500
then any shortest path to this node
will contain at most V- 1 edge,

60
00:04:07,500 --> 00:04:11,240
and it won't be improved
on the iteration number v.

61
00:04:12,400 --> 00:04:15,500
So it is reachable from a negative cycle,
and

62
00:04:15,500 --> 00:04:20,604
also it is reachable from a negative
cycle with at most, v steps.

63
00:04:20,604 --> 00:04:25,730
Because if you have
shortest path from s to v,

64
00:04:27,560 --> 00:04:30,520
which contains negative cycle inside,

65
00:04:30,520 --> 00:04:36,170
even if there are more than the edges
from this negative weight cycle to V,

66
00:04:37,310 --> 00:04:40,630
then there is another cycle
on the shortest path.

67
00:04:40,630 --> 00:04:42,160
And it also has to be negative,

68
00:04:42,160 --> 00:04:45,080
because otherwise we can remove
it from the shortest path.

69
00:04:45,080 --> 00:04:51,020
So v is definitely reachable from
a negative cycle, with at most v steps.

70
00:04:52,580 --> 00:05:00,160
And we remember the previous node from
which each node was updated last time.

71
00:05:00,160 --> 00:05:02,222
We store it in the prev values.

72
00:05:02,222 --> 00:05:07,101
So if we go by prev links from V,
and we do that at least three times,

73
00:05:07,101 --> 00:05:11,650
we will be already definitely
on this negative weight cycle.

74
00:05:11,650 --> 00:05:18,208
Because we will already return to
the cycle by at most the steps, and

75
00:05:18,208 --> 00:05:24,551
then we will just go around the cycle for
some amount of duration.

76
00:05:24,551 --> 00:05:30,265
So if we go by V times back,
we will be on the negative cycle.

77
00:05:30,265 --> 00:05:35,953
Then, only thing we need to do is just to
save the position where we started and

78
00:05:35,953 --> 00:05:41,290
then go once around the cycle until we
come to the same node and we will know

79
00:05:41,290 --> 00:05:47,175
that the nodes we saw during this round
trip are the nodes of the negative cycle.

80
00:05:47,175 --> 00:05:52,963
So this is the algorithm, and
it works in the time of Bellman-Ford's

81
00:05:52,963 --> 00:05:57,391
algorithm plus proportional
to the number of nodes.

82
00:05:57,391 --> 00:06:01,130
So basically, the same running
time as Bellman-Ford's algorithm.

83
00:06:03,130 --> 00:06:05,047
So now the question is, again,

84
00:06:05,047 --> 00:06:10,088
if you have a negative cycle in your graph
of minus logarithms, it doesn't mean that

85
00:06:10,088 --> 00:06:14,994
it is always possible to get as many
rubles as you want from $1,000 dollars.

86
00:06:14,994 --> 00:06:18,499
And unfortunately,
that's not always the case.

87
00:06:18,499 --> 00:06:23,145
For example, in this graph,
there is a negative cycle between euro,

88
00:06:23,145 --> 00:06:26,210
British pounds and Norwegian crowns.

89
00:06:26,210 --> 00:06:29,490
And you can check that if you
multiply the conversion rates

90
00:06:29,490 --> 00:06:32,230
on the edges of this triangle
you will get more than one and

91
00:06:32,230 --> 00:06:35,730
it means that, for
one euro can get more than one euro.

92
00:06:35,730 --> 00:06:40,310
And this means in turn that you can get
infinite arbitrages if you just make

93
00:06:40,310 --> 00:06:44,850
trades along the edges of this triangle
for as many times as you want.

94
00:06:44,850 --> 00:06:47,240
But there is no possibility,

95
00:06:47,240 --> 00:06:51,310
in this particular example,
to exchange euros for dollars.

96
00:06:51,310 --> 00:06:53,330
So you cannot exchange rubles for

97
00:06:53,330 --> 00:06:57,930
euros then make many loops around
this negative weight cycle.

98
00:06:57,930 --> 00:07:00,200
And then exchange euros to dollars.

99
00:07:00,200 --> 00:07:07,500
So this is not sufficient, and you cannot
actually get any dollars from rubles,

100
00:07:07,500 --> 00:07:11,520
you cannot get any rubles from
dollars in this particular case.

101
00:07:11,520 --> 00:07:15,870
And in the next video, you will learn
how to determine whether it is possible

102
00:07:15,870 --> 00:07:19,500
to have an infinite arbitrage
from rubles to dollars, or

103
00:07:19,500 --> 00:07:23,520
from any other currency
to any other currency.

104
00:07:23,520 --> 00:07:25,278
And not only to detect that, but

105
00:07:25,278 --> 00:07:28,417
to actually find a way to
implement it if it's possible.