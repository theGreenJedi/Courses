1
00:00:00,410 --> 00:00:01,870
Hi, in this module,

2
00:00:01,870 --> 00:00:06,380
you will be working on a project based
on Advanced Shortest Paths algorithms.

3
00:00:06,380 --> 00:00:09,970
The project will be organized as
a series of programming assignments

4
00:00:09,970 --> 00:00:12,840
similar to those you had
in the previous modules.

5
00:00:12,840 --> 00:00:14,812
However, in these programming assignments,

6
00:00:14,812 --> 00:00:19,370
you will be working with real world data,
based on raw networks and social networks.

7
00:00:19,370 --> 00:00:24,430
Also, you will have more freedom to
come up with your own creative ideas

8
00:00:24,430 --> 00:00:27,270
about how to improve your algorithms.

9
00:00:27,270 --> 00:00:32,180
You even can compete with your fellow
learners on the forums on how fast

10
00:00:32,180 --> 00:00:35,630
does your algorithm solve a particular
problem in the problem assignment.

11
00:00:36,790 --> 00:00:40,250
You've learned the classical
shortest paths algorithms in two

12
00:00:40,250 --> 00:00:42,270
of the previous modules.

13
00:00:42,270 --> 00:00:45,197
And you've learned
the Breadth First Search Algorithm,

14
00:00:45,197 --> 00:00:48,620
Dijkstra's Algorithm and
Bellman Ford's Algorithm.

15
00:00:48,620 --> 00:00:52,210
The advanced algorithms can
be faster thousands of times,

16
00:00:52,210 --> 00:00:55,670
or sometimes of million
of times in practice.

17
00:00:55,670 --> 00:01:00,610
But those are optimizations which work for
particular kinds of graphs.

18
00:01:00,610 --> 00:01:04,280
For example, some algorithms
are very good for road networks and

19
00:01:04,280 --> 00:01:07,060
some others are very good for
social networks.

20
00:01:08,670 --> 00:01:13,700
All the advanced algorithms that we will
tell you in the lectures of these modules

21
00:01:13,700 --> 00:01:18,830
are some optimizations based on
the classic Dijkstra's Algorithm.

22
00:01:18,830 --> 00:01:23,534
So, it's good to go back and
recall how Dijkstra's Algorithm works, and

23
00:01:23,534 --> 00:01:28,240
to make sure that you can solve
the problems based on Dijkstra's Algorithm

24
00:01:28,240 --> 00:01:31,844
in the previous modules before
starting on the project.