1
00:00:00,200 --> 00:00:00,760
Hi.

2
00:00:00,760 --> 00:00:01,270
In this video,

3
00:00:01,270 --> 00:00:04,670
we will prove the correctness of
the breadth-first search algorithm for

4
00:00:04,670 --> 00:00:08,110
finding distances from an original
node to all the nodes in the graph.

5
00:00:08,110 --> 00:00:11,880
We will also prove some properties of this
algorithm, which can be useful when you

6
00:00:11,880 --> 00:00:14,330
want to extend this algorithm
to other kinds of problems.

7
00:00:15,720 --> 00:00:19,284
First, recall that node u is
called reachable from node S,

8
00:00:19,284 --> 00:00:21,010
if there is a path from S to u.

9
00:00:21,010 --> 00:00:25,983
And the lemma states that the reachable
nodes are discovered during breadth-first

10
00:00:25,983 --> 00:00:26,550
search.

11
00:00:26,550 --> 00:00:30,180
And they get a finite
estimate of distance from S.

12
00:00:30,180 --> 00:00:33,870
And unreachable nodes are not
discovered during breadth-first search.

13
00:00:33,870 --> 00:00:38,640
And they stay with infinite distance
estimate, infinite distance value.

14
00:00:39,700 --> 00:00:42,080
First, let's prove it for reachable nodes.

15
00:00:42,080 --> 00:00:46,140
So, suppose for the sake of contradiction
that some reachable nodes were

16
00:00:46,140 --> 00:00:49,030
not discovered during
the breadth-first search.

17
00:00:49,030 --> 00:00:53,177
Then select out of those
nodes the one closest to S in

18
00:00:53,177 --> 00:00:56,240
terms of the length of the path.

19
00:00:56,240 --> 00:00:59,955
So, let's assume that u is
the closest to S unreachable node,

20
00:00:59,955 --> 00:01:03,610
which was not discovered during
the breadth-first search.

21
00:01:04,740 --> 00:01:09,230
Then take the shortest path,
some shortest path from S to u.

22
00:01:09,230 --> 00:01:13,240
It goes from S to some nodes
of v1 from there to v2 and so

23
00:01:13,240 --> 00:01:16,970
on and up to vk and from vk it goes to u.

24
00:01:18,310 --> 00:01:22,800
Then u will be discovered,
actually, while processing vk.

25
00:01:22,800 --> 00:01:23,400
Why is that?

26
00:01:23,400 --> 00:01:26,770
Well, because first,
we will discover and process S.

27
00:01:26,770 --> 00:01:28,590
Then we will discover and process v1.

28
00:01:28,590 --> 00:01:31,350
Then we will discover and
process v2 and so on.

29
00:01:31,350 --> 00:01:33,570
And we will go up to vk.

30
00:01:33,570 --> 00:01:37,530
And when we process vk,
u will be discovered.

31
00:01:37,530 --> 00:01:41,390
So this is a contradiction with
the assumption we made for

32
00:01:41,390 --> 00:01:44,240
the sake of contradiction that

33
00:01:44,240 --> 00:01:47,720
some reachable node is not discovered
during breadth-first search.

34
00:01:47,720 --> 00:01:50,590
So we proved that reachable
nodes are discovered.

35
00:01:50,590 --> 00:01:55,440
And of course,
they will find its estimation of distance.

36
00:01:55,440 --> 00:01:57,780
Because this is how the algorithm works.

37
00:01:57,780 --> 00:02:02,380
As soon as the node is discovered, it gets
estimation of distance, bigger by one,

38
00:02:02,380 --> 00:02:05,410
than the estimation for
the node b process.

39
00:02:05,410 --> 00:02:08,600
Now let's prove this statement
about unreachable nodes.

40
00:02:08,600 --> 00:02:09,670
Let's suppose, again, for

41
00:02:09,670 --> 00:02:14,350
the sake of contradiction that some
unreachable nodes were discovered.

42
00:02:14,350 --> 00:02:17,990
And let u be the first such
unreachable node to be discovered.

43
00:02:19,060 --> 00:02:20,600
Now let's see when it was discovered.

44
00:02:20,600 --> 00:02:23,570
It was discovered while
processing some other node v.

45
00:02:24,960 --> 00:02:29,269
And as u is the first unreachable
node that was discovered and

46
00:02:29,269 --> 00:02:35,016
v was discovered before u, because u is
discovered when v is already processed,

47
00:02:35,016 --> 00:02:37,570
it means that v is a reachable node.

48
00:02:37,570 --> 00:02:41,397
And it means that there is
a path from s to v, but

49
00:02:41,397 --> 00:02:45,829
then it means that there is
a path from s to u through v.

50
00:02:45,829 --> 00:02:50,285
So u is actually reachable, and this is
a contradiction, and so we proved that

51
00:02:50,285 --> 00:02:54,570
unreachable nodes are not discovered
during the breadth-first search.

52
00:02:54,570 --> 00:02:59,338
So it works correctly at least in
the sense that it finds some distances to

53
00:02:59,338 --> 00:03:04,589
reachable nodes and doesn't find any
finite distances to unreachable notes.

54
00:03:04,589 --> 00:03:08,770
Now we will prove the order lemma,
which states something about

55
00:03:08,770 --> 00:03:13,830
the order in which nodes are discovered
and dequeued from the queue.

56
00:03:13,830 --> 00:03:18,475
It says that by the time some
node u at distance d from

57
00:03:18,475 --> 00:03:23,680
the original node is dequeued,
it started processing.

58
00:03:23,680 --> 00:03:27,200
All the nodes at distance at most
d have already been discovered.

59
00:03:27,200 --> 00:03:31,520
So they have already been
enqueued in the queue.

60
00:03:31,520 --> 00:03:33,800
And maybe some of them have
already been processed.

61
00:03:33,800 --> 00:03:36,070
Some of them are still in the queue, but

62
00:03:36,070 --> 00:03:38,519
at least,
they have already been discovered.

63
00:03:40,120 --> 00:03:44,100
So let's prove this
again by contradiction.

64
00:03:44,100 --> 00:03:49,109
Suppose that this lemma is not true and
considered the first time

65
00:03:49,109 --> 00:03:54,302
this order was broken, so
that some node u at distance d has already

66
00:03:54,302 --> 00:03:59,239
started processing, and
that's why it is filled with black.

67
00:03:59,239 --> 00:04:02,837
And some other node v at distance d',

68
00:04:02,837 --> 00:04:07,770
which is at most d has not yet
been discovered.

69
00:04:07,770 --> 00:04:09,630
Let's suppose that.

70
00:04:09,630 --> 00:04:14,433
So we know that d' is at most d,
and we know that node u

71
00:04:14,433 --> 00:04:19,480
was discovered while
processing some other node u'.

72
00:04:21,120 --> 00:04:27,110
And we know that the distance
to this node u' is at least d-1,

73
00:04:27,110 --> 00:04:30,440
because if the distance
to u' was less than d-1,

74
00:04:30,440 --> 00:04:35,947
then the distance to u would be less than
d because there's an edge from u' to u.

75
00:04:37,550 --> 00:04:42,342
Also, we know that the node
v has an edge from

76
00:04:42,342 --> 00:04:47,135
some node v' with distance d'-1 from s,

77
00:04:47,135 --> 00:04:52,340
because there is some
shortest path from s to v.

78
00:04:53,370 --> 00:04:59,020
And there is the previous node before
v on this path, and this is v'.

79
00:04:59,020 --> 00:05:03,360
And distance to v' is exactly d'-1,
because this is a shortest path.

80
00:05:03,360 --> 00:05:07,160
So, it can be less than
d'-1 because otherwise,

81
00:05:07,160 --> 00:05:08,920
distance to v will be less than d'.

82
00:05:08,920 --> 00:05:13,030
And it cannot be bigger
than d'-1 because then

83
00:05:13,030 --> 00:05:16,470
the shortest path to v
would be longer than d'.

84
00:05:17,810 --> 00:05:21,980
So, distance from s to d' is exactly d'-1.

85
00:05:21,980 --> 00:05:25,280
And we know that the prime is at most d,
and from that,

86
00:05:25,280 --> 00:05:30,400
we know that d'-1 is at most d-1.

87
00:05:30,400 --> 00:05:36,986
And it means that v' was discovered before
u' was dequeued because we know that

88
00:05:36,986 --> 00:05:42,219
the first time that order lemma
was wrong was with nodes u and v.

89
00:05:42,219 --> 00:05:45,720
And now u' and v' were before that.

90
00:05:45,720 --> 00:05:49,310
So that point of time
order lemma still works.

91
00:05:49,310 --> 00:05:53,670
So we know that v' was discovered
before u' was dequeued.

92
00:05:53,670 --> 00:05:59,339
So it means that v' was gray
before u' became black.

93
00:05:59,339 --> 00:06:05,013
[COUGH] And this means that also,
v' became gray before u became gray,

94
00:06:05,013 --> 00:06:09,252
because u became gray while processing u'.

95
00:06:09,252 --> 00:06:12,870
So v' was enqueued and

96
00:06:12,870 --> 00:06:18,390
filled with gray before u was enqueued,
discovered, and filled with gray.

97
00:06:18,390 --> 00:06:24,185
What that means is that because our
queue works as first in first out, and

98
00:06:24,185 --> 00:06:31,040
v' was discovered before u, it means that
v' was also started processing before u.

99
00:06:31,040 --> 00:06:36,710
So v' was dequeued and
filled with black before u was dequeued,

100
00:06:36,710 --> 00:06:40,386
and immediately after v' was dequeued,

101
00:06:40,386 --> 00:06:45,870
v would be discovered,
because there is an edge from v' to v.

102
00:06:45,870 --> 00:06:49,500
So either v was discovered
even before that, or

103
00:06:49,500 --> 00:06:52,110
it was discovered during processing v'.

104
00:06:52,110 --> 00:06:58,500
And we see that v is already discovered,
and u is not yet dequeued.

105
00:06:58,500 --> 00:07:03,450
So it is a contradiction with the fact
that when u is already black,

106
00:07:03,450 --> 00:07:05,610
v was still white and not discovered.

107
00:07:05,610 --> 00:07:09,134
So we proved our order
lemma by contradiction.