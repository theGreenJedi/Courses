1
00:00:01,800 --> 00:00:04,810
Hello everybody, welcome back
to the Graph Algorithms course.

2
00:00:04,810 --> 00:00:08,670
Today we're going to talk about algorithms
for exploring graphs, in particular,

3
00:00:08,670 --> 00:00:14,770
ways to tell us which vertices
can be reached from which others.

4
00:00:14,770 --> 00:00:17,800
So for an example of the type of
problem we're trying to solve here,

5
00:00:17,800 --> 00:00:19,930
suppose that you're playing a video game.

6
00:00:19,930 --> 00:00:24,510
And you found the exit to some level,
but you don't want to go there just yet.

7
00:00:24,510 --> 00:00:26,570
You want to first sort of
explore this whole level and

8
00:00:26,570 --> 00:00:29,911
make sure you found all the secrets inside
it, make sure you get all the loot and

9
00:00:29,911 --> 00:00:32,052
XP that there is to be found.

10
00:00:32,052 --> 00:00:35,450
And you can certainly wander around
between the various rooms and

11
00:00:35,450 --> 00:00:37,820
find a bunch passageways and so on.

12
00:00:37,820 --> 00:00:39,500
And you've been wandering around for
a while and

13
00:00:39,500 --> 00:00:41,640
maybe haven't discover anything new yet.

14
00:00:41,640 --> 00:00:46,420
But you'd like to make sure that you've
really found everything before you leave.

15
00:00:46,420 --> 00:00:47,470
How do you accomplish this?

16
00:00:47,470 --> 00:00:49,255
How do you make sure
that found everything?

17
00:00:49,255 --> 00:00:54,065
And this sort of is a notion
of exploring a graph.

18
00:00:54,065 --> 00:00:56,730
You've got theses rooms,
they're connected by passageways.

19
00:00:56,730 --> 00:01:00,580
And you want to make sure that everything,
at least everything that's reachable from

20
00:01:00,580 --> 00:01:05,780
where you started, you can actually get to
it and find, explore the entire region.

21
00:01:06,820 --> 00:01:08,232
And this actually sort of,

22
00:01:08,232 --> 00:01:12,580
this of related questions are actually
very useful in a number of applications.

23
00:01:12,580 --> 00:01:14,220
For example, if you have a map and

24
00:01:14,220 --> 00:01:18,080
you want to find a route between
some location on the map and

25
00:01:18,080 --> 00:01:22,240
some other, it often depends on this sort
of exploration of the graph, making sure

26
00:01:22,240 --> 00:01:26,780
that you can find some sequence of roads
to follow to get you where you want to go.

27
00:01:26,780 --> 00:01:29,220
This could also be used if you're
sort of building a road system and

28
00:01:29,220 --> 00:01:32,390
want to ensure that the entire
thing is connected.

29
00:01:32,390 --> 00:01:35,955
You need to have some sort of algorithm
to tell what can be reached from what.

30
00:01:35,955 --> 00:01:40,740
And finally, it has more recreational
things, the video game example, but

31
00:01:40,740 --> 00:01:42,370
also if you want to solve the maze.

32
00:01:42,370 --> 00:01:44,750
This is very much, well,

33
00:01:44,750 --> 00:01:49,240
can I get from the start to the finish
in this sort graph that connects things?

34
00:01:49,240 --> 00:01:50,600
But also various puzzles,

35
00:01:50,600 --> 00:01:54,380
if you think of sort of vertices as
sort of possible configurations.

36
00:01:54,380 --> 00:01:57,530
And then edges that describe
moves that you can make and

37
00:01:57,530 --> 00:02:01,810
want to say, can I rearrange
the puzzle to end up in this location?

38
00:02:01,810 --> 00:02:05,510
Again, this sort of exploration
algorithm becomes very important.

39
00:02:07,550 --> 00:02:12,230
So before we get into this too much,
we really want to formalize what we mean.

40
00:02:12,230 --> 00:02:15,440
In particular, we want to know what
does it mean to be reachable from

41
00:02:15,440 --> 00:02:16,150
a given vertex.

42
00:02:17,570 --> 00:02:20,222
And basically,
the idea is you start at the vertex and

43
00:02:20,222 --> 00:02:22,150
you're allowed to follow
edges of the graph.

44
00:02:22,150 --> 00:02:25,530
And you want to able to see
what you can end up at.

45
00:02:25,530 --> 00:02:26,521
And so to formalize this,

46
00:02:26,521 --> 00:02:30,910
we'd find a path in a graph G to be
a sequence of vertices v0, v1, v2,

47
00:02:32,340 --> 00:02:37,970
etc., such that each vertex is connected
to the next one by an edge of the graph.

48
00:02:37,970 --> 00:02:40,159
So we get some sequence
of edges to follow.

49
00:02:41,670 --> 00:02:45,140
So the formal description of the problem
that we would like to solve is

50
00:02:45,140 --> 00:02:50,280
given a graph G, and a vertex s in G,
we'd like to find the collection of

51
00:02:50,280 --> 00:02:54,740
all vertices v in the graph such
that there is a path from s to v,

52
00:02:54,740 --> 00:02:58,020
everything that we can reach from S.

53
00:02:58,020 --> 00:03:02,300
So, just to get a little bit of practice,
if we have the following graph,

54
00:03:02,300 --> 00:03:06,410
which vertices here are reachable from A?

55
00:03:06,410 --> 00:03:11,010
Well think about it a little bit and
you find out that A, C, D, F, H,

56
00:03:11,010 --> 00:03:12,262
and I are all reachable.

57
00:03:12,262 --> 00:03:17,830
And it's easy to see that these vertices
sort of do all connect up from edges,

58
00:03:17,830 --> 00:03:21,850
but you then can't get to B, E, G or J.

59
00:03:21,850 --> 00:03:24,620
And this is sort of because
there are no edges that connect

60
00:03:24,620 --> 00:03:28,660
any of these vertices we can reach
to any of these other vertices.

61
00:03:28,660 --> 00:03:31,780
And so there's no way to escape,
except for these six.

62
00:03:33,120 --> 00:03:36,070
And this is sort of the actual
idea behind the algorithm.

63
00:03:36,070 --> 00:03:38,980
What you want to do is you want to
make sure that you can actually find

64
00:03:38,980 --> 00:03:40,850
everything that you can reach.

65
00:03:40,850 --> 00:03:44,770
And so what you do is you sort of expand,
you find a bunch of vertices.

66
00:03:44,770 --> 00:03:46,830
These are a bunch that I can reach.

67
00:03:46,830 --> 00:03:51,190
But then if there are any edges that
connect ones that you can reach to ones

68
00:03:51,190 --> 00:03:55,070
that you can't reach so far, well, you
have to sort of explore those edges and

69
00:03:55,070 --> 00:03:57,110
find the new vertices on the other end,
and

70
00:03:57,110 --> 00:03:59,760
sort of add them to the list
that you know about.

71
00:03:59,760 --> 00:04:03,520
And you sort of keep expanding this list
of vertices that you know you can get to

72
00:04:03,520 --> 00:04:06,817
until you can't connect to
anything new and then you're done.

73
00:04:08,410 --> 00:04:10,734
So to formalize this
algorithm a little bit,

74
00:04:10,734 --> 00:04:13,188
we are going to keep
a list of DiscoveredNodes.

75
00:04:13,188 --> 00:04:18,487
And this starts out just with the vertex
axis you're supposed to start at.

76
00:04:18,487 --> 00:04:22,096
But then what you do is while there
is an edge e that leaves this set of

77
00:04:22,096 --> 00:04:26,545
DiscoveredNodes that connects to something
you have discovered to something you

78
00:04:26,545 --> 00:04:30,799
haven't discovered, then what you do is
you take the vertex at the other end of

79
00:04:30,799 --> 00:04:33,728
that edge and
add it to your list of DiscoveredNodes.

80
00:04:33,728 --> 00:04:37,150
And you just keep doing this until
there's nothing new to be found.

81
00:04:37,150 --> 00:04:39,050
And then you return this
list of DiscoveredNodes.

82
00:04:41,090 --> 00:04:45,590
Okay, that's a reasonable algorithm and
it does work.

83
00:04:45,590 --> 00:04:48,330
But in order to really code this up,
you need to do

84
00:04:48,330 --> 00:04:52,430
some work to handle the bookkeeping
that's required for this algorithm.

85
00:04:52,430 --> 00:04:55,150
You need to do things like you
need to keep track of which

86
00:04:55,150 --> 00:04:58,740
vertices you've discovered and
which edges you've dealt with,

87
00:04:58,740 --> 00:05:01,950
which edges you've actually checked and
which ones you haven't.

88
00:05:01,950 --> 00:05:05,060
You also need to know sort of which
order to explore new edges in.

89
00:05:05,060 --> 00:05:08,680
If there are several possible edges to
follow, which one do you follow next?

90
00:05:10,000 --> 00:05:14,188
And so, what we're going to do now is talk
about a specific way to implement this and

91
00:05:14,188 --> 00:05:16,480
deal with these sort of bookkeeping isues.

92
00:05:18,170 --> 00:05:20,720
The first thing that we need to do
is we need to keep track of which

93
00:05:20,720 --> 00:05:22,860
vertices we've already found.

94
00:05:22,860 --> 00:05:26,450
And for this, we're going to
associate a boolean variable to each

95
00:05:26,450 --> 00:05:30,080
vertex visited(v) which basically
tells us have we visited it yet.

96
00:05:31,990 --> 00:05:34,601
The next thing that we're going to
need to do is we need to,

97
00:05:34,601 --> 00:05:38,490
most of the vertices that we visited will
actually will have already sort of checked

98
00:05:38,490 --> 00:05:40,118
all of the edges relating to them.

99
00:05:40,118 --> 00:05:45,033
But some we haven't and we somewhere need
to keep track of the list of vertices that

100
00:05:45,033 --> 00:05:49,750
still have edges hanging off of them that
might connect this to something new.

101
00:05:49,750 --> 00:05:53,535
Now this list isn't going to
appear explicitly in our program.

102
00:05:53,535 --> 00:05:56,580
It'll actually sort of to be
hidden in the program stock so

103
00:05:56,580 --> 00:05:58,125
this is that points a little bit sudden.

104
00:05:58,125 --> 00:06:00,240
We'll sort of see it once
we introduce the algorithm.

105
00:06:02,330 --> 00:06:05,890
The final thing is we need to
discover which order to discover,

106
00:06:05,890 --> 00:06:08,150
to follow new edges in.

107
00:06:08,150 --> 00:06:11,260
And for this we are going to use what
is known as the Depth First order.

108
00:06:11,260 --> 00:06:14,313
What this means is we're just going
to start our initial vertex and

109
00:06:14,313 --> 00:06:17,610
we're just going to start
following a chain of edges.

110
00:06:17,610 --> 00:06:20,640
We're just going to follow
some really long path forward

111
00:06:20,640 --> 00:06:22,920
until one of two things happens.

112
00:06:22,920 --> 00:06:26,620
One thing is we could stumble across
a vertex that we have already seen before.

113
00:06:26,620 --> 00:06:29,126
In which case there's no reason
to have followed that edge and

114
00:06:29,126 --> 00:06:30,920
we'll just back up to
where we were before.

115
00:06:32,290 --> 00:06:35,450
The second thing that could happen
though is that we hit a dead end.

116
00:06:35,450 --> 00:06:37,020
And we actually hit a dead end and

117
00:06:37,020 --> 00:06:40,320
can't go any further forward,
then we actually back up.

118
00:06:40,320 --> 00:06:43,670
And then once we back up though, we don't
just back all the way to the beginning.

119
00:06:43,670 --> 00:06:45,590
We just back up once step and

120
00:06:45,590 --> 00:06:48,780
then try going forwards again from
that new vertex that we found.

121
00:06:50,650 --> 00:06:52,840
Okay, so that's the basic idea.

122
00:06:52,840 --> 00:06:53,830
How do we implement this?

123
00:06:53,830 --> 00:06:57,781
Well part of the beauty about this is that
we have a very simple recursive algorithm.

124
00:06:57,781 --> 00:07:01,260
So Explore(v),

125
00:07:01,260 --> 00:07:04,210
the first thing you do is you set
the visited marker of v to be true.

126
00:07:04,210 --> 00:07:06,800
We say we have visited it.

127
00:07:06,800 --> 00:07:12,620
Next, for each neighbor w of v,
for each w that's adjacent to v,

128
00:07:12,620 --> 00:07:16,740
if w has not already been visited,
we recursively explore w.

129
00:07:18,600 --> 00:07:20,990
Okay, so this is a very compact program.

130
00:07:20,990 --> 00:07:23,760
Let's sort of actually see
what it does on an example.

131
00:07:25,140 --> 00:07:29,790
Right, also I should mention that in order
for this program to execute reasonably

132
00:07:29,790 --> 00:07:33,850
efficiently, we really want an adjacency
list representation of our graph.

133
00:07:34,940 --> 00:07:36,450
That's because we have this for

134
00:07:36,450 --> 00:07:40,850
loop we want to iterate over all of
the neighbors of v in our graph.

135
00:07:40,850 --> 00:07:44,050
And for that,
if you have an adjacency list, which

136
00:07:44,050 --> 00:07:48,330
gives you a list of all the neighbors
of v, that's incredibly easy to do.

137
00:07:48,330 --> 00:07:50,840
If you don't have an adjacency
list on the other hand,

138
00:07:50,840 --> 00:07:52,700
this algorithm really
isn't that efficient.

139
00:07:53,920 --> 00:07:54,790
Okay, fine.

140
00:07:54,790 --> 00:07:57,000
So let's look at in the example.

141
00:07:57,000 --> 00:08:00,050
Here's a graph, we're going to
start by exploring that vertex.

142
00:08:01,080 --> 00:08:02,890
So we mark it as visited.

143
00:08:02,890 --> 00:08:05,300
We then check for unvisited neighbors.

144
00:08:05,300 --> 00:08:06,990
And hey, look there is one.

145
00:08:06,990 --> 00:08:09,600
So we recursively explore
that other vertex.

146
00:08:09,600 --> 00:08:11,020
We mark it as visited.

147
00:08:11,020 --> 00:08:13,030
We search for unvisited neighbors.

148
00:08:13,030 --> 00:08:14,510
And we have this one.

149
00:08:14,510 --> 00:08:19,250
So remember now we're sort of three
layers into the program stack here.

150
00:08:19,250 --> 00:08:22,660
This is sort of a sub
routine of a sub routine.

151
00:08:22,660 --> 00:08:26,388
But now when we're exploring this
vertex it has no unvisited neighbors.

152
00:08:26,388 --> 00:08:28,347
So after we've done
a little bit of checking,

153
00:08:28,347 --> 00:08:32,160
we decide that we're done exploring
this guy and we pop the stack.

154
00:08:32,160 --> 00:08:34,380
This other guy still we
visited both of his neighbors,

155
00:08:34,380 --> 00:08:38,480
we pock the stock back to
the original explorer call.

156
00:08:38,480 --> 00:08:41,600
Now this vortex does have some
unvisited neighbors left,

157
00:08:41,600 --> 00:08:44,950
so let's visit one of them and
explore that.

158
00:08:44,950 --> 00:08:48,510
Mark it as visited,
find an unexplored neighbor, explore that.

159
00:08:48,510 --> 00:08:53,050
Mark as visited, unexplored neighbor,
mark it as visited, unexplored neighbor.

160
00:08:53,050 --> 00:08:56,660
Now when we explore this vertex though,
once again we're stuck.

161
00:08:56,660 --> 00:09:01,320
So we wrap up exploring that guy, pop
a level up the stack, go back to exploring

162
00:09:01,320 --> 00:09:05,770
this other vertex, who now actually
does have another unvisited neighbor.

163
00:09:05,770 --> 00:09:08,970
So we're going to go visit that one.

164
00:09:08,970 --> 00:09:11,010
Now we've actually visited
everything in the graph.

165
00:09:11,010 --> 00:09:13,680
So all we're going to
do is at each vertex,

166
00:09:13,680 --> 00:09:16,180
we're going to note that all of
their neighbors have been visited.

167
00:09:16,180 --> 00:09:21,280
We're going to pop up the stack and
get back to where we started and conclude.

168
00:09:21,280 --> 00:09:24,660
So here we actually have
found all these vertices.

169
00:09:24,660 --> 00:09:26,050
And in fact if you look at it,

170
00:09:26,050 --> 00:09:29,230
we've actually figured out
how to reach them all.

171
00:09:29,230 --> 00:09:33,050
If you look at sort of these darker edges
which are the ones our algorithm sort

172
00:09:33,050 --> 00:09:34,710
of actually followed when you ran it,

173
00:09:36,100 --> 00:09:39,490
these sort of connect up
to all the other vertices.

174
00:09:39,490 --> 00:09:42,210
And they actually tell us if
you sort of follow these edges,

175
00:09:42,210 --> 00:09:45,700
they give you a unique path to any
other vertex that we can reach.

176
00:09:48,180 --> 00:09:49,760
Okay, so that's our algorithm.

177
00:09:49,760 --> 00:09:51,840
Let's talk about correctness.

178
00:09:51,840 --> 00:09:56,780
And the theorem is that if all the
vertices in our graph start as unvisited,

179
00:09:56,780 --> 00:10:00,480
when we run Explore(v) it
marks as visited exactly

180
00:10:00,480 --> 00:10:02,060
the vertices that are reachable from v.

181
00:10:02,060 --> 00:10:06,035
And the proof here isn't so bad.

182
00:10:06,035 --> 00:10:09,715
The first thing to note is that
we only ever explore things that

183
00:10:09,715 --> 00:10:10,575
are reachable from v.

184
00:10:10,575 --> 00:10:16,485
And that's because, well, the way our
recursive calls work are we either

185
00:10:16,485 --> 00:10:23,190
start at v, or we explore a neighbor of
a vertex that we've already explored.

186
00:10:23,190 --> 00:10:25,970
So any vertex that we end up
exploring has to be a neighbor of

187
00:10:25,970 --> 00:10:28,570
a neighbor of a neighbor of a neighbor of
a neighbor of a neighbor of the original

188
00:10:28,570 --> 00:10:29,850
vertex or something.

189
00:10:29,850 --> 00:10:34,250
But that does basically give us a path and
say that wherever we got to was reachable.

190
00:10:35,920 --> 00:10:39,400
The next thing to note is that a w,
vertex w,

191
00:10:39,400 --> 00:10:43,500
is not marked as visited unless
it has already been explored,

192
00:10:43,500 --> 00:10:47,040
which is just the only way we mark things
as visited is when we explore them.

193
00:10:48,060 --> 00:10:51,637
But finally,
we should note that if w gets explored,

194
00:10:51,637 --> 00:10:54,668
well, we then look at
all the neighbors of w.

195
00:10:54,668 --> 00:10:58,527
And either those neighbors have
already been visited, in which case

196
00:10:58,527 --> 00:11:02,799
it means they've been explored at some
point, or we end up exploring them.

197
00:11:04,060 --> 00:11:08,620
So in other words, if w gets explored,
all of its neighbors also get explored.

198
00:11:10,220 --> 00:11:15,650
So to finish things, suppose that we have
some vertex u that is reachable from v.

199
00:11:15,650 --> 00:11:19,010
That means that we've got
a path from v going up to u.

200
00:11:19,010 --> 00:11:23,140
And if we actually explored everything
along this path we'd be done.

201
00:11:23,140 --> 00:11:24,890
We would have explored u at some point.

202
00:11:26,090 --> 00:11:27,860
So let's assume that we don't.

203
00:11:27,860 --> 00:11:31,990
Assume that w's actually the furthest
thing along this path that we've explored.

204
00:11:33,450 --> 00:11:35,880
However, by what we had
on the previous slide,

205
00:11:35,880 --> 00:11:39,200
if you explore a vertex you also
explore all of its neighbors.

206
00:11:39,200 --> 00:11:43,950
So the next vertex z along this
path must also be explored.

207
00:11:43,950 --> 00:11:45,050
And so this is a contradiction.

208
00:11:45,050 --> 00:11:48,212
This says the only way this can work
is if we actually explored every

209
00:11:48,212 --> 00:11:49,810
vertex along the path.

210
00:11:49,810 --> 00:11:52,940
But that means we've explored u,
which is good.

211
00:11:55,470 --> 00:11:59,630
Okay, so this explore algorithm is
actually really great if we just want

212
00:11:59,630 --> 00:12:01,760
to find the vertices that
are reachable from a given one.

213
00:12:02,780 --> 00:12:04,800
But sometimes you want
to do a little bit more.

214
00:12:04,800 --> 00:12:07,360
You actually want to find all
the vertices of the graph G,

215
00:12:07,360 --> 00:12:09,560
not just those coming from a given one.

216
00:12:10,750 --> 00:12:13,830
So for this, we're going to use a slightly
more complicated algorithm called depth

217
00:12:13,830 --> 00:12:14,520
first search.

218
00:12:15,690 --> 00:12:19,540
And for this what we do is the following,
first we mark everything as unvisited.

219
00:12:20,540 --> 00:12:22,960
Then for each vertex in the graph,

220
00:12:22,960 --> 00:12:26,150
if it has not yet been visited,
we explore that vertex.

221
00:12:27,530 --> 00:12:31,680
So to look at an example on this graph,
we find an unvisited vertex,

222
00:12:31,680 --> 00:12:34,190
say that one, and we explore it.

223
00:12:34,190 --> 00:12:38,360
So we find a neighbor and another neighbor
and then we pop back up the stack.

224
00:12:38,360 --> 00:12:42,550
And then we find something adjacent
to our original vertex and come back.

225
00:12:42,550 --> 00:12:44,640
And now we're done exploring
that first vertex.

226
00:12:45,970 --> 00:12:50,100
So now we look for a new vertex we've
never visited before, like say that one.

227
00:12:50,100 --> 00:12:54,050
We explore its neighbor, come back,
we're done exploring that guy.

228
00:12:54,050 --> 00:12:56,760
We find a new vertex that we
haven't visited, that one.

229
00:12:56,760 --> 00:13:00,160
We explore its neighbor and
his neighbor and then come back.

230
00:13:00,160 --> 00:13:03,220
And now that we've actually
visited all the vertices,

231
00:13:03,220 --> 00:13:05,650
only now do we sort of wrap up and
conclude our algorithm.

232
00:13:07,900 --> 00:13:12,200
So to analyze the run-time of this
algorithm, we have to note a few things.

233
00:13:13,580 --> 00:13:18,680
Firstly, whenever we explore a vertex,
we immediately mark it as being visited.

234
00:13:18,680 --> 00:13:19,810
That's the first thing that we do.

235
00:13:21,390 --> 00:13:24,280
The next thing to note is that no vertex

236
00:13:24,280 --> 00:13:26,480
ever gets explored if it's
already been visited.

237
00:13:26,480 --> 00:13:31,710
And in fact if you look at every time we
make an explore as even a recursive call,

238
00:13:31,710 --> 00:13:36,920
then we always first check if it has
not been visited, then we explore it.

239
00:13:36,920 --> 00:13:40,460
And this means that no vertex
gets explored more than once.

240
00:13:40,460 --> 00:13:44,360
In fact, this means that each vertex gets
explored exactly once because the outer

241
00:13:44,360 --> 00:13:49,229
loop in the DFS explores every vertex
if it hasn't already been visited.

242
00:13:50,580 --> 00:13:54,010
But each vertex in our graph
gets explored exactly once.

243
00:13:55,980 --> 00:13:58,220
But for each vertex, when we explore it,

244
00:13:58,220 --> 00:14:01,620
there's this inner loop where we have
to check all neighbors of that vertex.

245
00:14:02,890 --> 00:14:07,020
And so we have to do work for
each neighbor of each vertex.

246
00:14:08,470 --> 00:14:11,150
And so we have to be more proportional
to the total number of neighbors

247
00:14:11,150 --> 00:14:12,810
over all vertices.

248
00:14:12,810 --> 00:14:16,810
And that's proportional to the number of
edges because each edge connecting A and

249
00:14:16,810 --> 00:14:20,310
B says that A is a neighbor of B and
that B is a neighbor of A.

250
00:14:20,310 --> 00:14:22,520
So it contributes to two neighbors.

251
00:14:22,520 --> 00:14:25,450
But the total amount of work is
still O of the number of edges.

252
00:14:26,890 --> 00:14:32,050
So total work we do, O of one work per
vertex and O of one work per edge and

253
00:14:32,050 --> 00:14:36,740
the total run time is O of size of V plus
size of E, a nice linear time algorithm.

254
00:14:38,470 --> 00:14:40,958
So that is depth first search.

255
00:14:40,958 --> 00:14:44,376
Next time we're going to talk a little bit
more about reachability and graphs and

256
00:14:44,376 --> 00:14:46,980
give some more applications
of this algorithm.

257
00:14:46,980 --> 00:14:48,350
So, I'll see you then.